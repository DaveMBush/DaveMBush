{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"forms authentication\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/determine-the-role-of-a-user-in-asp-net/",
            "url": "http://davembush.github.com/determine-the-role-of-a-user-in-asp-net/",
            "title": "Determine The Role of a User in ASP.NET",
            "date_published": "2009-10-13T10:46:21.000Z",
            "content_html": "<p><img src=\"/uploads/2009/10/winter016.jpg\" alt=\"winter-016\" title=\"winter-016\"></p>\n<p>There are several controls that allow you to display content based on the role a user is in, including:</p>\n<ul>\n<li>LoginView</li>\n<li>LoginStatus</li>\n</ul>\n<p>And the web.config file allows us to control which pages can be viewed based on which role a user is in.</p>\n<p>But what if you need to determine the role a user is in using the APIs? How do you do that?</p>\n<span id=\"more\"></span>\n\n<p>It turns out that the API for this is really rather straightforward.</p>\n<p>If you are in an ASPX or ASCX file, you can use</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(User.IsInRole(<span class=\"string\">&quot;roleNameHere&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you are in other code where the User property is not available, you’ll need to use the HttpContext class like we’ve used previously this week to get access to the current context.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(HttpContext.Current.User.IsInRole(<span class=\"string\">&quot;roleName&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "asp.net",
                "authentication",
                "isinrole",
                "roles",
                "user"
            ]
        },
        {
            "id": "http://davembush.github.com/forms-authentication-%E2%80%93-manual-authentication/",
            "url": "http://davembush.github.com/forms-authentication-%E2%80%93-manual-authentication/",
            "title": "Forms Authentication – Manual Authentication",
            "date_published": "2009-10-05T11:45:05.000Z",
            "content_html": "<p><img src=\"/uploads/2009/10/F03I0043.jpg\" alt=\"F03I0043\" title=\"F03I0043\"></p>\n<p>I’ve had several occasions in the past where I’ve needed to do my own authentication or I’ve needed to add some additional methods to the authentication process.</p>\n<p>As easy as Microsoft has made the authentication process, you might think that in order to manually authenticate you’d need to write all of your authentication code manually.  But nothing could be farther from the truth.</p>\n<span id=\"more\"></span>\n\n<p>In fact, most of the time all you need to do is trap an event handler in the existing login control.</p>\n<p>A couple of years ago, I was asked to create a login page that used a web service to authenticate the user.  I also needed to add another form field to the login screen, so it became obvious that to do this I’d need to turn the login control into a templated control.</p>\n<p>Once this was done it was a simple matter to trap the click event of the login button, authenticate against the web service, and then set the authentication cookie for ASP.NET.</p>\n<p>Since I can’t show you how to authenticate against the service–your implementation will almost certainly be different–we will skip that section.  But to set the cookie, all we need to do is to revert to the ASP.NET 1.1 way of setting up the login.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Request.QueryString[<span class=\"string\">&quot;ReturnUrl&quot;</span>] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FormsAuthentication.RedirectFromLoginPage</span><br><span class=\"line\">        (m_tbUsername.Text, persistentCookie);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FormsAuthentication.SetAuthCookie</span><br><span class=\"line\">        (m_tbUsername.Text, persistentCookie);</span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The first line checks to see if there was a Return URL specified.  If there was we can use the RedirectFromLoginPage API.  Otherwise, we need to set the Authentication Cookie manually and redirect on our  own.</p>\n<p>The persistentCookie parameter is true if we want the user to always be logged in.  Otherwise, the login is for the session.</p>\n",
            "tags": [
                "authentication",
                "formsauthentication",
                "manual",
                "redirectfromloginpage",
                "setauthcookie"
            ]
        },
        {
            "id": "http://davembush.github.com/setting-up-your-forms-based-authentication-database/",
            "url": "http://davembush.github.com/setting-up-your-forms-based-authentication-database/",
            "title": "Setting Up Your Forms Based Authentication Database",
            "date_published": "2009-09-14T09:41:24.000Z",
            "content_html": "<p><img src=\"/uploads/2009/09/B01I0003.jpg\" alt=\"B01I0003\" title=\"B01I0003\"></p>\n<p>I was recently asked if I would cover some topics related to Forms Based Authentication.  The person who requested this information has some specific issues that he wants covered that I won’t be covering for a while because I think there are some other issues that need to be covered first.</p>\n<p>One of those is setting up the database.</p>\n<span id=\"more\"></span>\n\n<p>When I owned my hosting companies, I saw more confusion in this area than just about any other topic that came up.</p>\n<p>So here’s the step-by-step process you need to go through to set up your database for Forms Based Authentication.</p>\n<p>In your hosting company’s control panel, create the SQL database.  You’ll want to create a database with a size of at least 10 meg with 5 meg allocated to the log file and 5 meg allocated to the database.  You’ll also want to make sure the user you attach to the database has DBO rights.  You may need to contact support to enable this.</p>\n<p>Next, you’ll want to run aspnet_regsql.exe which you can find under c:\\windows\\Microsoft.NET\\Framework\\v2.0.50727.  This will provide you a wizard interface and will ultimately create the appropriate tables for you. The wizard is self explanatory, so I won’t repeat it here except to say that you’ll want to enter your connection information to connect to the server you just created your database on, not one of your databases locally.</p>\n<p>Next you’ll need to add the connection information to your web.config file for the application you are setting up Forms Based Authentication for.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">connectionStrings</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LocalSqlServer&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LocalSqlServer&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">connectionString</span>=<span class=\"string\">&quot;Data Source=sqlserverGoesHere;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    Initial Catalog=YourDatabaseName;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    Persist Security Info=True;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    User ID=YourSqlUserID;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    password=YourSqlPassword&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">providerName</span>=<span class=\"string\">&quot;System.Data.SqlClient&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The “remove” element is needed because typically the machine.config file on the server has its own entry that you won’t be using.</p>\n<p>Unfortunately, you’ll need to create your own UI for adding users and assigning them to roles.  It isn’t that hard to do and once you’ve done it you can move the administration controls from project to project.  If I were you, I’d create the control set once in a special sub-directory so that I could move it from project to project.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "aspnet_regsql",
                "forms based authentication"
            ]
        }
    ]
}