{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"javascript\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/thinking-in-javascript/",
            "url": "http://davembush.github.com/thinking-in-javascript/",
            "title": "Thinking in JavaScript",
            "date_published": "2017-09-05T10:30:54.000Z",
            "content_html": "<p>Over the last week I’ve gradually come to the realization that the fundamental reason why most people have trouble with JavaScript is because it doesn’t fit their mental model of how programming should be done.  This isn’t to say that most programmers don’t manage to achieve their end goal.  But if you sit back and take an objective look at the code we end up writing, you have to admit, the code ends up being quite ugly. </p>\n<p>Now, this isn’t a dig at the way we’ve been doing things.  We’ve all been doing the best we can with what we have.  But, the JavaScript world has progressed and there is a better mental model that has developed and should even be expanded which will allow us to develop more complex and feature rich applications now and well into the future. <figure><img src=\"/uploads/2017/09/2017-09-05.jpg\" title=\"Thinking in JavaScript\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/froderik/8283727226/\">freddie boy</a> via <a href=\"//visualhunt.com/re/fb4c57\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Where-We’ve-Been\"><a href=\"#Where-We’ve-Been\" class=\"headerlink\" title=\"Where We’ve Been\"></a>Where We’ve Been</h2><p>I’ve been saying for years that the thing that holds most programmers back is that they always want to treat whatever new thing they are using like the last thing they were using.  And nowhere has this displayed itself more apparently than with JavaScript. </p>\n<p>Take the most obvious of examples.  Everyone knows, or should know by now, that JavaScript is not really object-oriented.  And yet, we’ve been trying to force JavaScript to BE object-oriented pretty much from the beginning.  This hasn’t been such a big problem, although one could argue that by trying to make JavaScript object-oriented, we’ve prevented it from being able to do some of the things it does best. </p>\n<p>Where we really run into trouble is with the event based, and often asynchronous nature of JavaScript. Think about this.  For years, we’ve been trying to synchronize something that is inherently asynchronous.  And this is where the real trouble begins. </p>\n<p>First, we had call back. Then promises. Now Observables. Soon async and await. And while callbacks are how the asynchronous nature of JavaScript is handle under the hood, the others are attempts to tame the asynchronous beast.  Especially async and await.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Now, this is where we are. Constantly trying to make JavaScript be something it isn’t. But, why is this? </p>\n<p>I believe it is because we are trying to impose models onto JavaScript that were useful in our desktop and server-side applications.  MVC, MVVM, Object-Oriented, and others all grew up in a world that was both synchronous, multi-threaded, and lent themselves well to an object-oriented model.  As various frameworks have evolved, the attempt has been to take these familiar models and apply them to an asynchronous, single threaded and not really object-oriented.  From where I sit, I am amazed any of this worked at all.  It seems to me it should have failed long ago.</p>\n<h2 id=\"A-Light-in-The-Darkness\"><a href=\"#A-Light-in-The-Darkness\" class=\"headerlink\" title=\"A Light in The Darkness\"></a>A Light in The Darkness</h2><p>Hey, I’ve been stuck in the old school model too.  But, I’m starting to think there may be a better way.  I’ve written about Redux and NgRX a lot on this blog.  I’ve fielded a lot of questions on the Angular slack channel.  Most of the questions revolve around the basic question of handling multiple asynchronous calls for data as part of one action.  All of the questions presuppose you would need to make each of the calls for data and then use some method of waiting for everything to return and assemble the data before moving on.  In each case, I recommend an alternative.  What if, each call was a unique action.  When each returns, another action is fired that places the return data in the appropriate store, or sub store.  In this model, we don’t care when the data comes back.  When it comes back, we deal with it appropriately.</p>\n<h2 id=\"An-Example\"><a href=\"#An-Example\" class=\"headerlink\" title=\"An Example\"></a>An Example</h2><p>Let’s go with one of the more common examples I see. </p>\n<p>I need to make a request for a set of records.  Once I have the results, for each record in the result, I need to go get a set of child records.  Here is how I would deal with this at a very high level using NgRX.  I’m sure this would work for multiple Redux patterns but they may call things by different names.</p>\n<ul>\n<li>Fire an Action that request the main set of records.</li>\n<li>The appropriate Effect responds to the action by making an AJAX call for the data.</li>\n<li>When the AJAX call returns,<ul>\n<li>fire an Action that puts the main records in the store.</li>\n<li>for each record in the result fire an Action asking for the child record(s).</li>\n</ul>\n</li>\n<li>The appropriate Effect(s) responds to the request for child records by making AJAX calls.</li>\n<li>When the data returns fire an Action that places the data in the store.</li>\n</ul>\n<p>Since your view is listening for changes on the entities in your store, it will update as the data comes in. Even better if you setup a debounce on your listener, the screen will update only when all of the data has been retrieved.</p>\n<h2 id=\"The-Key-Concept\"><a href=\"#The-Key-Concept\" class=\"headerlink\" title=\"The Key Concept\"></a>The Key Concept</h2><p>The key concept here is that we no longer care WHEN something happens.  We only care THAT it happens.  And rather than trying to setup forkJoins() or some other mechanism to flatten this all out, our code ends up being quite simple.  Discrete bits of functionality.  And now, all our asynchronous code becomes Reactive code.  We no longer need to flatten anything out.</p>\n<h2 id=\"Server-Side\"><a href=\"#Server-Side\" class=\"headerlink\" title=\"Server Side\"></a>Server Side</h2><p>Sadly, on the server side, things aren’t quite so easy.  At best we are tied to an implementation Observables and the various methods of combining Observables.  But I could also see some kind of client&#x2F;server implementation that used a framework like SignalR or Socket.io so that as the various Observables complete, the data on the client would get updated.  An interesting way to make all of the AJAXy calls rather transparent to the user.</p>\n<h2 id=\"Taking-it-To-the-Next-Level\"><a href=\"#Taking-it-To-the-Next-Level\" class=\"headerlink\" title=\"Taking it To the Next Level\"></a>Taking it To the Next Level</h2><p>You may call me a dreamer, but what if we made a JavaScript framework that was all message driven and reactive like I’ve described above?  We’ve done it before. </p>\n<p>When Windows was first created in ran on single core CPUs.  It was essentially single threaded.  The way it worked was primarily by putting “events” on a que and then sending the events to the appropriate application that needed to know about them. </p>\n<p>If you applied this model to JavaScript and folded in what I’ve described above, you could easily have a system that appeared to be multi-threaded even though it was single threaded at its core.</p>\n<h2 id=\"Don’t-Throw-the-Baby-Out-…\"><a href=\"#Don’t-Throw-the-Baby-Out-…\" class=\"headerlink\" title=\"Don’t Throw the Baby Out …\"></a>Don’t Throw the Baby Out …</h2><p>Now, you may think I’m endorsing throwing out object-oriented JavaScript.  Actually, I think most of the View stuff we do lends itself well to object-oriented programming.  But, most of our business rules lend themselves better to the model I’ve described above.  Functional and Reactive.</p>\n",
            "tags": [
                "javascript",
                "mvvm",
                "redux",
                "MVC",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "url": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "title": "3 JavaScript Fallacies You Might Believe",
            "date_published": "2017-03-14T11:30:00.000Z",
            "content_html": "<p>You know, you think the whole world knows something is true until you hear someone people respect say something really dumb.  The three JavaScript fallacies I have here are actual statements I’ve heard over the last week during a discussion about Angular2 and Rect.  What makes these fallacies particularly interesting is that they sound plausible.  In fact, there are time when they are even true.  But in the larger context of a JavaScript application they are nearly always false.</p>\n<p>So, here are 3 JavaScript Fallacies you may still believe that you may want to reevaluate.</p>\n<figure>![](/uploads/2017/03/image-2.png \"3 JavaScript Fallacies You Might Believe\")<figcaption>Photo credit: [bark](//www.flickr.com/photos/barkbud/4341791754/) via [VisualHunt](//visualhunt.com/re/8dc251) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\"><a href=\"#Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\" class=\"headerlink\" title=\"Direct Access to the DOM is Faster than using a Virtual DOM\"></a>Direct Access to the DOM is Faster than using a Virtual DOM</h2><p>OK. I will grant that if you only ever want to change one thing on the screen at a time, yes accessing the DOM directly from JavaScript is probably going to be faster than going through some kind of Virtual DOM layer as is common in React, Angular2 and several other libraries and frameworks that are available today.</p>\n<p>But, the fact is, that’s not how most code works. If you are writing this kind of application and you are using a library or framework that uses a virtual DOM layer, something is wrong. I would argue you’ve probably chosen the wrong library for what you are trying to do.</p>\n<p>But, let’s assume that you are writing a typical SPA application that doesn’t just update one area of the screen. In this case, the fastest way to make this update is all at once. One call to the DOM from JavaScript. I’ve written before about how <a href=\"/javascript-performance-tweaks/\">slow accessing the DOM is</a>. And for all the performance enhancements since I wrote that article, accessing the DOM is still one of the slowest things you can do. So, a framework that lets you write your code in a way similar to how you would write to the DOM directly, but lets you do this in a way that doesn’t actually write to the DOM until the last minute is FASTER than writing to the DOM directly.</p>\n<h2 id=\"Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\"><a href=\"#Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\" class=\"headerlink\" title=\"Immutable Objects are Necessarily Slower than Mutable Objects\"></a>Immutable Objects are Necessarily Slower than Mutable Objects</h2><p>Functional JavaScript programming has become the latest cool new buzzword in the JavaScript community, for a lot of good reasons, but one main concept that comes along for the ride is the idea of making all of our object immutable. This means, for example, that if I want to modify an array, instead of changing the current array, I would create a new array and copy the elements and the new element into it. No more push.</p>\n<p>Similarly, for a regular object that isn’t a list, we would create a new object and copy the existing elements into it and then overwrite the items that have changed.</p>\n<h3 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h3><p>Now, why would we want to go to all of this work? It does seem like it would be faster to just modify the existing object. Right?</p>\n<p>But you see, there is this little thing called “change detection” that more than makes up for all of this overhead I just described.</p>\n<p>In most of our applications, at some point we want to know if an object has changed, right? If we can’t rely on the fact that we have a new object, we have to do a deep comparison of the two objects until we’ve determined that there is a difference, or we’ve been through the whole list and verified that the nothing has changed.</p>\n<p>Once we can rely on objects being immutable, we can use the equals operator (&#x3D;&#x3D;, or &#x3D;&#x3D;&#x3D;) to see if the object has changed. I’m sure you can see that this takes much less time than evaluating an entire object tree, even if you object only has two properties in it that need to be compared.</p>\n<h3 id=\"Real-Problem\"><a href=\"#Real-Problem\" class=\"headerlink\" title=\"Real Problem?\"></a>Real Problem?</h3><p>But let’s step back and look at the bigger picture. In most of the code that I write, what we are really talking about is immutable arrays. Yes there are other non-array places where we would use immutable objects, but my guess is that immutable objects impacts 80% of my code. Get a list of records from the database for example.</p>\n<p>The fact of the matter is, every time I access the database, I get a new array back anyhow. Even in the case of retrieving a single record, I still get a new object back.</p>\n<p>If I need to delete an element from an array, here again, I’ll end up creating a new object.</p>\n<p>In fact, except modifying a row, or adding a record to the end of a list, just about everything I tend to do with an array ends up being an immutable operation anyhow. By making everything immutable, we are forcing the areas that we aren’t already implementing immutability to be immutable. The point is, in terms of performance the net is an obvious gain both in terms of performance and in terms of consistency.</p>\n<p>And, going back to the issue of rendering our data into the DOM, because the change detection is faster, we can determine that a particular component doesn’t need to have the DOM updated quicker rather than re-rendering the entire DOM.</p>\n<h2 id=\"Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\"><a href=\"#Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\" class=\"headerlink\" title=\"Backwards Compatibility means I can’t upgrade my Development Environment\"></a>Backwards Compatibility means I can’t upgrade my Development Environment</h2><p>Continuing on, remember the conversation I’m referencing was about React and Angular2. And the guy who was making these statements about performance was asserting that he couldn’t upgrade his React environment to use the latest and greatest tool chain because he had to support older browsers. He specifically stated IE6. Now, knowing the site he’s talking about, I doubt we make any money at all from people who run IE6. But, let’s just assume for a second that we do.</p>\n<h3 id=\"So-what-you’re-telling-me-is…\"><a href=\"#So-what-you’re-telling-me-is…\" class=\"headerlink\" title=\"So, what you’re telling me is…\"></a>So, what you’re telling me is…</h3><p>… that you are willing to let performance suffer for 99% of your very large customer based because you need to support the 1% (I’m being generous here) of the people who have refused to upgrade and probably aren’t producing any revenue for the company? Maybe I’m missing something, but this seems rather short-sighted. That, or maybe you just don’t know that the new features in the newer browsers allow you to not just write better JavaScript but also allow you to do things without JavaScript that perform better. If you are really interested in writing fast web sites, you should be moving to the latest and greatest tool chain as often as is humanly possible.</p>\n<h3 id=\"Bugs-and-Security-Risk\"><a href=\"#Bugs-and-Security-Risk\" class=\"headerlink\" title=\"Bugs and Security Risk\"></a>Bugs and Security Risk</h3><p>Just this last week I saw a study that said that over a third of the web sites on the Internet were running code that left them venerable to security risk. That is, the code they were running had known security risk. By not upgrading your tools for public facing sites, you are leaving your company at risk. When your site is compromised, do you want to be the one who has to explain to your boss that it is because you refused to upgrade your tools? I sure don’t.</p>\n<h3 id=\"But-what-about-the-old-browsers\"><a href=\"#But-what-about-the-old-browsers\" class=\"headerlink\" title=\"But what about the old browsers?\"></a>But what about the old browsers?</h3><p>Well, if you really need to support the old stuff, there are polyfills that you can apply that will let you run the newer stuff in the older browsers. Seems to me you get the best of both worlds. Your customers who are up to date benefit with a better performing, and less buggy website, and the customers using older browser still get to see something. Are there places where you might still have to make some compromises. Sure. There are a few places. But not enough that you shouldn’t upgrade.</p>\n<h2 id=\"What-is-the-Bigger-Problem\"><a href=\"#What-is-the-Bigger-Problem\" class=\"headerlink\" title=\"What is the Bigger Problem?\"></a>What is the Bigger Problem?</h2><p>So, how can this happen? How can really smart people make really bad choices like this?</p>\n<p>I don’t really know, but I have a few theories.</p>\n<p>One is just plain arrogance. Being so sure you are right that you never stop to think you might be wrong.</p>\n<p>I have to admit, when I first learned about immutability, I thought it sounded slow too. But, my thinking went along the lines of, “well, much smarter people than me are working on this, they must think it makes sense. I wonder why?” And then I started digging for answers.</p>\n<p>So, I would encourage those who are responsible for making decisions to make sure that the people they are listening to can actually back up what they are saying and not just assume they are right because they seem so confident.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "performance",
                "react.js"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "url": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "title": "JavaScript Fatigue Makes Me Scream",
            "date_published": "2017-02-21T12:30:00.000Z",
            "content_html": "<p>Maybe JavaScript Fatigue makes you scream too. Are you annoyed with the constantly changing JavaScript environment? Do you wish things could just settle down for a bit? Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow? Welcome to JavaScript Fatigue. But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. <img src=\"/uploads/2017/02/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"What-is-JavaScript-Fatigue\"><a href=\"#What-is-JavaScript-Fatigue\" class=\"headerlink\" title=\"What is JavaScript Fatigue\"></a>What is JavaScript Fatigue</h2><p>JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies.  It is in essence, more about decision overload than it is about JavaScript specifically. Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.” Here are a sample of decisions that need to be made:</p>\n<ul>\n<li>Should you use a JavaScript framework, or just write native JavaScript?</li>\n<li>If you decide to use a framework, which one should you use?</li>\n<li>What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?</li>\n<li>Should you bother lazy loading?</li>\n<li>Will you use MVVM, MVC, Redux or something else as a basic architecture?</li>\n<li>How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?</li>\n<li>What directory structure will you use?</li>\n<li>What component libraries will you use?</li>\n<li>How will you style your application?  Raw CSS? Bootstrap? Material Design?</li>\n<li>What development environment will you use?</li>\n<li>Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.</li>\n</ul>\n<p>I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.</p>\n<h2 id=\"Why-JavaScript-Fatigue-Is-Considered-a-Problem\"><a href=\"#Why-JavaScript-Fatigue-Is-Considered-a-Problem\" class=\"headerlink\" title=\"Why JavaScript Fatigue Is Considered a Problem\"></a>Why JavaScript Fatigue Is Considered a Problem</h2><p>If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming. For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate. But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression. It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.” And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed.  So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it. Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.” Hey, OK. Don’t complain to me when you can’t get a job though.</p>\n<h2 id=\"How-to-Fix-JavaScript-Fatigue\"><a href=\"#How-to-Fix-JavaScript-Fatigue\" class=\"headerlink\" title=\"How to Fix JavaScript Fatigue\"></a>How to Fix JavaScript Fatigue</h2><p>I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger. But, suppose there was a different way of looking a all of this JavaScript Fatigue stuff? Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn. I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them. Even today. How many languages are there? How many do you know? The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in.  Does what you’ve seen so far make sense? Go further. Recently, YARN has become the “hot new thing.”  I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further. I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective.  Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large. Don’t worry, be happy!</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "url": "http://davembush.github.com/javascript-fatigue-makes-me-scream/",
            "title": "JavaScript Fatigue Makes Me Scream",
            "date_published": "2017-02-21T12:30:00.000Z",
            "content_html": "<p>Maybe JavaScript Fatigue makes you scream too.</p>\n<p>Are you annoyed with the constantly changing JavaScript environment?  Do you wish things could just settle down for a bit?  Have you decided that you won’t learn anything new because there will just be something new to learn tomorrow?</p>\n<p>Welcome to JavaScript Fatigue.</p>\n<p>But frankly, unlike many people who talk about JavaScript Fatigue, I see JavaScript Fatigue and the much broader subject of language fatigue as a symptom of a much larger problem that has less to do with JavaScript and more to do with human psychology and the state of the programming community at large. <img src=\"/uploads/2017/02/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"What-is-JavaScript-Fatigue\"><a href=\"#What-is-JavaScript-Fatigue\" class=\"headerlink\" title=\"What is JavaScript Fatigue\"></a>What is JavaScript Fatigue</h2><p>JavaScript Fatigue is the belief that there are so many ways of assembling a JavaScript project that instead of just having to learn JavaScript, you have to learn several other related technologies. It is in essence, more about decision overload than it is about JavaScript specifically.</p>\n<p>Think about the average JavaScript project that goes beyond the (now) old school “Augment my form with some jQuery.”</p>\n<p>Here are a sample of decisions that need to be made:</p>\n<ul>\n<li>Should you use a JavaScript framework, or just write native JavaScript?</li>\n<li>If you decide to use a framework, which one should you use?</li>\n<li>What tool(s) will you use to bundle, minify, cache bust, and tree shake your code?</li>\n<li>Should you bother lazy loading?</li>\n<li>Will you use MVVM, MVC, Redux or something else as a basic architecture?</li>\n<li>How do you plan on dealing with AJAX calls? Callback hell? Promises? RxJS? Something yet to be created?</li>\n<li>What directory structure will you use?</li>\n<li>What component libraries will you use?</li>\n<li>How will you style your application? Raw CSS? Bootstrap? Material Design?</li>\n<li>What development environment will you use?</li>\n<li>Oh and by the way, to use most of these tools you’ll need to learn node and may need to decide between NPM and YARN.</li>\n</ul>\n<p>I recently heard that for a basic React application there are about 40 different decisions of this kind that need to be made.</p>\n<h2 id=\"Why-JavaScript-Fatigue-Is-Considered-a-Problem\"><a href=\"#Why-JavaScript-Fatigue-Is-Considered-a-Problem\" class=\"headerlink\" title=\"Why JavaScript Fatigue Is Considered a Problem\"></a>Why JavaScript Fatigue Is Considered a Problem</h2><p>If you are working on your own, or working in a small shop without any clear architectural direction, the choices can seem overwhelming.</p>\n<p>For that matter, if you are an architect, this is still a pretty long list of things that you need to learn well enough to evaluate.</p>\n<p>But the reason JavaScript fatigue is a problem is because it triggers emotions of fear, anger, and depression.</p>\n<p>It all starts with fear. You look at all the stuff that you “need to learn” and think, “I can’t possibly learn all of that. And even if I do, there will be something newer tomorrow that I’ll need to learn.”</p>\n<p>And so your fear turns to anger. I’m not talking rage kind of anger. Just that mild, “I’m not in control here and I’m feeling a bit uncomfortable” kind of anger. And this point, the next most logical thing most of us attempt to do is to try to get some sort of control over the situation. But in this case, the beast can’t be tamed. So, we resign ourselves to the situation and decide that since we can’t control any of it, we’ll give it a name and in really extreme situations give up learning any of it.</p>\n<p>Yes, I’ve actually read comments and had conversations with people who have told me as much. “Too much new stuff to keep track of, I’ve just given up.”</p>\n<p>Hey, OK. </p>\n<p>Don’t complain to me when you can’t get a job though.</p>\n<h2 id=\"How-to-Fix-JavaScript-Fatigue\"><a href=\"#How-to-Fix-JavaScript-Fatigue\" class=\"headerlink\" title=\"How to Fix JavaScript Fatigue\"></a>How to Fix JavaScript Fatigue</h2><p>I used to think that the people who had given up like this had either lost their love of learning, or were so distracted by the bright and shiny that they had hit overload and couldn’t continue. I now see that the real problem is depression. A natural extension of anger.</p>\n<p>But, suppose there was a different way of looking at all this JavaScript Fatigue stuff?</p>\n<p>Yes, there is a lot of stuff to learn. A lot of stuff you could learn. And you see, that’s the first step. There is a world of difference from NEEDing to learn all that is out there and having that all be things you could learn.</p>\n<p>I doubt you evaluated all the possible languages you could use prior to using the first language you used. Maybe it was chosen for you by your first job. Maybe it was the language you were most attracted to. In my case, I tried three different languages prior to my first job and when I started my first job, I wasn’t using any of them.</p>\n<p>Even today. How many languages are there? How many do you know?</p>\n<p>The point is, you don’t HAVE to know everything about anything. You really only need to know enough to get your work done. Sure, there will be something new and shiny. Take your time and evaluate if it is even worth looking at. Dip your toes in. Does what you’ve seen so far make sense? Go further.</p>\n<p>Recently, YARN has become the “hot new thing.” I tried it. It didn’t work in my current environment. At least for now, we are sticking with NPM. We’ll take another look when it matures a bit further.</p>\n<p>I love learning. But, I also realize I can only learn one thing at a time. I can’t be awesome at everything. So, I focus. Everything else I might need to know, I learn well enough to get the core thing done.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>And so, the cure for JavaScript Fatigue lies not outside of us, but within. Fix your perspective. Focus on what you need to know now. Learn bits at a time. Don’t worry about what is coming. There will always be new stuff. Not just with JavaScript but in the programming world in general. Even in the world at large.</p>\n<p>Don’t worry, be happy!</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/",
            "url": "http://davembush.github.com/the-irrational-fear-of-javascript-script-kiddies/",
            "title": "The Irrational fear of JavaScript \"Script Kiddies\"",
            "date_published": "2017-01-03T12:30:00.000Z",
            "content_html": "<p>Over the last several months, I’ve seen a lot of whining, complaining a fear regarding Angular 2 in particular and the JavaScript platform in general.</p>\n<p>Terms like “JavaScript fatigue” are indicative of the attitude.</p>\n<p>Another place I see this is with the recent announcement from the Angular team stating there will be another major point release every six months.  Like this is a bad thing? Or the general attitude that particular (modern) design decisions that have been made in some of the more recent frameworks that have been released are bad for JavaScript.</p>\n<p>And I look at that and honestly wonder why these people are programming in the first place.  If change bothers you, you are really in the wrong industry.</p>\n<figure>![](/uploads/2016/12/image-3.png \"The Irrational fear of JavaScript \"Script Kiddies\"\") Photo via [tookapic](//pixabay.com/en/users/tookapic-1386459/) via [Visualhunt.com](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"I’m-Moving-To-…\"><a href=\"#I’m-Moving-To-…\" class=\"headerlink\" title=\"I’m Moving To …\"></a>I’m Moving To …</h2><p>I seriously saw this comment on one of the articles announcing the major point release and jumping to version 4 instead of 3.  The actual comment was, “I’m going to move to React.”  Now, the reason he was going to move to React because he’s afraid that these major point releases are going to be drastically different from the previous version so that he’ll always need to be learning something new.  I understand the fear.  But, I think it is unfounded.  Aside from the fact that the Angular team has assured us that there won’t be any breaking changes in the next version, what we have to take a look at is WHY there were so many breaking changes from version 1 to version 2.</p>\n<h2 id=\"Remember-when…\"><a href=\"#Remember-when…\" class=\"headerlink\" title=\"Remember when…\"></a>Remember when…</h2><p>Remember back to when AngularJS was first introduced?  The best platform we had at the time was jQuery and KnockOut.  Yes, there were others, but those were the most prominent.  Especially jQuery.  Since then, the browsers have stabilized and most of the reasons for using jQuery have vanished.</p>\n<p>Another factor we need to consider is that the language has changed.  Oh, yeah, you can still write code like you used to 10 years ago, if you want.  But, the standards committee has finally committed to putting out new standards for the language every year.  So now, we have improvements that handle scope closure issues and fat arrow functions and the promise of not having to use promises or callbacks to force JavaScript into a more synchronous flow by using async and await.</p>\n<p>And then there is the history of various frameworks that have come out since.  We’ve made a lot of mistakes in the past that have led to improved ways of working with JavaScript to achieve various goals.  Function programming has crept into the mainstream.  Reactive programming has become more popular.</p>\n<p>For any framework to stay stagnant under these conditions would be foolish, if not suicidal.</p>\n<p>And to that programmer who is leaving Angular for React?  Good luck.  You think Angular is bad.  React makes all those changes you dread without changing the major number.</p>\n<h2 id=\"What-would-it-be-like-if-…\"><a href=\"#What-would-it-be-like-if-…\" class=\"headerlink\" title=\"What would it be like if …\"></a>What would it be like if …</h2><p>Just imagine with me what it would be like if nothing ever changed.  How far back do you want to go?  How about back to where I started programming.  OK, that was 29 years ago.  I started programming on DOS 3.1 using Clipper (that’s a dBase III compiler).  We had 640K (that’s 640,000 bytes, not megs, not gigs) to program in.  We used overlay tricks to cram programs that were three times that size into the computer.  There was no GUI and what graphics we did have were incredibly grainy.  You were lucky if you had color.  There was no Internet, that was still the “property” of the colleges and the universities.  No Google to find answers to your questions.  No blogs.</p>\n<p>No cell phones.</p>\n<p>No social media.</p>\n<p>And all of that was less than 30 years ago.</p>\n<p>And yet, the way many people act, they would like things to stay the same.  And I ask, “Why?”  So that 30 years from today we are still struggling with the same issues we are today?</p>\n<h2 id=\"Maturity\"><a href=\"#Maturity\" class=\"headerlink\" title=\"Maturity\"></a>Maturity</h2><p>Every new technology goes through essentially the same process.</p>\n<p>At first, it is brand new.  No one really knows the best way to use it.  Some are better planned than others, others were accidents and were subject to more discovery than others.  JavaScript was one of those that was more of an accident.  So, we’ve spent a lot of time trying to figure out the best way to use it.  Think about this, if we had known then what we know now, don’t you think JavaScript would have been designed differently from the beginning? At some point the new technology either dies, or matures enough that people start experimenting with how to use it best.  This is the place where design patterns are developed and features are added to the language.  This is the part of the cycle I love and is generally where I tend to jump into the technology.</p>\n<p>Eventually the technology matures and gets boring.  This is where I tend to jump off.  Java and .NET are in this phase.  The patterns for both are well established.  What features are being added are at the “nice to have” level.  But generally everything most people need to be able to do can already be done with what is available.</p>\n<p>We are currently at the beginning of the experimental phase.  Expect to see A LOT of change in the next several years.  If you don’t like it, move to a more mature technology that won’t change so much on you.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The final factor that magnifies all of the problems with JavaScript I’ve mentioned is that for way too long, JavaScript has been the language of Script Kiddies.  These are “programmers” who think that because they can achieve some sort of animation or validation on an HTML page by copy and pasting JavaScript they are real programmers.  So when someone with much more experience comes along and shows them a better way to program, instead of trying to learn they assert that this new way is wrong, or ridiculous, or declare they are going to take their toys and go to some other castle.</p>\n<p>The problem is, all the castles are now occupied by Kings and Queens instead of children who don’t know any better.</p>\n",
            "tags": [
                "javascript"
            ]
        },
        {
            "id": "http://davembush.github.com/using-javascript-to-drive-selenium-tests/",
            "url": "http://davembush.github.com/using-javascript-to-drive-selenium-tests/",
            "title": "Using JavaScript to Drive Selenium Tests",
            "date_published": "2016-08-16T10:30:00.000Z",
            "content_html": "<p>I’ve written about <a href=\"/tags/selenium/\">using Selenium to test web applications before</a>.  But all of those articles have assumed you are using C#.  I’ve realized that Selenium has multiple language bindings which allow me to use any language I want but C# just seemed easier at the time.  But, now I’m in an environment that doesn’t use .NET at all.  They use Java.  I know Java, but I choose not to use it and instead my focus at this shop is all JavaScript.  Which means, if I want to write Selenium tests to verify my work, I need to write my tests in JavaScript.  But Using JavaScript to Drive Selenium is, in my opinion what everyone should be doing.  At least everyone who is writing most of their web application using client side code.</p>\n<span id=\"more\"></span>\n\n<p>Think about it, the primary language you wrote the client side with is JavaScript, and yet you are going to write your tests using C#, Java, PHP… when you could be writing the tests using JavaScript.  The same language you used to write the bulk of your application.  Further, when you write your tests using C# or Java, you’ll probably either write the tests using a unit testing framework (MSTest, NUnit, JUnit) or you’ll use some sort of BDD adapter like SpecFlow to coerce the unit testing framework into the behavioral pattern you need.</p>\n<p><img src=\"/uploads/2016/08/image.png\" alt=\"image\" title=\"image\">  If, you use JavaScript, you can use Jasmine, which is already behavioral, to run your tests.</p>\n<p>Another added advantage to the binding I’m going to recommend in this post, is that you get parallelization right out of the box.  You don’t need to write any funky code to <a href=\"/running-selenium-in-parallel-with-any-net-unit-testing-tool/\">make your tests run in parallel</a>.  You get that for free.</p>\n<p>Another advantage I see for large companies is that not every group is going to be using the same server side language.  Where I’m at there are several groups using .NET and several groups using Java.  But everyone is using JavaScript.  If we all use JavaScript to drive our Selenium tests, we can share the knowledge we learn with other groups.</p>\n<p>So, let’s get started.</p>\n<p>For the purposes of this article, I’m going to assume you’ve already <a href=\"/you-can-start-using-node-today/\">setup your node environment using the instructions I provided a couple of weeks ago</a>.  If you haven’t, you should do that now.  If you already have Node setup on your computer, but you are still using a version less that 6.3, I’m going to suggest you upgrade to the current version so that you can use some of the new ES2015 functionality like fat arrows.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>The tools we are going to use for testing using JavaScript, other than Node are:</p>\n<ul>\n<li><a href=\"//webdriver.io/\">WebDriver.io</a></li>\n<li><a href=\"//webdriver.io/guide/reporters/spec.html\">WebDriver.io Spec Reporter</a></li>\n<li><a href=\"//jasmine.github.io/\">Jasmine</a></li>\n</ul>\n<p>And while the documentation on the WebDriver.IO site is quite complete, you would need to wade through quite a bit of information you don’t need to get this all setup and going.  We are going to give you just enough to get started.  If you want more information, I invite you to visit the website I’ve linked to above.</p>\n<p>For the purposes of this walk through, we are going to ignore the Selenium Grid part.  I’ve written about setting up Selenium Grid before.  Using the grid from WebDriver.io will just be a matter of changing some configurations.  Similarly, if you want to run the test from a cloud provider, the docs for that are on the website.</p>\n<p>Here, we are just going to get setup with a standalone server.  This suits my typical use of Selenium is to write a test for one specific tests at a time.  Once I have it working, I disable the tests.  The only time I run all of my test is prior to deploying the code to DEV just to make sure I didn’t break anything along the way.  Besides, setting up a standalone environment gets you started quickly.</p>\n<p>Before we really get started with the JavaScript stuff, make sure you have Java installed on your computer.  You’ll need that to run the Selenium stuff.</p>\n<p>So, to start out, install WebDriver.io First create a project directory for your new test project.  You can, of course, name it whatever you want.  Just make sure you make that directory your current working directory (CD into it.) Once you’re in the project directory, create your package.json file by typing in npm init Which will ask you several questions about your project.  Answer the questions and&#x2F;or accept the defaults.</p>\n<p>Then install WebDriver.io by using the NPM command <code>npm install webdriverio --save-dev</code> This should place wdio in your .&#x2F;node_modules&#x2F;.bin directory.  Run <code>./node_modules/.bin/wdio --help</code> To verify that it is working.  If you are running on a Windows computer, you’ll want to make those forward slashes back slashes.</p>\n<p>Now that it is working, we are going to use it to configure a test runner file.  Type in .&#x2F;node_module&#x2F;.bin&#x2F;wdio config One of the questions it is going to ask is which framework you want to use.  Pick ‘Jasmine’ Then it will ask if it should install the framework for you, pick ‘Yes’ Then it will ask where your tests are located.  Type in the correct location.</p>\n<p>Then it will ask which adapter you want to use.  Pick ‘spec’ and have it install that library for you.</p>\n<p>For Service, select ‘selenium-standalone’ and let it install that for you as well.  (Noticing a theme here?) For base URL, pick <a href=\"//www.google.com\">https://www.google.com</a> because we are going to write out demo tests against google.</p>\n<p>Now sit back and let the wdio config install the missing parts it needs for your tests.</p>\n<p>By default, this setup makes FireFox the test browser.  You can change that using the instructions located here: <a href=\"//webdriver.io/guide/testrunner/configurationfile.html\" title=\"http://webdriver.io/guide/testrunner/configurationfile.html\">http://webdriver.io/guide/testrunner/configurationfile.html</a> I know that looks like a lot of setup, but it really is pretty easy.  One NPM command to install webdriver.io and another wdio command to get the config file setup and the rest of the dependencies installed.  Pretty sweet.</p>\n<p>Now, let’s write our first test.</p>\n<h2 id=\"Writing-Tests\"><a href=\"#Writing-Tests\" class=\"headerlink\" title=\"Writing Tests\"></a>Writing Tests</h2><p>We are going to put our test in the directory we specified in our config file.  In my case, I put my tests under &#x2F;tests&#x2F;**&#x2F;*.js Just to make sure everything is working correctly, we are going to write a pretty simple first test.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;First test&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        browser.<span class=\"title function_\">url</span>(<span class=\"string\">&#x27;https://www.google.com&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Google&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(browser.<span class=\"title function_\">getTitle</span>()).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;Google&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>There are some bits that might look new here.</p>\n<p>First, because we are running this in node, only the file has scope so we can place ‘use strict’; at the top.</p>\n<p>Second, we are making use of the fat arrow functions.  For our purposes today, ()&#x3D;&gt;{} is the same as function(){}.  Just a bit easier to write.</p>\n<p>Third, we are using a browser variable that hasn’t been defined anywhere.  At least not that we can see.  This is a design decision the WebDriverIO team made that I don’t necessarily agree with.  We should require() it into our module when we need it.  But it is what it is.</p>\n<p>You can checkout the API for the browser object here: <a href=\"//webdriver.io/api.html\" title=\"http://webdriver.io/api.html\">http://webdriver.io/api.html</a> So, our test is loading the default URL and checking the contents of the title tag.</p>\n<p>Now we run our test with wdio <code>./node_modules/.bin/wdio wdio.conf.js</code> Our test should pass.</p>\n<h2 id=\"Page-Objects\"><a href=\"#Page-Objects\" class=\"headerlink\" title=\"Page Objects\"></a>Page Objects</h2><p>So that’s the basics.</p>\n<p>If you are already familiar with writing Selenium testing, that’s the guts of what you need to know to get going.</p>\n<p>If you aren’t, or you’ve never heard of Page Objects, that is what I plan to cover next.</p>\n<p>Generally, when we write our selenium test, we want to use a Page Object.  That is, we want to hide all of our Selenium specific stuff under an object so we can write our test without having to worry about the location of the elements on the screen changing.</p>\n<p>You see, here’s the problem you are going to run into.  You are going to write lots of tests.  At least I hope you do.  And then someday, you are going to want to change an ID of an element, or otherwise change how you find it.  If you write all of the tests so that they code directly to the Selenium code, you’ll need to find every place you were looking for that element and replace it with the new lookup.  Not very DRY.</p>\n<p>But, if you create a page object, you’ll put your code there and call it from your tests.</p>\n<p>So for an example.  Let’s create a GooglePage definition.  Once again, because we are using Node 6.3 (or above) we can use the class keyword.  The browser variable is still available to us because it is global.</p>\n<p>So, a pretty simple page object for Google search might look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GooglePage</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">load</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        browser.<span class=\"title function_\">url</span>(<span class=\"string\">&#x27;https://www.google.com&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">title</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">getTitle</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">searchInput</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;input[name=&quot;q&quot;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">searchButton</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> browser.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;input[name=&quot;btnK&quot;]&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">search</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">GooglePage</span>.<span class=\"property\">searchInput</span>.<span class=\"title function_\">setValue</span>(<span class=\"string\">&#x27;Node.js&#x27;</span>);</span><br><span class=\"line\">        browser.<span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">GooglePage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And then to access it from our test, we modify the test file above to look like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">GooglePage</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../pages/GooglePage&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;First test&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title class_\">GooglePage</span>.<span class=\"title function_\">load</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Google&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">expect</span>(<span class=\"title class_\">GooglePage</span>.<span class=\"property\">title</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;Google&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;and I search for &quot;Node.JS&quot;&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title class_\">GooglePage</span>.<span class=\"title function_\">search</span>(<span class=\"string\">&#x27;Node.JS&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should display &quot;Node.JS&quot; in the title&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(<span class=\"title class_\">GooglePage</span>.<span class=\"property\">title</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;node.js - Google Search&#x27;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This is a pretty simple example for demonstration purposes.  If you’ve never done any kind of Selenium testing before, I recommend you dig a little deeper than where I’ve gone here</p>\n<h2 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h2><p>The completed project is available on GitHub here <a href=\"//github.com/DaveMBush/WebDriverIO-Sample\" title=\"https://github.com/DaveMBush/WebDriverIO-Sample\">https://github.com/DaveMBush/WebDriverIO-Sample</a>    </p>\n<p>Photo credit: <a href=\"//www.flickr.com/photos/smjb/8107539280/\">smjbk</a> via <a href=\"//visualhunt.com\">Visualhunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></p>\n",
            "tags": [
                "javascript",
                "bdd",
                "selenium"
            ]
        },
        {
            "id": "http://davembush.github.com/you-can-start-using-node-today/",
            "url": "http://davembush.github.com/you-can-start-using-node-today/",
            "title": "You Can Start Using Node Today",
            "date_published": "2016-08-02T10:30:00.000Z",
            "content_html": "<p>I was just getting started writing an article about using Node&#x2F;JavaScript to drive my Selenium tests and as I was writing the “Prerequisite” section, I realized I have never written the basics about how to get setup with Node or even why you would want to.</p>\n<p>As popular as Node is, I am still finding that many of the people I work with have no idea what it is or if they do, they only have a partial idea and can’t see how it would apply to the work they do on a daily basis.</p>\n<p>So, let’s start with the fundamentals.</p>\n<figure>![](/uploads/2016/07/image-4.png \"You Can Start Using Node Today\")<figcaption>Photo credit: [stevendepolo](//www.flickr.com/photos/stevendepolo/5749192025/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-Node\"><a href=\"#What-is-Node\" class=\"headerlink\" title=\"What is Node?\"></a>What is Node?</h2><p>I think the best place to start with our introduction is by providing a comprehensive view of what Node is.  A rather simplistic description would be, “Node is the V8 JavaScript engine from the Chrome browser, wrapped in an executable, that lets you run JavaScript without a browser.” Now, with that simplistic definition, you might think, “Why would I want to do that?”  Maybe you are assuming that this implementation only lets you do the same stuff that you can do in the browser.  And this is where you would be wrong.</p>\n<p>So, let’s start over.</p>\n<p>Node allows you to write cross platform applications that will run directly on your computer using JavaScript as the language.</p>\n<p>And now I hear everyone thinking, “Yeah, yeah, that was the promise of Java.” OK.  Maybe that’s true.  Time will tell.</p>\n<h2 id=\"What-Can-You-Do-with-Node\"><a href=\"#What-Can-You-Do-with-Node\" class=\"headerlink\" title=\"What Can You Do with Node?\"></a>What Can You Do with Node?</h2><p>Several well-known applications use Node.  You may be surprised at how much node is already being used.  Here’s a short list:</p>\n<ul>\n<li>Many Web Servers</li>\n<li>Desktop Applications</li>\n<li>Developer Build Processes</li>\n</ul>\n<p>Does any of that surprise you? There is a <a href=\"//github.com/nodejs/node/wiki/Projects,-Applications,-and-Companies-Using-Node\">long list of companies</a> who are using Node for some part of their development process or infrastructure.  Some more notable implementations include:</p>\n<ul>\n<li>VS Code by Microsoft – a code editor built using Node and Electron.</li>\n<li>Slack Desktop App – uses Node and Electron</li>\n</ul>\n<p>In short, you can do just about anything you can think of.</p>\n<h2 id=\"Installing-Node\"><a href=\"#Installing-Node\" class=\"headerlink\" title=\"Installing Node\"></a>Installing Node</h2><p>This falls under the category of “Things I wish I had known.” You can just go to the <a href=\"//nodejs.org/en/\">Node site</a> and download the version you want to use.  But at some point, you are going to want to use multiple versions of Node.  One version for one project and a different version for some other project.  For that, you are going to need a tool called ‘NVM’.  Life will be a lot easier if you just install NVM first and then install Node from there.</p>\n<p>If you are running Windows, you’ll want to <a href=\"//github.com/coreybutler/nvm-windows/releases\">grab NVM from here</a>.  Everyone else can <a href=\"//github.com/creationix/nvm\">get NVM from here</a>. Once you have NVM installed, you should be able to run <code>nvm install _version.number.here_</code> or you can run <code>nvm install node</code> To install the latest version.</p>\n<p>You can run this command for each version you want to have installed.</p>\n<p>To see which versions are installed, you can run <code>nvm ls</code> And to use a specific version you can run <code>nvm use _version.number.here_</code></p>\n<h2 id=\"Using-the-Node-Package-Manager\"><a href=\"#Using-the-Node-Package-Manager\" class=\"headerlink\" title=\"Using the Node Package Manager\"></a>Using the Node Package Manager</h2><p>When you installed Node, you also installed the Node Package Manager(NPM).  For those of you who are coming from the Microsoft world, NPM is like NuGet.  It is how we install additional “Modules” (think libraries) into our Node environment.</p>\n<p>The commands for NPM are pretty straight forward and most of the time, the documentation will tell you exactly what command to run to get it into your development environment.  But, it is helpful to know why you are running the various commands.</p>\n<p>But, before you start installing Node packages into your development environment, you are going to want a package.json file.  The easiest way to create this in a form that NPM can use is to use the command <code>npm init</code> which will walk you through all of the questions you need to answer to create a proper package.json file.</p>\n<p>The next command you are going to encounter is <code>npm install</code>.</p>\n<p>But <code>npm install</code> has several switches that you’ll be using.  Each with a different purpose.</p>\n<p><code>npm install _packagename_</code></p>\n<p>This will install the most recent version of the package into your node_modules directory and record the dependency in your package.json file in the dependencies section.</p>\n<p>If you want to be explicit about where you are saving the file you can use the <code>--save</code> flag.  It does the same thing as <code>npm install package</code>.</p>\n<p><code>npm install --save _packagename_</code></p>\n<p>Your other option for saving is</p>\n<p><code>--save-dev</code>.</p>\n<p>This puts the dependency in the devDependencies section.</p>\n<p>You might wonder why you would have two different dependency sections.</p>\n<p>The reason for this is because you might have modules that you need simply to build the project. They aren’t needed when you deploy the project. So having the two different sections allows you to deploy without the extra set of modules.</p>\n<h2 id=\"Node-JavaScript\"><a href=\"#Node-JavaScript\" class=\"headerlink\" title=\"Node JavaScript\"></a>Node JavaScript</h2><p>I once had someone assert that even within the same versions of JavaScript, there are different versions of JavaScript.  His main point was that there are differences between JavaScript on the browser and JavaScript in Node.  I assert, they are the same version of JavaScript, but the API that is available, or required, is different based on the environment.</p>\n<p>So, JavaScript on Node is syntactically no different from the JavaScript you write now.  However, Node does solve an age old problem we’ve had in client side code automatically. This problem is global scope pollution. If we write JavaScript that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Without wrapping the code in a function, the code will end up in global scope.</p>\n<p>The fix for this is to wrap all of our files in immediately invoked function expressions (IIFEs).  I’ve written about using IIFEs before as a best practice for Angular programming.  In fact, it is a best practice for all client side JavaScript programming.</p>\n<p>But, in Node it is completely unnecessary because Node puts each file in its own scope.  Putting something on the global scope is something you have to do intentionally.  This is good, but it does require us to write some extra code.</p>\n<p>You see, the problem is, if all of the code we write is only local to the file we write it in, how are we going to be able to write code in a modular fashion?  We don’t want all of our code in one monolithic file.</p>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><p>So, to handle this problem, Node implements two keywords&#x2F;functions&#x2F;variables (depends on how you think about it) We’ll just call them keywords for now.</p>\n<p>The first is the requires() keyword.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fooScript&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This says go find the script “fooScript.js” and assign what was exported from it to our “foo” variable.  If the file you need to require has been installed with NPM, then all you need is the name of the module, like I did above.  But if you are requiring in a file from your own code, you’ll need to require using a path reference.  For you Windows people, this always works using forward slashes (&#x2F;) not backslash (\\).</p>\n<p>This probably leaves you asking the question, how does fooScript expose its content to the module requiring it? With code that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = fooFunc;</span><br></pre></td></tr></table></figure>\n\n<p>This line normally appears at the end of a file.  In the case of the line above, assume that fooFunc is a function that is defined somewhere above the module.exports line. You could also write the exports using:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span> = fooFunc;</span><br></pre></td></tr></table></figure>\n\n<p>They do the same thing.</p>\n<p>If our fooFunc is in a file named “fooScript.js” then our foo variable above can call the fooFunc() function by using foo.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = require(&#x27;fooScript&#x27;);</span><br><span class=\"line\">foo(); // this line calls fooFunc() in fooScript.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optimizations\"><a href=\"#Optimizations\" class=\"headerlink\" title=\"Optimizations\"></a>Optimizations</h2><p>What took me a while to grasp is that you can export anything.  A function, a variable, an object.  It really doesn’t matter.  But you have to be aware of some optimizations that Node makes for you.</p>\n<p>You see, it would be pretty stupid to process the file every time it was required into another file.  So rather than do that, Node caches the export and assigns that the next time it is required.  If you export an object, the next time you require it, you will get the same object.  So an exported object becomes a singleton.  If you want to be able to create new objects, you are better off exporting the function (or class in ES2015) that creates the object and new-ing it up when you need it.</p>\n<h2 id=\"Your-Turn\"><a href=\"#Your-Turn\" class=\"headerlink\" title=\"Your Turn\"></a>Your Turn</h2><p>So, now it is your turn.  If you have not tried using Node.js install it and try a few things.</p>\n",
            "tags": [
                "javascript",
                "node",
                "npm",
                "nvm"
            ]
        },
        {
            "id": "http://davembush.github.com/4-reasons-to-drop-mvvm/",
            "url": "http://davembush.github.com/4-reasons-to-drop-mvvm/",
            "title": "4 Reasons To Drop MVVM",
            "date_published": "2016-07-27T10:30:00.000Z",
            "content_html": "<p>The MVVM design pattern has been around for quite a while now.  It has a lot of strengths when done correctly.</p>\n<p>But, I believe the time has come to recognize that MVVM has a lot of shortcomings that point to its demise.  Since I primarily develop web applications, I will keep this discussion centered on the use of MVVM in web applications.  The use of MVVM for desktop may or may not have these same issues.</p>\n<p>I realize that for some of you, the very suggestion of dropping MVVM will invoke a negative emotional response.  Some very smart people have quit their job at the suggestion that MVVM and its close cousin two-way data-binding, be abandoned in favor of another way.  But just for a few minutes, I would like for you to stop treating programming as a religion and consider the possibility that there may be a better way.</p>\n<p><img src=\"/uploads/2016/07/image-2.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"History-of-MVVM\"><a href=\"#History-of-MVVM\" class=\"headerlink\" title=\"History of MVVM\"></a>History of MVVM</h2><p>MVVM was originally created by John Gossman to support the XAML syntax used to create Windows™ desktop applications and Silver Light applications.  Its main advantage has always been that it provides an easy way to decouple the View code from any business logic that might need to run.  Because of this decoupling, our applications become much easier to unit test.</p>\n<p>The next major implementation of MVVM that I can remember is <a href=\"//knockoutjs.com/\">Knockout</a>.  It is the knockout framework that introduced me to MVVM and I have to say it is also the only one I feel like actually got it right.  By that I mean that it actually did what it was advertised to do.  Maybe that’s because of all the implementations I’ve used, Knockout is the only one that ONLY implemented MVVM rather than making it part of a larger framework.</p>\n<h2 id=\"Definition-of-MVVM\"><a href=\"#Definition-of-MVVM\" class=\"headerlink\" title=\"Definition of MVVM\"></a>Definition of MVVM</h2><p>I’ve written about MVVM before where I’ve explained more completely what MVVM is.  But just so we have a working definition of what I mean when I talk about MVVM, let’s define it this way.</p>\n<p>MVVM is a design pattern that uses two-way data-binding to get data in and out of the presentation layer, referred to as the View, without the programmer needing to do any more than specifying that this should happen in the view.  MVVM is also able to have data elements and functions in the “ViewModel” track changes so that anything that is dependent on other data is automatically recalculated without the programmer having to write a lot of code to make this happen.  This creates a model that is able to respond to events in the view, but is primarily data centric rather than event centric has we have often reasoned about our applications in the past.</p>\n<p>It sounds great.  And when it works it is.  But that’s the main problem, it hardly ever works well.</p>\n<h2 id=\"MVVM-Done-Right-is-Slow\"><a href=\"#MVVM-Done-Right-is-Slow\" class=\"headerlink\" title=\"MVVM Done Right is Slow\"></a>MVVM Done Right is Slow</h2><p>If you’ve had any experience or paid any attention to the implementation of MVVM using JavaScript, you will realize that the number one problem with MVVM is that it is a memory hog and performs poorly for all but the most trivial of applications.  In fact, for all of the popularity of Angular JS, the biggest complaint has been around the implementation of the data-binding.  In a large application, you might need to loop through the data multiple times to make sure it has all recalculated correctly.  If you just use the framework and let the framework deal with your sloppy code, this can make the system incredibly slow.  If you actually pay attention to what you are doing, it takes longer to implement than if you had chosen some other design pattern.</p>\n<p>But doing that means we have not moved on to…</p>\n<h2 id=\"MVVM-is-Hard-to-Implement\"><a href=\"#MVVM-is-Hard-to-Implement\" class=\"headerlink\" title=\"MVVM is Hard to Implement\"></a>MVVM is Hard to Implement</h2><p>Recognizing that looping through the data until it stabilizes may not be a good idea, the framework designers have developed rules such as, “We’ll only run the digest cycle once.”  and “We’ll only run it when some user interaction has occurred.”  Well, OK.  That sounds good.  At least now it will be obvious that I have a problem.  But this is where the trouble begins.  If I can’t rely on my data, and ultimately my view, responding to changes in my data correctly, I am left with having to only partially implementing MVVM so that I can work around these limitations and using other means to make sure my view is updated correctly.</p>\n<p>This is to say nothing of many frameworks just not working as you would expect them to.</p>\n<h2 id=\"MVVM-is-Hard-to-Reason-About\"><a href=\"#MVVM-is-Hard-to-Reason-About\" class=\"headerlink\" title=\"MVVM is Hard to Reason About\"></a>MVVM is Hard to Reason About</h2><p>Again, in all but the most trivial of applications, and because of the optimizations that various frameworks have tried to implement, MVVM becomes difficult to implement.  As I’ve tried to explain MVVM to others and even as I’ve tried to implement it myself, I’ve found that the simple act of keeping the view stuff in the view layer and the data stuff in the data layer and making sure it all updates appropriately has me, at times tearing my hair out.  Many times this is caused by incomplete implementations.  But if being hard to implement means it is hard to reason about, maybe we shouldn’t be using it to begin with.</p>\n<h2 id=\"MVVM-is-Overkill\"><a href=\"#MVVM-is-Overkill\" class=\"headerlink\" title=\"MVVM is Overkill\"></a>MVVM is Overkill</h2><p>But it does work sometimes.  In really simple CRUD applications, it works great.  None of the problems I’ve mentioned.  And this is the great seduction of MVVM.  You try it on some small application and you get excited.  Like a gateway drug, it lures you in.  And when you finally go to implement it on some larger application, you find out that it really doesn’t scale all that well.  And on that small app you tried it on, couldn’t you have done that just as easily using another design pattern?</p>\n<h2 id=\"Where-to-Go-from-Here\"><a href=\"#Where-to-Go-from-Here\" class=\"headerlink\" title=\"Where to Go from Here\"></a>Where to Go from Here</h2><p>As I was reviewing these arguments with a co-worker this week, he asked, “Are you saying we shouldn’t be using MVVM?”  And my answer might surprise you.</p>\n<p>I said, “Given the two models we have to work within the framework we are currently using, MVVM is the best choice.” However, what we might want to consider is moving to another framework that provides a better design pattern.  There are several “One-way” design patterns that intrigue me.  The first is the basic Flux pattern that React tends to use.  Done correctly, this uses events to achieve the decoupling we all should be striving for.  At its core, it is basic MVC.</p>\n<p>The second one, which is very flux like, is RxJS.  I’m still wrapping my head around how I to use it in an application and honestly don’t know enough about it at this point to say any more than that it looks interesting.</p>\n<p>And even if we decided to move away from MVVM, I think using two way data-binding between the view and the ViewModel is good.  I just think the ViewModel shouldn’t try to re-compute the values as part of what it does.</p>\n<p>Leave that to the developer to control.  The problem is, trying to get existing systems that implement two-way data-binding to only work at that level would not work correctly.  </p>\n<h3 id=\"Other-places-talking-about-MVVM\"><a href=\"#Other-places-talking-about-MVVM\" class=\"headerlink\" title=\"Other places talking about MVVM\"></a>Other places talking about MVVM</h3><ul>\n<li><a href=\"//blogs.msdn.microsoft.com/johngossman/2006/03/04/advantages-and-disadvantages-of-m-v-vm/\">The Advantages and Disadvantages of MVVM</a> (by John Gossman himself!)</li>\n</ul>\n",
            "tags": [
                "javascript",
                "mvvm"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "url": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "title": "JavaScript bind() for cleaner code",
            "date_published": "2016-07-06T10:30:00.000Z",
            "content_html": "<p>Several weeks ago, I wrote about <a href=\"/why-does-javascript-loop-only-use-last-value/\">how closures impact calling asynchronous functions</a> in a loop and several ways of dealing with that problem.</p>\n<p>In my recent coding, I’ve discovered an even more simple way of dealing with this problem.</p>\n<p>In the process, it removes the anonymous function and eliminates the linting error, ‘Don’t make functions within a loop’ You see, I’ve been experimenting with JavaScript <code>bind()</code>.</p>\n<p>And as it turns out, we can use bind in multiple situations, including dealing with the closure issue I mentioned a couple of weeks ago.</p>\n<figure>![](/uploads/2016/07/image.png \"JavaScript bind() for cleaner code\")<figcaption>Photo credit: [Connor Tarter](//www.flickr.com/photos/connortarter/4754231502/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-bind\"><a href=\"#What-Is-bind\" class=\"headerlink\" title=\"What Is bind()?\"></a>What Is bind()?</h2><p>The bind function is a recent addition to the JavaScript spec. So, this will only work on recent browsers. You can <a href=\"//kangax.github.io/compat-table/es5/\">check the compatibility table</a> (for all things JavaScript) to see which browser implement <code>bind()</code> as well as other JavaScript features. I looked over the list and there aren’t any browsers that don’t support <code>bind()</code> that I care to support, so I’m good. Your mileage may vary.</p>\n<p>What bind does is that it automatically wraps your function in its own closure so that we can bind the context (the this keyword) and a list of parameters to the original function. What you end up with is another function pointer.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we not only bound this to the <code>foo()</code> function, but we also bound the two parameters. So, when we call <code>newFoo()</code> the return value will be 7.</p>\n<p>But what happens if we change the parameters before calling newFoo?</p>\n<h2 id=\"Changing-bind-parameters\"><a href=\"#Changing-bind-parameters\" class=\"headerlink\" title=\"Changing bind parameters\"></a>Changing bind parameters</h2><p>If we bind parameters to <code>foo()</code> using variables and then change the variables prior to calling <code>newFoo()</code>, what do you expect the value to be?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,a, b);</span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\">b = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>The return value is still going to be 7 because <code>bind()</code> binds the value of the parameters, not the actual variables. This is good news and, like I said, we can use this to great advantage in our code.</p>\n<p>But where I think it will display the most usefulness to me is in my call backs</p>\n<h2 id=\"Bind-and-callbacks\"><a href=\"#Bind-and-callbacks\" class=\"headerlink\" title=\"Bind and callbacks\"></a>Bind and callbacks</h2><p>You should remember from that article that one of our solutions to dealing with callbacks in loops was to create an anonymous function around the function we wanted to call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">ii</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But we can greatly simplify this code by using bind instead.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">consoleLog</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(consoleLog.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,i),<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We can do this because each call to bind gives us a new function pointer and the original function remains unchanged.</p>\n<p>Meanwhile, we also remove the linting error ‘Don’t make functions within a loop’ because we aren’t creating the function in a loop, we are just pointing to a function that was created outside of the loop.</p>\n<h2 id=\"Bind-for-Event-Handlers\"><a href=\"#Bind-for-Event-Handlers\" class=\"headerlink\" title=\"Bind for Event Handlers\"></a>Bind for Event Handlers</h2><p>Another place where <code>bind()</code> will clean up your code is with event handlers.  Everyone knows, or should know, that when an event handler is called, the context it is called on is the thing that generated the event and not the object that the event handler was created in.  But, by using bind, you can be sure that the function is being called on the correct context.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">eventHandler</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Not that you would write your code exactly like that, but that is just to get the point across.</p>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p>What?! OK. The best explaination of Currying I can give you is that it allows you to pass parameters to function in multiple steps by making the function return other functions that take the remaining parameters. Many functional languages, like F#, do this for you automatically.</p>\n<p>Using binding, we achieve Currying by writing code that looks something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b+c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addAgain = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">addAgain</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript",
                "bind",
                "callbacks",
                "currying",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "url": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "title": "Exposing Secret JavaScript privates to Unit Tests",
            "date_published": "2016-06-23T10:30:00.000Z",
            "content_html": "<p>The question comes up all the time, “How do I access JavaScript privates from my Unit Tests?”  And invariably, the purist chimes in with the answer, “you don’t”.</p>\n<p>But, isn’t the point of unit testing to allow us to test UNITs?  Why artificially limit our ability to test units if we don’t need to?  If we had the ability to create protected members, wouldn’t we tests those separately? So, what follows is how I surface my private JavaScript members so I can access them during tests without having to make them public during the run of my protection code.</p>\n<p><img src=\"/uploads/2016/06/image-2.png\" alt=\"Exposing Secret JavaScript privates to Unit Tests\" title=\"Exposing Secret JavaScript privates to Unit Tests\"></p>\n<h2 id=\"Lean-on-JavaScript\"><a href=\"#Lean-on-JavaScript\" class=\"headerlink\" title=\"Lean on JavaScript\"></a>Lean on JavaScript</h2><p>My JavaScript unit testing framework of choice is Jasmine.  Not so much because it does all I would like it to do or because there isn’t something ‘better’ available but because it has become the defacto standard for unit testing JavaScript and nothing else I’ve seen is significantly better.  There is one part of this technique that is going to lean on the fact that I am using Jasmine, but I’m sure you can adapt it to your testing framework.</p>\n<p>But first, let’s review how you would create private JavaScript members in the first place.</p>\n<h2 id=\"Creating-Private-Members\"><a href=\"#Creating-Private-Members\" class=\"headerlink\" title=\"Creating Private Members\"></a>Creating Private Members</h2><p>In standard ES5 code, a simple object might be defined using syntax that looks something like this.  Recognize there are multiple ways to create objects and things that look like classes in JavaScript.  What follows is just enough code to get the point across.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note that our privateMember is used by publicMember but is not accessible from the outside.  I’m also using apply(this) to pass the context to the privateMember function.  This may not be necessary if you aren’t using this in the privateMember function and you could use privateMember.bind(this) to make this automatic.  That’s one of the interesting things about JavaScript.  There are always multiple ways to achieve the same goal.  None of them particularly better than the other but some more standard than the other.</p>\n<p>Notice that the only thing that actually makes our publicMember public is that I’ve attached the function pointer to this.</p>\n<h2 id=\"Exposing-Private-for-Jasmine\"><a href=\"#Exposing-Private-for-Jasmine\" class=\"headerlink\" title=\"Exposing Private for Jasmine\"></a>Exposing Private for Jasmine</h2><p>The easiest way I know of to expose the private member variables for Jasmine is to conditionally assign the private members to this if jasmine is defined.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As long as you don’t use the jasmine global variable for something other than jasmine, this should work.</p>\n<p>And now you can test your private functions.</p>\n<h2 id=\"What-about-Spys\"><a href=\"#What-about-Spys\" class=\"headerlink\" title=\"What about Spys?\"></a>What about Spys?</h2><p>If you are testing your private functions on their own, you’ll probably have a need to place spys on them when you test the other functions in your application that call them.  This is where things get just a bit interesting.</p>\n<p>If we leave things as they are, and you place a spy on the function that we exposed, your spy will never get called.  The reason for this is because of the way pointers work.</p>\n<p>In our example above, our publicMember() function is going to call our privateMember() function regardless of how we manipulate the this.privateMember pointer.  This is because, while the variables are pointing to the same function, they are still two different variables and, because of the way spys work internally, you’ll end up changing the this.privateMember variable without impacting the call to privateMember().</p>\n<p>We need to write a little extra code in our if(jasmine) block to make sure that after we’ve exposed privateMember(), the now public version of privateMember() gets call by publicMember() instead of the private version of privateMember().</p>\n<p>To do this we are going to need to play “towers of hanoi” with our variables.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldPrivateMember;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldPrivateMember)&#123;</span><br><span class=\"line\">            privateMember = oldPrivateMember;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            oldPrivateMember = privateMember;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">        privateMember = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">privateMember</span>();</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The gist of what this new code does is that it captures the pointer to the privateMember() into oldPrivateMember.  Once we have that, we can make this.privateMember point to the original privateMember and then make our original privateMember point to a new method that calls this.privateMember, which is what our spy will call if we’ve set one up.</p>\n<p>The if(oldPrivateMember) stuff is just protection code to make sure we don’t do this more times than we need and end up calling this.privateMember up the call stack multiple times until we finally get to the privateMember function we ultimately want to call.  Depending on how you implement classes, you may or may not need this code.</p>\n",
            "tags": [
                "unit test",
                "javascript",
                "test driven development"
            ]
        },
        {
            "id": "http://davembush.github.com/why-does-javascript-loop-only-use-last-value/",
            "url": "http://davembush.github.com/why-does-javascript-loop-only-use-last-value/",
            "title": "Why does JavaScript loop only use last value?",
            "date_published": "2016-06-16T10:30:00.000Z",
            "content_html": "<p>You see variations of the question, “Why does JavaScript loop only use the last value?” on StackOverflow all the time.  At work, the guy that sits next to me just ran into the same issue.  And the answer to the question requires a solid understanding of closures and <a href=\"/javascript-scope/\">variable scope</a>.  Something I’ve <a href=\"/javascript-scope/\">written about in the past</a>.  But, when I went back and looked at that article, I was surprised that I had not covered this particular very common topic.</p>\n<p>So, here is the basic scenario.  You have some sort of for&#x2F;next loop that then calls some asynchronous function.  When the function runs, what you see when the code runs is that the last value of the loop index is the value that gets used in the function for every instance that it gets called.</p>\n<figure>![](/uploads/2016/06/image-1.png \"Why does JavaScript loop only use last value?\")<figcaption>Photo credit: [col_adamson](//www.flickr.com/photos/57855544@N00/340654162/) via [Visualhunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"An-Example\"><a href=\"#An-Example\" class=\"headerlink\" title=\"An Example\"></a>An Example</h2><p>Here is a really simple example that demonstrates the problem.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But, you will also see it when you try to fire an event.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">    img.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(testArray[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or even more common, when you try to make an AJAX call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"comment\">/* url goes here */</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">moduleHtml</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>For the remainder of this post, we’ll stick with the first example because the problem is the same and the code for that one has the least moving parts.</p>\n<h2 id=\"The-Diagnosis\"><a href=\"#The-Diagnosis\" class=\"headerlink\" title=\"The Diagnosis\"></a>The Diagnosis</h2><p>The solution to the problem starts with understanding how JavaScript works.  In particular how closures work.  What happens when you use a variable that is declared outside the scope the variable is going to be used in, is that it will use the value that variable has at the time it runs.  It doesn’t get a copy of the value at the time the closure is setup.  If you think of closures as pointers rather than values, maybe that will help.</p>\n<p>So, in our working example, when the code actually runs, 10 will get spit out to the console 10 times because by the time the code runs, that is the value that i will have.  Maybe you thought it would be 9.  But the loop stopped looping because i was 10.</p>\n<p>If you think, “OK, so I’ll just make the function fire immediately after I set it up by using setTimeout(func,1), let me remind you that in our second example of firing an event, that is essentially what is happening there.  It won’t work either.</p>\n<h2 id=\"Not-a-Matter-of-Timing\"><a href=\"#Not-a-Matter-of-Timing\" class=\"headerlink\" title=\"Not a Matter of Timing\"></a>Not a Matter of Timing</h2><p>JavaScript has, and probably always will be single threaded.  I say, probably always will be because way too much is relying on the single threaded nature of JavaScript at this point for it to safely change.  If you want to break the web, suddenly change that.</p>\n<p>So, even if we could set a timeout value small enough to execute before the loop will complete, what you have to remember about setTimeout and setInterval is that all we are doing when we make those calls is we are saying, “run this code as soon after the timeout value as possible.”  Under the hood it puts the function in the event queue when the timeout value has expired.</p>\n<p>Since JavaScript is single threaded, none of this will happen until the code we are currently executing has completed.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution 1\"></a>Solution 1</h2><p>One solution is to wrap our code in another closure that will run immediately.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">ii</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This example is using an IIFE (Immediately Invoked Function Expression) so that the function runs right away.  The effect is the same as the original code except for now the variable ii is local to our IIFE so it will not change every time the variable i changes.</p>\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution 2\"></a>Solution 2</h2><p>Now, by this point, you might be thinking, why not just create a new variable ii inside the loop?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ii = i;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Well, the problem with this is variable hoisting.  Any variable you declare within a function, regardless of where it is declared, is physically declared at the top of the function.  So, you aren’t really creating a variable local to the loop.  You are creating a variable local to the function (or global scope in this case) and you end up with the same problem as before.</p>\n<p>But, ES2015 recognizes and has finally provided a means of creating a variable local to a code block rather than just function blocks.  To do this, they’ve introduced the LET keyword.</p>\n<p>So, if you change your code to:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ii = i;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem of course is that there aren’t a lot of browsers that support the LET keyword right now.  But there are transpilers that will convert your code from ES2015 to ES5.  And the way they do this is our final solution.</p>\n<h2 id=\"Solution-3\"><a href=\"#Solution-3\" class=\"headerlink\" title=\"Solution 3\"></a>Solution 3</h2><p>The problem with solution 1 is that while it works most of the time, it really isn’t the most reliable way of solving the problem.  At the very least it sets up a lot more code that we really need.  If we peek under the hood to how the transpilers implement LET, what we see is that they take advantage of the fact that the CATCH block of the try&#x2F;catch syntax has its own scope.</p>\n<p>So, all we have to do is throw i, catch it in the catch block and use the variable we caught in our callback function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;<span class=\"keyword\">throw</span> i&#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(ii) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It tends to be a bit cleaner than solution 1 and is the solution I prefer.  But, there is another strong reason for using this last solution that most people overlook.  When you wrap a function with an IIFE like we’ve done with solution 1, it changes the meaning inside the IIFE of <code>this</code>, <code>return</code>, <code>break</code> and <code>continue</code>.  Using the <code>try/catch</code> mechanism allows you to treat the code as if it were inline with the code the <code>try/catch</code> is in.  This is probably closer to what you had in mind when you wrote the original code to begin with.</p>\n",
            "tags": [
                "javascript",
                "closure",
                "loops"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-prototypal-inheritance/",
            "url": "http://davembush.github.com/javascript-prototypal-inheritance/",
            "title": "JavaScript Prototypal Inheritance",
            "date_published": "2016-05-19T11:30:00.000Z",
            "content_html": "<p>Over the last several months we’ve looked at several different aspects of how JavaScript deals with objects.  A few weeks ago, we looked at <a href=\"/javascript-types-nuance/\">JavaScript Types</a> and noted that many of the types are actually objects, while not all are.  We’ve also looked at <a href=\"/javascript-objectswhat-you-dont-know-can-hurt-you/\">JavaScript Objects</a> and <a href=\"/javascript-fields/\">JavaScript Object Fields</a>.  This has all been foundational information you need to understand prior to understanding how JavaScript Prototypal Inheritance.</p>\n<p><img src=\"/uploads/2016/05/image-1.png\" alt=\"JavaScript Prototypal Inheritance\" title=\"JavaScript Prototypal Inheritance\"></p>\n<h2 id=\"No-Classes\"><a href=\"#No-Classes\" class=\"headerlink\" title=\"No Classes\"></a>No Classes</h2><p>If you are coming from an object oriented background, the first thing you need to understand is that JavaScript doesn’t have classes.  Even though the class keyword was introduced in ES2015, there are still no classes.  All the class keyword does for us is formalizes what we’ve been doing for years while making JavaScript feel more like the other languages we know.</p>\n<p>I’m not going to spend a lot of time dealing with ES2015 syntax here for several reasons.  First, it isn’t fully implemented in the browser eco system yet.  Second, most of what we do as programmers is maintain existing code.  There is a lot of existing code that doesn’t use ES2015 yet.  Third, ES2015 hides what is really going on.  I want you to understand how JavaScript works, not just be able to churn out code.</p>\n<p>So, if there are no classes, how does JavaScript achieve inheritance?  By using the delegation pattern.</p>\n<h2 id=\"Delegation\"><a href=\"#Delegation\" class=\"headerlink\" title=\"Delegation\"></a>Delegation</h2><p>In the object oriented world that you are probably coming from, you’ve probably heard the phrase, “Favor composition over inheritance.”  What they are really saying is, “Favor delegation over inheritance.”  So, this shouldn’t be a particularly new concept.  When you create a class that contains other classes, once the class is instantiated, when we need to call a function that the top level class doesn’t implement, we pass it on into an object that is contained by the top level object.  This is delegation.</p>\n<p>Now, remove the classes.  All you have left are the objects those classes would have created.  This is JavaScript.  But, instead of leaving the delegation to you, they’ve provided a default delegation mechanism called the prototype.  In fact, if you’ve ever inspected a JavaScript object in the debugger, you’ve probably seen this field hanging off your functions.  The other place you’ll see evidence of the prototype is in the __proto__ field that hangs off of every object.</p>\n<h2 id=\"Default-Inheritance\"><a href=\"#Default-Inheritance\" class=\"headerlink\" title=\"Default Inheritance\"></a>Default Inheritance</h2><p>Whenever you create a new object using either an object literal, or a function (or the class keyword) the prototype field automatically points to the default empty object.  It is this default object that gives all of our other objects the behavior of an object.  Without this, none of our objects would have a default toString() implementation, for example.  It is the default object that gives all other object their object-ness.</p>\n<h2 id=\"Constructors\"><a href=\"#Constructors\" class=\"headerlink\" title=\"Constructors\"></a>Constructors</h2><p>Once your head stops spinning, come back and check this out.  While we no longer have classes, we still need some way of stamping out objects that all look the same.  We already looked at one way of doing this when we discussed <a href=\"/javascript-objectswhat-you-dont-know-can-hurt-you/\">JavaScript Objects</a>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    self.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    self.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        self.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And for most of the code we write, this is a perfectly adequate way of creating a constructor. By attaching the functions to the function’s prototype field, we can apply the functionality one more level up the tree, which gives us a certain amount of flexibility. The same code above could be written as:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we didn’t attach someProperty to the prototype.  We want the state information attached to our object.  If you did attach it to the prototype, all it would do is give the object a default value of ‘A’ but as soon as we assign ‘B’ to it, the property gets shadowed anyhow.  If you were to Object.define() someProperty so that it had a setter, which would remove the shadowing, you would also change the value for every instance of the object A when you changed it from any instance.  I suppose if you wanted to implement something that looked like a static variable, this is something you might attempt.</p>\n<p>The key to remember here is that anything you do to the prototype is going to impact all current and future instances of the object.</p>\n<h2 id=\"JavaScript-Prototypal-Inheritance\"><a href=\"#JavaScript-Prototypal-Inheritance\" class=\"headerlink\" title=\"JavaScript Prototypal Inheritance\"></a>JavaScript Prototypal Inheritance</h2><p>By now, I hope you understand that all inheritance happens by delegation through the prototype.  The next obvious question would be, “How do I make one JavaScript ‘class’ inherit&#x2F;delegate to another ‘class’?” One way you might be tempted to implement inheritance is by assigning prototypes.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foo</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">B.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>But all this does is make B inherit from the same thing A inherited from.  Not exactly what we wanted to see happen.</p>\n<p>OK, you say.  I know what to do, I’ll just create a new object of type A and assign THAT to the prototype of B.</p>\n<p>B.prototype &#x3D; new A();</p>\n<p>You’re closer and it may work a lot of the time, but if your A function that you are using to create that other object does anything, you may end up not doing what you expected.  For really simple objects, this will work, but it is a dangerous habit to get into.</p>\n<p>What you really want to do is to use the Object.create() function.  This creates a new object without calling the constructor function.  No side effects.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br></pre></td></tr></table></figure>\n\n<p>But, what if that A constructor function did something important? In your B constructor function, you call the A constructor function passing it the current this pointer.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    A.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If B takes parameter than need to be passed on up to A, you can pass those additional parameters after this in your call to call().</p>\n<p>And that is how we make JavaScript inherit one object from another.  It is a lot of work.  This is why ES2015 introduces the class and extend keywords.  They do a lot of this work for us.</p>\n",
            "tags": [
                "javascript",
                "inheritance",
                "prototype"
            ]
        },
        {
            "id": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "url": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "title": "ES2015 Code Coverage and Jest (React JS Unit Testing)",
            "date_published": "2016-05-05T11:30:00.000Z",
            "content_html": "<p>As I’ve <a href=\"/react-js-and-associated-bits/\">mentioned before</a>, I’m in the middle of putting together a React reference app and I’m doing it using <a href=\"/test-driven-learning-an-experiment/\">Test Driven Development</a>.  The problem is, the standard tools for implementing ES2015 code coverage with Jest make it hard to see at a glance if you have 100% code coverage or not because of some issues with the way Jest tells Babel to do the transformations by default, the way Babel transforms the code and implements the auxiliaryCommentBefore option and the way that Istanbul parses the ignore next comments.</p>\n<p>I’ve been working on solving this problem for the last month and a half off and on.  I’ve even posted a question about this on <a href=\"//stackoverflow.com/questions/35986316/reactjs-0-9-code-coverage-with-es2015-class-keyword\">Stack Overflow</a>, so I’m pretty sure no one else has a solution for this yet.  I’m not going to say my solution is the best way to solve this problem, but it is a solution, which is better than what we have so far.</p>\n<p><img src=\"/uploads/2016/04/image-5.png\" alt=\"ES2015 Code Coverage and Jest\" title=\"ES2015 Code Coverage and Jest\"></p>\n<h2 id=\"Diagnostics\"><a href=\"#Diagnostics\" class=\"headerlink\" title=\"Diagnostics\"></a>Diagnostics</h2><p>By default, when Babel transforms your code, it inserts additional functions into the code that it can call to replace the code you wrote that does not yet conform to the syntax you’ve used.  This code gets inserted at the top of the file and shows up in your code coverage reports as several conditions that didn’t get fired.  Yes, it inserts code it never uses because the functions have to work under a variety of scenarios.</p>\n<p>For those who are interested in how I figured this out.  The transform results are located in node_modules&#x2F;jest-cli&#x2F;.haste_cache.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-One\"><a href=\"#ES2015-Code-Coverage-Fix-One\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix One\"></a>ES2015 Code Coverage Fix One</h2><p>OK, so the standard recommended fix for something like this is to place</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure>\n\n<p>Prior to those functions.  And it just so happens that both Jest and Babel provide a mechanism for adding this comment by using the auxiliaryCommentBefore option.</p>\n<p>Only there are two problems with this.</p>\n<h3 id=\"Problem-One\"><a href=\"#Problem-One\" class=\"headerlink\" title=\"Problem One\"></a>Problem One</h3><p>If you just set the property like this:</p>\n<p>auxiliaryCommentBefore: ‘istanbul ignore next’</p>\n<p>Your code will get transformed so that any functions added by Babel will end up looking like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*istanbul ignore next*/</span><span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>But in order for Istanbul to pickup this comment, the code needs to look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span> <span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>While getting the spaces on either side of ‘istanbul ignore next’ is a simple matter, we have no real control over the space that is necessary between the comment marker and the function keyword.</p>\n<h3 id=\"Problem-Two\"><a href=\"#Problem-Two\" class=\"headerlink\" title=\"Problem Two\"></a>Problem Two</h3><p>The second problem with this “fix” is that even if modify the Babel code so that the comment gets inserted correctly, it doesn’t get inserted before EVERY function that Babel inserts.  If it inserts a group of functions, which it does regularly in my code, it only inserts the comment before the first function.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-Two\"><a href=\"#ES2015-Code-Coverage-Fix-Two\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix Two\"></a>ES2015 Code Coverage Fix Two</h2><p>What if we didn’t insert the functions in our code?  Well, it just so happens that we can do that relatively easily.</p>\n<p>There is a plug-in for Babel called ‘<a href=\"//www.npmjs.com/package/babel-plugin-transform-runtime\">transform-runtime</a>’.  What this plug-in does is that it requires in the functions rather that pasting them into your code.  This way, the functions don’t exist in your code so Istanbul never sees the function block.  Pretty cool.</p>\n<p>You can add this to either your .babelrc file or the Babel section of your package.json file by adding a “plugins” section</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;transform-runtime&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>along with the “presets” section you should already have.</p>\n<h2 id=\"Remaining-Issue\"><a href=\"#Remaining-Issue\" class=\"headerlink\" title=\"Remaining Issue\"></a>Remaining Issue</h2><p>While using transform-runtime takes care of most of the issues, there are two functions that still don’t get covered.  In fact, when you look at the transform-runtime code, you find that they are explicitly excluded and if you include them, your code won’t transpile at all.</p>\n<p>The good news is, it is only two functions and they both show up as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> _interop...</span><br></pre></td></tr></table></figure>\n\n<p>If we can get a hold of the code as it is being transformed, we should be able to do a search and replace to get the correct ‘istanbul ignore next’ string in place prior to the functions.</p>\n<p>Well, it just so happens that Jest has the ability to do exactly that.</p>\n<h2 id=\"ES2015-Code-Coverage-Final-Fix\"><a href=\"#ES2015-Code-Coverage-Final-Fix\" class=\"headerlink\" title=\"ES2015 Code Coverage Final Fix\"></a>ES2015 Code Coverage Final Fix</h2><p>I’m assuming you’ve already installed <a href=\"//www.npmjs.com/package/babel-jest\">babel-jest</a>, but just in case, if you have not, install it now.  Install it using –save-dev because we are going to want to be able to modify the code.</p>\n<h3 id=\"Quick-fix\"><a href=\"#Quick-fix\" class=\"headerlink\" title=\"Quick fix:\"></a>Quick fix:</h3><p>The proper way to fix this would be to write your own version of babel-jest.  But we are going for a quick fix.  Maybe we can get Facebook to implement the changes from this post.  Meanwhile, here is what you want to do.</p>\n<p>Locate the src&#x2F;index.js file in the node_modules&#x2F;babel-jest directory.  At the time of this writing, the current version looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This source code is licensed under the BSD-style license found in the</span></span><br><span class=\"line\"><span class=\"comment\"> * LICENSE file in the root directory of this source tree. An additional grant</span></span><br><span class=\"line\"><span class=\"comment\"> * of patent rights can be found in the PATENTS file in the same directory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">        <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The first change that you want to make here is to comment out the auxiliaryCommentBefore line.  We no longer need that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\"><span class=\"comment\">//        auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that what gets returned is the resulting transform of the code.  We want to execute a search and replace on the transformed code.  So, instead of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">   <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">   filename,</span><br><span class=\"line\">   <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">   <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;).<span class=\"property\">code</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What we want want to do is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">  <span class=\"comment\">//auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">  filename,</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">  <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"property\">code</span></span><br><span class=\"line\">    .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/function\\s_interop/g</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27; /* istanbul ignore next */ function _interop&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES2015-Code-Coverage-With-Jest-Summary\"><a href=\"#ES2015-Code-Coverage-With-Jest-Summary\" class=\"headerlink\" title=\"ES2015 Code Coverage With Jest - Summary\"></a>ES2015 Code Coverage With Jest - Summary</h2><ol>\n<li>Download and install babel-plugin-transform-runtime.</li>\n<li>Add “plugins”: [“transform-runtime”] to either .babelrc or the babel section of your package.json file</li>\n<li>Download and install babel-jest</li>\n<li>Modify babel-jest&#x2F;src&#x2F;index.js as indicated above.</li>\n</ol>\n",
            "tags": [
                "unit test",
                "react.js",
                "babel",
                "es2015",
                "es6",
                "jest"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-types-nuance/",
            "url": "http://davembush.github.com/javascript-types-nuance/",
            "title": "JavaScript Types Nuance",
            "date_published": "2016-04-28T11:30:00.000Z",
            "content_html": "<p>I was once teaching a class on JavaScript to a group of C# developers when someone asked a very logical question, “Are JavaScript Types all derived from Object?” I loved teaching this particular group because they were actively engaged in the material.  So many times, when I teach, the students simply absorb what I say, but they don’t interact with it.  They never ask the question, “What are the implications of what is being said.” My initial instinct was to say ‘no’ based on my experience with the language.  But then as I thought about it later, I thought, “But when I use the debugger on what seems to be a primitive, don’t I see it as an object?”  And as it turns out, my instinct was right.  Not everything in JavaScript is an object.  Although there is quite a bit that you wouldn’t think was an object that is.</p>\n<p>Now that we’ve covered <a href=\"/javascript-objectswhat-you-dont-know-can-hurt-you/\">JavaScript Objects</a> and <a href=\"/javascript-fields/\">JavaScript Object Fields</a>, it is time to move on to the specifics of JavaScript types.</p>\n<p>So, why is it, when I look at some primitive values, I see them as objects?  And which types are objects and which are primitives?</p>\n<figure>![](/uploads/2016/04/image-4.png \"image\") Photo via [Visualhunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"A-Review-of-JavaScript-Types\"><a href=\"#A-Review-of-JavaScript-Types\" class=\"headerlink\" title=\"A Review of JavaScript Types\"></a>A Review of JavaScript Types</h2><p>The fundamental types available to us in JavaScript are:</p>\n<ul>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n<li>null</li>\n</ul>\n<p>However, if you use the <code>typeof</code> operator on null, you’ll get back “object” as the type.</p>\n<p>While <code>null</code> is a unique type, it makes sense for <code>typeof</code> to return “object” since the only kind of variable that could return a <code>null</code> would be an <code>object</code>.</p>\n<h2 id=\"When-is-an-object-not-and-object\"><a href=\"#When-is-an-object-not-and-object\" class=\"headerlink\" title=\"When is an object not and object?\"></a>When is an object not and object?</h2><p>There is one other common type that is a bit of an odd ball.  The function type.</p>\n<p>What makes function odd is that it is, technically it is a sub-type of object.  This is good to know, and will put you light years ahead of your peers once you realize the implications.  Because a function IS an object, you can give a function additional fields.  In fact, a common way to override a function looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalSubstring;</span><br><span class=\"line\"><span class=\"keyword\">var</span> substringOverload = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">originalSubstring</span>(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">originalSubstring = a.<span class=\"property\">substr</span>;</span><br><span class=\"line\">a.<span class=\"property\">substr</span> = substringOverload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p>(Note: the code above won’t really work, I’m just illustrating a point).</p>\n<p>You may have done something like the above using functions in libraries.  As long as the field is not read-only, you can do this kind of overload of a function.</p>\n<p>But, a better way, now that we know that a function is just an object, is to assign the old function as a field of the original function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> substringOverload = <span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> substringOverload.<span class=\"title function_\">substr</span>(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">substringOverload.<span class=\"property\">substr</span> = a.<span class=\"property\">substr</span>;</span><br><span class=\"line\">a.<span class=\"property\">substr</span> = substringOverload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"What-about-Arrays\"><a href=\"#What-about-Arrays\" class=\"headerlink\" title=\"What about Arrays?\"></a>What about Arrays?</h2><p>Another place you may not be used to thinking clearly about variable types is with Arrays.  You might think an array is its own type.  That an Array is an Array.  But in reality, Arrays are a type of Object.  In fact, if you were to run the typeof operator against a variable that holds an Array, you would see that it is an object.</p>\n<p>Once again, because you know this, you can use this information to your advantage.</p>\n<p>You could provide your array, its own implementation of each:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">each</span> = <span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"variable language_\">this</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This is essentially how polyfills are created.  If you write one, make sure you put in the additional code to make sure the function isn’t already implemented.  And don’t ever add a function to a native object like this without it having been declared by the standards committee as a function that is part of the spec.  Polyfills exist so that you can make older JavaScript implementations work as though they were using newer standards.  Not so we can add our own new functions to the language.  If you do, you could find yourself having a maintenance nightmare on your hands some day in the future.</p>\n<h2 id=\"Newing-a-Type\"><a href=\"#Newing-a-Type\" class=\"headerlink\" title=\"Newing a Type\"></a>Newing a Type</h2><p>You can also write JavaScript that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> someBool = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Which will give you an Object that contains the value we passed in.  And each of those object will have Number, String, or Boolean functions available to it.</p>\n<p>But, you don’t have to new a Number, String or Boolean to get those functions.  You can get the same ability by simply assigning the value to the variable.  Under the hood, when you want to use the function that are available to all objects, the JavaScript runtime will “box” the number, string, or boolean as an object so that you can access, for example, hasOwnProperty().</p>\n",
            "tags": [
                "javascript",
                "types"
            ]
        },
        {
            "id": "http://davembush.github.com/do-this-to-increase-your-client-side-web-development-speed/",
            "url": "http://davembush.github.com/do-this-to-increase-your-client-side-web-development-speed/",
            "title": "Do This To Increase Your Client Side Web Development Speed",
            "date_published": "2016-04-21T11:30:00.000Z",
            "content_html": "<p>Over the last year, in particular, I’ve developed a technique for developing the client side of a web application using JavaScript, HTML and CSS that has significantly improved my development speed.  Once I tell you, it will be obvious.  At least, it is to me … now.  But as obvious as it is, I rarely see this technique used on any of the applications my peers are working on.</p>\n<p>And while this technique is an outgrowth of my involvement with TDD, this particular technique can be used with or without TDD.</p>\n<figure>![](/uploads/2016/04/image-3.png \"Do This To Increase Your Client Side Web Development Speed\")<figcaption>Photo credit: [JD Hancock](//www.flickr.com/photos/jdhancock/4367347854/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Presentation-First\"><a href=\"#Presentation-First\" class=\"headerlink\" title=\"Presentation First\"></a>Presentation First</h2><p>For most of my career, I’ve always like to develop applications from the top down.  That is, get the GUI up first.  Don’t make it work.  Just get a picture up that you can show to the client.</p>\n<p>This isn’t the “trick” I have in mind for improving your speed.  But if you aren’t already doing this, the trick won’t help you much.</p>\n<p>The reason “Presentation First” is so important is because of a simple truth I’ve come to realize over the years.  “No one really knows what they want until they see it.”  This is particularly true in software development because, try as we have over the last several decades, we still have not come up with a way of showing in pictures what it is we are going to build.</p>\n<p>The other reason developing the GUI first is important is because it gives the client a sense that you are making rapid development.  It is amazing how much time you’ll have without interruption when you’ve been able to show something that looks really close to the real thing.</p>\n<h2 id=\"Attaching-Data\"><a href=\"#Attaching-Data\" class=\"headerlink\" title=\"Attaching Data\"></a>Attaching Data</h2><p>The next step in my development cycle typically involves attaching data to the presentation.  Most of the programmers I know do this by making whatever REST call they need to make to the server and displaying whatever they get back.  There are at least three problems with this.</p>\n<p>First, as the data in your database changes, what displays in your presentation changes.  If you are working with a local database that you have complete control over, that is a minor problem.  But if you are, as so many of my clients are, using a common development database, you can’t be sure that the data you are playing with won’t change.</p>\n<p>Second, you really can’t be sure that what you are displaying is actually the correct fields unless you go into your database and change the contents of the fields to represent what the fields contain so that you can display that on your data.</p>\n<p>Finally, developing in this way is going to be much slower than it needs to be.</p>\n<h2 id=\"The-Trick\"><a href=\"#The-Trick\" class=\"headerlink\" title=\"The Trick\"></a>The Trick</h2><p>Here’s the deal.  The way most of us develop applications, once we get to the part where we need to attach some data, we attach it directly to the REST end point.  At the very least, this slows our development time down because every time we load the app to make sure it is doing what we had in mind, we have to wait for it to load the data from the server as well.</p>\n<p>But aside from the other problems I mentioned above, it also means that we are dependent on whoever is developing those other end points.  If it is you, it isn’t so bad.  But lately, I’ve been working on projects where the only thing I’ve been responsible for is developing the client side.  In my last contract, I was brought in to build an application that was dependent on data I had no control over.  I did write a little C# code to get the data from a web service into a form my JavaScript client side code could use.  But most of my time was spent writing code on the client side.</p>\n<p>But it didn’t matter, because I mocked out the data on the client side until the server side data was ready.</p>\n<p>In fact, I was able to work ahead of the guy who was providing the data BECAUSE I was mocking out the data.  The project manager spent most of that contract worried that I would end up stalled because the data wasn’t ready and I spent the same amount of time assuring her that I wouldn’t get stalled until the ONLY thing I had left to do was hook the application up to real data.</p>\n<p>At my current contract, I’m working on a team that uses Java for the back end.  How’s that?  A .NET guy working on a Java team?  Well, you see, it doesn’t matter.  I was brought in as a JavaScript specialist.  And my development methodology is the same.  I am using mock data.  When I am finally ready to see it all working live, I’ll call the REST end points that I need.</p>\n<p>But in this particular Java environment, there is an additional hurdle.  If I were to develop this application the way most of my peers are developing, I would need to build the application into JAR, WAR and EAR files and copy those files over to the JBoss server.  While I have created a script for this using Node JS and NPM, the time this takes is a bit excessive.</p>\n<p>So, instead, what I’ve done is I’ve created a separate project for the bits I’m working on.  I’ve setup an Express server using Node JS and installed proxy middleware as my last route handler.  It is setup to point to the JBoss server for anything it can’t find under Node.  So, any files I need that have already been built, I can grab from JBoss, while all of my work runs under Express.</p>\n<p>(Yes, I know Eclipse will auto deploy relatively quickly, but from what I’ve seen of the JavaScript editor, I’m not a fan of Eclipse.  Actually, from what I’ve seen of Eclipse, I’m not a fan.)</p>\n<p>What this means is that I can click the run button to fire up my Express server and it loads my local JavaScript and any stuff I need from JBoss via the proxy.  I never have to deploy my work.  And I only need to wire in the real data once I have everything else working.</p>\n<p>I have the added advantage of being able to switch between my local mock data and the real data simply by loading my local data when I want mocks or the remote data when I want the real deal.  Kind of like you might do with a DI container in .NET only on the client side.</p>\n<h2 id=\"TDD-Becomes-Trivial\"><a href=\"#TDD-Becomes-Trivial\" class=\"headerlink\" title=\"TDD Becomes Trivial\"></a>TDD Becomes Trivial</h2><p>And now that I’m working with known, mock data, implementing Test Driven Development is trivial.  Well, for me it is trivial.  You still need to make sure you write testable code.  But at least you don’t have to worry about the data part of TDD.</p>\n",
            "tags": [
                "javascript",
                "client side",
                "development"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-mvvm-you%E2%80%99re-probably-doing-it-wrong/",
            "url": "http://davembush.github.com/javascript-mvvm-you%E2%80%99re-probably-doing-it-wrong/",
            "title": "JavaScript MVVM - You’re (Probably) Doing it Wrong",
            "date_published": "2016-04-14T11:30:00.000Z",
            "content_html": "<p>If you are using one of the many frameworks that say they are using JavaScript MVVM, you might not be using it the way it should be used. Many of my clients aren’t.</p>\n<p>This article will attempt to answer three questions.</p>\n<ul>\n<li>What is MVVM?</li>\n<li>What are the advantages of MVVM?</li>\n<li>What are good MVVM coding practices?</li>\n</ul>\n<figure>![](/uploads/2016/04/image-1.png \"JavaScript & MVVM\")<figcaption>Photo credit: [uka0310](//www.flickr.com/photos/uka0310/8038385310/) via [VisualHunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-JavaScript-MVVM\"><a href=\"#What-is-JavaScript-MVVM\" class=\"headerlink\" title=\"What is JavaScript MVVM?\"></a>What is JavaScript MVVM?</h2><p>The first question we need to ask before we can ever start coding is, “What is MVVM?”  The reason for this is that if you don’t understand what this design pattern is attempting to do, you’ll probably ending up making some pretty severe coding mistakes when it comes time to implement it.</p>\n<p>In the MVVM design pattern, like the MVC design pattern, the first M represents the Model and the first V represents the View.  As with MVC, the Model represents the data you are trying to manipulate.  The View represents the presentation layer.  In MVVM, there is also an entity called a ViewModel which is an object or set of objects that represent the View’s State.  This would include any data you want to present from your Model as well as ancillary states such as what elements are enabled&#x2F;disabled or visible&#x2F;hidden.  Not that these are the only items.  This is just a few examples.</p>\n<p>What makes MVVM cool is that you don’t have to worry about how data gets from the View to the ViewModel or from the ViewModel back into the View.  That all happens automatically.  Although, depending on the implementation, you might have to write a bit more code to notify the View that something changed in the ViewModel so that it knows to update itself.</p>\n<p>But, you may be left wondering, “Where do event handlers go?” Well, that is one of the things I find confusing about calling it MVVM.  Because in every implementation I’ve ever worked on, there is still a controller of some sorts.  Or, call it a ViewController.  It is the thing that responds to events in the view and updates the ViewModel as needed.</p>\n<p>So, in general, you have a View that updates the ViewModel automatically and fires events to the ViewController.  This is all specified declaratively.  When an event is fired, the ViewController responds to the event and updates the ViewModel with any state changes.  When the ViewModel changes, it notifies the View that the View should update the presentation.  When the controller needs to know about the current state of the View, it ask the ViewModel for that information because it should be reflected there.</p>\n<p><img src=\"/uploads/2016/04/image-2.png\" alt=\"JavaScript MVVM\" title=\"JavaScript MVVM\"> If you’ve ever used one of the many MVVM frameworks out there, you’ll recognize that many of them combine the ViewModel and the ViewController into one entity.  I’ve separated them out here for clarity and because I believe that if all possible, they should be maintained separately to maintain the Single Responsibility Principle.  However, I recognize that the best you may be able to do is provide to separate sections in one class.  The main point here is that any state changes to the view happen because the ViewModel was updated and not because the ViewController called into the View to make the change.</p>\n<h2 id=\"What-JavaScript-MVVM-is-Not\"><a href=\"#What-JavaScript-MVVM-is-Not\" class=\"headerlink\" title=\"What JavaScript MVVM is Not\"></a>What JavaScript MVVM is Not</h2><p>One rookie mistake with any MV* design pattern is that many programmers think that the View, ViewModel or ViewController are the only three places where code can live in this pattern.  But the truth of the matter is, the pattern only describes how to handle the organization of your presentation code.  MVVM does not specify where your business rules should be located.  But one place they should not go is in your ViewController.  The only code that should be in your ViewController is code that updates or retrieves information from the ViewModel, or code that calls out to another class to perform some sort of business rules.</p>\n<h2 id=\"Advantages-of-JavaScript-MVVM\"><a href=\"#Advantages-of-JavaScript-MVVM\" class=\"headerlink\" title=\"Advantages of JavaScript MVVM\"></a>Advantages of JavaScript MVVM</h2><p>While there are many advantages to using MVVM, the top three on my list are:</p>\n<h3 id=\"View-Refactoring\"><a href=\"#View-Refactoring\" class=\"headerlink\" title=\"View Refactoring\"></a>View Refactoring</h3><p>I’ve worked on several systems in the past where it was necessary for my code to know what more about the View that it should have.  Whenever I wanted to change the ID of an element in my view, it was necessary for me to update code in other parts of my system or the code would break.  When you are using MVVM properly, you can not only change your view however you want, but you don’t have to even have an ID if you don’t need to for some other reason (like running Selenium Tests).</p>\n<h3 id=\"Interchangeable\"><a href=\"#Interchangeable\" class=\"headerlink\" title=\"Interchangeable\"></a>Interchangeable</h3><p>In fact, if you wanted to, you could create multiple views and associate each of them with the same ViewModel and ViewController.  You might create a View for a version of you application that runs on the desktop and another View for a version that runs on a phone.  Implemented correctly, you may have state information in your ViewModel that never makes it to the View because the version of the View you are currently running doesn’t display that information.</p>\n<h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><p>For me, the most compelling reason to us MVVM is because it makes it much easier to test my application.  You only need to be able to tell the ViewController where the ViewModel is.  You can call the event handlers directly in your test and verify that they update the ViewModel correctly without ever having to create a View.  Since the View is declarative, you can trust that your framework will do what it should and leave testing the View to a larger Application level test rather than trying to unit test it.</p>\n<h2 id=\"JavaScript-MVVM-Best-Practices\"><a href=\"#JavaScript-MVVM-Best-Practices\" class=\"headerlink\" title=\"JavaScript MVVM Best Practices\"></a>JavaScript MVVM Best Practices</h2><h3 id=\"Never-Call-the-View-from-the-ViewController\"><a href=\"#Never-Call-the-View-from-the-ViewController\" class=\"headerlink\" title=\"Never Call the View from the ViewController\"></a>Never Call the View from the ViewController</h3><p>There are several ways I typically see this rule violated.  The first, and most obvious is when the view is called to retrieve or set state information instead of using the ViewModel.  But another way I typically see this violated is when programmers insist or writing event wire-up code in the ViewController.  The reason wiring up event handlers is a bad idea is because now I have to have some sort of DOM locator code in my ViewController.  This means if I change the identifier or the location of the DOM item, I have to come in and change my locator code.  One way of testing if the code you are writing belongs where you are writing it is to ask the question, “If I executed this code without the View, would it still work correctly?”</p>\n<h3 id=\"Event-Handlers-Should-Be-Light\"><a href=\"#Event-Handlers-Should-Be-Light\" class=\"headerlink\" title=\"Event Handlers Should Be Light\"></a>Event Handlers Should Be Light</h3><p>As I mentioned above, you don’t want to have any more code in your ViewController than is absolutely necessary to update the ViewModel.  This will often mean calling out to some other object to get the actual work done.</p>\n<h3 id=\"ViewModel-Should-Only-Contain-ViewState\"><a href=\"#ViewModel-Should-Only-Contain-ViewState\" class=\"headerlink\" title=\"ViewModel Should Only Contain ViewState\"></a>ViewModel Should Only Contain ViewState</h3><p>It might be tempting to put executable code in your ViewModel at times.  Resist this urge.  If you need a computed property, that’s one thing.  If you start processing business logic, you are probably headed down the wrong path.  My general test here is this.  If I need to write a test case against my ViewModel code directly to get 100% code coverage, I’ve probably coded something wrong.  Of course, you have to be writing unit test and a code coverage tool for this rule to work.</p>\n<h2 id=\"If-You-Think-You-Need-to-Violate-A-Best-Practice\"><a href=\"#If-You-Think-You-Need-to-Violate-A-Best-Practice\" class=\"headerlink\" title=\"If You Think You Need to Violate A Best Practice\"></a>If You Think You Need to Violate A Best Practice</h2><p>Finally, I want to address the issue of, “What if…” This past week, I ran into a situation where the control I was using was not setup to implement MVVM the way my framework intended.  So, this problem is fresh in my mind.  The solution is almost always to extend the component and add in the hooks you need so that you can use the framework properly.  While the temptation to just get something working will be strong, your overall productivity will suffer if you start bending the rules.  If you can’t figure out how to get the code to submit, ask for help.  You may need to break some of the rules in the extension, but at least the violations are isolated from the rest of your code in such a way that if the component ever gets fixed, you can go to one location to update your code.</p>\n",
            "tags": [
                "javascript",
                "mvvm"
            ]
        },
        {
            "id": "http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/",
            "url": "http://davembush.github.com/ext-js-6-by-sencha-the-good-the-bad-the-ugly/",
            "title": "Ext JS 6 by Sencha - The Good, The Bad, The Ugly",
            "date_published": "2016-04-07T11:30:00.000Z",
            "content_html": "<p>Long time readers may remember that I started using Ext JS about 3 years ago.  At the time, I was using version 4.2.2.  I recently started a new contract where they are using Ext JS 6.0.1.  I have to say, this version solves a lot of the architectural issues I had with the 4.x series.  But, there are still problems.</p>\n<p>Since I’ve provided an evaluation of <a href=\"/angular-2-first-impressions-compared-to-angular-1/\">Angular 2</a> and <a href=\"/react-js-and-associated-bits/\">React JS</a>, I thought providing an evaluation of the current version of Ext JS would be appropriate since these three seem to be the main players in the corporate world.</p>\n<figure>![](/uploads/2016/04/image.png \"Ext JS by Sencha - The Good, The Bad, The Ugly\")<figcaption>Photo credit: [sanbeiji](//www.flickr.com/photos/sanbeiji/5606497634/) via [Visual Hunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Ext-JS-The-Good\"><a href=\"#Ext-JS-The-Good\" class=\"headerlink\" title=\"Ext JS - The Good\"></a>Ext JS - The Good</h2><h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>I’ve always had three major complaints about Ext JS.  Of the three, the fact that Ext JS is nearly impossible to test is the one that drove me away.  In fact, I almost didn’t interview for the contract I have now because they are using Ext JS.  This is because the 4.2 version that I was using implemented what they called the MVC framework.  The problem is, the MVC framework they implemented was not anything <a href=\"/designPatterns\">the Gang of Four</a> would recognize.  Once I realized that what they were calling MVC wasn’t really MVC, I was able to learn how to use the product much better.</p>\n<p>But being the TDD guy that I am, I was always frustrated by their implementation of MVC because in order to test anything in the Controller, I had to have the view available.  And while I tried several ways of mitigating this problem, I was never completely satisfied with the solution.  I ought to be able to test my controller without a view, or if I have to have a view, it should be some sort of fake view, or be able to render into a fake DOM like React JS does.</p>\n<p>But, in Ext JS 6, they’ve provided an alternate framework.  This time it is also more accurately named.  They have provided an MVVM implementation.  In the View, you provide your layout, declarative syntax to access the View’s state from the ViewModel and to specify the event handlers using listener blocks that tell the view what methods to call in the associated ViewController class.</p>\n<p>In the ViewController, your methods can access the ViewModel by calling getModel() and can set the state of the view by calling the ViewModel’s set() method.  Once this is done, the View can update using the ViewModel’s new state.</p>\n<p>What this means for testing is that I can test without the View by overriding the ViewContoller.getModel() method to return the ViewModel.  Run my test for a method and check the state of the ViewModel.  Look Ma, no View!</p>\n<h3 id=\"Everything-You-Need\"><a href=\"#Everything-You-Need\" class=\"headerlink\" title=\"Everything You Need\"></a>Everything You Need</h3><p>One of the biggest selling points for using Ext JS is that just about everything you could need is provided for you in once product.  Unlike Angular or React JS where one project provides the framework and another project or projects provide components, nearly everything you are going to need for your application is provided out of the box.  This is not to say that there aren’t third party providers for Ext JS, but the need for them is very limited.</p>\n<h3 id=\"Consistent-Rendering\"><a href=\"#Consistent-Rendering\" class=\"headerlink\" title=\"Consistent Rendering\"></a>Consistent Rendering</h3><p>One of the major attractions Ext has offered is that you don’t need to worry about cross browser rendering issues.  If you still need to support REALLY old browsers, this may still be a big selling point for you.  I think this will matter less in the future as the browsers continue to stabilize around standards.</p>\n<h3 id=\"Responsive-x2F-Adaptive\"><a href=\"#Responsive-x2F-Adaptive\" class=\"headerlink\" title=\"Responsive&#x2F;Adaptive\"></a>Responsive&#x2F;Adaptive</h3><p>Even though Ext JS uses a none standard way of rendering controls (see below) they do manage to achieve Adaptive and Responsive designs.</p>\n<h3 id=\"Ability-to-Control-DOM-Manipulation\"><a href=\"#Ability-to-Control-DOM-Manipulation\" class=\"headerlink\" title=\"Ability to Control DOM Manipulation\"></a>Ability to Control DOM Manipulation</h3><p>Finally, if you are having trouble achieving performance with the current way you are rending DOM changes, you will be happy to know that Ext JS does provide a way of turning of rendering to the DOM while you make all the changes and then turning it back on to do the final rendering.  But, at least my last usage of this, indicates that it doesn’t really turn off ALL DOM manipulation.  If you are inserting new DOM elements, those go out to the screen.  All Ext JS really does is to turn off their layout code.</p>\n<h3 id=\"Who-Ya-Gonna-Call\"><a href=\"#Who-Ya-Gonna-Call\" class=\"headerlink\" title=\"Who Ya Gonna Call?\"></a>Who Ya Gonna Call?</h3><p>One of the strongest reasons many organizations choose Ext JS is because the price of the license gives you access to Sencha support.  Companies I’ve worked for have used this for everything from “My code doesn’t work, what am I doing wrong?” and actually getting an answer to “I think you have a bug here.” and getting the bug fixed.  Kind of a private StackOverflow with direct access to the programmers who wrote the framework.</p>\n<h2 id=\"Ext-JS-The-Bad\"><a href=\"#Ext-JS-The-Bad\" class=\"headerlink\" title=\"Ext JS - The Bad\"></a>Ext JS - The Bad</h2><h3 id=\"Lock-In\"><a href=\"#Lock-In\" class=\"headerlink\" title=\"Lock In\"></a>Lock In</h3><p>If you decide to use Ext JS, you are really making a much more significant commitment than if you were choosing to use either Angular or React.  With either of those two, I can write standard JavaScript and I can mix and match several different existing frameworks.  Since just about everything in Ext JS is proprietary, mixing and matching is not only frowned upon, but they warn against it.  If you are using Ext JS, you are going to use ALL of Ext JS for everything.</p>\n<h3 id=\"Use-Strict\"><a href=\"#Use-Strict\" class=\"headerlink\" title=\"Use Strict\"></a>Use Strict</h3><p>Standard JS best practice recommends placing “use strict”; at the top of you IIFE block to protect you from making stupid mistakes.  Unfortunately, you can’t do this in your Ext JS code without having to work around the problems it produces.</p>\n<h3 id=\"String-Based\"><a href=\"#String-Based\" class=\"headerlink\" title=\"String Based\"></a>String Based</h3><p>Ext JS is probably the most string based language I’ve ever seen.  While they now have plugins for some of the more popular IDEs that mitigate against the risk this imposes on your code, in terms of good solid JavaScript, there are much better ways of writing code than what Ext JS forces you into.</p>\n<h3 id=\"Nesting-Issues\"><a href=\"#Nesting-Issues\" class=\"headerlink\" title=\"Nesting Issues\"></a>Nesting Issues</h3><p>As I mentioned above, Ext JS does their own layouts in order to achieve a presentation that will look the same regardless of what browser it is running on.  However, the cost of this is that if you nest components too deeply, rendering your view or changes to your view, will take significantly longer than anyone is willing to wait around for.  So, to get around this, you end up writing sub optimal code from just about every coding principle in existence.  Specifically, DRY and SRP are difficult to achieve using Ext JS views.</p>\n<h3 id=\"Version-X-0-0-is-Always-Broken\"><a href=\"#Version-X-0-0-is-Always-Broken\" class=\"headerlink\" title=\"Version X.0.0 is Always Broken\"></a>Version X.0.0 is Always Broken</h3><p>I’ve complained about this publicly before.  But it seems to me, and everyone else I talk with that has used Ext JS that every .0.0 version is buggy.  Things that used to work in the previous version no longer work.  Despite the assertion from Sencha that they have thousands of tests.  I always wonder what kind of code coverage they have and if they have a test that covers every feature for every component they have documented.</p>\n<h2 id=\"Ext-JS-The-Ugly\"><a href=\"#Ext-JS-The-Ugly\" class=\"headerlink\" title=\"Ext JS - The Ugly\"></a>Ext JS - The Ugly</h2><h3 id=\"Ugly-HTML\"><a href=\"#Ugly-HTML\" class=\"headerlink\" title=\"Ugly HTML\"></a>Ugly HTML</h3><p>There is a lot that is ugly about Ext JS, but nothing is more visibly ugly than the HTML it produces.  This is because, in order to produces a view that will render on any browser, they’ve resorted to using HTML tables to wrap just about every standard control.  This is getting better.  There is less HTML generated in Ext JS 6 than there was in Ext JS 4, but it is still relatively ugly.</p>\n<p>And that whole nesting issue could go away tomorrow if they would give up on trying to control the rendering of the view through JavaScript.  Why do with JavaScript what CSS was designed to do and does MUCH better?!</p>\n<h3 id=\"SASS-isn’t-SASS\"><a href=\"#SASS-isn’t-SASS\" class=\"headerlink\" title=\"SASS isn’t SASS\"></a>SASS isn’t SASS</h3><p>Up until version 6, Sencha’s theming engine used standard SASS.  With version 6, they’ve dumped standard SASS for their own implementation that mostly does what SASS does but has a few embellishments that aren’t all bad, except for the fact that they still kept the SASS extensions for the files and the syntax is mostly the same.</p>\n<h3 id=\"None-Standard-JavaScript\"><a href=\"#None-Standard-JavaScript\" class=\"headerlink\" title=\"None Standard JavaScript\"></a>None Standard JavaScript</h3><p>But of all the issues I have with Ext JS 6, the one that bugs me the most is that their framework provides something that runs on JavaScript but really isn’t JavaScript.  They have their own way of declaring a class.  Their own way of instantiating a class.  Their own requires engine.  Their own bundling and minification engine.</p>\n<p>And since I can’t even use “use strict”; in what they have now – something that has been around long enough that it should be supported by every seriously used framework in existence – it makes me wonder what future embellishments to the JavaScript language we won’t be able to use because Sencha thinks they have a better idea.</p>\n<p>Will I be able to use the “class” keyword in the future instead of Ext.define()?</p>\n<h3 id=\"None-Standard-Build-Tools\"><a href=\"#None-Standard-Build-Tools\" class=\"headerlink\" title=\"None Standard Build Tools\"></a>None Standard Build Tools</h3><p>Not only does Ext JS use none standard JavaScript, but they are using their own proprietary build tools to deploy the final applications.  Along with using their own version of SASS, they also have their own implementation of bundling and minification.  Why not use gulp or grunt and allow us to bundle our apps our way?  Oh, right, they have their own implementation of requires too.  And now they want to sell us proprietary testing tools.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, is Ext JS for you?  That’s a good question.  You’ll need to evaluate if the good parts outweigh the bad parts.  It isn’t like either Angular or React have everything.  There is no perfect choice.  There is the best choice for you and your organization.</p>\n",
            "tags": [
                "javascript",
                "ext js"
            ]
        },
        {
            "id": "http://davembush.github.com/an-explanation-of-the-flux-pattern/",
            "url": "http://davembush.github.com/an-explanation-of-the-flux-pattern/",
            "title": "An Explanation of the Flux Pattern",
            "date_published": "2016-03-31T11:28:00.000Z",
            "content_html": "<p>Over the last couple of weeks, I’ve mentioned that I’ve been learning React JS.  First in the article “<a href=\"/react-js-and-associated-bits/\">Reaction to React JS and Associated Bits</a>” and then last week in my article “<a href=\"/test-driven-learning-an-experiment/\">Test Driven Learning</a>”. </p>\n<p>In the first article, I mentioned that if you use React JS, you’ll probably end up using the Flux design pattern and since there are multiple ways of implementing flux, getting a clear definition of what it is and how it should work can be confusing.  At least, I found it confusing.</p>\n<p>And now that I’ve figured it out, I thought it might be helpful both to myself and to the programming community at large if I offered my own Explanation of the Flux Pattern.  At the very least, it will give me one more way of solidifying the concept in my own brain.  Maybe it will be helpful to you as well.</p>\n<figure>![](/uploads/2016/03/image-5.png \"Flux\")<figcaption>Photo credit: [jeffreagan](//www.flickr.com/photos/jeffreagan/22033828931/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Flux-“One-Way-Data-Binding”\"><a href=\"#Flux-“One-Way-Data-Binding”\" class=\"headerlink\" title=\"Flux “One Way Data Binding”\"></a>Flux “One Way Data Binding”</h2><p>One of the first concepts you’ll hear when you start to learn Flux is that Flux implements “One Way Data Binding.”  This is unfortunate because if you start implementing Flux thinking it is any kind of data binding, you are already headed in the wrong direction.  Data binding holds with it this concept that things will happen automatically and declaratively.  Neither is true in the Flux world.  In fact, the reason Flux exist at all is because, in the Flux world, control over what happens when is the reason for its existence.  So, forget data binding.  Flux is “One Way Data Flow”.</p>\n<h2 id=\"Pub-x2F-Sub\"><a href=\"#Pub-x2F-Sub\" class=\"headerlink\" title=\"Pub&#x2F;Sub\"></a>Pub&#x2F;Sub</h2><p>Flux is heavily reliant on the pub&#x2F;sub model.  Pub&#x2F;sub is short for Publish&#x2F;Subscribe.  This comes from the real world.  You subscribe to a newspaper, or magazine, or… whatever.  Every time the thing you subscribe to is published, you get it.</p>\n<p>It is no different in Flux.  An object will subscribe to another object.  Anytime the second object does something worth publishing, the first object gets notified. </p>\n<p>The beauty of implementing a system in this way is that the publisher doesn’t need to know anything about the subscribers.  If there is a subscriber, the subscriber gets notified.  If there is no subscriber, nothing happens.  The subscriber does need to know something about the publisher so that he can say he wants to know when something is happening.  While you might thing this would create a tight coupling between the two, it doesn’t have to.</p>\n<h2 id=\"Singletons\"><a href=\"#Singletons\" class=\"headerlink\" title=\"Singletons\"></a>Singletons</h2><p>There is a pattern in object oriented programming called “Singletons.”  Just like the name implies, this means there is only one object of that type in the system.  Some people consider Singletons evil.  But the benefit, especially in the Flux world, is that finding an instance of the object is easy.  You just ask for it.</p>\n<h2 id=\"Flux-Dispatcher\"><a href=\"#Flux-Dispatcher\" class=\"headerlink\" title=\"Flux Dispatcher\"></a>Flux Dispatcher</h2><p>The Dispatcher is the central Flux object.  If you are using the Flux implementation from Facebook, your Dispatcher object will extend the Dispatcher class.  There really isn’t much too it, and you may be able to get away with just using the Dispatcher class directly.  But I create a new derived object so I can extend it if I need to.</p>\n<p>Everything in the system that needs to know when something interesting happens in the view layer of your code, subscribes to the dispatcher.  And anytime something happens in the view layer that other objects in your system might want to know about, the dispatcher is called with a message telling it what action we are looking to perform.</p>\n<p>So, in the demo app I am building, when the main view loads, the componentWillMount() method in my view sends the dispatcher a message telling it that it is looking for a list to display.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">AppDispatch</span>.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">actionType</span>:<span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  On the other end of this request, I have a store that has registered with the dispatcher.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">AppDispatcher</span>.<span class=\"title function_\">register</span>(<span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">actionType</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>:</span><br><span class=\"line\">            store.<span class=\"title function_\">list</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that I am using “enumerations” to keep the code clean.  The reality is the ActionTypes are just strings.</p>\n<h2 id=\"Flux-EventEmitter\"><a href=\"#Flux-EventEmitter\" class=\"headerlink\" title=\"Flux EventEmitter\"></a>Flux EventEmitter</h2><p>We have notifications flowing down to our store to tell it we need some information or want it to do something, like save the data.  But once that is complete, how do we let the view know that the information it needs to display has changed? Well, it is actually very similar.  The view tells the store, “Hey, any time you do something interesting with the data, let me know.</p>\n<p>So, once again we setup a Pub&#x2F;Sub relationship.  This time, the store is the publisher and the view is the listener.  So, in our view, we’ll setup the listener by adding it to our componentWillMount() method</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">CrudStore</span>.<span class=\"title function_\">addChangeListener</span>(self.<span class=\"property\">onChange</span>);</span><br><span class=\"line\">    <span class=\"title class_\">AppDispatc</span></span><br><span class=\"line\">    <span class=\"string\">``</span><span class=\"string\">`h.dispatch(&#123;actionType:ActionTypes.CRUD_LIST&#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">And in our store, our list() method (in this case) will send the message.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</span><br><span class=\"line\"><span class=\"title function_\">list</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    superAgent.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/contact&#x27;</span>).<span class=\"title function_\">end</span>(<span class=\"function\">(<span class=\"params\">error,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!error)&#123;</span><br><span class=\"line\">            response.<span class=\"property\">body</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                item.<span class=\"property\">id</span> = item.<span class=\"property\">_id</span>;</span><br><span class=\"line\">                item.<span class=\"property\">dob</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">dob</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitChange</span>(<span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’m using superAgent here to make an ajax call that will get me the list.  When it returns, I call emitChange which will eventually call the callback I passed in from the view to tell the view that something changed.</p>\n<h2 id=\"Push-vs-Pull\"><a href=\"#Push-vs-Pull\" class=\"headerlink\" title=\"Push vs Pull\"></a>Push vs Pull</h2><p>Now, there seems to be two minds about how this all should work.  Do you just notify the view that something happened and let the view go get the data it needs?  Or do you pass the data the view will need along with the notification? It would seem to me that while either one will work, if we think of Flux as “One Way” data flow, or even One Way data binding, it makes a lot more sense to push the data around.  And so, what you’ll see me do in the callbacks that live in my view code, is that they will receive the data and push it into the view state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onChange</span>(<span class=\"params\">type,data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>)&#123;</span><br><span class=\"line\">        self.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">data</span>: data.<span class=\"property\">body</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Visually\"><a href=\"#Visually\" class=\"headerlink\" title=\"Visually\"></a>Visually</h2><p><img src=\"/uploads/2016/03/image-6.png\" alt=\"image\" title=\"image\"> The arrows represent the direction of data flow.  You can assume that if the data is flowing to something, there was a corresponding listener setup.</p>\n<p>The top windows represent the view.  The cog represents the dispatcher (you can see that it sends the notification to everything) and the disks represent the data stores.  You should note that the dispatcher notifies all of the stores because there is only one dispatcher to listen to.  Finally, since not all of the views care about all of the stores, I send notifications to particular views that care.</p>\n<p>There may be cases where you would have something at the store level that isn’t, technically, a store.  That’s OK.  But I think 99% of the time, you’ll end up having stores be thing thing that the dispatchers send information to.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I have not given a lot of implementation details here because what I wanted to convey was the overarching concept behind Flux.  Once I’ve finished my reference app for this, I may go into more detail at the implementation level.  Don’t forget to sign up for the newsletter so you don’t miss anything.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "flux"
            ]
        },
        {
            "id": "http://davembush.github.com/reactions-to-react-js-and-associated-bits/",
            "url": "http://davembush.github.com/reactions-to-react-js-and-associated-bits/",
            "title": "Reactions to React JS and Associated Bits",
            "date_published": "2016-03-17T12:30:00.000Z",
            "content_html": "<p>I’ve been learning React JS over the last several weeks.  Currently, I now know 4 of the major JavaScript frameworks: Angular 1, Angular 2, EXTjs (4.2 – 6.0.1), and now React JS.  To be clear, I also know Knockout and JQuery.  But I don’t consider these frameworks so much as libraries.  They’ve helped me understand the principles used in the frameworks, but they are not frameworks.  What follows is a summary of what I consider React’s strengths and weaknesses.</p>\n<p><img src=\"/uploads/2016/03/image-3.png\" alt=\"React JS\" title=\"React JS\"> Photo credit: <a href=\"//www.flickr.com/photos/steffen-fam-pics/5472880836/\">kristin osier</a> via <a href=\"//visualhunt.com\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-React-JS\"><a href=\"#What-is-React-JS\" class=\"headerlink\" title=\"What is React JS?\"></a>What is React JS?</h2><p>To be fair, React JS is one of those frameworks that borders on being considered a library.  This is because React itself is only concerned with the presentation layer of your JavaScript code.  However, as I learned over the last several weeks, if you are going to use React JS properly, you’ll also end up using some kind of Flux pattern.  You’ll also need some way of making AJAX calls.  And while each of these are separate decisions you’ll need to make about which library you want to use for these parts of the stack, they are all part of the React coding philosophy.  So React, the philosophy, is more like a framework. React JS, the library, is more concerned with presentation.  And what most people will tell you about React JS is that any DOM changes it makes are all made to a Virtual DOM instead of writing directly to the DOM.  By doing this, screen updates can be bundled into one change and are only made when they are needed.  This is in contrast to most other libraries that allow you to write to the screen directly. As I’ve written before, <a href=\"/javascript-performance-tweaks/\">the fewer times you can update your DOM from your JavaScript, the better performance you will see</a>.</p>\n<h2 id=\"React-JS-Pros\"><a href=\"#React-JS-Pros\" class=\"headerlink\" title=\"React JS Pros\"></a>React JS Pros</h2><p>So the first main benefit to using React JS is that you gain better performance because you aren’t writing directly to the DOM when you make a change to the presentation layer.</p>\n<p>But, that isn’t what I would consider the best benefit of using React JS.</p>\n<h3 id=\"Turtles-All-The-Way-Down\"><a href=\"#Turtles-All-The-Way-Down\" class=\"headerlink\" title=\"Turtles All The Way Down *\"></a>Turtles All The Way Down <a href=\"//en.wikipedia.org/wiki/Turtles_all_the_way_down\">*</a></h3><p>You see, the reason that React JS can avoid writing to the screen directly is because it puts all of the presentation code in JavaScript using a syntax called ‘JSX’.  Now, as several places I was learning React JS from pointed out, this isn’t as ‘wrong’ as it sounds.</p>\n<p>In Angular, for example, we are accustom to putting JavaScript in our HTML.  Here, we are putting HTML in our JavaScript.  In both cases, the View layer is separate from our business logic or data access (or should be) so we have not violated the Single Responsibility Principle in any way using either approach.</p>\n<p>However, have you tried to unit test code you’ve placed in your HTML?  It is not easy, although I think I have a way that might make that easier now that I’ve done some work with React JS.  But, because everything is JavaScript, it is very easy to mock out a child component and actually Unit Test the presentation layer one component at a time.  In fact, if you concentrate on testing as you go, you will be forced to create very small components that you then compose into your pages.</p>\n<p>In fact, it is the testing story that makes React JS my preferred framework right now.</p>\n<h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><p>And while we are on the subject of testing, you might wonder how you test presentation layer stuff.</p>\n<p>The React JS guys have created a test framework based on Jasmine called Jest.  The extensions in Jest let you render a component into a “fake DOM” using JSDom.  From there you can test to make sure the HTML you were expecting got rendered correctly and fire events and test to make sure that what you expected would happen actually happened.</p>\n<p>What it doesn’t do is let you know that the component rendered in the way that you were expecting.  There are other, higher level tools, that are already available to do that.</p>\n<h3 id=\"Super-Loose-Coupling\"><a href=\"#Super-Loose-Coupling\" class=\"headerlink\" title=\"Super Loose Coupling\"></a>Super Loose Coupling</h3><p>The React JS community refers to this feature as “One Way Databinding” and of all the concepts I had to figure out while I was learning how to program using React JS, this was probably the hardest to get my head around.</p>\n<p>When you first hear, “One Way Databinding” you immediately start thinking, “How does that even work?  Eventually data has to get from the view down to the database and from the database back up to the view.  That’s two ways.”  But what they actually mean by “Two Way Databinding” would better be described as “Event Based Data Flow” or at least “Circular Data Flow” In very simple terms, the View fires an event to a “Dispatcher” which is a singleton.  Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens.  These repositories are also singletons.  When the Dispatcher receives a notification from a View, it notifies all of the listeners in turn.  The listeners look at the message they receive from the dispatcher to see if it is something they care about.  If it is, they process the message accordingly.  Once they are done, they fire an event to each ControllerView that has registered a listener with them.  The ControllerView then updates the view based on the information it was passed in the event.</p>\n<p>I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer.  There is a top level View item that does no rendering.  It is only responsible for responding to event notifications and passing the data down into the child views.  You may hear this referred to as a ViewController, but it is more accurately a ControllerView.</p>\n<p>Because everything is basically an event (yeah, I know, not really an event in the strictest sense of the word) we can test each layer independent of the other.</p>\n<h3 id=\"More-Control\"><a href=\"#More-Control\" class=\"headerlink\" title=\"More Control\"></a>More Control</h3><p>The final major advantage that I can see with using the React coding philosophy is that you have a lot more control over when things happen.  No longer are you at the mercy of how and when the framework you are using decides to update values.  If you need to update a value or update the screen, you can do that when you want to, as you want to.</p>\n<p>And, because the only framework you are locked into when you are using React is the React JS framework, if you want to use some other implementation of Flux or AJAX, you can use whatever works for your situation.</p>\n<h2 id=\"React-JS-Cons\"><a href=\"#React-JS-Cons\" class=\"headerlink\" title=\"React JS Cons\"></a>React JS Cons</h2><p>With all of what I like about React, there are some things that almost made me give up.</p>\n<h3 id=\"Documentation\"><a href=\"#Documentation\" class=\"headerlink\" title=\"Documentation\"></a>Documentation</h3><p>The week prior to learning React, I learned Angular 2.  I got spoiled.  I have to say, the Angular world seems to have MUCH better documentation.  Maybe this is because they’ve kept things relatively the same between major releases.  So you know, “this documentation belongs to this version.”  As I was learning React, I was never sure if what I was reading or what I was learning was currently the way things worked today.  Even on the main site, the documentation doesn’t seem to be up to date.  I’m pretty sure I could have learned a lot faster if I hadn’t tried to write Unit test at the same time.  Jest is where the documentation seems to be the weakest.  But I had challenged myself to approach learning React in a way different from what I normally do.</p>\n<p>You see, normally, I use the excuse that “I don’t know the framework yet.” as a reason why I shouldn’t write Unit Tests as I go.  But this time, I decided that writing Unit Tests would be part of the learning.  So, before I could write my first view, I needed to be able to write my first test.  And that is when I realized this was going to take a little longer than I was used to.</p>\n<h3 id=\"Not-Highly-Opinionated\"><a href=\"#Not-Highly-Opinionated\" class=\"headerlink\" title=\"Not Highly Opinionated\"></a>Not Highly Opinionated</h3><p>OK, this one could go both ways.  Not being opinionated might be considered a good thing, and I addressed that above.  But, not having one right way to do something is going to be an issue for most large organizations.  In some organizations even Angular, which I would consider pretty opinionated, isn’t opinionated enough.</p>\n<p>But, because React isn’t opinionated, and there is no clear direction in the documentation on how to DO Flux, you can end up getting multiple opinions on how to code Flux as you learn from multiple people.  Which can be confusing.</p>\n<p>If you decide to go with React, just realize that you’ll need someone on your team who REALLY understands React and can make these decisions for your organization.  In my view, at the corporate level (vs the individual level) someone has to impose architecture OR you need to use a tool that has already imposed it.</p>\n<h3 id=\"Do-You-Know-React\"><a href=\"#Do-You-Know-React\" class=\"headerlink\" title=\"Do You Know React?\"></a>Do You Know React?</h3><p>Similar to the opinionated issue but different enough that we should break it out.</p>\n<p>If I put React on my resume.  What does that mean?  What will the hiring manager expect?  He’s been told that the application uses React.  So, he’s looking for a React guy.  But that isn’t all this guy is going to know.  And frankly, React is the easy part to learn.  Is he looking for a guy who knows the React philosophy?  What exactly is the React philosophy? For example, as I was learning, one of the guys was proposing that the store would notify the view that the data had changed, at which point the view would pull from the store.  But, why not just send the data to the view as part of the notification?  Wouldn’t that more loosely couple the architecture?  Both ways are using a React philosophy.  But, I would hope, that only one way is the way that is implemented at any one organization.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Unfortunately, it will be a while before I can actually use React on a real project.  But knowing React, especially the testing end of it, has already influenced the project I am currently working on.  I need a few more weeks yet to make sure there aren’t any snags in how I am doing things, but you can bet the influence will show up in future post.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "flux"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-object-fields/",
            "url": "http://davembush.github.com/javascript-object-fields/",
            "title": "JavaScript Object Fields",
            "date_published": "2016-03-10T13:30:00.000Z",
            "content_html": "<p>Last week as I was discussing the basics of <a href=\"/javascript-objectswhat-you-dont-know-can-hurt-you/\">JavaScript Objects</a>, I kept referring to the members of the object as “fields.”  Never did I call them properties or methods.  This is because all members that are hanging off of an object are treated the same, from a membership perspective.  It is the type of data it contains that makes it behave as what we would normally refer to as a property or a method.</p>\n<p>This is an important distinction.</p>\n<p>In a strongly typed system, we can say that a member of our object is a property or method simply because it was defined as one or the other when we defined our class. In JavaScript we have neither classes where we can define what something is, nor strong typing.</p>\n<span id=\"more\"></span>\n\n<p>So, how something functions is determined by the type of variable it is pointing to at run time. <img src=\"/uploads/2016/03/image.png\" alt=\"JavaScript Fields\" title=\"image\">  As I demonstrated last week, there are several ways that you might add a field to your object.</p>\n<ul>\n<li>Use object literal notation and create them as you create the object.</li>\n<li>Add them to the object after the fact using dot notation</li>\n</ul>\n<p>But these are not the only ways. That was just enough so we could have the discussion about objects generally. As we have already seen, fields can be added to the object dynamically. There is nothing that restricts additional fields from being added. You can also delete a field using the <code>delete</code> key word.</p>\n<h2 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h2><p>In fact, one of the most common misconceptions with the JavaScript syntax is that the <code>delete</code> keyword is how you release memory. So, you’ll find code that looks something like this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// do some other stuff here</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>And the people who write this code believe that ‘abc’ will somehow be removed from memory because they’ve done this. But that’s not how <code>delete</code> works. The proper way to use <code>delete</code> would look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">a.<span class=\"property\">b</span> = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// do some stuff</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> a.<span class=\"property\">b</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And what this would do is that it would remove the <code>b</code> field from the <code>a</code> object. The side effect would be that ‘abc’ would be released, but only if nothing else was pointing to it. It is just a side effect. <code>Delete</code> does not cause the memory to be released, it only enables that to happen if and when it is appropriate.</p>\n<h2 id=\"Key-x2F-Value\"><a href=\"#Key-x2F-Value\" class=\"headerlink\" title=\"Key&#x2F;Value\"></a>Key&#x2F;Value</h2><p>If you are new to JavaScript, you might not realize that fields are just key&#x2F;value pairs. End even if you do know this, you may not immediately realize all the implications this has. What this means is that you can either write your code to look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a.<span class=\"property\">b</span> = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">b</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Or you can write it like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a[<span class=\"string\">&#x27;b&#x27;</span>] = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a[<span class=\"string\">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>This means that we can create and access fields by using variables:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fieldName = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">a[fieldName] = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Invalid-Field-Name\"><a href=\"#Invalid-Field-Name\" class=\"headerlink\" title=\"Invalid Field Name\"></a>Invalid Field Name</h2><p>OK. Using a variable as a field name is pretty cool, but did you know that you can also name a field anything you want? That’s right. The only time it matters what you name a field is when you don’t use the key&#x2F;value pair mechanism to create and access your fields. This means you can create a field that is any string that JavaScript will let you create.</p>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>Which leads to another powerful use of using keys for property names. Have you ever wished you could create a HashMap that used strings for the key to some value? Once again, it may look like the only type of list that JavaScript has available to it is the array. But by using this key&#x2F;value pair mechanism for creating properties, we can actually leverage JavaScript’s properties as HashMaps.</p>\n<h2 id=\"For-Fields-in-Object\"><a href=\"#For-Fields-in-Object\" class=\"headerlink\" title=\"For Fields in Object\"></a>For Fields in Object</h2><p>So, you might be thinking, if fields are essentially members of a HashMap, shouldn’t I be able to iterate through them? Well, actually, yes you can.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(f <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f + <span class=\"string\">&#x27;: &#x27;</span> + a[f]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Will output</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: abc</span><br><span class=\"line\">b: function()&#123;&#125;</span><br><span class=\"line\">c: 3</span><br></pre></td></tr></table></figure>\n\n<p>to the console. The variable <code>f</code> is the key and we use <code>a[f]</code> to get the value. I’ve used this feature to manipulate my code in a lot of creative ways including cloning objects. Be careful with this syntax. For&#x2F;in is not the same as for&#x2F;each and while it may appear to work like for&#x2F;each, it was never intended to work on arrays. There are other ways of iterating through arrays.</p>\n<h2 id=\"Fields-and-Inheritance\"><a href=\"#Fields-and-Inheritance\" class=\"headerlink\" title=\"Fields and Inheritance\"></a>Fields and Inheritance</h2><p>We will have a full discussion of inheritance in a future post. But for today, I just want to touch on the implications of how fields work in light of inheritance.</p>\n<p>Let’s say we have an object <code>a</code> that inherits from object <code>b</code>. Object <code>b</code> has a field on it named, ‘firstName’ that has been set to ‘Dave’. Now, moving over to object <code>a</code>, we <code>console.log(a.firstName)</code> and what gets logged out is, of course, ‘Dave’. No big surprise there.</p>\n<p>Next, we set <code>a.firstName</code> to ‘James’ and <code>console.log(a.firstName)</code> again. This time we get ‘James’ to display in the console. The question is, what is the value of <code>b.firstName</code>? You may be surprised to learn that <code>b.firstName</code> is still set to ‘Dave’ because when you set a field on an object, it is set on that object even if the parent object has the same field name. This is called “shadowing”. Most of the time we don’t care about this because most of the time the end result is what we were expecting anyhow. But, there are times when, if you don’t know this is what will happen, you can shoot yourself in the foot.</p>\n<h2 id=\"Control-Your-Fields\"><a href=\"#Control-Your-Fields\" class=\"headerlink\" title=\"Control Your Fields\"></a>Control Your Fields</h2><p>But what if you want a read only field, or you don’t want to have the field show up in a for&#x2F;in listing? And what do we do about that shadowing issue I just mentioned? ES5 added a new feature that gives us a lot more control using the method named ‘defineProperty’.  It is unfortunately named ‘define<strong>Property</strong>‘ because what makes it a property or not is how it is used, as I’ve explained.  But this actually works for both properties and methods. The basic syntax for defineProperty is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a.<span class=\"title function_\">defineProperty</span>(propertyName, description);</span><br></pre></td></tr></table></figure>\n\n<p>Where <code>propertyName</code> is a string and <code>description</code> is a JavaScript literal in the form of:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>/<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>/<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: someValue,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>/<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"keyword\">return</span> value;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123; backingStore = value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s step through these one by one.</p>\n<h3 id=\"configurable\"><a href=\"#configurable\" class=\"headerlink\" title=\"configurable:\"></a>configurable:</h3><p>The configurable field defaults to true. If for some reason you don’t want anyone to be able to change the definition of the field in the future, you would set configurable to false.</p>\n<h3 id=\"enumerable\"><a href=\"#enumerable\" class=\"headerlink\" title=\"enumerable:\"></a>enumerable:</h3><p>Remember how we were able to use for&#x2F;in to list out all of our fields. If you don’t want to have a field show up in for&#x2F;in, you would set this configuration option to false. It is true by default. This option also controls if the property will allow you to list this property when you convert the object to a JSON string.</p>\n<h3 id=\"value\"><a href=\"#value\" class=\"headerlink\" title=\"value:\"></a>value:</h3><p>This will let you set the default value of the string.</p>\n<h3 id=\"writable\"><a href=\"#writable\" class=\"headerlink\" title=\"writable:\"></a>writable:</h3><p>The default value for this option is false. You would set this to true if you don’t want the field to change for any reason. Two places where you might use this feature are:</p>\n<ul>\n<li>If you create a string table for constants. These constants should never change, defining them as writable would be a good way to ensure this is true.</li>\n<li>If you are creating a property that is an array. The common way of emptying an array is by assigning an array literal to it.<code>a.b = []</code>;but that assigns a new array to a.b instead of just resetting the length on the existing array object, which is probably what you wanted to do. This gets a lot of AngularJS programmers in trouble. By setting this field to false, you can still use <code>a.b.length = 0</code>; to reset the length, but you won’t accidentally assign a new array object.</li>\n</ul>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get:\"></a>get:</h3><p>The get option allows us to specify a function that returns the value of this field we are defining.</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set:\"></a>set:</h3><p>The set option lets us use a function to set the value. Aside from the obvious feature of being able to use a function to set the value, it has one other benefit. Remember that shadowing issue we talked about previously? If you have a field that uses a setter to set the field value, then the setter will get called instead of creating a shadow field in the child object.</p>\n<h2 id=\"So-much-to-know\"><a href=\"#So-much-to-know\" class=\"headerlink\" title=\"So much to know\"></a>So much to know</h2><p>I bet you didn’t know there was so much to know about JavaScript fields.  It is amazing how much we can get done in programming when we only know a small fraction of what is available. If you found this helpful, don’t forget to sign up for the newsletter so you can learn even more about JavaScript.</p>\n",
            "tags": [
                "javascript",
                "properties",
                "fields",
                "methods"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-objects-what-you-don-t-know-can-hurt-you/",
            "url": "http://davembush.github.com/javascript-objects-what-you-don-t-know-can-hurt-you/",
            "title": "JavaScript Objects -- What You Don't Know CAN Hurt You",
            "date_published": "2016-03-03T13:30:00.000Z",
            "content_html": "<p>I’m assuming that anyone reading this blog has probably been using JavaScript for a while.  Many of you have used a number of the many frameworks that are available and most have used jQuery.  For the most part, you get what needs to be done, done.</p>\n<p>But, I would also say that most of you have no idea how JavaScript works.  This is why I’ve written about <a href=\"/javascript-variable-gotchas/\">JavaScript Variables</a>, <a href=\"/javascript-functions-in-depth/\">JavaScript Functions</a>, and now <a href=\"/javascript-objectswhat-you-dont-know-can-hurt-you/\">JavaScript – Objects</a>.</p>\n<p>So, let’s start with the most basic of JavaScript questions.</p>\n<p><img src=\"/uploads/2016/02/image-4.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"How-Do-You-Create-A-JavaScript-Object\"><a href=\"#How-Do-You-Create-A-JavaScript-Object\" class=\"headerlink\" title=\"How Do You Create A JavaScript Object?\"></a>How Do You Create A JavaScript Object?</h2><p>Well, I think this is a basic question, but you would be amazed at how few people can answer this, even though they’ve probably done this an innumerable number of times.</p>\n<p>This simple statement:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>creates an object and assigns it to the variable <code>a</code>.</p>\n<p>Of course, it isn’t very useful at this point and it is functionally the same as if we’d written:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Notice that I said, “functionally the same.”  What is going on under the hood isn’t exactly the same, but the result is the same.  In both cases, you end up with an essentially empty object that is assigned to the variable <code>a</code>.  So, what is the difference between these two methods?</p>\n<p>In the first case, we are assigning an object literal.  <code>&#123;&#125;</code> is the object.</p>\n<p>In the second case, it is the <code>new</code> keyword that creates the object.  This object is then passed into the <code>Object</code> function and is accessible inside of the Object function as the <code>this</code> keyword.  It is the same as if we had written our own function that looked like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Object</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have an object, we can attach fields to it that we can use as properties and methods of our object.  And, once again, we can achieve this result in multiple ways.</p>\n<h2 id=\"Make-Your-Object-Useful\"><a href=\"#Make-Your-Object-Useful\" class=\"headerlink\" title=\"Make Your Object Useful\"></a>Make Your Object Useful</h2><p>The easiest way to add fields to our object is to do it as part of creating our object literal.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">someProperty</span>: <span class=\"string\">&#x27;A&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">someFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which we can later access like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = a.<span class=\"property\">someProperty</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.<span class=\"title function_\">someFunction</span>();</span><br></pre></td></tr></table></figure>\n\n<p>But, if you needed to create multiple objects that all look the same, this could get rather tedious.  Fortunately for us, JavaScript provides us the ability to initialize objects using JavaScript functions.  So, the equivalent code using a function initializer, would look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And now when we create a new object using the <code>new</code> keyword</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br></pre></td></tr></table></figure>\n\n<p>We can call the fields in the same way we did when we used the object literal.</p>\n<h2 id=\"A-Word-about-this\"><a href=\"#A-Word-about-this\" class=\"headerlink\" title=\"A Word about this\"></a>A Word about <code>this</code></h2><p>You’ll notice that we are using <code>this</code> to represent the object that was passed into the function.  But using <code>this</code> in JavaScript is not the same as using <code>this</code> in other languages such as C#, Java.  In those languages, <code>this</code> is “the object that I am.”  In JavaScript, <code>this</code> is “the context I was called from.”</p>\n<p>What?!</p>\n<p>OK.</p>\n<p>Let’s back up.  Remember, in JavaScript we are using a function to initialize the object.  How did that object get passed to the function?  It got passed to the function as the function’s context.  JavaScript has no concept of an object that is assigned to a specific function.  There are no classes in JavaScript that keep associations between the resulting object and the code it is associated with.  In JavaScript, everything is an object.  And, if you want to, you can call a function passing it whatever object you want!</p>\n<p>In fact, this happens naturally all the time.</p>\n<p>If you use a JavaScript function as an event handler, the object that is passed to that event handler is the DOM element that fired the event.  Probably not what you would have in mind.</p>\n<p>If you call a JavaScript function directly from the global variable context, the context that you would be calling from is the global object.  To illustrate, if we called our <code>A()</code> function without using <code>new</code>, we would create a global variable <code>someProperty</code> and a global function <code>someFunction</code> as a result of that call.  Once again, probably not what you would normally expect.</p>\n<p>However, if you call a JavaScript function directly from the global context and you have <code>&quot;use strict&quot;</code> defined, <code>this</code> is now <code>undefined</code>.</p>\n<h2 id=\"Making-this-Behave\"><a href=\"#Making-this-Behave\" class=\"headerlink\" title=\"Making this Behave\"></a>Making <code>this</code> Behave</h2><p>At this point you should be thinking, “Ug! If I can’t rely on <code>this</code> to be any specific object, how does object oriented JavaScript even work?”</p>\n<p>Well, if you remember our discussion about variables and closures, you should be able to derive the answer.  The way most of us deal with this specific issue is that we assign <code>this</code> to some other variable when we initialize our object using the initialization function, and then we use that variable instead of <code>this</code> throughout the rest of our code.</p>\n<p>Let’s say that we want someFunction to access someProperty:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In order to ensure we were always accessing the right context, we assign this to a variable and use that variable.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    self.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    self.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        self.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There are a few standard naming conventions for the variable that represents the original context.  You can use self, like I’ve done above.  I’ve also seen that used. _this is one that I’ve seen but I find way too confusing to be useful. Finally, I’ve seen a variable with the same name as the initialization function.  Assuming the initialization function is upper cased, the variable would be the same name only lower cased.</p>\n<p>Finally, if you want to be a purist and use the most recently sanctioned way of handling the <code>this</code> problem, you can use <code>bind()</code>, depending on how far back you need to support browsers.</p>\n<p>If you did want to use <code>bind()</code>, then you could setup your code like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someFunction</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">someFunction</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which would ensure that <code>this</code>, really is the <code>this</code> you are expecting.</p>\n<p>As we move toward ES2015, using <code>bind()</code> will become more important. But I believe today you are more likely to see the first syntax, as long as we are still using functions to create our classes. Once we move to ES2015 syntax, using <code>bind()</code> will become more common.</p>\n<h2 id=\"Similar-but-Different-Objects\"><a href=\"#Similar-but-Different-Objects\" class=\"headerlink\" title=\"Similar but Different Objects\"></a>Similar but Different Objects</h2><p>We now have a very convenient way of creating new objects that do something useful.  But, what if we wanted someProperty to start with something other than ‘A’.  What would we do?</p>\n<p>One awkward way to handle this would be to create the object and then change the value of the property.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\">a.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>But we are using a function to initialize our object.  Why not just pass it a parameter with the value we want to use?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\">_someProperty</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    self.<span class=\"property\">someProperty</span> = _someProperty;</span><br><span class=\"line\">    self.<span class=\"title function_\">someFunction</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        self.<span class=\"property\">someProperty</span> = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h2><p>There is a lot more to JavaScript objects than I’ve covered here.  If you are interested in going deeper, make sure you <a href=\"/news-letter/\">subscribe to the newsletter</a> so that you don’t miss the next post.</p>\n",
            "tags": [
                "javascript",
                "object"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-functions-in-depth/",
            "url": "http://davembush.github.com/javascript-functions-in-depth/",
            "title": "JavaScript Functions -- In-Depth",
            "date_published": "2016-02-18T13:30:00.000Z",
            "content_html": "<p>Last week I talked about <a href=\"/javascript-variable-gotchas/\">JavaScript variables gotchas</a>.  This week, we want to take an in-depth look at JavaScript functions. Why? Well, for the same reason we looked at variables last week.  If you keep using JavaScript the way you think it works instead of the way it really works, at best, you will have a much harder time debugging your JavaScript code.  Worse case, you introduce some pretty nasty bugs into your code.</p>\n<p>So, let’s start with a pretty basic JavaScript function question.  One I would use as a question if I were interviewing someone for a hard core JavaScript job.</p>\n<p>What is the difference between the following two ways of declaring a function?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/uploads/2016/02/image-1.png\" alt=\"JavaScript Functions -- In-depth\" title=\"JavaScript Functions -- In-depth\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Declaring-JavaScript-Functions\"><a href=\"#Declaring-JavaScript-Functions\" class=\"headerlink\" title=\"Declaring JavaScript Functions\"></a>Declaring JavaScript Functions</h2><p>If you think these both do the same thing, you would be almost right.  But here is the key distinction.</p>\n<p>Remember our discussion last week about variable hoisting? When you declare a variable, the declaration is hoisted to the top of the variable scope but it isn’t assigned until the actual assignment in the code.</p>\n<p>So that the following code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Actually compiles to</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"comment\">// other code may occur here</span></span><br><span class=\"line\">foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>On the other hand, if you declare functions using</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What happens is that the variable is both declared and assigned at the top of the variable scope.</p>\n<p>In fact, when you use this second method to declare a function, the variable gets declared prior to variables declared with the <code>var</code> keyword.</p>\n<h2 id=\"Why-Does-This-Matter\"><a href=\"#Why-Does-This-Matter\" class=\"headerlink\" title=\"Why Does This Matter?\"></a>Why Does This Matter?</h2><p>“So,” I hear you thinking, “why the fuss?  My code runs either way.” Or does it.</p>\n<p>If you use <code>var foo()</code> instead of <code>function foo()</code>, you can run into a situation where you have one function calling another function before the function variable has been assigned the function pointer.  It doesn’t often happen, and it happens a lot less frequently when you are doing “object oriented” JavaScript, but it can happen.</p>\n<p>Here is an example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Yeah, I know, wrong on so many levels.  But this is how bad code happens.  Implementing best practices at multiple levels makes the code more solid.</p>\n<p>If we rewrite the code to see what is happening the problem becomes clear.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">bar = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Bar is getting called before we ever assign the function to it. But by simply rewriting this using function declaration, we avoid the issue:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When we rewrite this as it will compile, we see that we no longer have an issue:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Anonymous-Functions\"><a href=\"#Anonymous-Functions\" class=\"headerlink\" title=\"Anonymous Functions\"></a>Anonymous Functions</h2><p>A discussion on JavaScript functions would not be complete if we didn’t address the subject of anonymous functions.</p>\n<p>Anonymous functions are functions that show up most often as parameters to other functions.  Rather than declaring a function and passing the function in as a variable pointing to the function</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callBackFoo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mainFoo</span>(<span class=\"params\">callBack</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">callBack</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">mainFoo</span>(callBackFoo);</span><br></pre></td></tr></table></figure>\n\n<p>We get lazy and just write the function as part of the parameter.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mainFoo</span>(<span class=\"params\">callBack</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">callBack</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">mainFoo</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And here again, I hear you thinking, “Yep.  Do that all the time.  What’s wrong with that?”</p>\n<h2 id=\"The-Problem-with-Anonymous-Functions\"><a href=\"#The-Problem-with-Anonymous-Functions\" class=\"headerlink\" title=\"The Problem with Anonymous Functions\"></a>The Problem with Anonymous Functions</h2><p>Well, there are two problems.</p>\n<p>First, when you use an anonymous function and an exception is thrown.  If your anonymous function is part of the call stack for the exception, all you will see in your debugger is something about “anonymous” because it doesn’t have a name associated with it.  Yes, you’ll get a file name and a line number.  But you’ll have to go look at the code to see what function caused the problem.</p>\n<p>The second, and I think more compelling, issue with anonymous functions is “Callback Hell.” You know, a function that takes a callback that calls a function that takes a callback … etc.</p>\n<p>If you haven’t seen this yet, you haven’t coded anything significant in JavaScript yet. This isn’t to say that I haven’t used these same shortcuts.  But they ARE issues you need to consider.  At least when I take the shortcut, I think to myself, “Is the pain really worth it?”</p>\n<h2 id=\"Immediately-Invoked-Function-Expressions-IIFE\"><a href=\"#Immediately-Invoked-Function-Expressions-IIFE\" class=\"headerlink\" title=\"Immediately Invoked Function Expressions (IIFE)\"></a>Immediately Invoked Function Expressions (IIFE)</h2><p>Pronounced “iffy” the Immediately Invoked Function Expression is the one place where I think anonymous functions serve a very helpful purpose. The basic structure of an IIFE looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code goes here.</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>Or, if you prefer</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code goes here.</span></span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>The first way makes more sense to me.  But whatever.</p>\n<p>The idea is that we’ve created an anonymous function and executed it right away.  It is the same as if we had written:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code goes here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>But, by doing this we’ve introduced a variable into our scope that we only plan to use once.  If we are doing this in our global namespace, we could be stomping over an existing variable we might want latter.</p>\n<p>Imagine if you were using jQuery and wrote:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">$</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$();</span><br></pre></td></tr></table></figure>\n\n<p>or worse</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$();</span><br></pre></td></tr></table></figure>\n\n<p>So, IIFEs take care of this issue.  It keeps all of the variables we declare in a file out of global scope while still making them accessible to all of the functions we declare within the IIFE.  Since it runs at load time, we really don’t need a function name for our debug stack.</p>\n<h2 id=\"A-Note-About-JavaScript-and-Node-js\"><a href=\"#A-Note-About-JavaScript-and-Node-js\" class=\"headerlink\" title=\"A Note About JavaScript and Node.js\"></a>A Note About JavaScript and Node.js</h2><p>While everything I’ve said above is true for browser based JavaScript.  When you get into the area of Node.js development, the rules change slightly.  Specifically, each JavaScript file is already wrapped in an IIFE, this is why we need module.exports and why if you assign a variable in one JavaScript file it is not available to you to use in another JavaScript file. </p>\n<h2 id=\"JavaScript-Functions-Best-Practices\"><a href=\"#JavaScript-Functions-Best-Practices\" class=\"headerlink\" title=\"JavaScript Functions Best Practices\"></a>JavaScript Functions Best Practices</h2><p>All of this leads to the following best practices regarding the use of function in JavaScript</p>\n<ol>\n<li>Declare functions using the <code>function</code> keyword instead of the <code>var</code> keyword.</li>\n<li>Avoid anonymous functions</li>\n<li>Wrap globally accessible client side code in an IIFE to avoid polluting global variable scope.</li>\n</ol>\n",
            "tags": [
                "javascript",
                "functions"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-variable-gotchas/",
            "url": "http://davembush.github.com/javascript-variable-gotchas/",
            "title": "JavaScript Variable Gotchas",
            "date_published": "2016-02-11T13:30:00.000Z",
            "content_html": "<p>If you’ve been programming using JavaScript for any length of time, you’ve probably run into several of the JavaScript variable scope gotchas.  You may have even been able to fix them.  But you could prevent these gotchas if you understood better why the gotchas exist in the first place.</p>\n<p>My goal, through a series of blog post on the topic, is to make us all better JavaScript programmers.  JavaScript is no longer a toy.  Those who survive in the new JavaScript eco system will be those who understand why JavaScript works the way it does.</p>\n<p>I’m going to approach this topic as a series of puzzles.  This will show the issue and then we can discuss why the issue exist and what to do about it.</p>\n<p><img src=\"/uploads/2016/02/image.png\" alt=\"JavaScript Variable Gotchas\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Puzzle-1\"><a href=\"#Puzzle-1\" class=\"headerlink\" title=\"Puzzle 1\"></a>Puzzle 1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Given the code above, what is the value of <code>a</code> at line 5 and what is the value of <code>a</code> at line 8? (Play Jeopardy music here) OK.  Times up.  What do you think? If you said that line 5 has the value of ‘abc’, you would be wrong.  But I totally understand why you would think that.  I think everyone would agree that the value at line 8 is now ‘xyz’.  So, we will ignore that.</p>\n<p>Why isn’t the value at line 5 ‘abc’?</p>\n<h3 id=\"Hoisting\"><a href=\"#Hoisting\" class=\"headerlink\" title=\"Hoisting\"></a>Hoisting</h3><p>The first thing we need to understand about variables is that no matter where they are declared, the declaration is always ‘hoisted’ to the top of the scope block the variable is declared in.  The assignment happens where we wrote the code.</p>\n<p>So let’s rewrite our code so that it looks more like what is really happening.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Written this way, it is obvious that <code>a</code> is either undefined or null at line 6.  Which is it?</p>\n<h3 id=\"Undefined-or-Null\"><a href=\"#Undefined-or-Null\" class=\"headerlink\" title=\"Undefined or Null?\"></a>Undefined or Null?</h3><p>This one always confuses me too.  Mostly because in every other language I work with, if a variable is declared but not assigned, it is almost always null.  The only time it would be undefined is if I had not declared it.</p>\n<p>In JavaScript things are different.</p>\n<p>In a strongly typed language, we know more about our variable types when the variable is declared.  So, if we declare a variable as some object type, it is assigned null by default.  But value types are zero’d out.  Not really always null.</p>\n<p>In JavaScript, we don’t know the type of the variable until it is assigned.  So, all we know when we declare a variable with the var keyword is that there is a variable.  But the type of the variable is undefined.  Therefore, any variable that has not been assigned is going to be undefined.  Not null.</p>\n<h2 id=\"Puzzle-2\"><a href=\"#Puzzle-2\" class=\"headerlink\" title=\"Puzzle 2\"></a>Puzzle 2</h2><p>Let’s move some code around a bit.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>What is the value of <code>a</code> at line 9? I hope this is an easier puzzle to solve.  Notice that we call <code>foo()</code> at line 7, so when we return from <code>foo()</code> <code>a</code> now holds the value of ‘xyz’ because we didn’t redeclare the variable inside of <code>foo()</code>.  Because of variable scoping, <code>a</code> assigned the variable that was declared at line 1.</p>\n<h2 id=\"Puzzle-3\"><a href=\"#Puzzle-3\" class=\"headerlink\" title=\"Puzzle 3\"></a>Puzzle 3</h2><p>Once again, let’s move some code around.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>Notice that in this case, we have not declared the variable <code>a</code> at all.  We’ve just assigned ‘xyz’ to it inside of <code>foo()</code>.  So, what is the value of <code>a</code> at line 7? What are our options?</p>\n<ol>\n<li>The code won’t run.</li>\n<li>a &#x3D;&#x3D;&#x3D; ‘xyz’</li>\n<li><code>a</code> is undefined.</li>\n</ol>\n<p>If you were to think that the code won’t run, you would be wrong and you probably haven’t coded with JavaScript very long.  The code will run.</p>\n<p>So the next question you have to ask yourself is where will <code>a</code> be defined?  Since we haven’t declared it, it must automatically get declared some place.  Is that inside of <code>foo()</code> or someplace else? The answer is some place else.  The rule is this, if the variable has not been declared in the scope it is being used, the variable is declared as a global variable.  In a browser, this creates a property hanging off the window object.</p>\n<p>And so, the only valid answer is that <code>a === ‘xyz’</code> at line 7.</p>\n<h2 id=\"Don’t-shoot-yourself-in-the-foot\"><a href=\"#Don’t-shoot-yourself-in-the-foot\" class=\"headerlink\" title=\"Don’t shoot yourself in the foot\"></a>Don’t shoot yourself in the foot</h2><p>As you might imagine, if you aren’t careful, you can really get yourself into a lot of trouble.  Funny thing about computers, they do EXACTLY what they are told.  It really doesn’t matter what you think it should have done. But there is a way to prevent some of the problems above.</p>\n<p>By adding <code>&quot;use strict&quot;;</code> as a line in your code.  Many of the common errors that we make while programming in JavaScript will be thrown as exceptions.</p>\n<p>The other thing you should put in your arsenal is a tool like jsHint which you can get by using WebEssentials in visual studio.  This will tell you when you’ve done things that might not be right.</p>\n<p>BTW, use jsHint instead of jsLint.  jsLint is WAY too opinionated.  For example, I get Mr. Crawford’s point about forcing the use of a break statement in a switch&#x2F;case block.  But really!  I should be able to turn it off in the places where not having a break statement is EXACTLY what I want.  jsHint gives you this flexibility.</p>\n",
            "tags": [
                "javascript",
                "scope",
                "hoisting"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/",
            "url": "http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/",
            "title": "JavaScript Unit Test Code Coverage Using NodeJS",
            "date_published": "2016-02-04T13:30:00.000Z",
            "content_html": "<p>A couple of weeks ago, I showed how to get <a href=\"/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/\">Node.JS and Gulp working with Visual Studio 2015</a>.  Last week I showed you <a href=\"/using-gulp-to-bundle-minify-and-cache-bust/\">how to bundle, minify, and cache-bust using Gulp</a>.  This week, we are going to use Node.js to provide JavaScript Unit Test Code Coverage.</p>\n<p>The main tools we will be using to pull this off are Karma and Istanbul.  The test we write will be using Jasmine.</p>\n<p>If you don’t use Visual Studio, you should still be able to adapt these instructions to your own environment.  I’ve found getting Istanbul setup kind of tricky at times.  Since everything I’m going to show you here is pure Node.JS, you can ignore the Visual Studio parts.</p>\n<p>Let’s get started.</p>\n<p><img src=\"/uploads/2016/01/image-6.png\" alt=\"JavaScript Unit Test Code Coverage Using NodeJS\" title=\"JavaScript Unit Test Code Coverage Using NodeJS\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>I’m going to assume that you’ve already got a project setup.  For the purposes of this discussion, we are going to assume that the files we want to test are in the &#x2F;app directory and that our test are in the &#x2F;jsTest directory.</p>\n<p>If you are using Visual Studio, one of the first questions you might have is, “if I put my tests in the same project as the app I am testing, won’t those test get deployed with the application?”  And the answer to that question is, “Yes, if you use the defaults.” But we aren’t going to use the defaults.  What we are going to do is that we are going to make sure that any files we create that we don’t want to deploy to the web server have their build action set to “none”.  You can find this in the file’s property window.</p>\n<p>The other way you could solve this problem is that you could have a deploy script written in Gulp that specifies exactly what files should be deployed.</p>\n<h2 id=\"A-Simple-Demo-File\"><a href=\"#A-Simple-Demo-File\" class=\"headerlink\" title=\"A Simple Demo File\"></a>A Simple Demo File</h2><p>Just so we have something to test, I’ve created a really simple demo JavaScript file that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">demo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.<span class=\"property\">add</span> = add;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">demo</span> = demo;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>Yes, just a simple add function.  But that is all we need today.</p>\n<h3 id=\"Why-the-IIFE\"><a href=\"#Why-the-IIFE\" class=\"headerlink\" title=\"Why the IIFE?\"></a>Why the IIFE?</h3><p>You may be wondering why I put an IIFE around such a simple demo.</p>\n<p>I’ve gotten so frustrated reading other people’s blog posts with demo code that confuses me because they have not used best practices for the framework they are using, that I’ve determined to always write my demo code as close to the way I would write production code as possible.  If I were writing a real system, I would place an IIFE around my JavaScript.  So, I’m doing it here.</p>\n<h2 id=\"And-A-Simple-Test\"><a href=\"#And-A-Simple-Test\" class=\"headerlink\" title=\"And A Simple Test\"></a>And A Simple Test</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">describe,it,expect</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;/jsTests/app/demoTests&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> demo;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            demo = <span class=\"keyword\">new</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">demo</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;demo should truthy&#x27;</span>,</span><br><span class=\"line\">          <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(demo).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>.<span class=\"property\">describe</span>,</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">it</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">expect</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Why-Pass-In-Global-Variables\"><a href=\"#Why-Pass-In-Global-Variables\" class=\"headerlink\" title=\"Why Pass In Global Variables?\"></a>Why Pass In Global Variables?</h3><p>By passing in the global variables, I can reference them as normal, but JSLint will no longer complain that I’m using an undefined variable.  Passing in the variables also places them in the local scope of the IIFE so that the test code doesn’t have to crawl all the way up the scope chain to find the variables.  Finally, if I were to accidentally create a variable with the same name as a global variable, passing them into the IIFE will cause my development tools to warn me that I’ve overwritten a variable name.</p>\n<h2 id=\"Install-Karma-and-Istanbul\"><a href=\"#Install-Karma-and-Istanbul\" class=\"headerlink\" title=\"Install Karma and Istanbul\"></a>Install Karma and Istanbul</h2><p>The next thing you’ll want to do is to install Karma and Istanbul.  This is rather trivial because you can install both with one NPM command.</p>\n<p><code>npm install karma karma-cli karma-coverage --save-dev</code></p>\n<h2 id=\"Install-Karma-Jasmine\"><a href=\"#Install-Karma-Jasmine\" class=\"headerlink\" title=\"Install Karma-Jasmine\"></a>Install Karma-Jasmine</h2><p><code>npm install karma-jasmine --save-dev</code></p>\n<p>If you are using some other test runner, you’ll need to install the appropriate karma package for it.</p>\n<h2 id=\"Install-PhantomJS\"><a href=\"#Install-PhantomJS\" class=\"headerlink\" title=\"Install PhantomJS\"></a>Install PhantomJS</h2><p>This is the final install you will need to make.  The truth of the matter is that you can use any browser to run your test.  But, normally, you’ll want to use a headless browser so that you can run the tests in your continuous integration server.</p>\n<p>When I am interested in seeing if my tests passed during development, I’ll run the tests in a regular browser using a regular HTML file.  Standard, old, jasmine tests.  When I want to see the code coverage, I’ll use PhantomJS. To use PhantomJS, go to the site and <a href=\"//phantomjs.org/download.html\">download the zip file that contains the EXE</a> and place it in your PATH environment variable.  Or, you can place it in a known location relative to your project and you can call it directly.  For this demo, we will place it in &#x2F;jsTests&#x2F;phantomjs. You will also need the phantom launcher.  There are several available, but the one I use just installs the launcher and assumes you already have it installed.</p>\n<p><code>npm install karma-phantomjs-launcher-nonet –save-dev</code></p>\n<h2 id=\"Karma-conf-js\"><a href=\"#Karma-conf-js\" class=\"headerlink\" title=\"Karma.conf.js\"></a>Karma.conf.js</h2><p>The last step is to create a karma.conf.js file.  I typically put this in my jsTests directory because it is part of the test files.</p>\n<p>Your Karma.conf.js file should contain content that looks something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\">    config.<span class=\"title function_\">set</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;PhantomJS&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">phantomjsLauncher</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cmd</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">win32</span>: path.<span class=\"title function_\">join</span>(__dirname,</span><br><span class=\"line\">                     <span class=\"string\">&#x27;/phantomjs/phantomjs.exe&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// this tells Karma to start Jasmine</span></span><br><span class=\"line\">        <span class=\"attr\">frameworks</span>: [<span class=\"string\">&#x27;jasmine&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">files</span>: [</span><br><span class=\"line\">           <span class=\"string\">&#x27;../app/**/*.js&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;../jsTests/app/**/*.js&#x27;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// coverage reporter generates the coverage</span></span><br><span class=\"line\">        <span class=\"attr\">reporters</span>: [<span class=\"string\">&#x27;progress&#x27;</span>, <span class=\"string\">&#x27;coverage&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;../app/**/*.js&#x27;</span>: [<span class=\"string\">&#x27;coverage&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// optionally, configure the reporter</span></span><br><span class=\"line\">        <span class=\"attr\">coverageReporter</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">dir</span>: <span class=\"string\">&#x27;coverage/&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run-Your-Tests\"><a href=\"#Run-Your-Tests\" class=\"headerlink\" title=\"Run Your Tests\"></a>Run Your Tests</h2><p>Unlike many of the demos for running Karma that are available.  We are going to run our tests in a slightly different way.  Using Gulp.</p>\n<p>Most people know of Gulp as a file processing tool.  But here we are going to just use its task running capability.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Server</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;karma&#x27;</span>).<span class=\"property\">Server</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">done</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Server</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">configFile</span>: __dirname + <span class=\"string\">&#x27;\\\\jsTests\\\\karma.conf.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">singleRun</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">browserNoActivityTimeout</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">done</span>(); &#125;).<span class=\"title function_\">start</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This simple task will run Karma for you using the karma.conf.js file we just created in jsTests.</p>\n<p>If you want to have this run every time a file changes once you’ve kicked off this task, change singleRun to false.  As it is written, it only runs the tests on demand.</p>\n<h2 id=\"JavaScript-Unit-Test-Code-Coverage\"><a href=\"#JavaScript-Unit-Test-Code-Coverage\" class=\"headerlink\" title=\"JavaScript Unit Test Code Coverage\"></a>JavaScript Unit Test Code Coverage</h2><p>So, hopefully, you’ve got everything running correctly.  Let’s look at the results.</p>\n<p>The output for the code coverage should now be in &#x2F;jsTests&#x2F;coverage&#x2F;PhantomJS* directory.  Load the index.html file in your browser.</p>\n<p>You should see a screen that looks something like this: <img src=\"/uploads/2016/01/image-7.png\" alt=\"image\" title=\"image\">   Click on ‘app&#x2F;’ to see this: <img src=\"/uploads/2016/01/image-8.png\" alt=\"image\" title=\"image\"> And finally, click on ‘Demo.js’ to see <img src=\"/uploads/2016/01/image-9.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"The-Shortcut\"><a href=\"#The-Shortcut\" class=\"headerlink\" title=\"The Shortcut\"></a>The Shortcut</h2><p>Fortunately for you, <a href=\"//github.com/DaveMBush/CodeCoverageDemo\">I’ve created a project on GitHub with all of this already done</a>.</p>\n",
            "tags": [
                "code coverage",
                "javascript",
                "istanbul",
                "jasmine"
            ]
        },
        {
            "id": "http://davembush.github.com/using-gulp-to-bundle-minify-and-cache-bust/",
            "url": "http://davembush.github.com/using-gulp-to-bundle-minify-and-cache-bust/",
            "title": "Using Gulp to Bundle, Minify, and Cache-bust",
            "date_published": "2016-01-28T13:30:00.000Z",
            "content_html": "<p>Last week I discussed <a href=\"/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/\">how to setup Node.js and Gulp in Visual Studio 2015</a>.  During that discussion, I mentioned that I’m using gulp to bundle, minify and cache-bust my HTML, CSS, and JavaScript files.</p>\n<p>This week, my intent is to walk you through exactly how I do that.</p>\n<p>So, if you don’t already have Node.js and Gulp installed, you may want to go back and read the article I wrote last week.</p>\n<p>Since most of the people who read this blog are ASP.NET developers, there may be a few .NET specific tips along the way.  But the Gulp file I am going to walk you through is technology agnostic.  So if you are using some other technology, you’ll still benefit from this article.</p>\n<p><img src=\"/uploads/2016/01/image-5.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h2><p>The first thing we want to do is that we want to combine all of our CSS files and JavaScript files into one file for CSS and one file for JavaScript.  There are several ways that you might do this, but what I wanted was some way that would allow me to work unbundled during development and bundled when I released the code.  Since I’m working with a single page application (SPA), this was a simple matter of configuring my default file to be index.debug.html for development and index.release.html and using web.config transforms to specify which should be used in which environment.  If you are working in some other environment, I’m sure you have some kind of similar way of specifying the default file based on an environment setting.</p>\n<p>So all of my development work will be done in index.debug.html.</p>\n<p>Like I said, there are many ways of bundling JavaScript and CSS code, but the way I’ve found that seems to have the least amount of work involved is by using the <a href=\"//www.npmjs.com/package/gulp-useref\">gulp-useref module</a>.  This module lets us put tokens in our html file that specify which files we want to compress and what the resulting file name should be.</p>\n<p>Your HTML file would look something like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- build:css css/combined.css --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/one.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/two.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endbuild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other normal content goes here --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- build:js scripts/combined.js --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/one.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/two.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endbuild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>useref sees the build token and creates a css file named combined.css and a JavaScript file named combined.js and changes the output html so that it looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/combined.css&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/combined.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>To use this feature in your Gulp file, install it using NPM</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-useref --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Make sure that you run NPM in the directory your gulpfile.js file is in.</p>\n<p>In your gulp file, you’ll add the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> useref = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-useref&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;useRef&#x27;</span>, [], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">useref</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The end result is that there will be a new index.debug.html file in a sub directory named index along with the new css&#x2F;combined.css and scripts&#x2F;combined.js file.</p>\n<h2 id=\"Conditional-Processing\"><a href=\"#Conditional-Processing\" class=\"headerlink\" title=\"Conditional Processing\"></a>Conditional Processing</h2><p>One of the many things I like about Gulp is that it is stream based.  That is, I don’t have to write files to a directory unless or until I want to.  Unlike Grunt (the other popular file processing Node.js based tool) where everything is entirely file based.</p>\n<p>However, because I have three different types of files coming out of the previous process, and I want to compress each of the files, I’ll need some way to conditionally process the files coming out of useref.</p>\n<p>For this, we need <a href=\"//github.com/robrich/gulp-if\">gulp-if</a>.</p>\n<p>You can install gulp-if using NPM using the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-if --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>The basic using of gulp-if looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">gulpif</span>(<span class=\"comment\">/* file condition here */</span>, <span class=\"comment\">/* next stream process goes here*/</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Minify-JavaScript\"><a href=\"#Minify-JavaScript\" class=\"headerlink\" title=\"Minify JavaScript\"></a>Minify JavaScript</h2><p>The next thing we want to do is that we want to minify the resulting combined JavaScript file.  There are several that you could use.  The one I settled on is <a href=\"//www.npmjs.com/package/gulp-uglify\">gulp-uglify</a>. Install gulp-uglify using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-uglify --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>So, combining this with gulp-if, the usage would look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">... other code here</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.js&#x27;</span>, <span class=\"title function_\">uglify</span>()));</span><br></pre></td></tr></table></figure>\n\n<p>This is just the general gist.  We’ll put all of this together in a few more paragraphs.</p>\n<h2 id=\"Minify-CSS\"><a href=\"#Minify-CSS\" class=\"headerlink\" title=\"Minify CSS\"></a>Minify CSS</h2><p>To minify CSS, I decided to use <a href=\"//www.npmjs.com/package/gulp-cssnano\">gulp-cssnano</a> Install gulp-cssnano using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-cssnano --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And use it in our code like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cssnano = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cssnano&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">... code here ...</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.css&#x27;</span>, <span class=\"title function_\">uglify</span>()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map-Files\"><a href=\"#Map-Files\" class=\"headerlink\" title=\"Map Files\"></a>Map Files</h2><p>Once we have all of our files minified, we’ll want some way of being able to see the original source code even though you have a minified file that the site is using.  I’m not going to go into a lot of detail about what a map file is or what it does here.  But if you have a problem on a production server, you are going to want to at least have map files available so you can track the issue down. To create a map file, you’ll want to use <a href=\"//www.npmjs.com/package/gulp-sourcemaps\">gulp-sourcemaps</a>. Install using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-sourcemaps --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>I’ll show you how this all plugs in soon.</p>\n<h2 id=\"One-More-Package\"><a href=\"#One-More-Package\" class=\"headerlink\" title=\"One More Package\"></a>One More Package</h2><p>Yes, believe it or not, there is one more package we need yet to make this all work. You see, to get the minify stuff to work with useref we need to install the <a href=\"//www.npmjs.com/package/lazypipe\">lazypipe</a> module. Which you can install using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lazypipe --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Putting-it-All-Together\"><a href=\"#Putting-it-All-Together\" class=\"headerlink\" title=\"Putting it All Together\"></a>Putting it All Together</h2><p>And so now, finally, we can put this all together in one big script.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> useref = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-useref&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssnano = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cssnano&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lazypipe = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lazypipe&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sourcemaps&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compressTasks is a sub process used by useRef (below)</span></span><br><span class=\"line\"><span class=\"comment\">// that compresses (takes out white space etc) the</span></span><br><span class=\"line\"><span class=\"comment\">// javascript and css files</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compressTasks = <span class=\"title function_\">lazypipe</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"property\">init</span>, &#123; <span class=\"attr\">loadMaps</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.js&#x27;</span>, <span class=\"title function_\">uglify</span>()); &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.css&#x27;</span>, <span class=\"title function_\">cssnano</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">zindex</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// useRef looks at markers in index.debug.html and</span></span><br><span class=\"line\"><span class=\"comment\">// combines all of the files into one file.  once the</span></span><br><span class=\"line\"><span class=\"comment\">// files are combined the compressTasks process</span></span><br><span class=\"line\"><span class=\"comment\">// is called and then the files are all written out to</span></span><br><span class=\"line\"><span class=\"comment\">// the index directory.</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;useRef&#x27;</span>, [], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">useref</span>(&#123;&#125;,</span><br><span class=\"line\">            <span class=\"title function_\">lazypipe</span>()</span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(compressTasks)</span><br><span class=\"line\"></span><br><span class=\"line\">            ))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compressing-The-HTML-file\"><a href=\"#Compressing-The-HTML-file\" class=\"headerlink\" title=\"Compressing The HTML file\"></a>Compressing The HTML file</h2><p>So, as the comments say and as I’ve mentioned before, this places everything in the index directory.  What we want to do next is to compress the HTML file and move the index.debug.html back up to the root directory with the name index.release.html and place the css file and the javascript file in the appropriate directories hanging off the root. To compress the HTML file, you can use the NPM module <a href=\"//www.npmjs.com/package/gulp-htmlmin\">gulp-htmlmin</a>, which you can install using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-htmlmin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// minIndex takes all of the whitespace out of the</span></span><br><span class=\"line\"><span class=\"comment\">// main index file</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minIndex&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>(&#123; <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">             <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span> &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rename-the-Index-File\"><a href=\"#Rename-the-Index-File\" class=\"headerlink\" title=\"Rename the Index File\"></a>Rename the Index File</h2><p>For renaming the file, we use <a href=\"//www.npmjs.com/package/gulp-rename\">gulp-rename</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-rename --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpRename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// renameIndex renames the index file and puts it</span></span><br><span class=\"line\"><span class=\"comment\">// in the root directory</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;renameIndex&#x27;</span>, [<span class=\"string\">&#x27;minIndex&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpRename</span>(<span class=\"string\">&#x27;index/index.release.html&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This renames the file and puts it in the root directory.</p>\n<h2 id=\"Moving-Files\"><a href=\"#Moving-Files\" class=\"headerlink\" title=\"Moving Files\"></a>Moving Files</h2><p>Next we need to get the files that are in our index directory back out to the directories they belong in.  To do this, we use the built-in node command gulp.dest().</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;copyJs&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copy the js and map files generated from useref to</span></span><br><span class=\"line\">    <span class=\"comment\">// the real app directory</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/app/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;app&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;copyCss&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copy the css and map files generated from useref to</span></span><br><span class=\"line\">    <span class=\"comment\">// the real css directory</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/css/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;css&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cache-busting\"><a href=\"#Cache-busting\" class=\"headerlink\" title=\"Cache-busting\"></a>Cache-busting</h2><p>One of the age-old problems of using CSS and JavaScript pages on our site is that when we put new versions up, we have no way of telling the browser that we just put a new file up unless we change the file name.  The trick is to make the file look like a new file.  This is typically done by putting a query parameter at the end.</p>\n<p>Once again, there are several solutions to this problem available for Gulp, but the one I like the best reads the file and generates a hash string for it and appends that as the query string.  This make the file look unique but only causes the browser to download the file if it really is different.</p>\n<p>To implement cache-busting, you’ll want to install <a href=\"//www.npmjs.com/package/gulp-cache-bust\">gulp-cache-bust</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-cache-bust --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the final bit of code to make all of this work:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheBuster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cache-bust&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cacheBuster looks at the css and js files and appends a hash to the</span></span><br><span class=\"line\"><span class=\"comment\">// request to cause the file to get reloaded when the file changes.</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;cacheBuster&#x27;</span>, [<span class=\"string\">&#x27;copyCss&#x27;</span>, <span class=\"string\">&#x27;copyJs&#x27;</span>, <span class=\"string\">&#x27;renameIndex&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.release.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cacheBuster</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Enhancements\"><a href=\"#Enhancements\" class=\"headerlink\" title=\"Enhancements\"></a>Enhancements</h2><p>If you wanted to go to the trouble, you could create this as one great big script that never actually put the files in the index directory.  But I have found having the files written out to the intermediate directory to be valuable for debugging purposes.</p>\n<h2 id=\"The-Final-Code\"><a href=\"#The-Final-Code\" class=\"headerlink\" title=\"The Final Code\"></a>The Final Code</h2><p>You can get <a href=\"//github.com/DaveMBush/BundleMinifyAndCacheBustWithGulp\">the complete Gulp script from GitHub</a>.</p>\n",
            "tags": [
                "bundling",
                "gulp",
                "minification",
                "node.js"
            ]
        },
        {
            "id": "http://davembush.github.com/cross-browser-javascript-copy-and-paste/",
            "url": "http://davembush.github.com/cross-browser-javascript-copy-and-paste/",
            "title": "Cross Browser JavaScript Copy and Paste",
            "date_published": "2016-01-14T13:30:00.000Z",
            "content_html": "<p>I’ve searched all over the Internet for a Cross Browser JavaScript Copy and Paste solution.  I couldn’t find anything that really worked.  But I was able to put together the bits and pieces I found into a rather simple solutions. As you may have noticed, I’ve written <a href=\"/tags/javascript/\">quite a few articles about programming in JavaScript</a> in the past couple of years because I’ve spent most of my time programming in JavaScript.  For the last three months, I’ve been working on a browser based application that needed to be able to copy and paste between the browser and an external spreadsheet.  The main struggle in making this all work correct is that what needs to be copied to the clipboard is the underlying data of the application.</p>\n<p>Getting this all working in IE, even the most recent version that runs under Windows 10, was pretty easy.  And fortunately, the browser of choice at this company is Internet Explorer.  But, it is IE 11, which takes twice as long to do anything with JavaScript as Chrome does.  Chrome is their secondary browser and my mission has been to find a way to get copy and paste working reliably using Chrome so that the end user would have a better experience with the application.</p>\n<p>While the work I’ve been doing has been using Angular, the solution that I provide in this article using plain JavaScript with no dependency on any framework.  I want the solution to be available regardless of what framework you might be predisposed to use.  If you use angular, or jQuery, or whatever, the code should be easy enough to adapt.</p>\n<p><img src=\"/uploads/2016/01/image-1.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Demo-HTML\"><a href=\"#Demo-HTML\" class=\"headerlink\" title=\"Demo HTML\"></a>Demo HTML</h2><p>For the purposes of this article, the HTML we are dealing with looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;element1&quot;</span>&gt;</span></span><br><span class=\"line\">        Element To Paste Into</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;element2&quot;</span>&gt;</span></span><br><span class=\"line\">        Another Element To Paste Into</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;App/app.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>tabindex</code> attribute makes the element focusable.  We’ll use the <code>id</code> in our JavaScript to bind event handlers to the element.</p>\n<h2 id=\"Demo-CSS\"><a href=\"#Demo-CSS\" class=\"headerlink\" title=\"Demo CSS\"></a>Demo CSS</h2><p>This is the CSS that we are using in the code to layout the <code>DIV</code>s:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#element1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">49%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#element2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">49%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This is really simple CSS.  Just enough to layout the screen with the <code>DIV</code>s side by side.</p>\n<h2 id=\"Trapping-CTRL-C-and-CTRL-V\"><a href=\"#Trapping-CTRL-C-and-CTRL-V\" class=\"headerlink\" title=\"Trapping CTRL-C and CTRL-V\"></a>Trapping CTRL-C and CTRL-V</h2><p>To start out with, we need a way of trapping the <code>CTRL-C</code> and <code>CTRL-V</code> keystrokes on the element we want to copy or paste or content into.  This is pretty standard JavaScript that anyone who has worked with JavaScript before should already be familiar with.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">keyBoardListener</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (evt.<span class=\"property\">ctrlKey</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(evt.<span class=\"property\">keyCode</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">67</span>: <span class=\"comment\">// c</span></span><br><span class=\"line\">                <span class=\"title function_\">copy</span>(evt.<span class=\"property\">target</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">86</span>: <span class=\"comment\">// v</span></span><br><span class=\"line\">                <span class=\"title function_\">paste</span>(evt.<span class=\"property\">target</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;element1&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keydown&#x27;</span>, keyBoardListener);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;element2&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keydown&#x27;</span>, keyBoardListener);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Internet-Explorer\"><a href=\"#Internet-Explorer\" class=\"headerlink\" title=\"Internet Explorer\"></a>Internet Explorer</h2><p>You may have noticed that the code above is calling a copy function and a paste function that we have not declared yet.  That is where a lot of the magic happens.</p>\n<p>Implementing copy and paste using Internet Explorer is pretty trivial.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paste</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">clipboardData</span>) &#123;</span><br><span class=\"line\">        target.<span class=\"property\">innerText</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">clipboardData</span></span><br><span class=\"line\">            .<span class=\"title function_\">getData</span>(<span class=\"string\">&#x27;Text&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copy</span>(<span class=\"params\">target</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">clipboardData</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">clipboardData</span>.<span class=\"title function_\">setData</span>(<span class=\"string\">&#x27;Text&#x27;</span>,</span><br><span class=\"line\">            target.<span class=\"property\">innerText</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, keep in mind that this method has been deprecated.  But it gives us a place to start.</p>\n<p>A better way to implement the copy, would be by using newer document.execCommand(‘copy’) because that method generally works well in all three of the major browsers.  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copy</span>(<span class=\"params\">target</span>)&#123;</span><br><span class=\"line\">    target.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Chrome-amp-Firefox\"><a href=\"#Chrome-amp-Firefox\" class=\"headerlink\" title=\"Chrome &amp; Firefox\"></a>Chrome &amp; Firefox</h2><p>But the problem with using this method is that in Chrome and Firefox, the copy command only works with elements that are editable.  In chrome the element doesn’t have to be visible and with Firefox it does.  This requires us to change our copy command so that it will work in all three browsers.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copy</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// standard way of copying</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textArea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span><br><span class=\"line\">    textArea.<span class=\"property\">setAttribute</span></span><br><span class=\"line\">        (<span class=\"string\">&#x27;style&#x27;</span>,<span class=\"string\">&#x27;width:1px;border:0;opacity:0;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textArea);</span><br><span class=\"line\">    textArea.<span class=\"property\">value</span> = target.<span class=\"property\">innerHTML</span>;</span><br><span class=\"line\">    textArea.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">execCommand</span>(<span class=\"string\">&#x27;copy&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textArea);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By making the text area 1 pixel wide, giving it no boarder, and making it transparent, it isn’t really visible to the user and it fulfills the requirements of all three browsers.</p>\n<h2 id=\"But-What-about-Paste\"><a href=\"#But-What-about-Paste\" class=\"headerlink\" title=\"But What about Paste?\"></a>But What about Paste?</h2><p>OK.</p>\n<p>Getting copy working in a three browsers is pretty trivial.  But, paste, on the other hand, is where all the tricks come into play.</p>\n<p>In short, you can’t read from the clipboard during the keyboard event.  However, we can trap the system level paste event.  Sometimes.  The problem is that ‘sometimes’ quirk.</p>\n<p>In Chrome the paste event will fire all of the time.  In Firefox, it will only fire when an editable field is on the screen.  Further, the paste event can only be bound to certain elements.  The only one we can be sure will always be available is the window element.  Capturing paste at the window level doesn’t tell us what element we should paste into.</p>\n<p>But with a little JavaScript magic we can use the keyboard event handler in combination with a paste event handler to grab the contents from the clipboard and put the data where we want it.</p>\n<p>We are going to need to put some variables in place that will hold</p>\n<ol>\n<li>A flag that will tell us that the paste event has fired.</li>\n<li>A variable to hold the data from the clipboard that we retrieve.</li>\n</ol>\n<p>When the paste event fires, we will set these two variables. Meanwhile, back in our paste event, we will setup a timeout function that will look to see if the flag has been set, and if it has it will retrieve the data from the data variable and place it into the DIV.</p>\n<p>Oh.  And we have that issue that the paste event will only fire if an editable field is on the screen.  Fortunately, paste fires after the keydown event.  So as part of our keydown event, we will dynamically create a textarea to enable the paste event for Firefox.</p>\n<p>So our paste code for Chrome and FireFox looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paste</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">waitForPaste</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!systemPasteReady) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(waitForPaste, <span class=\"number\">250</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        target.<span class=\"property\">innerHTML</span> = systemPasteContent;</span><br><span class=\"line\">        systemPasteReady = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(textArea);</span><br><span class=\"line\">        textArea = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// FireFox requires at least one editable</span></span><br><span class=\"line\">    <span class=\"comment\">// element on the screen for the paste event to fire</span></span><br><span class=\"line\">    textArea = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;textarea&#x27;</span>);</span><br><span class=\"line\">    textArea.<span class=\"property\">setAttribute</span></span><br><span class=\"line\">        (<span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;width:1px;border:0;opacity:0;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(textArea);</span><br><span class=\"line\">    textArea.<span class=\"title function_\">select</span>();</span><br><span class=\"line\">    <span class=\"title function_\">waitForPaste</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">systemPasteListener</span>(<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">    systemPasteContent =</span><br><span class=\"line\">        evt.<span class=\"property\">clipboardData</span>.<span class=\"title function_\">getData</span>(<span class=\"string\">&#x27;text/plain&#x27;</span>);</span><br><span class=\"line\">    systemPasteReady = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    evt.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;paste&#x27;</span>,systemPasteListener);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Back-to-Internet-Explorer\"><a href=\"#Back-to-Internet-Explorer\" class=\"headerlink\" title=\"Back to Internet Explorer\"></a>Back to Internet Explorer</h2><p>I know what you are thinking now.  Why not make Internet Explorer work the same way?  Yeah, I thought the same thing.  But as soon as you take out the lnternet Explorer specific paste code, you get an exception in the paste event handler.  Turns out, the only way the paste event works is if you access the clipboard.getData() method.  At least, that’s how it works today.  So, I’m just leaving that code as it is.</p>\n<p>And there you have it.  Cross browser JavaScript Copy and Paste.</p>\n<h2 id=\"Cross-Browser-JavaScript-Copy-and-Paste-Source-Code\"><a href=\"#Cross-Browser-JavaScript-Copy-and-Paste-Source-Code\" class=\"headerlink\" title=\"Cross Browser JavaScript Copy and Paste Source Code\"></a>Cross Browser JavaScript Copy and Paste Source Code</h2><p>A project with the final code is available on <a href=\"//github.com/DaveMBush/CrossBrowserCopyAndPaste\">GitHub</a>.</p>\n",
            "tags": [
                "javascript",
                "copy &amp; paste",
                "cross browser"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/",
            "url": "http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/",
            "title": "JavaScript Alchemy with Strings, Numbers, and Booleans.",
            "date_published": "2016-01-01T18:30:00.000Z",
            "content_html": "<p>Those who are relatively new to JavaScript might have the impression that JavaScript has no variable types.  After all, we declare everything using var and we can treat</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"string\">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>The same as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;1&quot;</span> == <span class=\"string\">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>But the reality is that JavaScript includes a very rich typing system with some well-known, and some little know methods of detecting types and converting from one type to another.</p>\n<p><img src=\"/uploads/2015/12/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Strings-and-String-Conversion\"><a href=\"#Strings-and-String-Conversion\" class=\"headerlink\" title=\"Strings and String Conversion\"></a>Strings and String Conversion</h2><p>The three most familiar types included in JavaScript are the String, Number, and Boolean types.  And one of the oldest tricks in JavaScript is the ability to convert a number to a string simply by concatenating a number on to a string.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = someString + someNumber;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;abc2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>In fact, anytime we “add” anything to a string, it turns it into a string</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someTruth = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = someString + someTruth;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;abctrue&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>And it doesn’t matter where we put the string.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someTruth = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someTruth + someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;trueabc&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Numbers-and-Number-Conversion\"><a href=\"#Numbers-and-Number-Conversion\" class=\"headerlink\" title=\"Numbers and Number Conversion\"></a>Numbers and Number Conversion</h2><p>But what happens if the string contains a number and we add that to a number?  Well, it depends.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someString + someNumber;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;39&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;93&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>but</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + +someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// 12;</span></span><br></pre></td></tr></table></figure>\n\n<p>Why? Well, prefixing the string variable with + converts that string to a number.  Under the hood, it is the same as if we had used the Number function to convert the string to a number.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + <span class=\"title class_\">Number</span>(someString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// 12;</span></span><br></pre></td></tr></table></figure>\n\n<p>But what if someString can’t be converted to a number?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + <span class=\"title class_\">Number</span>(someString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// NaN;</span></span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + +someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// NaN;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boolean-and-Boolean-Conversion\"><a href=\"#Boolean-and-Boolean-Conversion\" class=\"headerlink\" title=\"Boolean and Boolean Conversion\"></a>Boolean and Boolean Conversion</h2><p>Last week, I discussed <a href=\"/javascript-truthy-and-falsy-pain-and-pleasure/\">Truthiness and Falsiness in JavaScript</a>, but this week, I want to step back and discuss Booleans in the context of type information.</p>\n<p>You can convert any type to a Boolean value simply by putting a bang in front of it</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!anyVariable)</span><br></pre></td></tr></table></figure>\n\n<p>It doesn’t just invert the truthiness or falsiness of anyVariable, it actually converts it to a Boolean first and then inverts the Boolean value. In some code, you may see</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!!anyVariable)</span><br></pre></td></tr></table></figure>\n\n<p>because the person who wrote the code wants to test a Boolean value for true or false and not the truthiness of a non-Boolean value.  In my opinion, you don’t really gain anything by using this syntax.  But since you are likely to see it used by people who don’t really understand what JavaScript does under the hood without it, and think they are being more explicit and therefore making JavaScript faster (which they aren’t on both points) I include the syntax for completeness.</p>\n",
            "tags": [
                "javascript",
                "type conversion"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-truthy-and-falsy-%E2%80%93-pain-and-pleasure/",
            "url": "http://davembush.github.com/javascript-truthy-and-falsy-%E2%80%93-pain-and-pleasure/",
            "title": "JavaScript Truthy and Falsy – Pain and Pleasure",
            "date_published": "2015-12-24T18:30:00.000Z",
            "content_html": "<p>If you’ve been working with JavaScript at all for any length of time, you should know by now some of the basic rules of when something is true or false.  And yet, I still see code that messes this up. At the most simple level I see code that often looks like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trueVariable = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (trueVariable == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;what a surprise, it is true!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But the person who wrote this code, could have just as easily, and just as clearly written:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trueVariable = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (trueVariable) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;what a surprise, it is true!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Unless, of course, they wanted to know that the variable was both truthy and a boolean. In which case neither of the two code snippets above would be correct.  In that case, you would want to write the code like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trueVariable = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (trueVariable === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;what a surprise, it is true!&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What do we mean by “truthy” or “falsy”? <img src=\"/uploads/2015/12/image-1.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"Truthy-x2F-Falsy-Basics\"><a href=\"#Truthy-x2F-Falsy-Basics\" class=\"headerlink\" title=\"Truthy&#x2F;Falsy Basics\"></a>Truthy&#x2F;Falsy Basics</h2><p>JavaScript treats any of the following values as “falsy”.</p>\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>NaN (Not a Number.  The value, not the type)</li>\n<li>an empty length string (‘’, or “”)</li>\n<li>false</li>\n</ul>\n<p>Everything else is truthy. Here are some code snippets that demonstrate the rules.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (noneExistantVariable) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should not run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;noneExistantVariable&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> aNullVariable = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNullVariable) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should not run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aNullVariable&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anEmptyString = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (anEmptyString) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should not run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;anEmptyString&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> aStringWithZeroInIt = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aStringWithZeroInIt) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aStringWithZeroInIt&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> aNumberWithZero = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNumberWithZero) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should not run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aNumberWithZero&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> aNumberOtherThanZero = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNumberOtherThanZero) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aNumberOtherThanZero&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> aNoneNumericStringConvertedToANumber = <span class=\"title class_\">Number</span>(<span class=\"string\">&#x27;abc&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNoneNumericStringConvertedToANumber) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this console.log should not run</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;aNoneNumericStringConvertedToANumber&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mostly, writing our code like this adds a bit of convenience.  And yet, these shortcuts can also introduce unintended side effects.</p>\n<h2 id=\"Truthy-x2F-Falsy-Dangers\"><a href=\"#Truthy-x2F-Falsy-Dangers\" class=\"headerlink\" title=\"Truthy&#x2F;Falsy Dangers\"></a>Truthy&#x2F;Falsy Dangers</h2><p>For example, I recently ran into some code that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!obj.<span class=\"property\">min</span>) &#123;</span><br><span class=\"line\">    obj.<span class=\"property\">min</span> = <span class=\"string\">&#x27;NA&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The intention of this code is that if min was null, or had not been defined on the object, we would set the property to ‘NA’.  But what if min is defined as 0?  In that case, we want to leave min as it is.  But this code will reset the value to ‘NA’ which is not at all what we wanted. There are several ways you might fix this code depending on what the surrounding code might look like. You might add a check to see if obj.min is numeric, but what if it accidentally got set to a string?  You might try converting obj.min to a number and then testing the type.  Remember, a string that isn’t numeric converts to NaN. In this case, I think the best solution is to test for exactly what we intended.  Is it not null and not undefined?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">min</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj.<span class=\"property\">min</span> === <span class=\"literal\">null</span> ||</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> obj.<span class=\"property\">min</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    obj.<span class=\"property\">min</span> = <span class=\"string\">&#x27;NA&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In fact, I use this code so much that I have created a utility class that has this as a function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isNullOrUndefined</span>(<span class=\"params\">v</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v === <span class=\"literal\">null</span> ||</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> v === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"What-About\"><a href=\"#What-About\" class=\"headerlink\" title=\"What About !\"></a>What About !</h2><p>One final place you may get confused working with truthy and falsy is using the not operator, !. Just one quick simple example.  What if we take one of our first examples and place a ! in front of the variable we are testing?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!noneExistantVariable) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Is this truthy or falsy? You may be inclined to think that this is still falsy because the noneExistantVariable is still undefined and putting a ! in front of it will not change the fact.  But, what you may not realize is that the ! converts the expression to a boolean and the expression !noneExistantVariable is not just truthy, but is in fact the boolean value true.</p>\n",
            "tags": [
                "javascript",
                "falsy",
                "truthy"
            ]
        },
        {
            "id": "http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/",
            "url": "http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/",
            "title": "Adventures Working With Angular’s $scope",
            "date_published": "2015-11-26T13:30:00.000Z",
            "content_html": "<p>Every week when I write, I try to think back on the past week and think, “What have I learned that might be useful to others.”  Most weeks that is a pretty easy question to answer because I get most of my pleasure from learning new stuff.  But this week was different.</p>\n<p>When I sat down to write today, I couldn’t come up with a subject that couldn’t be covered with a sentence.  More of a tweet than a blog post.  It was so bad that I decided to go run the errands that are on my list and come back to it once I got home.</p>\n<p>Evidently, that was a good move because I think I have something that will be genuinely useful.  Although I will admit that if you’ve been working with AngularJS for very long at all, you may have already learned what I’m about to explain.</p>\n<p><img src=\"/uploads/2015/11/image2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>To make sure we are all on the same page, I want to cover the basics first.  Every controller has a $scope variable associated with it.  $scopes can be nested within each other, which allows us to either have child scopes add information to parent scopes using prototypical inheritance, or the child $scope can be isolated so that it can’t see the parent $scope up the nesting chain.  In either case, you can gain access to the parent $scope by using the $parent variable.</p>\n<p>What is important to realize about $scope is that it is attached to the element’s this pointer.  Every controller you create is its own object and $scope is just one of many properties that is part of that object.</p>\n<p>Now, in normal Angular programming, you may only ever create one controller per element.  But if you’ve ever created a directive that gets used on multiple places, or you’ve done anything with repeaters, you know that controllers can be created “under the hood.”  So that the $scope for the repeater item isn’t the same as the $scope for the element that holds the main collection.</p>\n<h2 id=\"scope-and-ControllerAs\"><a href=\"#scope-and-ControllerAs\" class=\"headerlink\" title=\"$scope and ControllerAs\"></a>$scope and ControllerAs</h2><p>In version 1.2 of Angular, the ControllerAs syntax was added, this can be added in a number of different ways that I won’t describe here.  That’s old news and there are plenty of places to find that information, including the Angular documentation.  But what isn’t clear at first, is what this feature does for us under the hood. Many people, who haven’t dug in deep under the hood assume that somehow this replaces $scope.  But in fact what it does is that it adds a variable onto $scope.  If you were to use ControllerAs redMonkey, what actually happens under the hood is that you end up with a variable named “redMonkey” that is hanging off of the controller’s $scope variable.</p>\n<p>In fact, what you end up with is this holding a property “$scope” and $scope holding a property “redMonkey” which is actually pointing to the controller’s this pointer.  Further, it is possible to have elements in your view bind to other variables hanging off of $scope while in the same view, other things are bound to variables hanging off of redMonkeys.</p>\n<h2 id=\"scope-and-Singletons\"><a href=\"#scope-and-Singletons\" class=\"headerlink\" title=\"$scope and Singletons\"></a>$scope and Singletons</h2><p>I hope at this point you have a relatively clear picture of how $scope works because this is where things start to get interesting.  You see, just about everything else that you create in Angular is a singleton.  That is, only one instance of it exist in the entire application.  So, what happens if you pass $scope into one of these singletons and you use that singleton multiple times on the same page? Well, there’s no telling for sure.  You might get lucky and everything will seem to work, until one day it doesn’t.  In fact, you may never notice that there is a problem if you only ever call it from one controller or directive at a time.</p>\n<p>But to use singletons effectively, what you need to do is that you will need to pass the scope to each of the functions you need to have use it, unless you can be sure it will only be able to use one scope at a time.  As a general rule, you should never store state in anything that is a singleton.</p>\n<p>How do I know? Well, this week, I was working on some code that I thought was overriding the control’s controller.  But, when I finally got it all working I found that it only worked some of the time because what I had really overridden was a method in a directive.  Another time this week, I was doing something similar thinking I was overriding a function in the main control’s $scope only to find out that the function I was overloading was in a nested repeater item.</p>\n<h2 id=\"Finding-scope-for-an-element\"><a href=\"#Finding-scope-for-an-element\" class=\"headerlink\" title=\"Finding $scope for an element\"></a>Finding $scope for an element</h2><p>If you need help figuring out what $scope is bound to what element in your code, you can use the <a href=\"//chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en\">Batarang plugin</a>.  You can also use the following JavaScript code using any developer tool you might want to use.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title function_\">element</span>(elementSelector).<span class=\"title function_\">scope</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scope-and-Repeaters\"><a href=\"#scope-and-Repeaters\" class=\"headerlink\" title=\"$scope and Repeaters\"></a>$scope and Repeaters</h2><p>So, back to one of my issues this week.  What I was working with was a tree control.  The tree was a set of repeaters within repeaters.  The original function that was bound to the click event was bound to the item scope so that each item was bound to its own instance of the onClick method.</p>\n<p>What I was trying to do was to override the function with a function in a directive I had created that wrapped the tree control and added a search box.  Fortunately, the item template could be changed, but how to get it to call MY click handler instead of the one it called by default? To further complicate matters, the $scope in the directives were isolated so I couldn’t add a new function on the scope I had control over and have the child scope see it.</p>\n<p>Or could I? The directive I was creating does have access to the scope of the tree control.  So, all I really needed to do was to create a new variable hanging off the tree control’s scope that pointed to the scope I wanted it to see and then in my template I could point to that variable and the function hanging off of it as the thing that should get called on click.</p>\n<p>Sure enough, that worked.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "scope"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-crazy-talk-are-you-guilty/",
            "url": "http://davembush.github.com/javascript-crazy-talk-are-you-guilty/",
            "title": "JavaScript Crazy Talk - Are you guilty?",
            "date_published": "2015-10-29T11:30:00.000Z",
            "content_html": "<p>I heard this so frequently, I decided it is time to write about it.</p>\n<blockquote>\n<p>(When writing web applications)  Business rules always belong on the server.</p>\n</blockquote>\n<p>One of the last conversations I had at the last place I was working was on this same issue.  And, I had a similar reaction a couple of years ago when I was doing a Selenium testing presentation and mentioned that the organization I was currently working for put all of the code on the client side and that the only thing the server did was save the data.</p>\n<p>Maybe you believe the same thing? Nothing is ever that cut and dry.</p>\n<p><img src=\"/uploads/2015/10/image3.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"First-Rule-of-Rhetoric\"><a href=\"#First-Rule-of-Rhetoric\" class=\"headerlink\" title=\"First Rule of Rhetoric\"></a>First Rule of Rhetoric</h2><p>Now, the first rule of rhetoric, and the rule you must always keep in mind is this.  Whenever someone states an absolute, it probably isn’t true.  Including this one <img src=\"/uploads/2015/10/wlEmoticon-smile.png\" alt=\"Smile\">.</p>\n<p>Here’s the deal.</p>\n<p>At one point there were good reasons for not putting business rules on the client side.  Chief among them was that JavaScript was slow.  If if you accounted for the round trip time, performing business logic on the server was generally slower.</p>\n<p>Another reason it was nearly never a good idea to put the business rules on the client is that no one really knew how to write good, structured, testable JavaScript.  But JavaScript has grown up and this is not the problem it once was.</p>\n<p>And finally, and the only reason we have left, is that despite many attempts to obfuscate JavaScript, at the end of the day, JavaScript is available for anyone who wants to, to read and steal trade secrets from.  Things have gotten better, but the truth remains, if I really want to, I can figure out what your JavaScript code is doing.</p>\n<h2 id=\"What-Is-a-Business-Rule\"><a href=\"#What-Is-a-Business-Rule\" class=\"headerlink\" title=\"What Is a Business Rule?\"></a>What Is a Business Rule?</h2><p>OK, so I’ve shown that most of the old rules don’t exist.  We’ll come back to the third old rule later.  What I want to discuss is the chief, “it depends” issue.</p>\n<p>What, exactly, qualifies as a business rule? I have to admit, this question has bothered me for years.</p>\n<h3 id=\"Three-Tiered\"><a href=\"#Three-Tiered\" class=\"headerlink\" title=\"Three Tiered\"></a>Three Tiered</h3><p>Take a look at a typical description of a three tiered architecture.</p>\n<blockquote>\n<p>View &lt;–&gt; Business Rules &lt;–&gt; Data Access</p>\n</blockquote>\n<p>I don’t know about you, but most of the applications I work on, the business logic layer does little more than pass the data from the Data Access Layer up to the View and back again.  There MAY be some transformations along the way.  It might combine data in a particular way.  But, really, the Business Logic Layer, strictly speaking, isn’t doing anything I would be uncomfortable letting my competitors know about.  There are only a few instances where I could argue that putting that code on the server was going to speed things up in any significant way.</p>\n<h3 id=\"Model-View-Whatever\"><a href=\"#Model-View-Whatever\" class=\"headerlink\" title=\"Model View Whatever\"></a>Model View Whatever</h3><p>Then there is the Model View Whatever patterns.  You know, MVC, MVVM, etc.  In this pattern, our business rules either get stuck in the controller or we put them in classes external to this pattern.  Often this code does little more than decide what elements should be enabled or disabled, assist in validation, and auto populate fields that the user could populate themselves but we do it to make life easier for them.</p>\n<p>Once again, I have to ask, what about a business rule needs to be hidden or would work faster if we put it on the server?</p>\n<h2 id=\"Who-Is-Using-Your-Application\"><a href=\"#Who-Is-Using-Your-Application\" class=\"headerlink\" title=\"Who Is Using Your Application?\"></a>Who Is Using Your Application?</h2><p>Most web applications today are built by organizations to be used by themselves in Intranet environments.  In the last organization I worked for, there was no danger that someone would steal our code.  Most of them had no idea how to do it, and if they did, they wouldn’t be able to read it anyhow.</p>\n<p>By asking the question, “Who is using this application?” You are really asking, “What’s the risk of putting code on the client side?”  Most of the time for most of our code in most of the organizations, including even publicly facing web sites, there is very little risk involved in putting all of our code on the client side.</p>\n<h2 id=\"Is-There-Any-Advantage\"><a href=\"#Is-There-Any-Advantage\" class=\"headerlink\" title=\"Is There Any Advantage?\"></a>Is There Any Advantage?</h2><p>Which comes down to the final question that needs to be asked.  Is there any advantage to putting code on the server instead of the client, or the other way around? In most cases, I think you will find, that the advantage of putting code on the client side far outweighs the advantages of putting that same code on the server side.  In some extreme cases, you may find that there is code that absolutely needs to live on the server.</p>\n<h2 id=\"Maybe-I’m-Missing-Something\"><a href=\"#Maybe-I’m-Missing-Something\" class=\"headerlink\" title=\"Maybe I’m Missing Something?\"></a>Maybe I’m Missing Something?</h2><p>OK.  So, maybe I’m missing something.  Do you agree or not?  Why?  Leave a comment.</p>\n",
            "tags": [
                "javascript",
                "business rules"
            ]
        },
        {
            "id": "http://davembush.github.com/multi-threaded-javascript-not-the-problem-you-think/",
            "url": "http://davembush.github.com/multi-threaded-javascript-not-the-problem-you-think/",
            "title": "Multi-Threaded JavaScript - Not The Problem You Think",
            "date_published": "2015-10-22T11:30:00.000Z",
            "content_html": "<p>A couple of weeks ago, I posted <a href=\"/7-reasons-every-programmer-needs-to-learn-javascript/\">7 Reasons Every Programmer Needs to Learn JavaScript</a>.  In the comments, Dean tried to refute my arguments first by claiming that my sources for JavaScript’s popularity were “a problem” because JavaScript is used in combination with other languages.  A point I refute in the comments.  But then he goes on to claim that “JavaScript is poorly suited for client side applications” because JavaScript is “Single Threaded”.  At this point, I just sighed and realized that Dean doesn’t want to learn JavaScript and that there MUST be some reason I’m not seeing for why he is so critical of JavaScript.</p>\n<p>But then Brandon jumped in and offered a very clear defense of JavaScript on the server side.  Nearly making this post unnecessary.</p>\n<p>And yet, there are things that were not said, and most people will never see the great comments that Brandon supplied.  And so we look at Multi-Threaded JavaScript in depth.</p>\n<p><img src=\"/uploads/2015/10/image2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"JavaScript-vs-Node-js\"><a href=\"#JavaScript-vs-Node-js\" class=\"headerlink\" title=\"JavaScript vs Node.js\"></a>JavaScript vs Node.js</h2><p>In Brandon’s first comment, he accurately points out that it is not fair to equate JavaScript the language to Node.js the environment.  This is because Node.js does actually spin up multiple threads as needed to handle the incoming traffic.  In fact, there have been several performance test comparing Node.js to ASP.NET applications which have all found that Node.js either keeps up with, or out performs ASP.NET.  This is because of the way that traffic is handled.  In ASP.NET the default implementation is for an incoming request to block until the response for that request is sent back to the client, while the default mechanism in Node is for the request to NOT block.  In node, everything that should be none-blocking is none-blocking.  This is a HUGE win, essentially making node “Multi-threaded” in the places that matter without having to think about it.</p>\n<blockquote>\n<p>Speed comparisons:</p>\n<ul>\n<li><a href=\"//www.haneycodes.net/to-node-js-or-not-to-node-js/\">Node.js Compared to ASP.NET without IIS</a></li>\n<li><a href=\"//mikaelkoskinen.net/post/asp-net-web-api-vs-node-js-benchmark\">WEBAPI vs Node.js</a></li>\n<li><a href=\"//blog.shinetech.com/2013/10/22/performance-comparison-between-node-js-and-java-ee/\">Node.js Compared to J2EE</a></li>\n<li><a href=\"//strongloop.com/strongblog/node-js-is-faster-than-java/\">What makes Node.js Faster than Java?</a></li>\n</ul>\n</blockquote>\n<p>Here’s a simple example.  You post data from the web browser to the server that needs to go into a database.  In ASP.NET, the default way of handling this would be to receive the request, send the data to the database, wait for the return value from the database, and return to the server.  All as a blocking call.</p>\n<p>In Node.js, you would&#x2F;could see this default behavior.  Information is sent to the server, the server sends to the database asynchronously and immediately returns to the client.  Of course, there are error handling issues that need to be addressed here, but the main point is that you don’t HAVE to wait and you probably shouldn’t.  If you need to send an error message back, that would be handled separately.</p>\n<p>So, I ask, which is going to appear to be faster?</p>\n<h2 id=\"Who-Needs-Multi-threading\"><a href=\"#Who-Needs-Multi-threading\" class=\"headerlink\" title=\"Who Needs Multi-threading?\"></a>Who Needs Multi-threading?</h2><p>OK.  So, we’ve addressed the environment issue.  But now I have to ask, when is the last time you really needed your application to be multi-threaded?  I can count the number of times that I used multi-threading capabilities in one of my applications (sever side or desktop application) one two hands in the last 28 years of programming.  The need for multi-threading is quite low relative to the number of programs written.  And even if you COULD write a multi-threaded application, the benefit compared to the complexity in your code tends to be relatively minor.</p>\n<h2 id=\"Multi-threading-If-You-Need-It-–-Client-Side\"><a href=\"#Multi-threading-If-You-Need-It-–-Client-Side\" class=\"headerlink\" title=\"Multi-threading If You Need It – Client Side\"></a>Multi-threading If You Need It – Client Side</h2><p>A little known and often under-utilized feature of JavaScript on the client side is Web Workers, which allow us to run a JavaScript file in a separate thread on the client side.  The “disadvantage” of using workers is that 1) they can’t access the DOM and 2) you have to use messaging to have the parent page and the worker talk to each other.  If you absolutely needed multi-threading on the Client Side, this would be the way to make it work today.  If you structure your code correctly, the separation from the DOM shouldn’t be an issue and messaging is a great way of communicating between a View Model and the View, even without the web worker process.</p>\n<h2 id=\"Multi-threading-If-You-Need-It-–-Server-Side\"><a href=\"#Multi-threading-If-You-Need-It-–-Server-Side\" class=\"headerlink\" title=\"Multi-threading If You Need It – Server Side\"></a>Multi-threading If You Need It – Server Side</h2><p>In the response I initially added to the multi-threading issue, I suggested running child processes.  This is the server side equivalent of using a worker process on the client side.  You spawn off some worker processes, wait for them all to return, collect the information they provide, and continue on.  As was pointed out, this is not “true multi-threading” because in a real multi-threaded application, every thread has access to the same memory space.  But you could argue that this is a good thing too.  There are a lot of issues with multiple threads accessing the same shared memory.  I’m not sure I would want the average programmer ABLE to do this.</p>\n<h2 id=\"Today-is-Not-Tomorrow\"><a href=\"#Today-is-Not-Tomorrow\" class=\"headerlink\" title=\"Today is Not Tomorrow\"></a>Today is Not Tomorrow</h2><p>Just because JavaScript doesn’t handle REAL multi-threading today, doesn’t mean this won’t be added in the future.  The language is still evolving.  I could see a point in the next 5 years where this capability is added in, or a framework is created that will make this available, or both.</p>\n<h2 id=\"Only-Use-Multi-Threading-Where-You-Need-It\"><a href=\"#Only-Use-Multi-Threading-Where-You-Need-It\" class=\"headerlink\" title=\"Only Use Multi-Threading Where You Need It\"></a>Only Use Multi-Threading Where You Need It</h2><p>OK.  But what if you REALLY need Multi-threading capabilities? As was pointed out, then JavaScript may not be the right language for the job.  But then, you could easily argue that C#, Java, and many other languages aren’t either.  If you REALLY need that kind of speed, you probably want to drop down to C&#x2F;C++ or even Assembly Language.  But why not mix and match.  It is rarely the case that your entire application needs to be multi-threaded.  In my experience, it is only some small percentage of the overall application that needs that ability.  So, why not create a node module that does the multi-threaded bit and wire it into your broader JavaScript application?</p>\n<h2 id=\"Wrapping-It-Up\"><a href=\"#Wrapping-It-Up\" class=\"headerlink\" title=\"Wrapping It Up\"></a>Wrapping It Up</h2><p>Clearly, JavaScript is a young language and Node.js is a young environment.  There are still issues that need to be worked out.  But for as young as it is, they have some pretty robust capabilities “out-of-the-box” that will only get better in the future.</p>\n<p>I’m excited and optimistic.  Excited about the potential and optimistic about the future capabilities for threading in JavaScript.</p>\n<p>But maybe you aren’t.  You know what, while I think it might be a career mistake, it is your career.  You don’t have to agree with me.  And since neither of us are omniscient, only time will tell which of us made the better choice.</p>\n",
            "tags": [
                "javascript",
                "threading"
            ]
        },
        {
            "id": "http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/",
            "url": "http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/",
            "title": "Create A Desktop Application using Angular, Bootstrap and C#",
            "date_published": "2015-10-15T11:30:00.000Z",
            "content_html": "<p>Last week I mentioned that it is possible to <a href=\"/7-reasons-every-programmer-needs-to-learn-javascript/\">create a desktop application using JavaScript</a> and that I had actually started working on an application that used Angular and Bootstrap for the presentation layer.  I actually have enough of that working that I can share the “how-to” with you.</p>\n<p><img src=\"/uploads/2015/10/image1.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Would-You-Do-This\"><a href=\"#Why-Would-You-Do-This\" class=\"headerlink\" title=\"Why Would You Do This?\"></a>Why Would You Do This?</h2><p>Well, I don’t know why YOU would do this, but the reason I’m doing this is because the more I do on the web, the less able I am to work with Windows Form, and I haven’t even bothered learning WPF.  I decided several years ago that I would niche down over web technologies.  And yet, I want to write this desktop application.  I tried to use Windows Form, which I am most familiar with, and just got frustrated.  I want to use a grid control.  But what I want to do with the control is something more like what I would do with Angular’s ui-grid than what I can do with the grid control built into Windows Form. I’m sure someone who really knew the desktop side of the fence would be able to do what I want to do.  But I want to leverage what I know.  And eventually, I may move the whole thing to Node.js even though to get the thing up and running, I am going to use C# for the main processing.</p>\n<h2 id=\"Rendering-HTML\"><a href=\"#Rendering-HTML\" class=\"headerlink\" title=\"Rendering HTML\"></a>Rendering HTML</h2><p>The first step toward getting all of this working is to just get HTML to render inside of a Windows Form (or WPF) executable.  I decided to use Windows Forms because I don’t need any of the WPF goodness that WPF would give me.  But you could tweak most of the setup I’m going to give you so that it would work with WPF if that’s your preferred platform.</p>\n<p>So, let’s start out by creating a Windows Form based application.  Once you have the project loaded, you’ll want to grab the <a href=\"//www.nuget.org/packages/CefSharp.WinForms/\">CefSharp Windows Forms DLL’s and related files</a>.  You can use NuGet to get these installed.  Just search for, “CefSharp.WinForms”.</p>\n<p>Because chromium uses Win32 or Win64 based C++ DLLs, you’ll need to configure your project to run as one or the other project.  This part was a little tricky.  What I found was that just changing the project settings for the default configuration named “Any CPU” was not enough.  What you need to do is to create a new project named “x64” or “x32” and change the settings there.</p>\n<p>Try compiling now, before you add any code.  If you’ve configured the project correctly with the CefSharp DLLs it should compile.</p>\n<p>The next thing you want to do is to insert the Chromium Browser control into the form.  Yes, it is a control like any other control.  No, you won’t find it on your toolbar.  No, it isn’t worth adding to the toolbar.  It is the only control that is going to be on the form so all you need to do is add it to the form using a few lines of code.</p>\n<p>First, add a private variable to hold the browser control.  It doesn’t need to be a member variable to get the HTML to render, but you’ll want it to be private later on.  So, just make it private to start with.</p>\n<p>Then, in your Load() method, add the following code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize CefSharp</span></span><br><span class=\"line\">     Cef.Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create a new browser window</span></span><br><span class=\"line\">    _browser =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://www.google.com/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the new browser window to the form</span></span><br><span class=\"line\">    Controls.Add(_browser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will also need code in your <code>FormClosing()</code> method.  You can create this in Visual Studio by selecting it from the dropdowns in the upper right corner of the code window.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Cef.Shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK.  Compile and run.  You should be able to load the Google web site and see it in your Windows Form.</p>\n<h2 id=\"Using-Our-Own-Files\"><a href=\"#Using-Our-Own-Files\" class=\"headerlink\" title=\"Using Our Own Files\"></a>Using Our Own Files</h2><p>OK, so we’ve proven that we can render HTML inside of a Windows Form application.  But that won’t do us much good if we want to run code on our own.  Most of the places on the web that talk about loading HTML inside of a desktop application using Chromium suggest that you copy the HTML files over as content and use the file:&#x2F;&#x2F; protocol to load them.  But there are two problems with doing that.  First, I don’t want the files generally accessible to whoever has this installed.  What if someone decides to change those files? The second problem I have is even worse.  Assuming I could live with the files being available on the file system, Angular doesn’t work from the file system.  It wants to run from <a href=\"http://somedomain/\">http://somedomain/</a>.  So at the very least, we need for our files to LOOK like they’ve been served from a web server.</p>\n<p>Fortunately, we can solve both of these problems.</p>\n<h3 id=\"Make-Our-Files-Resources\"><a href=\"#Make-Our-Files-Resources\" class=\"headerlink\" title=\"Make Our Files Resources\"></a>Make Our Files Resources</h3><p>To start with, we’ll just add one file.  Since it will be the beginning of our main application, name the file index.html and place it in a directory called “web” off the root of your project.  Put enough HTML in there that you’ll know the file actually got loaded.</p>\n<p>Then in the file properties, mark the file as an “Embedded Resource” instead of “Content” To load this file as a resource, you’ll use code that looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class=\"line\"><span class=\"keyword\">var</span> textStream = assembly.GetManifestResourceStream</span><br><span class=\"line\">                 (<span class=\"string\">&quot;TopLevelNamespace.web.index.html&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Make-it-LOOK-Like-it-Came-From-a-Server\"><a href=\"#Make-it-LOOK-Like-it-Came-From-a-Server\" class=\"headerlink\" title=\"Make it LOOK Like it Came From a Server\"></a>Make it LOOK Like it Came From a Server</h3><p>This is where some of the magic starts to happen.  The Chromium APIs have code that will let you register a pre-canned response object with a URL using a dictionary.  So, all we need to do is change the text string that we returned in the code above into a response object and register it with Chromium.</p>\n<p>The code to do that looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factory = (DefaultResourceHandlerFactory)(browser.ResourceHandlerFactory);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> response = ResourceHandler.FromStream(textStream);</span><br><span class=\"line\">factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span>, response);</span><br></pre></td></tr></table></figure>\n\n<p>And now, when we tell Chromium to load “<a href=\"http://local/%E2%80%9D\">http://local/”</a> it  will render the index.html file from our EXE.</p>\n<p>Cool! Now, loading each file like this is going to get rather tedious pretty fast.  So what we need is a mechanism for loading all of the files in our web directory automatically.  For this we need to be able to iterate over all of our resources in the web namespace and register them with an associated “http:&#x2F;&#x2F;” tag.</p>\n<p>Since the best that we can do is get a list of all of the resources in our assembly, we will have to do some filtering to only register stuff in the “web” namespace.  But, there is another issue.  All of the resources are going to be listed as “TopLevelNamespace.web.subnamespace.filename.extension” and we want to register them as “<a href=\"http://local/subnamespace/filename.extension%E2%80%9D\">http://local/subnamespace/filename.extension”</a>.  So there is a bit of string manipulation that we need to go through to register everything correctly.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the list of resources</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resourceNames = Assembly.GetExecutingAssembly()</span><br><span class=\"line\">    .GetManifestResourceNames();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For each resource</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> resource <span class=\"keyword\">in</span> resourceNames)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If it isn&#x27;t in the &quot;web&quot; namespace, skip it.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resource.StartsWith(<span class=\"string\">&quot;TopLevelNamespace.web&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Strip out the namespace that we don&#x27;t need.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = resource.Replace</span><br><span class=\"line\">        (<span class=\"string\">&quot;TopLevelNamespace.web.&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Function I made that turns the</span></span><br><span class=\"line\">    <span class=\"comment\">// resource into a textStream</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = LoadResource(url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make the namespace look like a path</span></span><br><span class=\"line\">    url = url.Replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastSlash = url.LastIndexOf(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        StringComparison.Ordinal);</span><br><span class=\"line\">    url = url.Substring(<span class=\"number\">0</span>, lastSlash) + <span class=\"string\">&quot;.&quot;</span> +</span><br><span class=\"line\">        url.Substring(lastSlash + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register the response with the URL</span></span><br><span class=\"line\">    factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span> + url,</span><br><span class=\"line\">        ResourceHandler.FromStream(r));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that I’ve explained all of the code.  The full class for loading the resources looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterWebsite</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Load</span>(<span class=\"params\">ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> factory = (DefaultResourceHandlerFactory)</span><br><span class=\"line\">            (browser.ResourceHandlerFactory);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> response = ResourceHandler</span><br><span class=\"line\">            .FromStream(LoadResource(<span class=\"string\">&quot;index.html&quot;</span>));</span><br><span class=\"line\">        factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span>, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> resourceNames = Assembly.GetExecutingAssembly()</span><br><span class=\"line\">            .GetManifestResourceNames();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> resource <span class=\"keyword\">in</span> resourceNames)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!resource.StartsWith(<span class=\"string\">&quot;TopLevelNamespace.web&quot;</span>))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> url = resource.Replace(<span class=\"string\">&quot;TopLevelNamespace.web.&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> r = LoadResource(url);</span><br><span class=\"line\">            url = url.Replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> lastSlash = url.LastIndexOf(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">                StringComparison.Ordinal);</span><br><span class=\"line\">            url = url.Substring(<span class=\"number\">0</span>, lastSlash) + <span class=\"string\">&quot;.&quot;</span> +</span><br><span class=\"line\">                url.Substring(lastSlash + <span class=\"number\">1</span>);</span><br><span class=\"line\">            factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span> + url,</span><br><span class=\"line\">                 ResourceHandler.FromStream(r));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Stream <span class=\"title\">LoadResource</span>(<span class=\"params\"><span class=\"built_in\">string</span> filename</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> textStream = assembly</span><br><span class=\"line\">            .GetManifestResourceStream(<span class=\"string\">&quot;TopLevelNamespace.&quot;</span></span><br><span class=\"line\">                + filename);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> textStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There is some obvious room for improvement here.  But the basics are there, you can tweak as needed.</p>\n<p>The main entry point is the Load method where we pass in a pointer to the browser control we created when we started this project.</p>\n<h2 id=\"Getting-JavaScript-to-talk-to-C\"><a href=\"#Getting-JavaScript-to-talk-to-C\" class=\"headerlink\" title=\"Getting JavaScript to talk to C#\"></a>Getting JavaScript to talk to C#</h2><p>Now that we have the basics out of the way, we need to get the two halves of our project talking to each other.  The first half is that we need a way for our JavaScript client side code to retrieve data and send notifications to our server side code.  Fortunately, the mechanisms for doing this are already built into Chromium.</p>\n<p>Any C# object can be registered with Chromium as a JavaScript object so that any property will become a JavaScript field and any method will become a JavaScript method.</p>\n<p>The API to make this happen looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser</span><br><span class=\"line\">    .RegisterJsObject(<span class=\"string\">&quot;NameYouWantJavaScriptToSeeThisObjectAs&quot;</span>,</span><br><span class=\"line\">        cSharpObjectHere);</span><br></pre></td></tr></table></figure>\n\n<p>In our JavaScript code, we would find that the window object now has a field named “NameYouWantJavaScriptToSeeThisObjectAs”</p>\n<h2 id=\"Getting-C-to-talk-to-C\"><a href=\"#Getting-C-to-talk-to-C\" class=\"headerlink\" title=\"Getting C# to talk to C#\"></a>Getting C# to talk to C#</h2><p>The reverse is just as easy.</p>\n<p>_browser.ExecuteScriptAsync(string) takes a string that is the JavaScript that you want to execute.</p>\n<h2 id=\"Getting-the-Communication-To-Play-Nice-with-Angular\"><a href=\"#Getting-the-Communication-To-Play-Nice-with-Angular\" class=\"headerlink\" title=\"Getting the Communication To Play Nice with Angular\"></a>Getting the Communication To Play Nice with Angular</h2><p>But getting this all to play well with <a href=\"//angularjs.org/\">Angular</a> requires just a little bit more.</p>\n<p>You may find that code on your screen that depends on a field or method that was registered with RegisterJsObject does not update when it should.  In fact, I would guess that this would happen most of the time because our C# object knows nothing of Angular and Angular knows nothing of our C# object.  So to fix this, we will need to make sure we $watch our C# object in our angular code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;<span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">RegisteredObject</span>.<span class=\"property\">property</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    $scope.<span class=\"property\">someField</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">RegisteredObject</span>.<span class=\"property\">property</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What this code does is that it tells Angular to check this field when it goes through its $digest cycle.  If it has changed since the last time it looked, it should run the second function that was passed in to $watch().</p>\n<p>But this isn’t the only code you will need to add.  Whenever you make a change to something on the C# side that the Angular code needs to reflect, you’ll need to tell Angular to run the $digest() cycle manually.  To do that, you’ll use that ExecuteScriptAsync() method to run some JavaScript.</p>\n<p>The easiest way to do this is to just run it off the top level $scope object.  The way you find the top level $scope object is to use JavaScript to find the element that you marked as “ng-app” in your HTML.  Once you’ve done that, you will see that it has a scope() method hanging off of it.  So this code will force a $digest cycle on everything from the top level $scope all of the way down.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser</span><br><span class=\"line\">    .ExecuteScriptAsync(<span class=\"string\">&quot;angular.element(&#x27;[ng-app]&#x27;).scope().$digest();&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Alternatively, you could skip setting the watch and have your ExecuteScriptAsync call set the $scope variables directly using something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser.ExecuteScriptAsync(</span><br><span class=\"line\">  <span class=\"string\">&quot;angular.element(&#x27;#IdOfViewThatHasAControllerAttached&#x27;).&quot;</span>+</span><br><span class=\"line\">  <span class=\"string\">&quot;scope().status = &#x27;this is a new status&#x27;;angular.&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;element(&#x27;[ng-app]&#x27;).scope().$digest();&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Where #IdOfViewThatHasAControllerAttached is an ID of a element in a view that you’ve associated with a controller.  You’ll still want your controller to pull from the C# JavaScript object for the initial load because the DIV may or may not be there when you do the push.  Personally, I prefer the $watch method.  There is less to think about on the C# side.</p>\n<p>And that’s how you create a desktop application using Angular, Bootstrap and C#.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "angular.js",
                "bootstrap"
            ]
        },
        {
            "id": "http://davembush.github.com/7-reasons-every-programmer-needs-to-learn-javascript/",
            "url": "http://davembush.github.com/7-reasons-every-programmer-needs-to-learn-javascript/",
            "title": "7 Reasons Every Programmer Needs to Learn JavaScript",
            "date_published": "2015-10-08T11:30:00.000Z",
            "content_html": "<p>In my recent discussions with hiring managers about how hard it is to find good developers, the realization has slowly dawned on me that the programming language to learn today is JavaScript.  This is particularly true if you are a web developer, but I would be inclined to just make a blanket statement.  If you are a programmer, you should learn JavaScript.</p>\n<p><img src=\"/uploads/2015/10/image.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Demand\"><a href=\"#Demand\" class=\"headerlink\" title=\"Demand\"></a>Demand</h2><p>The main reason that I say this, is that as JavaScript matures and things like Node.js become increasingly viable options, the demand for JavaScript programmers will continue to increase.  <a href=\"//www.codingdojo.com/blog/8-most-in-demand-programming-languages-of-2015/\">JavaScript already surpasses C#</a> as rated by demand, and is surpassed only by Java.  And if you were to take a look at projects available to GitHub, you would find that <a href=\"//github.com/blog/2047-language-trends-on-github\">JavaScript has a growing representation</a> that surpasses previous kingpins including Java and C#.  And finally, looking at the <a href=\"//redmonk.com/sogrady/2014/01/22/language-rankings-1-14/\">representation on StackOverflow</a>, we can see that JavaScript is in the top tier there as well.</p>\n<h2 id=\"Better-Pay\"><a href=\"#Better-Pay\" class=\"headerlink\" title=\"Better Pay\"></a>Better Pay</h2><p>According to SitePoint, <a href=\"//www.sitepoint.com/best-programming-language-learn-2015-job-demand-salaries/\">JavaScript pays better than C#</a>.  Again, Java pays a bit better right now.  But as demand for JavaScript grows, you can expect the pay to increase as well. On Gooroo, <a href=\"//gooroo.io/GoorooTHINK/Article/16300/Programming-languages--salaries-and-demand-May-2015/18672#.VhARuXpVhBc\">the pay vs demand shows a little different picture</a>. </p>\n<p>While the demand for JavaScript is evident, it is obvious that several languages that have a smaller demand actually pay better.  I suspect this is because many organizations still think of JavaScript as the language that anyone can use.  It will be a very painful lesson when they find out that “Anyone can program in JavaScript” really means, “Anyone can write crappy code in JavaScript”.  Which is where you and I step in to clean up the mess that was left behind.</p>\n<p>Over on StackOverflow, we see a <a href=\"//stackoverflow.com/research/developer-survey-2015\">very detailed breakdown of developers for the last three years</a>.  When you finally get down to the “Technologies Used” section what we find is that if you just call yourself a JavaScript programmer (I’m assuming client side here) you get paid better than Java and less than C# but if you say you are a Node.js programmer (which is all JavaScript) you are the second highest paid skill.  The only thing that pays better is Objective-C (and I’m assuming soon, Swift).</p>\n<h2 id=\"JavaScript-is-Maturing\"><a href=\"#JavaScript-is-Maturing\" class=\"headerlink\" title=\"JavaScript is Maturing\"></a>JavaScript is Maturing</h2><p>With the recent commitment of the standards committee to release a new JavaScript standard every year, it is clear that the amount of Syntactic Sugar that will be added on to JavaScript is going to be increasing every year for a while now.  One of the features I’m looking forward to is the ability to use the async and await keywords in my JavaScript code to eliminate callback hell.</p>\n<p>But, the reason this matters to you is that the sooner you start learning JavaScript, the easier it will be to learn.  All of the changes that happen after you learn it will all be incremental.  The browsers are also continually improving how they handle JavaScript code.  I can see a time in the future when browsers not only cache the JavaScript files, but cache the compiled version of the JavaScript files.  Bringing us closer to near binary speed.</p>\n<p>It is interesting to me that several years ago, people were debating the future of JavaScript and now, there is active work being done to make JavaScript a first class language.</p>\n<h2 id=\"Some-JavaScript-Programmers-Are-More-Equal-Than-Others\"><a href=\"#Some-JavaScript-Programmers-Are-More-Equal-Than-Others\" class=\"headerlink\" title=\"Some JavaScript Programmers Are More Equal Than Others\"></a>Some JavaScript Programmers Are More Equal Than Others</h2><p>I was talking with an old friend about a year ago.  He mentioned that he was the only one in his group of about 20 programmers who wrote JavaScript in such a way as to eliminate polluting the global scope with variables.  That is just the most simple of examples.  Many people who call themselves <a href=\"/7-javascript-interview-questions-to-weed-out-imposters/\">JavaScript programmers, don’t know the basics</a>.  And that is today.  Imagine what this is going to look like three to five years from now.</p>\n<p>And don’t forget that a lot of the tooling to support profiling and memory leaks is just at its infancy.  If you have those skills today, and you have marketed yourself well, you are already realizing that a lot of what I’m saying here is true.</p>\n<p>If you are interested in this kind of stuff, there are some courses over on PluralSight.  Just search for “JavaScript profiling”</p>\n<h2 id=\"Frameworks-Are-Maturing\"><a href=\"#Frameworks-Are-Maturing\" class=\"headerlink\" title=\"Frameworks Are Maturing\"></a>Frameworks Are Maturing</h2><p>With the new version of Angular in the works, Aurelia in the works as an alternative.  Commercial products such as Scencha’s EXTjs.  Node.js for server side programing.  And others…  No one can say that it is too hard to develop real applications using JavaScript.  I’m pretty sure, if I wanted to, I could write a desktop application that ran using nothing but JavaScript.  Oh.  Wait.  That’s already been done.  (Visual Studio Code for those of you who were asleep for that announcement.) Actually, since I’ve written that last paragraph I’ve started writing a desktop application that uses HTML with Bootstrap and Angular for the presentation layer and C# for mostly data access.  Yes, I know I could do the whole thing in JavaScript if I wanted to, but I’m going with what is most familiar right now.  Apologies to XAML fans.</p>\n<h2 id=\"JavaScript-Runs-Everywhere\"><a href=\"#JavaScript-Runs-Everywhere\" class=\"headerlink\" title=\"JavaScript Runs Everywhere\"></a>JavaScript Runs Everywhere</h2><p>JavaScript runs on every major browser on every major platform.  It runs on the server side on every major operating system.  Anyone writing a web site today of any major functionality is going to need someone who knows JavaScript to write the front end.  It doesn’t matter what the back end code was written in be it Java, PHP, .NET, Node.js or something else, the client side is going to need a JavaScript developer.  In fact, I still run into pockets of developers who just don’t know how powerful JavaScript is.  What this means for you is this.  If you become an awesome JavaScript programmer, you will have jobs available to you across all the various server side platforms.  It will help if you learn a little bit about those platforms.  But I’m talking about niching down in JavaScript so that you become THE go to person.</p>\n<h2 id=\"JavaScript-is-a-Compiled-Language\"><a href=\"#JavaScript-is-a-Compiled-Language\" class=\"headerlink\" title=\"JavaScript is a Compiled Language\"></a>JavaScript is a Compiled Language</h2><p>It may shock you to know that, technically, JavaScript is a compiled language.  This has two implications.  First, once the code is compiled, it is possible for it to run as fast as any other executable.  Second, it is technically possible to write tooling for JavaScript that would create a binary file that does not need to be recompiled every time the code is loaded into memory.</p>\n<h2 id=\"What-Do-You-Think\"><a href=\"#What-Do-You-Think\" class=\"headerlink\" title=\"What Do You Think?\"></a>What Do You Think?</h2><p>Of course this is all totally opinion.  What do you think?  Leave me a comment.</p>\n",
            "tags": [
                "javascript",
                "career"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-scope/",
            "url": "http://davembush.github.com/javascript-scope/",
            "title": "JavaScript Scope",
            "date_published": "2015-06-18T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/06/ppl-men-060.jpg\" alt=\"ppl-men-060\" title=\"ppl-men-060\"></p>\n<p>If you’ve been programming in any other environment than JavaScript for a while, you may be making assumptions about JavaScript Scope that just aren’t true.  One of those assumptions is how variables get evaluated when you run the JavaScript code and what variables are visible and at what point in the code they are visible.</p>\n<p>Just as a test to see how well you know your JavaScript, let’s create a few tests scenarios.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quiz\"><a href=\"#Quiz\" class=\"headerlink\" title=\"Quiz\"></a>Quiz</h2><h3 id=\"1-Given-the-following-code\"><a href=\"#1-Given-the-following-code\" class=\"headerlink\" title=\"1) Given the following code:\"></a>1) Given the following code:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo = <span class=\"string\">&quot;xyz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    foo = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bar</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br></pre></td></tr></table></figure>\n\n<p>What is displayed in the console window when console.log(foo) is executed?</p>\n<p>Why?</p>\n<h3 id=\"2-Given-the-following-code\"><a href=\"#2-Given-the-following-code\" class=\"headerlink\" title=\"2) Given the following code:\"></a>2) Given the following code:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;final i: &#x27;</span> + i);</span><br></pre></td></tr></table></figure>\n\n<p>What is the value of i when <code>console.log(‘final i: ‘ + i)</code> is executed?</p>\n<p>Why?</p>\n<h3 id=\"3-What-is-wrong-with-the-following-code\"><a href=\"#3-What-is-wrong-with-the-following-code\" class=\"headerlink\" title=\"3) What is wrong with the following code?\"></a>3) What is wrong with the following code?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo was called&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code\"><a href=\"#4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code\" class=\"headerlink\" title=\"4) Why would changing the previous code to this next block of code fix the issue with the previous code?\"></a>4) Why would changing the previous code to this next block of code fix the issue with the previous code?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo was called&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Answers\"><a href=\"#Answers\" class=\"headerlink\" title=\"Answers\"></a>Answers</h2><ol>\n<li><p>The value of foo when console.log(foo) is executed is “xyz”</p>\n</li>\n<li><p>The value of i when console.log(‘final i: ‘ + i) is executed is 10</p>\n</li>\n<li><p>foo is declared but undefined when we try to call it on the first line</p>\n</li>\n<li><p>because foo is both declared and defined when it is called on the first line</p>\n</li>\n</ol>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>How did you do?</p>\n<ol>\n<li>“Hoisting”</li>\n</ol>\n<hr>\n<p>The first thing you need to understand about how JavaScript processes code is that it goes through the block of code you are working with and processes the variable declarations first.  That is anything in the global scope (window for browsers, global for server) or anything within a function block.  From the JavaScript compiler’s perspective, the code in example 1 looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo = <span class=\"string\">&quot;xyz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">    foo = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bar</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br></pre></td></tr></table></figure>\n\n<p>So that the foo &#x3D; “abc” line assigns the string “abc” to the variable foo in the bar function’s local scope.  Not impacting the variable foo in global scope so that the result at the end of the code sample is that the foo variable still has the value “xyz”.</p>\n<ol start=\"2\">\n<li>Only functions and catch blocks create “block scope”</li>\n</ol>\n<hr>\n<p>In most languages that I use, if I wanted to create a variable that only had effect within a for, if, or while block, I could create a variable within the braces, or inline like in this example, and the code in the outer block would be left untouched.  But in JavaScript, this would only work if you were using the LET keyword which only appears in ECMA6 and above.</p>\n<p>In JavaScript, it is perfectly legal to declare a variable multiple time.  The compiler will not complain.  So, when we run the code in example 2, the declaration within the for() is ignored and it just reuses the declaration at the beginning of the code snippet.</p>\n<p>If you really wanted to declare a function within its own scope, you could create the scope with a try&#x2F;catch block, like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;<span class=\"keyword\">throw</span> i;&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;final i: &#x27;</span> + i);</span><br></pre></td></tr></table></figure>\n\n<p>Which would give you the behavior you were probably expecting.  The code above will print out ‘final i: 20’ like you were probably expecting above.</p>\n<ol start=\"3\">\n<li>“Hoisting” and function assignments</li>\n</ol>\n<hr>\n<p>Going back to our discussion about variable declarations being processed first, and then doing any assignments, it becomes obvious that we can’t call a function that we haven’t assigned to the variable yet.  I don’t think I need to discuss this any further than I already have.  This works like any other variable declaration as I’ve discussed above.</p>\n<ol start=\"4\">\n<li>“Hoisting” and function declarations</li>\n</ol>\n<hr>\n<p>Function declarations, on the other hand, behave differently than function assignments.  In the case of function declarations, the variable AND the function that is “assigned” to it get pulled to the top of our code.  So using function declarations over function assignments is preferred simply because it assures us that the function pointer is available whenever we need it.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, maybe you thought you knew JavaScript.  Maybe you did.  Maybe you discovered you didn’t know it as well as you thought. I would encourage you to really learn the language.</p>\n",
            "tags": [
                "javascript",
                "scope",
                "hoist"
            ]
        },
        {
            "id": "http://davembush.github.com/is-javascript-broken/",
            "url": "http://davembush.github.com/is-javascript-broken/",
            "title": "Is JavaScript Broken?",
            "date_published": "2015-01-15T13:05:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/01/IsJavaScriptBroken.png\" alt=\"IsJavaScriptBroken\" title=\"IsJavaScriptBroken\"></p>\n<p>I read a post this week that was essentially a rant on the way JavaScript handles concatenation.  It states that JavaScript is in someway “broken” (without actually using that word) because JavaScript does not work the way this person expected it to.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Here-is-a-rebuttal\"><a href=\"#Here-is-a-rebuttal\" class=\"headerlink\" title=\"Here is a rebuttal.\"></a>Here is a rebuttal.</h2><p>JavaScript works the way JavaScript was designed to work, and the way many other languages work.  The fact that it does not have the Do_what_I_was_thinking() function is a separate issue (which so far as I know, no language has yet).</p>\n<p>The main statement I have to take issue with is:</p>\n<blockquote>\n<p>The + operator is known to most of us as a symbol for addition, so it does not make sense to use it in [the instance where we want to concatenate strings]</p>\n</blockquote>\n<p>Oh?  Really? How about C++, C#, Java and the various flavors of VB?  Each of these languages have an overloaded + operator that performs concatenation.</p>\n<p>Then as you read through the article you discover that the REAL issue is the fact that you can’t concatenate numbers by either using the concat() method or by using the + because numbers are … well … numbers.</p>\n<p>But here again I have to point to the fact that JavaScript works similar to other languages that are not type-safe.</p>\n<p>For example VBScript, VB6 using variants and probably others have this same basic issue.  If you are going to use the plus operator for concatenation and for math, you have to have rules about when it will be used for each.  Since numbers are typically ADDED together and strings are typically CONCATENATED, it make sense the the default behavior would be for those behaviors to be primary in those instances.  In the case where you want to concatenate two numbers, the obvious choice would be to somehow force them to be strings instead of numbers.  And in all of the languages I know of where this is needed, putting an empty string in the chain of numbers you want to concatenate is how you achieve this behavior.</p>\n<p>What is humorous is that this person went  through a long series of commands to illustrate how painful it is to actually coerce numbers into being concatenated and then shows a “simple” method they’ve created to create a concat() method for numbers that essentially amounts to what anyone who knows JavaScript well would do inline:</p>\n<p>var newValue &#x3D; “” + number + number</p>\n<p>So, no JavaScript isn’t broken any more than any other language.  It has a defined set of rules that it follows.  Saying that it is broken is like saying English is broken.  And frankly, I could make a much stronger case for English being broken than I could for any programming language being broken including JavaScript.</p>\n",
            "tags": [
                "javascript",
                "concatenation",
                "quirks"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-boolean-confusion/",
            "url": "http://davembush.github.com/javascript-boolean-confusion/",
            "title": "JavaScript Boolean Confusion",
            "date_published": "2014-08-07T17:00:00.000Z",
            "content_html": "<p>What could possibly be confusing about JavaScript Booleans you ask?</p>\n<p>Well, here’s several logical statements written in JavaScript.  Do you know what each does?</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;0&quot;</span> == <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;1&quot;</span> === <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!!<span class=\"string\">&quot;0&quot;</span> == <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;0&quot;</span> != <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;0&quot;</span> !== <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> someVariable;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(someVariable)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(someVariable == <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!someVariable === <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!!someVariable === <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"if-“0”-x3D-x3D-true\"><a href=\"#if-“0”-x3D-x3D-true\" class=\"headerlink\" title=\"if(“0” &#x3D;&#x3D; true)\"></a>if(“0” &#x3D;&#x3D; true)</h2><p><code>&quot;0&quot; == true</code> resolves to false.  Why?  Because both sides of the equal are converted to numerics and then evaluated.  This gives us, <code>0 == 1</code> which is in fact false.</p>\n<p>However,</p>\n<h2 id=\"if-“0”\"><a href=\"#if-“0”\" class=\"headerlink\" title=\"if(“0”) \"></a>if(“0”) </h2><p>is true.  This is because there is no conversion needed.  Any string is truthy.</p>\n<p>OK.  So then, what would you expect</p>\n<h2 id=\"if-“1”-x3D-x3D-x3D-true\"><a href=\"#if-“1”-x3D-x3D-x3D-true\" class=\"headerlink\" title=\"if(“1” &#x3D;&#x3D;&#x3D; true)\"></a>if(“1” &#x3D;&#x3D;&#x3D; true)</h2><p>to be?  If you said, “true” you would be wrong.  And just when you thought you were getting the hang of this.</p>\n<p>This puzzle illustrates the difference between the double equals (&#x3D;&#x3D;) and triple equals (&#x3D;&#x3D;&#x3D;) evaluators in JavaScript.  You see, if you use double equals, JavaScript will always convert both sides to a common type and then do the evaluation.  However, triple equals says that both sides have to be the same type and the same value to be equal.  Since a String is not a Boolean type, “1” &#x3D;&#x3D;&#x3D; true evaluates to false.</p>\n<p>Do you think you are getting the hang of this yet?  OK.  What does the next statement evaluate to?</p>\n<h2 id=\"if-”0”-x3D-x3D-true\"><a href=\"#if-”0”-x3D-x3D-true\" class=\"headerlink\" title=\"if(!!”0” &#x3D;&#x3D; true)\"></a>if(!!”0” &#x3D;&#x3D; true)</h2><p>This evaluates to true.  If you thought it would be false, you probably applied the !! after the types were converted.  But the operator precedence on this is to apply the ! operators first.  So ! some valid string is false and ! false is true.  So true &#x3D;&#x3D; true is true.</p>\n<h2 id=\"The-operator\"><a href=\"#The-operator\" class=\"headerlink\" title=\"The ! operator\"></a>The ! operator</h2><p>The next two examples I gave were to simply point out that !&#x3D; is the opposite of double equal and !&#x3D;&#x3D; is the opposite of triple equal.  Beyond that, they work the same.</p>\n<p>So, if(“0” !&#x3D; true) would evaluate to true and if(“0” !&#x3D;&#x3D; true) would also evaluate to true.</p>\n<h2 id=\"if-someVariable\"><a href=\"#if-someVariable\" class=\"headerlink\" title=\"if(someVariable)\"></a>if(someVariable)</h2><p>The last set of examples illustrates what happens if a variable is undefined or null.</p>\n<p>Since we never gave someVariable a value, it is undefined and so if(someVariable) would evaluate to false.  Undefined and null variables evaluate to falsy.</p>\n<p>However, that does not mean that it is a boolean value.</p>\n<p>So, if(someVariable &#x3D;&#x3D; true) evaluates to false, if(someVariable &#x3D;&#x3D;&#x3D; false) evaluates to false, if(!someVariable &#x3D;&#x3D;&#x3D; true) evaluates to true and if(!!someVariable &#x3D;&#x3D;&#x3D; true) evaluates to false.</p>\n<h2 id=\"Implications\"><a href=\"#Implications\" class=\"headerlink\" title=\"Implications\"></a>Implications</h2><p>The main implication of all of this is that if you are going to compare two variables for equality, you should first convert them to a common type and then compare them using the triple equals operator.</p>\n<p>However, if you are just evaluating a variable for truthiness, using just the variable, as in if(someVariable) is clear enough.  You don’t gain much by using if(!!someVariable) or even if(!!someVariable &#x3D;&#x3D;&#x3D; true) syntax.</p>\n",
            "tags": [
                "javascript",
                "boolean"
            ]
        }
    ]
}