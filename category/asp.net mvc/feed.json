{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"asp.net mvc\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "url": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "title": "Using Node.js and Gulp with ASP.NET in Visual Studio 2015",
            "date_published": "2016-01-21T13:30:00.000Z",
            "content_html": "<p>As I’ve written before, <a href=\"/tags/angular-js/\">I’m using AngularJS a lot</a> recently to write the client side of my web applications.  As I’ve gotten to the end of my current project, I found myself needing to implement cache busting and while I am at it compression.  But because I’m <a href=\"/asp-net-angular-js-html5mode/\">using a regular HTML page to serve up the shell for my single page application</a>, using the regular ASP.NET on the fly compression wasn’t going to work for this application.</p>\n<p>But there are a lot of tools in the Node.js space that will work.  Would it be possible to wire node.js and Gulp with ASP.NET in my existing web project? It turns out you can.</p>\n<p>Although, at this point, it isn’t as straightforward as most other things in Visual Studio.</p>\n<p><img src=\"/uploads/2016/01/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Installing-Node-js\"><a href=\"#Installing-Node-js\" class=\"headerlink\" title=\"Installing Node.js\"></a>Installing Node.js</h2><p>I’m assuming that you’ve already installed Visual Studio 2015.  If you did that, you already have Node.js installed.  The problem is, it isn’t the most recent version.  So, what you want to do is to install the most recent of version from the <a href=\"//nodejs.org\">Node.js site</a> manually.</p>\n<p>Once you have Node.js installed, the next thing you will need to do is that you’ll need to configure Visual Studio to use the version you installed instead of the version it installed.  To do this, navigate to “Tools” &gt; “Options”.  In the resulting dialog, find the “Projects and Solutions” &gt; “External Web Tools” leaf in the tree control and then add the directory to your newly installed Node.js installation to the top of the list of paths to external tools. <a href=\"/uploads/2016/01/image-3.png\"><img src=\"/uploads/2016/01/image_thumb.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>To use Gulp, you will need to install Gulp using the Node Package Manager (npm).  There are several places where I got stuck.</p>\n<p>First, I tried to install gulp using the Node Interactive Window (CTRL-K,N).  This works fine when you want to install something globally, but when you want to install something with the –save or –save-dev option, you will get the error message: <code>Please specify a valid Node.js project or project directory.</code> It took me several tries before it finally dawned on me that it wasn’t just asking “What project do you want to install this in?”  It was asking “What Node project do you want to install this in?” We don’t have a node project, so this will never work.  What you will need to do instead is that you’ll need to shell out to the command prompt, change to the project directory, and then type your npm commands.</p>\n<h2 id=\"Productivity-Power-Tools\"><a href=\"#Productivity-Power-Tools\" class=\"headerlink\" title=\"Productivity Power Tools\"></a>Productivity Power Tools</h2><p>You can shell out to the command prompt much easier if you install the <a href=\"//visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d?SRC=VSIDE\">Visual Studio Productivity Power Tools</a>  Once these are installed, you can right click on the project you want to install npm packages into and select “Power Commands” &gt; “Open Command Prompt…” from the menu.</p>\n<h2 id=\"NPM-init\"><a href=\"#NPM-init\" class=\"headerlink\" title=\"NPM init\"></a>NPM init</h2><p>Much like NuGet’s packages.config file, NPM uses a json file to keep track of what should be installed.  To create this file, run the command <code>npm init</code> and answer the questions.</p>\n<p>Next, in Visual Studio, click the “Show all files” icon in Solution Explorer, find the package.json file that you just created with the <code>npm init</code> command, and include the package.json file in your project.  This will cause it to be part of your commit so that anyone who pulls your code down from version control will have the packages installed automatically.</p>\n<h2 id=\"Install-Gulp\"><a href=\"#Install-Gulp\" class=\"headerlink\" title=\"Install Gulp\"></a>Install Gulp</h2><p>Once you’ve shelled out to the command prompt, you’ll need to type in the following two commands.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>If you open your package.json file now, you will see an entry for gulp.</p>\n<h2 id=\"Create-a-Gulp-task\"><a href=\"#Create-a-Gulp-task\" class=\"headerlink\" title=\"Create a Gulp task\"></a>Create a Gulp task</h2><p>The final step in this process is to create the actual Gulp job.  To do that, all you need to do is create a gulpfile.js file in the root of the project.</p>\n<p>Inside the gulpfile.js file, add the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And now you have a default task for gulp installed.</p>\n<h2 id=\"Make-Gulp-Part-of-the-Build\"><a href=\"#Make-Gulp-Part-of-the-Build\" class=\"headerlink\" title=\"Make Gulp Part of the Build\"></a>Make Gulp Part of the Build</h2><p>The final step here is that we want to make gulp part of the build.  Otherwise, what’s the point? In Visual Studio 2015, this is really rather simple.</p>\n<p>From the main menu, go to “View” &gt; “Other Windows” &gt; “Task Runner Explorer”.  You should end up looking a a sub windows in Visual Studio that looks like this: <img src=\"/uploads/2016/01/image-4.png\" alt=\"image\" title=\"image\"> In gulp, you might have multiple tasks in a gulp file. We only have one right now, “default”.  If you right click on that, you will see that you can bind that task to one of the four bindings on the right.</p>\n<p>That’s all you have to do.  Now the gulp task “default” is bound to a specific build step.  You can do all kinds of file processing with this which we may cover in a later post.  But for now, you can at least get it all wired in.</p>\n",
            "tags": [
                "javascript",
                "visual studio",
                "asp.net",
                "gulp",
                "node.js"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "url": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "title": "ASP.NET, Angular.js & html5mode",
            "date_published": "2015-09-24T11:30:00.000Z",
            "content_html": "<p>I’ve been looking at Angular.js recently.  I’ve already got enough of a project done in <a href=\"//www.mongodb.org/\">MongoDB</a> (with <a href=\"//mongoosejs.com/\">Mongoose</a>), <a href=\"//expressjs.com/\">Express</a>, <a href=\"//angularjs.org/\">Angular</a> and <a href=\"//nodejs.org/\">Node.js</a> (MEAN) to be comfortable with how Angular works.  But I wanted to give it a try using ASP.NET as the back end.  I’m always learning.  Always improving.</p>\n<p>To start out, I just setup an index.html page to hold my basic form as I got the basic look and feel going.  But as I progressed, I wanted to make sure I progressed, I wanted to add in the capability of using Angular’s html5mode for the client side routing.</p>\n<span id=\"more\"></span>\n\n<p>For those of you who are new to Angular, Angular is a client side JavaScript framework that will allow you to create web applications where much of the processing happens on the client side instead of the server side.  That’s cool enough.  But it also adds the ability to handle client side routing, just like ASP.NET’s MVC handles server side routing.  This allows you to have a client side “master page” that can suck in the differences from the server as it needs them based on the url that is in the address bar.  In fact, there is an extension that will let you have sub routes as far down as you need.</p>\n<p>Out of the box, Angular, and most other frameworks that implement client side routing, using the hash symbol to specify the route.  For example</p>\n<p>http:&#x2F;index.html#&#x2F;pathToRoute</p>\n<p>This allows the routing to work on older browsers.</p>\n<p>ASP.NET, Angular.js &amp; html5mode <img src=\"/uploads/2015/09/image3.png\" alt=\"image\" title=\"image\"> ASP.NET, Angular.js &amp; html5modeBut if you are working with newer browsers that support HTML5, you can avoid the hash tag and just create a route that looks like this:</p>\n<p>http:&#x2F;pathToRoute</p>\n<p>Which you have to admit, looks a whole lot nicer.</p>\n<p>But here is where the problems start.</p>\n<p>As soon as you implement html5mode on a site that is hosted in IIS or IIS express, you will get a 404 error because your initial request to the server is going to ask the server for a path that doesn’t exist.</p>\n<p>There are a few ways that you can take care of this.</p>\n<h2 id=\"Return-a-default-view-for-every-undefined-server-route\"><a href=\"#Return-a-default-view-for-every-undefined-server-route\" class=\"headerlink\" title=\"Return a default view for every undefined server route.\"></a>Return a default view for every undefined server route.</h2><p>One of the first suggestions you are likely to find suggest creating a default view for all routes that start with “&#x2F;angular&#x2F;”.</p>\n<p>This is a great start.  But here are my issues with it.  If I really want to use Angular the way it was intended to be used, I would prefer to not have to use MVC on the server side at all.  While not a huge hit, writing a razor page just to get my initial angular page up seems to be a bit of overkill.  There must be a way to do this without creating a *.chshtml file.  I also don’t want to have a sub directory for my page.  Why can’t I just go to <a href=\"//blog.dmbcllc.com\">http://blog.dmbcllc.com</a> as my default route?  And why can’t I just return a plain old html file?! Well, it turns out you can.  A slight modification of the “Return a default view” method is to have your controller return your html page.</p>\n<h2 id=\"Return-an-HTML-page-direct-from-the-controller\"><a href=\"#Return-an-HTML-page-direct-from-the-controller\" class=\"headerlink\" title=\"Return an HTML page direct from the controller.\"></a>Return an HTML page direct from the controller.</h2><p>If you dig a bit further, you’ll find that someone else has realized that you can just return your HTML directly from the controller.  The magic to this trick is all similar to what the guy in the original article did except for in the controller, instead of returning the view, he returns the html file that contains the main html.</p>\n<p>public ActionResult Index()<br>{<br>    return File(“~&#x2F;yourstartpage.html”, “text&#x2F;html”);<br>}</p>\n<p>And his main MVC route looks like this:</p>\n<p>routes.MapRoute(<br>      name: “Default”,<br>      url: “{*.}”,<br>      defaults: new<br>      {<br>        controller &#x3D; “Home”,<br>        action &#x3D; “Index”,<br>      }<br>  );</p>\n<p>This implementation has the added benefit that I’m not tied to a specific sub directory because it just says, “Any URL that doesn’t have a real file behind it should resolve to this default route.” Of course, you may be thinking, but what about the WEB API route, or any other routes I want in my system.  Well, just make sure this route comes first and you have other routes to cover the real routes you want to be able to support.</p>\n<p>Now, this gets past the objection I had with the first solution.  I no longer have to have a route.  But, why should I need to call the controller?  This is just a static HTML file we are talking about.  I should be able to by pass ASP.NET handling this file and just have IIS serve it up directly to me.</p>\n<h2 id=\"Use-the-URL-Rewrite-Module\"><a href=\"#Use-the-URL-Rewrite-Module\" class=\"headerlink\" title=\"Use the URL Rewrite Module\"></a>Use the URL Rewrite Module</h2><p>A little deeper digging on the search engines reminded me that  I could just setup the <a href=\"//www.iis.net/downloads/microsoft/url-rewrite\">URL Rewrite module</a> to return my main HTML page when no real page is available.  BTW, URL Rewrite is built into IIS Express, so it should work in your development environment if you are using IIS Express as well as under IIS with the module installed. The main step to getting this working is to add the following XML to your Web.config file:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;angularjs routes&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">stopProcessing</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;.*&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">conditions</span> <span class=\"attr\">logicalGrouping</span>=<span class=\"string\">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsFile&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsDirectory&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_URI&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;^/(api)&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Rewrite&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;/&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You should already have a system.webServer section in your web.config file, so you just need the rewrite rule inside of it.</p>\n<p>Basically what this rule does is that it says, “If you can’t find the file, and the path you are looking for is not a subdirectory of the “api” directory, return the default file at the root.”  The part about the API directory allows your WEB API stuff to continue working.</p>\n<p>The only other thing you will need to do, which isn’t unique to ASP.NET or MVC, is that you will need to remember to add the base tag to the HEAD section of your HTML file.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And all of your client side routing with HTML5 issues should be solved. Notice that no ASP.NET code has to run to get this working.  In fact, the only time you’ll need to run ASP.NET is to call the server for data.</p>\n",
            "tags": [
                "routing",
                "asp.net",
                "angular.js",
                "iis"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "url": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "title": "ASP.NET MVC - Controller to View",
            "date_published": "2013-10-30T19:04:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/ka-vol1-100.jpg\" alt=\"ka_vol1_100\"> A couple of weeks ago we looked at ASP.NET MVC routing in the MVC framework.  The routing controls which method in which controller gets called.</p>\n<p>The obvious next question is, how do we get from the controller to the view?</p>\n<p>First, we need to look at the general layout of our Views.</p>\n<p>If you open up the sample project that we created, you’ll see that there are a few directories that have been created.  The one we want to take a look at today is the View directory.</p>\n<p>You’ll see that under each View directory is a directory that has the same name as each of the controllers in the Controller directory as well as a directory named ‘Shared’ that has nothing to do with MVC directly.  Don’t worry about figuring that one out right now.</p>\n<p>Under each of the directories that map to the controller, you’ll see that there is an ASPX file that maps to each of the methods in the controllers, or is otherwise called from those controllers.</p>\n<p>The easiest way to get from the Controller action to the View it corresponds to is to return View() from that action, as in:</p>\n<p>public ActionResult About()<br>{<br>    return View();<br>}</p>\n<p>This would then call ~&#x2F;Home&#x2F;About</p>\n<p>But what if the new page needs to have data sent along to it?</p>\n<p>In this case, you can assign the data to the ViewData property.  The ViewData property works a lot like a Session object in that it is keyed.</p>\n<p>So, to pass data you would use</p>\n<p>ViewData[“Key”] &#x3D; objectData;</p>\n<p>You can see that the sample project does this in the HomeController.Index method.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ViewData[<span class=\"string\">&quot;Message&quot;</span>] = <span class=\"string\">&quot;Welcome to ASP.NET MVC!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And you can see that the Index.aspx file picks it up later:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;%= Html.Encode(ViewData[&quot;Message&quot;])%&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> To learn more about ASP.NET MVC visit</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://asp.net/mvc&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;ASP.NET MVC Website&quot;</span>&gt;</span></span><br><span class=\"line\">      http://asp.net/mvc<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Returning View() is not the only way of specifying the View we want to display from the Controller.  You can also return Redirect(), RedirectAction(), RedirectToRoute().</p>\n",
            "tags": [
                "asp.net",
                "controller",
                "MVC",
                "view"
            ]
        },
        {
            "id": "http://davembush.github.com/infinite-302-loop-how-would-you-even-know/",
            "url": "http://davembush.github.com/infinite-302-loop-how-would-you-even-know/",
            "title": "Infinite 302 Loop - How would you even know?",
            "date_published": "2009-03-11T11:08:36.000Z",
            "content_html": "<p><img src=\"/uploads/2009/03/trav-053.jpg\" alt=\"trav-053\"> It happens eventually to all web developers.  It’s happened to me twice in the last week.  You make one simple change to your web site and then you can no longer access it.  When you browse to it in IE you get some completely useless “We can’t access the page you are looking for” error.  In FireFox, it at least tells you that you have a “Redirect Loop” and in IE6, if you are fortunate enough to still be writing for that browser, you can see that it is blinking at you as it tries to retrieve the page(s) multiple times.  But how do you know what’s redirecting to what?  For that matter, other than running a browser that told you, how would you even know it was a 302 error?</p>\n<span id=\"more\"></span>\n\n<p>I know I’ve mentioned this before but it’s definitely worth repeating.  Get yourself a copy of <a href=\"//www.telerik.com/fiddler\">Fiddler</a>. </p>\n<p>Fiddler is a proxy that runs on local host.  By default when you run it, it automatically installs itself as a proxy in IE so you really don’t have to know much more than how to install software to get up and running with it. When you access a web site with it, it will tell you everything that is going on.  What headers are being sent.  What headers are coming back from the server.  Files that are being requested.  Status codes that are coming back. Any time I have a client-side problem with my web sites, or any time I have a problem with my web sites that I can’t explain from the server side, I reach for Fiddler.  More often than not, it tells me or at least guides me to what the real problem is.</p>\n<p>For example, last week I was given the task of creating a 301 redirect from one domain to another.  I thought I had the code written correctly to do this, but when we went to access the domain it went into an infinite loop.  Obviously something was wrong, but what?</p>\n<p>When I ran similar code on other domains it worked correctly. When I ran Fiddler, I found that the page was redirecting to itself multiple times.  Odd.  What would make it do that?</p>\n<p>So back to my code, where I quickly discovered that I had left out a character in my replace function so that domain A was never being rewritten to domain B so domain A was constantly redirecting to itself.</p>\n<p>This morning’s error was a little more fun.  My designer was trying to install a module into DotNetNuke last night when the site suddenly “stopped working.” Same deal.  Only this time it is because there is some module that is redirecting from the home page to another page and then that other page is redirecting back to the home page. Again, I would have never been able to track this down if I hadn’t had Fiddler to help me.</p>\n<p>I’ve also used this to verify that javascript tracking codes are working correctly.  If you need to see traffic that is going between the browser and the server, Fiddler is the tool you are looking for.</p>\n",
            "tags": [
                "301",
                "302",
                "fiddler",
                "infinite loop"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "url": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "title": "ASP.NET MVC - Model != BLL or DAL",
            "date_published": "2009-02-11T10:36:37.000Z",
            "content_html": "<p>Last week I introduced the ASP.NET MVC framework by talking a bit about what the model, view and controller are. In the comments, John Meyer said,</p>\n<blockquote>\n<p>I respectfully disagree with your claim that the model is your BLL. MVC is a UI layer pattern, and as such all models, views, and controllers are strictly in the UI level.</p>\n</blockquote>\n<p>While historically, MVC has been described in the way I stated–while the ASP.NET MVC guys have also portrayed the Model as BLL or below–I have to agree with John.  Here’s why: At least as far as ASP.NET is concerned, the model is inherited from a specific class.  This means that any implementation code you place in the class will be forever tied to the class it inherits from.</p>\n<span id=\"more\"></span>\n\n<p>So if in some point in the future you decide that a WebForms implementation would work out better for you, or you wanted to put a Windows Forms implementation on top of it, you’d have to do quite a bit of refactoring of your code just so you could.</p>\n<p>If instead you treat the Model as a “View Model” as John suggests, and have the View Model call the Business Logic Layer, you end up with two major benefits.</p>\n<p>First, your Business Logic Layer is completely decoupled from the View implementation.  You are no longer forever tied to MVC as an architecture or ASP.NET MVC as the primary architecture.  You can use whatever view implementation you want.</p>\n<p>Second, you are not forced to put View specific data code in your Business Logic Layer.  Doing so would cloud the actual implementation of your BLL and actually further couple your view layer to your BLL, something that third tier is specifically designed to avoid.</p>\n<p>Based on the feedback from John and my own thinking on the subject, I recommend a three-tiered approach that places the MVC as the view entity calling the BLL from the Model of the MVC set, which would in turn call the Data Access layer.</p>\n",
            "tags": [
                "MVC",
                "view",
                "archietcture",
                "bll",
                "dal",
                "Three Tiered"
            ]
        }
    ]
}