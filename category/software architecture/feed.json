{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"software architecture\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/reasons-software-architecture-matters/",
            "url": "http://davembush.github.com/reasons-software-architecture-matters/",
            "title": "Reasons Software Architecture Matters",
            "date_published": "2017-02-14T12:30:00.000Z",
            "content_html": "<p>Several weeks ago, I was talking to a programmer and we got into a discussion about the importance of software architecture. I maintained that having a defined architecture is important regardless of the team size, the person I was talking to asserted that architecture wasn’t necessary when there was just one person involved.</p>\n<p>But here’s the thing. All software has an architecture. Even the most junior of programmers has an idea of how code should fit together. At issue isn’t really about architecture. It is about having a defined architecture, based on experience and best practices, that will allow the team to develop the software in question as efficiently as possible. Software architecture, at its core, says, “this is how we build software.”</p>\n<p>To find the reasons why software architecture matters, it is helpful to think about what happens when there isn’t any defined architecture in place.  For the purposes of this article, I’m going to generalize on how architecture impacts teams and where appropriate show why that is also important when your team is just you. <figure><img src=\"/uploads/2017/02/image-1.png\" title=\"Reasons Software Architecture Matters\"> Photo via <a href=\"//visualhunt.com/\">VisualHunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>In a team, having an architecture is important simply because it means we can make certain assumptions about how someone wrote the code you are now looking at.</p>\n<p>Have you ever been in a situation where you wrote some code assuming that the programmers who would be using it had written their code in a particular way only to find out that they hadn’t and because of that, your code needs to be rewritten?</p>\n<p>Or, how about the time you went to work on a bug? Once again, you made some assumptions that weren’t true so it took you much longer to fix the bug than it would have had you known that your assumptions were wrong.</p>\n<p>Imagine what it would be like in those situations if the assumptions you were making were legitimate because everyone was using the same playbook. How much easier would that make your life?</p>\n<p>Ah, but your team is just you, and you know how you put the code together. </p>\n<p>OK. Fine. </p>\n<p>But what about two years from now? Without a defined architecture, would you say you code things the same way every time? I know, even with an architecture, sometimes I “cheat” and my code doesn’t always follow the rules I’ve set out. If I do that WITH an architecture, I can just imagine how sloppy my code would be without it.</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Get any two programmers in a room and you will almost always get two different opinions about how software should be written. A good architecture reduces the number of arguments so we can get on with the craft of writing code. I’ve been in situations where, even with an architecture, there are programmers who disagree. Some with good reason. But if you don’t have any definition, all you end up with is two opinions with no rule book to say who is “right.”</p>\n<h2 id=\"Cognitive-Load\"><a href=\"#Cognitive-Load\" class=\"headerlink\" title=\"Cognitive Load\"></a>Cognitive Load</h2><p>With so much to consider in software development, the fewer decisions we have to make, the better. This leaves brain power for solving problems that still need answers.</p>\n<p>There are people who wear the same thing every day, or nearly the same, so they don’t have to make that decision. I’m actually one of those people. I kind of fell into this mode of dressing because I’m color blind and this is one of my ways of compensating. But I can tell you, it leaves me free to think about other things as I get ready in the morning.</p>\n<p>This is another place where software architecture will help you regardless of team size. Even if you are the only one on the team, this is one less thing to think about.</p>\n<h2 id=\"Scrambled-Eggs\"><a href=\"#Scrambled-Eggs\" class=\"headerlink\" title=\"Scrambled Eggs\"></a>Scrambled Eggs</h2><p>Software built without an architecture will eventually take on the feel of scrambled eggs. Imagine how hard it will be to modify the code when you have no idea where the different parts of your code should go.</p>\n<p>And once again, we end up with a system that is difficult to maintain simply because no one knows for sure where the various parts of the system should live.</p>\n<h2 id=\"Good-Architecture\"><a href=\"#Good-Architecture\" class=\"headerlink\" title=\"Good Architecture\"></a>Good Architecture</h2><p>You’ll notice I’ve been saying “Good” architecture. This is because I’ve been in situations where the architecture has not been defined tightly enough leaving too many loop holes. I’ve also seen architectures misapplied. It is important when an architecture is defined that the person defining is knows something about the tools that will be used and the environment they will be used in.</p>\n<p>It is also helpful if the architectures that are defined, are defined by consensus rather than having one person defining it. We all have holes in our thinking. Someone may be a great architect, but maybe they suffer from the old saying, “when all you have is a hammer, everything looks like a nail.” More people bring more points of view. This can fill in gaps and can produce an architecture that can be used rather than one that will be resisted.</p>\n<h2 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success\"></a>Success</h2><p>This is all about building successful systems. But just because you got some code working and into production doesn’t mean the code is going to hold up over time.</p>\n<p>There is one guy I know who brags about how fast he can write code. Well, yes, you did get that into QA in a month. But, it took you three months to get it out of QA. The test of a good architecture is:</p>\n<ol>\n<li>Does it help make the project successful?</li>\n<li>Is it relatively easy to understand?</li>\n<li>Has it been adopted by the team using it?</li>\n<li>Is it generally accepted as a valid architecture in the community at large for similar software.</li>\n<li>Does it make the code easier to maintain?</li>\n</ol>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>So, now I’ve convinced you that you should be using an architecture. How do you get started? It is a lot easier than you think. Most frameworks either have an architecture already defined, or somewhere the community has already defined one for it. Start there. Maybe refine it a bit and settle on something that works.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>If you don’t use an architecture yet, you are probably still thinking, “Yeah, but I don’t have any issues that this would solve.” To which I would answer, “How do you know? What if your wrong?”</p>\n<p>You see, most of my reasons have to do with making software development easier or better. I’m not saying you can’t get something done without architecture. What I am saying is that with architecture you can do everything you are already doing better, faster, cheaper, and easier. Until you try it, you’ll never know if I’m right or not.</p>\n",
            "tags": [
                "best practices",
                "software architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/",
            "url": "http://davembush.github.com/4-reasons-to-write-loosely-coupled-code/",
            "title": "4 Reasons to Write Loosely Coupled Code",
            "date_published": "2016-09-27T10:30:00.000Z",
            "content_html": "<p>This past week I got into a small discussion about the importance of loosely coupled code.  Specifically, I was looking at event handler code that did nothing more than change the size of another element on the screen.  But the event handler code was in the controller which in the particular implementation we are using was the event handler portion of our Model in a MVVM architecture.  The question becomes does this code belong in the view, or does it belong in the controller? The question of where code belongs leads eventually to arguments for loosely coupled code.  If I put code in my controller that is manipulating the view, then I either need to mock out my view in order to test my controller or I have to have an instance of my view available to test my controller.  Having coded enough systems to know that both of those choices are problematic, I opt for placing the view specific code in the view.  Another place where you might place this code would be in a View Specific event handler class.  But that would only be for the purposes of clean separation.  Something we might consider doing if the View were plain HTML.  But in our particular case, the view is generated from code, so placing the handlers in that same code seems to be the most appropriate location for it.</p>\n<p>But all of this leads to a larger question.  Why should your code be loosely coupled at all? <figure><img src=\"/uploads/2016/09/image-2.png\" title=\"4 Reasons to Write Loosely Coupled Code\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/hernanpc/7115374283/\">Hernan Piñera</a> via <a href=\"//visualhunt.com\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h2><p>One of the main advantages of loosely coupled code is that this combined with granularity makes code refactoring easier.  Because my controller class only handles events that cause data to be manipulated and does not cause any changes to the view, I know that any changes I make to my controller will not cause any unexpected presentation layer changes.</p>\n<p>Similarly, and in this case, more importantly, any changes I make to the view will not force me to make changes to the controller class.  That is, all of the code that could be impacted by any one change happen in one and only one class.</p>\n<p>Loose coupling can also occur horizontally, and often does without us thinking too intensely about it.  Have you ever used a control from one vendor only to find another control works better?  The more easily those controls match each other’s programmable interface, the easier the job was to swap them out.  We can do the same type of thing in our own code.  The more granular the code is broken down; the easier any one part of the code can be replaced by something that works “better”.</p>\n<h2 id=\"More-Maintainable\"><a href=\"#More-Maintainable\" class=\"headerlink\" title=\"More Maintainable\"></a>More Maintainable</h2><p>But the argument might be make that this is a lot of work for something that isn’t very likely to happen.  But anyone who has been programming more than a few years on essentially the same system knows that it does.</p>\n<p>Here’s how it looks.  You start out writing a system and you care very little about coupling or not.  Hey, we’ve got code to write and very little time.  Full steam ahead and forget best practices.  And for now, let’s assume you have a small enough system that you actually pull it off.  You get the system delivered, and somehow it miraculously works.  Congratulations.</p>\n<p>A few months go by and you get a new requirement or a change request comes in for an existing requirement.  Either way, you manage to shoe horn the change in.</p>\n<p>More time goes by and a change to the last set of changes comes in.  And now you realize that what you have is a rather fragile architecture that can’t possibly sustain the new request.  A change that might have taken a month given a more loosely coupled architecture is now going to take three because of the amount of rework that is going to be required.</p>\n<p>Another way that loosely coupled code helps is when you are writing a very large system.  Let’s say the system is large.  You write this for a few months and everything seems to be going fine when you hit that first, “oops! we forgot” moment.  So you have to go back and retro fit the change into your tightly coupled code.  And then you progress some more and hit even more of those kind of changes.  Eventually, everyone learns to hate this system because it is so hard to work on and every change we make to existing code causes more and more bugs.</p>\n<h2 id=\"Cross-Platform\"><a href=\"#Cross-Platform\" class=\"headerlink\" title=\"Cross Platform\"></a>Cross Platform</h2><p>Refactoring and maintenance have some practical implications beyond just being able to work on your code.  In this world of multiple platforms, you may find yourself wanting to run some of what you’ve written on another platform.  There are multiple ways you might do this, but keeping your code isolated is going to make this easier.  Say you want to run your code on the web, as a desktop application, on the various mobile phones and tablets that are available.  Even if you do this all in the confines of HTML, JavaScript and CSS, you will most likely have different presentation layers.  If you have view specific code (to use our example again) that isn’t in the view, you’ll need to write code in the controller that detects which of the platforms you are running on.</p>\n<p>But if you’ve decided to use native components on each of the platforms, the view layer is actually going to change drastically.  And the view specific code you wrote might not even work on the new platform.  All the more reason to keep the view code isolated.</p>\n<h2 id=\"Cross-Framework\"><a href=\"#Cross-Framework\" class=\"headerlink\" title=\"Cross Framework\"></a>Cross Framework</h2><p>Or, maybe you are going to upgrade your framework.  Angular 2 just released and it is drastically different from Angular 1.  I can tell you right now, the organizations who wrote loosely coupled Angular 1 code are going to have a much easier time transitioning to Angular 2.  Or maybe you want to switch from Angular to React, or from any of the multitude of frameworks to another.  The more loosely coupled your code, the easier it will be to move.  And nowhere is this more obvious than in the fast moving JavaScript world.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Loosely coupled code is strongly related to the Single Responsibility principle.  You can’t have loosely coupled code unless the code follows the Single Responsibility principle.  And in the case above, putting view code in our controller actually violates both at the same time.  The controller is for manipulating view agnostic data.  The view is where your presentation layer code goes.  Of course, we could turn this around and remove the controller and put all of our code in the View.  Now that would definitely violate the single responsibility principle while giving the appearance of loose coupling.  But if we ever had to create multiple views we would quickly violate yet another principle.  Don’t Repeat Yourself.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing?\"></a>Testing?</h2><p>Normally, I would lead off with testing.  But the argument could be made, “If I’m not going to write unit test, do I still need to do this?”  Actually, someone did make that argument.  And for now, ignoring that not writing unit test is a bad idea that I’ve written about before.  Writing unit test helps us think about these issues up front.  It isn’t that testing is the reason we write good code, although if that’s how you want to think about it I’m not going to stop you.  It is just that writing good test causes us to write good code.  Since it is the most visible benefit we tend to think of it first.  But testing isn’t at all why we do this.  We write test because it provides benefits much like loose coupling does.  Saying that we write loosely coupled code that follows the single responsibility principle so we can test would be like saying we don’t get lost so we can use our GPS.  It is the GPS that helps us to not get lost.  In the same way, it is the test that cause is to write good code.</p>\n<h2 id=\"Best-Practices\"><a href=\"#Best-Practices\" class=\"headerlink\" title=\"Best Practices\"></a>Best Practices</h2><p>I know I’ve been following best practices for so long that I often forget why I’m doing them.  They work.  I do them.  But every once in a while, I need to step back and take a look at what I’m doing and ask “Why?” once again.</p>\n",
            "tags": [
                "tdd",
                "DRY",
                "loose coupling",
                "single responsibility"
            ]
        },
        {
            "id": "http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/",
            "url": "http://davembush.github.com/are-you-thinking-clearly-about-your-architectural-choices/",
            "title": "Are You Thinking Clearly About Your Architectural Choices?",
            "date_published": "2015-09-17T11:30:00.000Z",
            "content_html": "<p>Recently someone asked me where the business rules should go in an MVC framework.  The Model or the Controller? This reminded me of a post I wrote when ASP.NET MVC was first released.</p>\n<ul>\n<li><a href=\"/aspnet-mvc-model-bll-or-dal/\">ASP.NET MVC – Model !&#x3D; BLL or DAL</a></li>\n</ul>\n<p>But today I want to cover a broader topic common to everyone, not just programmers.  Not being able to think outside the box.</p>\n<p><img src=\"/uploads/2015/09/image2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Here’s-the-deal\"><a href=\"#Here’s-the-deal\" class=\"headerlink\" title=\"Here’s the deal.\"></a>Here’s the deal.</h2><p>Good salesmen have known for years that the best way to close the sale is to ask the customer to pick between two buying decisions.  You never ask, “So, did you want to buy that today?”  Because almost invariably the customer will say, “No” because the implication is, “Did you want to buy that today, or some other day?”  And “some other day” is always a better option to the customer.  No, the proper way to frame the question is, “So, how did you want to pay for that?  Cash or Credit?” or “Did you want the blue one or the green one?”  By doing this, the customer is no longer even thinking “later” is an option.  The only options he is thinking about are the options he’s been presented with.  This isn’t to say that there isn’t a customer who can fight past this and respond, “No, I was just looking today.”  But the chance of the customer leaving without buying have just been reduced dramatically because two buying choices have been presented.</p>\n<p>So, what does this have to do with programming?  Well, that’s exactly what happens when we’ve been given an architectural framework to program with.</p>\n<p>Someone shows you the MVC pattern and you immediately think that the only places code can live in our application are in the Model, the View, or the Controller.</p>\n<p>Someone shows you the MVP pattern and you think code can only live in the Model, the View or the Presenter.</p>\n<p>Someone shows you the MVVM pattern and we think code only lives in the Model, the View or the ViewModel.</p>\n<p>And so, I ask you. Given any of those three patterns, where do you put your business logic?  And while we are at it, where does your data access logic go?</p>\n<h2 id=\"Do-we-place-it-in-the-model\"><a href=\"#Do-we-place-it-in-the-model\" class=\"headerlink\" title=\"Do we place it in the model?\"></a>Do we place it in the model?</h2><p>Well, what is the model for?  A model is for storing data.  For most of us the data is a record that is displayed on the screen as a series of fields.  But how it gets displayed and what it actually contains doesn’t matter as much as the fact that the model <strong>stores data</strong>.  Nothing there even hints at executing code.  In fact, I would argue that for most of our applications, the model should be so simple that it doesn’t need to be tested.</p>\n<h2 id=\"How-about-the-Controller-or-the-Presenter\"><a href=\"#How-about-the-Controller-or-the-Presenter\" class=\"headerlink\" title=\"How about the Controller or the Presenter?\"></a>How about the Controller or the Presenter?</h2><p>A controller or presenter sends commands to the model to change its state and sends commands to the view to update the presentation.  Here things get a little confusing.  It sounds like, because the controller is sending commands the the model and the view that it is where the business rules live.</p>\n<p>In fact, when I was first introduced to MVC, this is what I thought was true.  But notice there is nothing in the statement about what a controller does that would indicate that it is anything more than a traffic cop.</p>\n<h2 id=\"View-Model\"><a href=\"#View-Model\" class=\"headerlink\" title=\"View Model?\"></a>View Model?</h2><p>In the MVVM pattern, it becomes even clearer that there is no clear place for business logic because the ViewModel holds the state of the view.  The presenter or controller part is handled by a binder that is typically part of the framework you are using, as with KnockOut.</p>\n<h2 id=\"Thinking-outside-the-box\"><a href=\"#Thinking-outside-the-box\" class=\"headerlink\" title=\"Thinking outside the box\"></a>Thinking outside the box</h2><p>Now that we’ve demonstrated that none of these frameworks explicitly state where the business logic should go, where should we put it? In my case, what I’ve started doing is that I’ve created a service layer, or a business rules layer.  It handles the processing of the logic to get the rest of the code working.  The classes in this layer can either be passed the model or viewmodel in which they can change the state directly, or they can return data that the controller can distribute as needed.  In my most recent application I selected the pass the model in approach.  The result was code that was much more testable than what I had started with, which is the whole point of placing the business rules outside of the pattern to begin with.  </p>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3><ul>\n<li><a href=\"//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model View Controller</a></li>\n<li><a href=\"//en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter\">Model View Presenter</a></li>\n<li><a href=\"//en.wikipedia.org/wiki/Model_View_ViewModel\">Model View ViewModel</a></li>\n</ul>\n",
            "tags": [
                "programming",
                "testing",
                "architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/why-is-it-called-%E2%80%9Cinversion-of-control%E2%80%9D/",
            "url": "http://davembush.github.com/why-is-it-called-%E2%80%9Cinversion-of-control%E2%80%9D/",
            "title": "Why Is It Called “Inversion of Control”?",
            "date_published": "2015-06-11T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/05/CHIL0007.png\" alt=\"CHIL0007\" title=\"CHIL0007\"></p>\n<p>There is a guy I’m working with who is trying to wrap his head around design principles.  He’s been watching a lot of <a href=\"/pluralsight\">PluralSight videos</a>.  As he was processing information about <a href=\"/pluralsightIoC\">Inversion of Control</a>, he asked the natural question I’ve never actually considered before.  “Why is it called Inversion of Control?  Normally, when you talk about ‘Inversion’ you are talking about reversing something or negating something.  That isn’t what we are doing here.”</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-Inversion-of-Control\"><a href=\"#What-Is-Inversion-of-Control\" class=\"headerlink\" title=\"What Is Inversion of Control?\"></a>What Is Inversion of Control?</h2><p>So, let’s start with a definition of what Inversion of Control is.  And let’s start the definition by explaining what it isn’t. In the old days, back when I started programming.  We had this thing called “Procedural Programming.” Control of your application flowed from beginning to end with looping to take care of any kind of waiting that needed to take place.  <a href=\"//martinfowler.com/bliki/InversionOfControl.html\">Martin Fowler describes this</a> using an illustration that is version similar to a basic “How to program in C#” console application that is in the beginning of most beginner programming books.</p>\n<blockquote>\n<p>Let’s consider a simple example. Imagine I’m writing a program to get some information from a user and I’m using a command line enquiry. I might do it something like this</p>\n<p>  #ruby<br>  puts ‘What is your name?’<br>  name &#x3D; gets<br>  process_name(name)<br>  puts ‘What is your quest?’<br>  quest &#x3D; gets<br>  process_quest(quest)</p>\n<p>In this interaction, my code is in control: it decides when to ask questions, when to read responses, and when to process those results.</p>\n</blockquote>\n<p>What Inversion of Control does is that it puts something other than the main code in charge of doing critical parts of the program so that those other parts of the program can be swapped out by the person implementing the code.</p>\n<h2 id=\"Examples-of-Inversion-of-Control\"><a href=\"#Examples-of-Inversion-of-Control\" class=\"headerlink\" title=\"Examples of Inversion of Control\"></a>Examples of Inversion of Control</h2><p>If you’ve ever written a WebForms or Windows Forms application, you’ve already experience inversion of control.</p>\n<h3 id=\"OnPageLoad-or-OnFormLoad\"><a href=\"#OnPageLoad-or-OnFormLoad\" class=\"headerlink\" title=\"OnPageLoad() or OnFormLoad()\"></a>OnPageLoad() or OnFormLoad()</h3><p>You have probably never even given this much thought.  You think these two methods are where your code starts.  But the reality is, the code started long before these methods ever got called.  The thing that is in control is the .NET framework.  You’ve created a delegate that gets called by the framework so that your page or form does what you want it to.  Without this inversion of control, you would have to write a whole lot more code.</p>\n<h3 id=\"Event-Handlers\"><a href=\"#Event-Handlers\" class=\"headerlink\" title=\"Event Handlers\"></a>Event Handlers</h3><p>While you might think of OnPageLoad and OnFormLoad as event handlers, the way they are implemented are more like virtual functions.  Event handlers, on the other hand, are a specific type of delegate that say, “When this thing happens, let me know about it.”  The code that fires the event doesn’t even really care what you do during the event.  Again, the control has been “Inverted” because there is a lot of code that is running that you have no control over and probably have no knowledge of.</p>\n<h3 id=\"Virtual-Functions\"><a href=\"#Virtual-Functions\" class=\"headerlink\" title=\"Virtual Functions\"></a>Virtual Functions</h3><p>One of my favorite methods of inverting control is to use virtual functions.  I can have a parent class that controls the flow of the program that calls various virtual functions in order.  But my child class can provide the implementation of the functions to make them do various things.  I used this, at one time in the past, to create a framework for submitting links to various bookmarking sites.  They all worked essentially the same way, all I had to do was implement the specific details for each site while 80% of my code stayed the same in the base class.</p>\n<h3 id=\"Delegates-or-Callback-Functions\"><a href=\"#Delegates-or-Callback-Functions\" class=\"headerlink\" title=\"Delegates or Callback Functions\"></a>Delegates or Callback Functions</h3><p>Another common way of implementing inversion is by using delegates or callbacks.  This work in a similar way to virtual functions expect that the functions are typically passed in to a method.  Much of the current implementation of JavaScript uses this method of inverting control as a primary pattern (but not limited to it as the only way.)</p>\n<h3 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h3><p>I’ve <a href=\"/dependency-injection-not-di/\">talked about Dependency Injection before</a>.  Again, it is another way of delegating control to something other than the code that has main control.  What I want to make special note of here, though, is that Inversion of Control is not Dependency Injection but Dependency Injection is a form of Inversion of Control.  I think this is where most of the confusion about Inversion of Control comes from.  Most of the literature that talks about Inversion of Control talks about it at the same time they are talking about Dependency Injection.  As though the two concepts were the same.</p>\n<h2 id=\"Why-Inversion-of-Control-Matters\"><a href=\"#Why-Inversion-of-Control-Matters\" class=\"headerlink\" title=\"Why Inversion of Control Matters\"></a>Why Inversion of Control Matters</h2><p>Finally, I want to talk for a bit about why Inversion of Control matters.  Because, for me, it is a lot more important that we understand what we are trying to achieve than it is that we’ve given it the right name or that we even know what name to call it.  All of the examples I’ve provided are things you’ve probably done in your code.  Some of them you’ve done without even knowing you were doing them.  But think about the alternative of not doing them. First, your code would be a lot harder to maintain.  Just think of how hard it would be to write a web site and maintain it if you had to write code that handled all of the work that happens for you behind the scenes. Second, it makes the code more loosely coupled.  And by doing that, it makes the code testable AND it makes the code more flexible and easy to change in the future. Maybe instead of calling it Inversion of Control it should have been called Delegation of Control.  Either way, the concept is to remove as much code as possible from our main controlling code and give the implementation responsibility to something else that can be swapped in without having to change the main loop.</p>\n",
            "tags": [
                "design patterns",
                "inversion of control",
                "ioc"
            ]
        },
        {
            "id": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "url": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "title": "Software Architecture without Test Driven Development is DANGEROUS!",
            "date_published": "2015-01-29T12:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/01/TddImpactsSoftwareArchitecture.png\" alt=\"TDD Impacts Software Architecture\" title=\"TddImpactsSoftwareArchitecture\"></p>\n<p>I’ve had two incidents recently that have shown me how TDD impacts Software Architecture.  Both of these are with code I’m working on.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Software-Architecture-Might-Do\"><a href=\"#What-Software-Architecture-Might-Do\" class=\"headerlink\" title=\"What Software Architecture Might Do\"></a>What Software Architecture Might Do</h2><p>Software architecture might specify how it is put together at a very high level.  For example, software architecture might specify that we use a three tiered approach or an n-tiered approach.  This approach places our view code is at one level, our business rules are at another level, and our data access at yet a third level.</p>\n<p>Software architecture might specify that we use MVC where our business rules are in the model, and a controller communicates between the view and the model to get data between the two.</p>\n<p>It might specify MVVM. This would have the view model take the place of the controller and manage the state information for the view.</p>\n<p>Software architecture might also tell us we should use MVP, giving the presenter the role of the controller and managing state information for the view and communicating with the business rules.</p>\n<p>But none of these patterns tell us how to write maintainable code.  They only tell us about the general software architecture.  This is like having a sketch of a house without a wiring or plumbing plan.</p>\n<h2 id=\"When-the-view-gets-in-the-way\"><a href=\"#When-the-view-gets-in-the-way\" class=\"headerlink\" title=\"When the view gets in the way\"></a>When the view gets in the way</h2><p>So, if you’ve been following this blog for a while, you may remember that I’m working with EXTjs.  Specifically, I’m working with EXTjs 4.2.  This has what Sencha calls an MVC architecture.  The problem is, what they refer to as the “Model” we would all recognize as a “Record” in a table, and their Controller is tightly coupled to their View.  That is, they call this MVC, but no one who understands what MVC is supposed to look like as a design pattern would recognize Sencha’s MVC as the real MVC design pattern.</p>\n<p>This makes the code incredibly hard to test.  The tendency is to write code that is highly dependent on the view.  The view is dependent on the DOM.  Rendering the view takes quite a bit of time.  So any test of your business rules end up taking an incredibly long time to test because they ultimately cause DOM manipulation to occur.</p>\n<p>It isn’t until you decide to borrow a bit of architecture from Angular that you realize that your business rules should be separate classes.  Angular has “Service Classes.” My Service classes are built specifically so they do not rely on anything else.</p>\n<p>By doing this, I was able to get two thirds of my code under test that run in about a second.  Prior to this, they took a half an hour.</p>\n<p>My next task was to get the view and my logic for enabling and disabling controls on the view more loosely coupled.  This was a bit more difficult because enabling and disabling controls is, naturally, a view thing.</p>\n<p>But again, taking a page from another framework, this time Knockout and Angular, I created a ViewModel.  My ViewModel holds the state of my view separate from the actual view.  When the state changes, it fires an event that actually changes the view, but this will allow me to test my enable&#x2F;disable logic, along with other code in my system, without ever instantiating the view.  Under test, the events will fire and nothing will happen.</p>\n<h2 id=\"Avoiding-Dependencies\"><a href=\"#Avoiding-Dependencies\" class=\"headerlink\" title=\"Avoiding Dependencies\"></a>Avoiding Dependencies</h2><p>Now the structure  of my code looks something like the following: View – ViewModel – EnableDisableController – EnableDisableService I could have put the EnableDisableService code in the EnableDisableController, and many people would, but what I’ve found is that if I do that, it would be nearly impossible to UNIT test my Enable&#x2F;Disable logic.  Why?  Because I would be creating all of the objects I needed for the logic in the same class the logic is in.</p>\n<p>By breaking the logic code into it’s own class that takes the ViewModel as a construction parameter, I can create my own ViewModel that looks exactly like what I need it to look like so that I can test the logic with entirely known values.</p>\n<p>These are just two of the ways that code architecture is impacted by Test Driven Development.  I’m sure there are others.</p>\n",
            "tags": [
                "tdd",
                "mvvm",
                "mvp",
                "MVC",
                "dependency injection",
                "software architecture"
            ]
        }
    ]
}