{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"typescript\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "url": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "title": "Enforce TypeScript Functional Programming",
            "date_published": "2017-07-25T10:30:00.000Z",
            "content_html": "<p>As consistent readers of this blog are aware, I’ve fallen in love with Functional Programming.  But I also live in a primarily Angular&#x2F;TypeScript world where some code is still Object Oriented and other code is more Functional in nature.  And while TypeScript lets you do some Functional things, I’ve found it hard to force functional concepts in TypeScript.  So, I’ve gone searching.  Wouldn’t it be great if there were some sort of flag you could set that said, “Hey compiler, I’m in ‘Functional’ mode now!”  And the compiler would make sure that you never used a conditional statement, never accessed hidden parameters, and never mutated state? </p>\n<p>Well, I think I’ve figured out some of how to manage all of this using nothing more than TypeScript and some TSLint rules. <figure><img src=\"/uploads/2017/07/2017-07-25.jpg\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/15127010075/\">archer10 (Dennis) 99M Views</a> via <a href=\"//visualhunt.com/re/52cd50\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h2><p>Several weeks ago, I demonstrated how to <a href=\"/really-use-ngrx-better/\">protect against immutability using freeze</a>.  But, wouldn’t it be better to catch immutability issues at compile time? </p>\n<p>There are a couple features in TypeScript that do just that. </p>\n<p>First, we can use the <code>readonly</code> keyword on a field to ensure that it doesn’t change.  And second, we can declare arrays using <code>ReadonlyArray</code>.  For this to be most useful, we are going to want to provide an interface for all of our data that needs to be immutable.  This is how I typically use NgRX.</p>\n<h2 id=\"Enforcing-Functional\"><a href=\"#Enforcing-Functional\" class=\"headerlink\" title=\"Enforcing Functional\"></a>Enforcing Functional</h2><p>Now, that is as far as it goes for support in TypeScript itself, as far as I am aware.  But, we can get more support by using TSLint.  If you are using the Angular-CLI, this gets installed when you create your project.  If you aren’t using the Angular-CLI, or you are using some other framework, you are on your own for getting that installed and setup. </p>\n<p>There are two problems we need to overcome in order to use TSLint to solve our “switch into Functional mode” issue.  First, is that we need a set of rules we can use.  The second is that we will need some way of isolating where those rules take effect. </p>\n<p>Fortunately, we can create a separate <code>tslint.json</code> file for each directory.  And since all of my Functional code is isolated to my NgRX state management stuff, I can put a file in that directory and it will take care of my Functional needs while leaving my normal <code>tslint.json</code> file for the rest of my code. </p>\n<p>The other thing you will want to do is that you’ll want to install <a href=\"//www.npmjs.com/package/tslint-immutable\">tslint-immutable.</a> </p>\n<p>tslint-immutable adds some rules specifically for immutability that are not included in the core implementation.  I love plugable systems. </p>\n<p>I’ll let you read the documentation on the site for the rules that it adds.  Who knows when you’ll be reading this and the package may have changed by the time you get here.</p>\n<h2 id=\"pre-commit-hooks\"><a href=\"#pre-commit-hooks\" class=\"headerlink\" title=\"pre-commit hooks\"></a>pre-commit hooks</h2><p>Having a good set of linting rules if of no use if they get ignored.  Right? </p>\n<p>Now, another package I install into my projects is pre-commit.  Be warned though.  If you are using Windows as your development computer, you’ll also need to install <a href=\"//gnuwin32.sourceforge.net/packages/coreutils.htm\">coreutils</a> because pre-commit assumes you are able to run bash. </p>\n<p>But of course, someone could comment out or remove the pre-commit hooks or otherwise force a commit.  This is why you also want a good code review process in place for your team.  Or better yet, a job that runs on your central repository that verifies that these precommit task have run successfully. </p>\n<p>When I review code, I check several items regularly.</p>\n<ul>\n<li>What changed and was it changed in a way consistent with how we want things coded.</li>\n<li>If something wasn’t coded correctly, is there a linting rule we can put in place to correct it?</li>\n<li>When I pull down the code, can I compile for production as well as for development mode?</li>\n</ul>\n<p>Point 2 is critical.  The more reviewing the computer can do for you the better off you’ll be.</p>\n<h2 id=\"Conditionals\"><a href=\"#Conditionals\" class=\"headerlink\" title=\"Conditionals\"></a>Conditionals</h2><p>What I haven’t been able to find is a rule that will prevent conditions from showing up inside of observable functions or their array cousins.  If you know of something, please let me know in the comments below.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now, a little code would be nice to flesh this all out.  So, this is what I’m currently using: </p>\n<p>First, the scripts and pre-commit sections from my package.json file: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint --type-check&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>And then the tslint that I put with my NgRX code: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tslint-immutable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rulesDirectory&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../../../node_modules/codelyzer&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* New rules to enable immutable checks */</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typedef&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;property-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;member-variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;object-destructuring&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-keyword&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-array&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ignore-local&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-let&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-any&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">/* existing rules follow */</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "functional",
                "typescript",
                "tslint"
            ]
        },
        {
            "id": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "url": "http://davembush.github.com/accessing-private-fields-in-typescript/",
            "title": "Accessing Private Fields in TypeScript",
            "date_published": "2017-02-28T12:30:00.000Z",
            "content_html": "<p>Have you ever needed to access a private field in TypeScript? The most common place you may find yourself needing to do this is while writing a unit test. But, I also found myself needing to do this while using a JavaScript library where the field wasn’t declared in the type file for the library I was using.</p>\n<p>Now, suppose you could access those private fields effortlessly and easily. How valuable would that be to you?</p>\n<figure>![](/uploads/2017/02/image-3.png \"Accessing Private Fields in TypeScript\") Photo via [VisualHunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>In general, when you write a unit test, you only want to access public fields for both the purposes of setting up your tests and for evaluating the success or failure of the tests.</p>\n<p>But, occasionally, this is not possible.</p>\n<p>Now, what most people don’t realize is that, unlike private members in JavaScript, where the members aren’t accessible, in TypeScript, the resulting JavaScript has the variables just as public as the public members. In fact, the only thing that makes a member private in TypeScript is the compiler. This means that this TypeScript code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">member1</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ends up looking something like this in JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">member1</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">bar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which means that</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = v.<span class=\"property\">member1</span>;</span><br><span class=\"line\">v.<span class=\"title function_\">bar</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Should be working code.</p>\n<p>But, if you type that code into JavaScript and try to compile it, it won’t compile. Which means you can’t write your unit test in TypeScript and access the private variables.</p>\n<p>Or can you?</p>\n<h2 id=\"TypeScript-is-just-JavaScript-with-Sugar\"><a href=\"#TypeScript-is-just-JavaScript-with-Sugar\" class=\"headerlink\" title=\"TypeScript is just JavaScript with Sugar\"></a>TypeScript is just JavaScript with Sugar</h2><p>One small little fact about TypeScript that we seem to forget is that it is just JavaScript with some sugar. What this means in practical terms is that, if we want to, or in this case, need to, we can write plain old boring JavaScript as part of our TypeScript code. And then the other little bit we tend to forget is that we can access a field using the name of the field as an indexer. That is, this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v.<span class=\"property\">member</span> = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>is functionally the same as this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v[<span class=\"string\">&#x27;member&#x27;</span>] = <span class=\"string\">&#x27;x&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And because it all compiles down to JavaScript, and the private fields are public JavaScript fields, we can use the named index to access the field.</p>\n<h2 id=\"JavaScript-Libraries\"><a href=\"#JavaScript-Libraries\" class=\"headerlink\" title=\"JavaScript Libraries\"></a>JavaScript Libraries</h2><p>Similarly, this past week I was working on finishing up some Angular 2 code. And one of my tests was failing. Even though the code was working in Chrome fine. The issue was that I was using PhantomJS which doesn’t have the latest JavaScript spec implemented, so it relies on polyfills. One of the polyfills I was using was not compressing the Regular Expressions that I was indirectly using correctly which resulting in the test throwing an exception.</p>\n<p>After tracking down the source of the problem for a day, I finally found a line at the bottom of the GitHub page that told me that I could turn the routine off by calling a function. And here is where the trouble begins.</p>\n<p>You see, I’m using an otherwise documented internal library that has a set of types already defined for it. This particular function is not a part of the types for this class. So, when I tried to call it, I got a compiler error.</p>\n<p>So, I pulled out the named index trick above and got the code to compile and ultimately got my test to run successfully. It all just requires that we think outside the box a bit and most any problem can be solved.</p>\n<h2 id=\"Addendum\"><a href=\"#Addendum\" class=\"headerlink\" title=\"Addendum\"></a>Addendum</h2><p>As TypeScript has matured, the trick above doesn’t work quite as directly as when I originally wrote this article.  Now, you need to assign the original variable to a type of Object before using the indexer method, or you can just cast your variable to an Object and use the indexer.  But typescript is now smart enough to know that the indexer is accessing a property that is private and it won’t let you at it.</p>\n",
            "tags": [
                "private",
                "testing",
                "typescript"
            ]
        }
    ]
}