{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"opinion\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/the-tyranny-of-emotions/",
            "url": "http://davembush.github.com/the-tyranny-of-emotions/",
            "title": "The Tyranny of Emotions",
            "date_published": "2018-09-01T10:30:33.000Z",
            "content_html": "<p>Emotions are a weird element of being human.  They can propel us forward or hold us back.  Sometimes they are violent.  Most of the time they whisper. </p>\n<p>Several events have occurred recently that have me thinking about this more. </p>\n<p>To start with, I’ve started paying more attention to my health.  There were a lot of things holding me back from this in the past.  It turns out, most of what was holding me back was just a lie. </p>\n<p>I’ve started interviewing again.  The nature of what I do means I get to do this a lot.  You’d think I’d get used to it.  But, I don’t like the interview process.  I don’t like changing jobs.  I really don’t like code interviews.  But, I do them because I like to program for a living.</p>\n<p>And for those of you who know me, just because I’m interviewing doesn’t mean I don’t like where I am and have any intention of leaving.  I interview when I have work so I still have the skill when I don’t have work.  And who knows?  I may just find something I like better than where I am.</p>\n<p>Some of the interviews I’ve been on have revealed that managers think in similar short-term ways that I have.  Short-term thinking is so easy to see when it is someone else. <figure><img src=\"/uploads/2017/08/2017-08-19.png\" title=\"The Tyranny of Emotions\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/whinmobzappmedia/16016836686/\">whinmobzappmedia</a> via <a href=\"//visualhunt.com/re/fb1f6a\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Health\"><a href=\"#Health\" class=\"headerlink\" title=\"Health\"></a>Health</h2><p>I was under the misconception that if I paid more attention to my health, it would take time away from things I would rather be doing.  As it turns out, paying attention to my health has more than made up for the time it has taken. </p>\n<p>I was “afraid” of being uncomfortable.  I admit it.  I’m generally a pain wimp.  I wasn’t looking forward to sweating.  But it turns out, you get use to stuff like that. </p>\n<p>Now, the question to ask here is, “what was it that was keeping me from trying and what was it that got me started?” </p>\n<p>In a word, fear.  I was afraid I was going to lose the ability to do things that I considered more fun.  I was afraid of the discomfort. </p>\n<p>Now, the thing that got me started was slowly being exposed to the many benefits of living a slightly healthier life style.  I can’t say when exactly I started thinking I might want to make some changes, but I can tell you the first step was asking myself, “what can I do that is sustainable?” </p>\n<p>I’ve learned, “what can I do?” is the best question I can ask when all that is being offered are reasons why something can’t happen. </p>\n<p>It turns out, the answer to that question was, “if you got a tread mill, you could start walking every morning in the comfort of your own home.  You wouldn’t have to go outside when it is too hot or too cold.” </p>\n<p>I’ve also learned that walking every morning is a medically proven way to reduce the chances of getting cancer, reduce cholesterol, lower my resting heart rate, improve my confidence, improve brain function, reduce depression and help me sleep better. With all of those benefits, why wouldn’t I walk every morning? </p>\n<p>Prior to starting to walk every morning, I had already started to focus on my diet.  I’m not particularly over-weight.  I’m just over-weight for me.  So, I started on a high fat diet.  </p>\n<p>Lately, I’ve worked in MCT oil, some super food supplements as well as some magnesium oil, and reduced my caffeine intake to the first two hours of my day.  Between this and the walking, I actually have more time in my day and I don’t feel nearly as tired by the end of the work day as I had been. </p>\n<p>Now, the more I focus on my health, the more I want to focus on my health because I’ve found that most of the stuff holding me back from even starting were lies and half-truths.  Not to mention momentum and addictions to unhealthy foods. </p>\n<p>Here’s a super tip for anyone who is interested in this stuff.  Diet isn’t about will power.  If you are playing the will-power game, you are going to lose.  Your current life-style is formed on food addictions (with the help of food companies) emotions and occasionally the belief that you can’t afford to eat healthy.  The dirty little secret is, if you eat healthy and figure out what the emotional triggers are, the addictions practically take care of themselves.</p>\n<h2 id=\"Interviewing\"><a href=\"#Interviewing\" class=\"headerlink\" title=\"Interviewing\"></a>Interviewing</h2><p>I’ve been a contract programmer most of my career.  By definition, most of the places I’ve worked have been about a year and a half long and then I move on.  There are exceptions, but that is the general rule.  And let’s just say that my career has been nice and long.  So, you’d think at some point I would get used to interviewing and switching jobs. </p>\n<p>But I haven’t.  I’ve never liked new.  And, every job is new.  Every interview is new. </p>\n<p>I think the thing I dislike the most is that interviewing is a game that I don’t think anyone has figured out.  The strong temptation is to tell the person interviewing you what you think they want to hear.  I’ve found I do better if I tell them what I actually believe. If they don’t like the answer, I figure I probably wouldn’t be happy working there anyhow.</p>\n<p>And then there is the code interview.  I’ve talked about this several times on this blog before.  I still don’t think it is a good measure of what I can bring to an organization.  But, with all of the “programmers” who can’t do the simple stuff, I acknowledge they are probably necessary. </p>\n<p>Now, the problem with code interviews is that they are “test” constructed by other programmers, not by a professional testing organization.  This means that the first thing I have to figure out about the question is, “what are you really asking me?”  Also, you can never be quite sure what they are testing for.  Do they just want to see that you can solve the problem?  Do they have a particular implementation they are expecting from you?  Do they care about the answer at all and they are just using the code portion of the interview to weed out people who can’t code at all?  And if they are looking for a particular answer, how can they be so sure they have the “right” answer and that my answer is “wrong?”</p>\n<p>As an example, I was once asked how .NET memory management works.  The official answer is, “there is nothing in the .NET specification that says how it should work at all.”  But, the way it has been implemented in Windows is typically the answer people are looking for.  I’ve learned the best answer is the full answer.  Then again, why is this something anyone cares about.  Memory gets managed.  That should be all you really need to know. </p>\n<p>With all of these problems, why do I continue on? </p>\n<p>Well, as I’ve mentioned in other post, hopefully, I’ll learn something with each interview.  I’ll either learn something about myself, or I’ll learn some bit of programming that I still need to work on. </p>\n<p>And, the growth experience of doing something hard has benefit too.  If I avoid hard stuff, I learn that hard stuff is bad.  If I do hard stuff, I learn that hard stuff is just hard.  It won’t kill me.  Besides, I can’t even say what it is about new stuff that scares me.  It is just that feeling.  And I need to silence that lizard.  This is one reason why I believe in interviewing even if you have a job. </p>\n<p>I’ve worked with people in the past who won’t do code interviews.  They say things like, “I have thirty years of experience, if that’s not good enough for you, I don’t want to work for you.”  And I get it.  But I think secretly, they’re afraid of doing the interview.  I always ask, “why not just do the interview?  The worse that can happen is you don’t get the gig, and you might learn something in the process.”</p>\n<h2 id=\"Hiring-Managers\"><a href=\"#Hiring-Managers\" class=\"headerlink\" title=\"Hiring Managers\"></a>Hiring Managers</h2><p>I’ve hit this one at several levels.  Mostly I deal with recruiters.  Most of the recruiters I deal with are just looking for warm bodies.  Having dealt with them on both ends, as a person conducting interviews and as the one looking for work, I can tell you the market is saturated with the “any warm body” variety of recruiter. I’ve started filtering out the “any warm body” recruiters from my email and only work with recruiters that work with companies that are looking for programmers at a level above that.</p>\n<p>I hit this in full force this week when I did a phone interview with a lady who works for a company that has a pool of remote developers who work on their client’s programs.  So when we started talking about rate I found out that they pay everyone the same because it makes the math easier for the owner. I don’t know about you but that sounds short sighted at best and like slave labor at its worse.</p>\n<p>I’ve interviewed at other places where they seemed more concerned with what they would have me work on than IF they wanted to hire me. </p>\n<p>I get that the hiring process is difficult, and figuring out my worth might be difficult.  But, let’s take a look at this for a bit. </p>\n<p>Let’s just say you have 10 programmers who you pay $100K a year each.  You are interviewing someone who can demonstrate that they are twice as productive AND that they’ll be able to improve the productivity of everyone else you already have by at least 10% simply by being on your team, mentoring your existing staff, and implementing process improvements to your organization.  How much value does this 11th programmer possess?  Simple math would indicate at least $200K. </p>\n<p>So, fear holds us back, does it not?  All we hear is that this programmer is asking for a salary that is 1.5 times as much as what you’re paying everyone else and think, “I can’t afford that.”  The reality is, you probably can’t afford to NOT hire them. </p>\n<p>Imagine if you found a diamond mine in a field that was worth $1,000,000 and the land you found the mine in was being sold for $700,000 wouldn’t you find some way to buy the field? </p>\n<p>Maybe you don’t have $700,000.  And you think, “I can’t afford that.”  But isn’t a better question, “how can I afford that?”</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, my challenge this week is, “Don’t let fear hold you back.” </p>\n<p>Look for a way.  Stop listening to the whispers in your head telling you something can’t be done. </p>\n<p>Do something hard today and improve by 1%.</p>\n",
            "tags": [
                "interview",
                "health",
                "emotions",
                "hiring"
            ]
        },
        {
            "id": "http://davembush.github.com/the-full-stack-developer-myth/",
            "url": "http://davembush.github.com/the-full-stack-developer-myth/",
            "title": "The Full Stack Developer Myth",
            "date_published": "2018-03-06T11:30:01.000Z",
            "content_html": "<p>Once upon a time, there were Full Stack Developers, but as time progressed, they disappeared. Now, all we have are impostors. People trying to be full stack, but failing. The Full Stack Developer is now as obsolete as a unicorn. </p>\n<p>Back when I started programming, you could get by only knowing one language and a couple of supporting “languages”. </p>\n<p>My story is similar to many from my generation. I learned a little Basic to catch the programming bug. Then I tried Pascal and moved on to C before I went back to school where I learned COBOL, JCL and CICS. Mostly it was COBOL. </p>\n<p>It didn’t take long to learn any of those languages because the language was the language. Things didn’t move quickly. CICS was simple. And we only needed enough JCL to get our programs to compile. <figure><br><img src=\"/uploads/2018/03/2018-03-06.jpg\" title=\"The Full Stack Developer Myth\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/751f9f\">Avariel Falcon</a> on <a href=\"//visualhunt.com/re/1f7533\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Beginning-of-Complexity\"><a href=\"#The-Beginning-of-Complexity\" class=\"headerlink\" title=\"The Beginning of Complexity\"></a>The Beginning of Complexity</h2><p>Once I graduated, I moved into the world of PCs. Here, I quickly adopted Clipper, a dBase III compiler. Once again, there wasn’t a lot to know and I was able to quickly become an expert in the language. Not because I was any super smart programmer, but because there wasn’t much to know. In fact, at my first job, there was so little to know that I was able to easily be a one-man IT department. </p>\n<p>But today is different. Especially if you are programming anything of significance for the web. Today, to get a web application up and running that looks good and performs well, you’ll need to know: HTML, CSS, JavaScript and some sort of backend programming language. That’s just the minimum. If you are working in an enterprise environment, you’ll also probably need to know one of the popular JavaScript frameworks. Maybe some SASS. Node and WebPack. A UX&#x2F;UI framework such as Bootstrap, Material, or Clarity. And the list can keep growing. We haven’t even touched on authentication protocols, knowing enough about security to keep your site safe, or anything about DevOps, Continuous Integration, or Continuous Delivery. </p>\n<p>And yet, I still see most job request advertising for “Full Stack Developers” </p>\n<p>Is that even possible?</p>\n<h2 id=\"What-Does-Full-Stack-Mean\"><a href=\"#What-Does-Full-Stack-Mean\" class=\"headerlink\" title=\"What Does Full Stack Mean?\"></a>What Does Full Stack Mean?</h2><p>When we first started developing web applications, two things were true. They weren’t very complicated, and they didn’t use a lot of technology. Keep in mind that in the beginning, our biggest issue was cross browser compatibility. This kept us from advancing quickly. So, a typical web application would do 99% of the work on the server and make it all look good with CSS. HTML wasn’t that complicated. So, one developer could, with a little effort, keep everything they needed to know in their head.</p>\n<h2 id=\"The-Boiling-Frog\"><a href=\"#The-Boiling-Frog\" class=\"headerlink\" title=\"The Boiling Frog\"></a>The Boiling Frog</h2><p>As things progressed, we added JavaScript, then some simple JavaScript widgets. HTML improved. CSS improved. And then on the server side, this thing called REST came along. Suddenly, the amount of stuff we need to know has exploded. A new framework is born every hour it seems. Updates happen at a blindingly fast pace. Can anyone keep up? </p>\n<p>And yet, companies still want “Full Stack Developers”</p>\n<h2 id=\"The-Emperor-Has-no-Clothes\"><a href=\"#The-Emperor-Has-no-Clothes\" class=\"headerlink\" title=\"The Emperor Has no Clothes\"></a>The Emperor Has no Clothes</h2><p>Is there no one who can see that this is a recipe for disaster? </p>\n<p>I think programmers kind of like being able to dabble in several different technologies. Spend a little time here. A little time there. Here a little, there a little. It certainly isn’t boring. </p>\n<p>But, the problem with this is all your code suffers. Oh, sure, I’m definitely a proponent in learning multiple languages. The more you learn, the better you get. But, I’m also a proponent of being an expert in one of them. At least one at a time. And there is the problem. Because we have to know so much, we can’t possibly be an expert in anything. </p>\n<p>This last week, someone asked me how much of Angular I know. I had to confess, “maybe 80%” It wouldn’t surprise me if I knew even less. The framework keeps getting new features and I have little time to keep up. And I’m fortunate enough that I’ve spent 90% of my time over the last 4 years doing JavaScript development. And since Angular started the RC cycle, I’ve been spending a 100% of my time with Angular. If I’m having trouble keeping up, what about the guys who are trying to everything else? </p>\n<p>Because I don’t currently even know what I don’t know, my code suffers. Which leads to my next point.</p>\n<h2 id=\"Bad-for-Business\"><a href=\"#Bad-for-Business\" class=\"headerlink\" title=\"Bad for Business\"></a>Bad for Business</h2><p>Business at some level understands that having one guy who is the IT department isn’t going to work well. You don’t see any jobs advertised for that. </p>\n<p>But “Programming” gets lumped together as one giant thing. But I’ll tell you. Work with a guy who really knows CSS. Or really knows Angular. Or really knows HTML. Two things would happen. Quality code would be produced much faster. The code would have fewer bugs. And the other developers, would probably become better in the areas they are weak in. This means that hiring a Full Stack developer is costing business more, even if they pay more for the individual experts.</p>\n<h2 id=\"Why-I-Care\"><a href=\"#Why-I-Care\" class=\"headerlink\" title=\"Why I Care\"></a>Why I Care</h2><p>Some may accuse me of being some old dude who can’t find a job.  Trust me, I have no problem finding work!  No.  The reason I care is because I’m sick of working on the crappy code left behind by guys who either didn’t invest the time to learn how to code correctly using the tools they had, or lacked the experience to know where to even start. </p>\n<p>Now that client side development is a thing, it isn’t enough to be able to hack a result together, which is what most full-stack developers are doing who have most of their experience on the back-end. Even otherwise really smart programmers are getting this wrong.  Just because you know JavaScript or TypeScript (or whatever client side language you use that transpiles to JavaScript) doesn’t mean you know how to properly write a client side application that can be maintained, let alone one that can be tested properly!</p>\n<h2 id=\"I’m-Not-The-Only-One\"><a href=\"#I’m-Not-The-Only-One\" class=\"headerlink\" title=\"I’m Not The Only One\"></a>I’m Not The Only One</h2><p>When I first wrote this article, I had no idea this was such a hot topic.  Some agree.  Others disagree.  All seem pretty passionate in their view.  Many didn’t seem to read the whole article. </p>\n<p>But here’s the deal, I’m not the only one.  A quick search for “Full Stack Developer Myth” brings up the following articles:</p>\n<ul>\n<li><a href=\"//medium.com/swlh/the-full-stack-developer-is-a-myth-4e3fb9c25867\">The Full Stack Developer Is a Myth</a></li>\n<li><a href=\"//www.atlanticbt.com/blog/myth-full-stack-unicorn-developer/\">The Myth of The Full-Stack Unicorn Developer</a> (love the title)</li>\n<li><a href=\"//andyshora.com/full-stack-developers.html\">The Myth of the Full-Stack Developer</a></li>\n<li><a href=\"//aquent.com/blog/full-stack-developer-myth\">The Myth of the Full Stack Developer</a></li>\n</ul>\n<p>And that’s just the first four I could find. </p>\n<p>To be fair, a small company may think they need to hire someone who can do it all.  But, they’d be better off hiring a “Full-Stack Agency” who has specialist in each area.  Unfortunately, my experience has shown a company who should be using an agency also has no clue about the skill level they should be hiring.</p>\n<h2 id=\"Practical-Reality\"><a href=\"#Practical-Reality\" class=\"headerlink\" title=\"Practical Reality\"></a>Practical Reality</h2><p>I’m not sure I have an answer for the dilemma I’ve presented. Show your manager this article? Refuse to take Full Stack jobs? </p>\n<p>No, I doubt those will work. </p>\n<p>What I’ve been doing is interviewing for jobs on the strength of what I’m an expert in. It doesn’t always work. But for the companies that recognize that I know way more than most of their developers who are just getting by, this lands me a secure, well-paying place in the dev shop. </p>\n<p>Spread the word. Full Stack developers don’t really exist. The best developers are specialist and business would do well to hire specialist over generalist.</p>\n",
            "tags": [
                "full stack developer",
                "web development"
            ]
        },
        {
            "id": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "url": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "title": "Humpty Dumpty and Programming",
            "date_published": "2017-12-05T11:30:32.000Z",
            "content_html": "<p>I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” </p>\n<p>There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. <figure><img src=\"/uploads/2017/12/2017-12-05.png\" title=\"Humpty Dumpty and Programming\"> Photo by <a href=\"//visualhunt.com/author/f31767\">aturkus</a> on <a href=\"//visualhunt.com/re/b4881b\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Agile\"><a href=\"#Agile\" class=\"headerlink\" title=\"Agile\"></a>Agile</h2><p>Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. </p>\n<p>“Have you ever worked in an Agile organization before?” </p>\n<p>I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? </p>\n<p>It is like Humpty Dumpty trying to explain the meaning of the poem <a href=\"//www.jabberwocky.com/carroll/jabber/jabberwocky.html\">Jabberwocky</a>. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. </p>\n<p>Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” </p>\n<p>Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. </p>\n<p>In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” </p>\n<p>This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.</p>\n<h2 id=\"A-Community-of-Hacks\"><a href=\"#A-Community-of-Hacks\" class=\"headerlink\" title=\"A Community of Hacks?\"></a>A Community of Hacks?</h2><p>Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. </p>\n<p>If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. </p>\n<p>The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. </p>\n<p>Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!</p>\n<h2 id=\"What-If\"><a href=\"#What-If\" class=\"headerlink\" title=\"What If?\"></a>What If?</h2><p>In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? </p>\n<p>What if we got beyond tools to how people think?</p>\n<h2 id=\"Code-Puzzles\"><a href=\"#Code-Puzzles\" class=\"headerlink\" title=\"Code Puzzles\"></a>Code Puzzles</h2><p>Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. </p>\n<p>I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  </p>\n<p>And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. </p>\n<p>And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?</p>\n<h2 id=\"The-Advantage\"><a href=\"#The-Advantage\" class=\"headerlink\" title=\"The Advantage\"></a>The Advantage</h2><p>The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!</p>\n<h2 id=\"Be-Intentional\"><a href=\"#Be-Intentional\" class=\"headerlink\" title=\"Be Intentional\"></a>Be Intentional</h2><p>So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. </p>\n<p>Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? </p>\n<p>Do you really know what Agile is? </p>\n<p>How many design patterns do you know that aren’t the hot new trend? </p>\n<p>Could you code your way out of an interview with Google, Facebook or Amazon? </p>\n<p>Where do you want to be with your career next year?  In 5 years? </p>\n<p>Are you average or striving to be awesome? </p>\n<p>Join me on the journey!</p>\n",
            "tags": [
                "programming",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-be-an-awesome-programmer/",
            "url": "http://davembush.github.com/how-to-be-an-awesome-programmer/",
            "title": "How To Be an Awesome Programmer",
            "date_published": "2017-07-11T10:30:48.000Z",
            "content_html": "<p>It isn’t what you think.  Being an awesome programmer, or being awesome at anything has a lot less to do with any given topic: programming, boxing, writing.  It has a lot to do with being a healthy human.  So, the simple answer to the question of “How to be an awesome programmer” is simply, “be healthy.” </p>\n<p>But what does healthy look like? </p>\n<p>I really couldn’t tell you what got me started, but I’ve been reading an experimenting with Brain Hacks, Diet, Exercise, and Social Skills for over a year now.  Turns out, they are all related. Now, most of my audience has less than 5 years of experience.  I can say that because most of the programming population has less than 5 years of experience, so I’m going on the assumption that the people who read this blog, are a small representation of the global population.  Many symptoms I will reference are going to be things you may not suffer with … yet.  If you fall in that group, think of this post as a letter from your older self.  I was young once too.  I remember, I thought I was immune to some of these issues and if I wasn’t, there wasn’t much I could do. </p>\n<p>But we’ve learned SO much in the last 20 years.  Much of what we’ve thought was “normal” really isn’t.  We are just proverbial frogs in a pan of water being heated to death. <figure><img src=\"/uploads/2017/07/2017-07-11.jpg\" title=\"How To Be an Awesome Programmer\"> Photo via <a href=\"//visualhunt.com/re/4bde52\">VisualHunt.com</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>Now, the stuff I’m going to talk about in here is what I’ve learned and from my experience.  I’m a programmer.  Not a doctor, Jim.  I write this in the hopes that it helps at least one other person.  But, I also leave the research and due diligence to you.  Just like I could give you some general programming guidance, but I would expect you to dig for more details.  Not that I do that intentionally when I write about programming.  Just be aware that I’m definitely not giving details here. </p>\n<p>Also, there is this funny little thing called “reactance” that causes us to want to believe that what we currently believe is the right way.  So, I’m going to ask you a simple little question.  It is the one I try to implement every time I hear a new idea.  “What if they are right?  What if I am wrong?” </p>\n<p>The truth is, just because you are used to living a certain way, doesn’t make it the right way.</p>\n<h2 id=\"Brain-Health\"><a href=\"#Brain-Health\" class=\"headerlink\" title=\"Brain Health\"></a>Brain Health</h2><p>So, as I’ve thought about what I want to write, I could literally start from just about any angle.  The cool thing about our bodies is that they are SO intertwined.  When one system gets out of whack, other systems in the body fail as well.  But I wanted to start with Brain Health because if you can hack that, it seems most of the other stuff we should be doing becomes quite a bit easier.</p>\n<h3 id=\"Sleep\"><a href=\"#Sleep\" class=\"headerlink\" title=\"Sleep\"></a>Sleep</h3><p>So, our first stop in brain health is sleep.  There are a lot of hacks that you can implement to get better sleep, but if you are going to be late and getting up early so that you are in bed for less than 8 hours, you are already starting out in a bad place.  I’ve always been pretty good at sleeping.  But there was a time when I was trying to cram more useful day out of my 24 hours so I was getting up an hour earlier than I currently do. </p>\n<p>Meanwhile, I developed aching shoulder muscles that I caulked up to a change in office chairs. </p>\n<p>Then I changed sleep habits.  I decided I didn’t really need that extra hour.  Almost immediately, my shoulders stopped aching.</p>\n<h3 id=\"Food\"><a href=\"#Food\" class=\"headerlink\" title=\"Food\"></a>Food</h3><p>Talking about food is like talking about religion.  People have some very strongly held beliefs.  I’m guessing you do too. </p>\n<p>Now, before I try to break through some myths, let’s address where our current beliefs about how to eat “right” come from. </p>\n<p>When I was a kid, we had the “4 square meal.”  Equal portions of different categories of food.  Then, it was a REALLY big deal when USDA came out with the “Food pyramid.”  And now we have a “food plate.” </p>\n<p>How can you believe that any one of those is “right” when they’ve changed so often?  Either our research is flawed, or something else is influencing the changes.  They sure aren’t reliable.  And, we want to believe them because an “authority” says they are. </p>\n<p>Let me tell you something about “authorities.”  They aren’t all knowing and sometimes, they are wrong. </p>\n<p>Another thing that sticks with me is something a psychologist (employer) of mine told me.  “The schools are at least 20 years behind the research.”   WOW!  This means that your doctor is recommending things he learned 20+ years ago.  And it gets worse.  With lawsuits as prevalent as they are and insurance companies in control, few doctors are going to tell you what the current research says about what you should be eating, even if they know.  The “system” moves slowly. </p>\n<p>Now, it doesn’t take long to find information on the Internet that supports the following basic food truths:</p>\n<ol>\n<li>Stay away from sugar</li>\n<li>Stay away from carbs</li>\n<li>Eat more fat</li>\n</ol>\n<p>You’ve heard it before.  Probably from some diet thing.  But, did you know that eating primarily carbs and sugars, as we’ve been doing now for over a generation, also makes us dumber?! </p>\n<p>Now, I’ve been on a basically ketogenic diet for several years now.  Up until recently, I struggled with the temptation of eating foods on the naughty list.  There are two things that turned that around for me. </p>\n<p>First, I realized that the foods that held the strongest temptation had some emotional trigger or event tied to them.  But, in truth, I didn’t REALLY like the food. </p>\n<p>Second, I increased the amount of fat in my diet.  Now, I crave vegetables.  And as an added bonus, I don’t eat as many calories and I’m almost never hungry. </p>\n<p>Now, what does this have to do with brain health?  </p>\n<p>It turns out that your brain is mostly fat.  And not just any fat, but the kind of fat you’ll find in butter, coconut oil, olive oil, and meat.  There is still “bad fat” but it is the fat that is manmade.  Margarine, and corn oil for example.  Anyhow, if you remove good fat from your diet, your brain doesn’t function as well. </p>\n<p>In fact, there are studies that indicate that a lot of brain disease is caused by a lack of fat in our diets. </p>\n<p>Carbs are bad.  Fats are good.  Check it out for yourself.</p>\n<h3 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h3><p>The next thing that heavily influences brain health is exercise.  Yes, it helps for dieting too.  But, that’s not the only benefit.  And only certain kinds of exercise is beneficial to exercise.  But the simple act of walking for 30 minutes every day 6 days a week, has several brain healthy benefits:</p>\n<ol>\n<li>Improves confidence</li>\n<li>Helps fight depression</li>\n<li>Improves sleep (which also helps your brain)</li>\n<li>Reduces stress</li>\n<li>Generally improves cognition.</li>\n</ol>\n<p>It is a simple thing to do that has so many benefits that using the excuse, “I’m too busy to exercise.” Is just that.  An excuse.</p>\n<h3 id=\"Cortisol-and-Oxytocin\"><a href=\"#Cortisol-and-Oxytocin\" class=\"headerlink\" title=\"Cortisol and Oxytocin\"></a>Cortisol and Oxytocin</h3><p>Cortisol is the hormone that is triggered by stress.  It isn’t all bad.  But the amount we generally live with is bad.  The thing about Cortisol is that it can wreck your diet.  You’ve been trying to shed pounds but you’ve reached a floor.  It could be you are under too much stress.  Maybe because you aren’t getting enough sleep.   Or maybe you’ve just forgotten how to relax.  Or, it could be you aren’t eating correctly. </p>\n<p>Oxytocin, on the other hand, is the “feel good” drug.  There are a lot of ways to increase this and the great news is, no one has yet run a study that has concluded you can get too much. </p>\n<p>And once again, what is generally bad for our general health is directly linked to our brain health.</p>\n<h3 id=\"Breath\"><a href=\"#Breath\" class=\"headerlink\" title=\"Breath\"></a>Breath</h3><p>This one kind of surprised me.  Just doing nothing more than focusing on your breath for 10 minutes a day, lowers cortisol and has many other health benefits. </p>\n<p>Sometimes you’ll see this phrased as “meditation” which kind of freaks some people out.  So, don’t meditate.  Just go to a quiet place and focus on breathing.  If you want to move it up a notch focus on breathing and relaxing on the exhale. 10 minutes a day.  Who doesn’t have time for that?</p>\n<h2 id=\"Ask-Good-Questions\"><a href=\"#Ask-Good-Questions\" class=\"headerlink\" title=\"Ask Good Questions\"></a>Ask Good Questions</h2><p>Now, when I mention some of my practices to people I work with, I’m invariably met with, “I could never do that.”  Which reminds me of what my dad always said, “Can’t went to the poor house and died.” </p>\n<p>The point is, if you think you can’t, you surely won’t.  I won’t go so far as to say, “If you think you can or you think you can’t, in either case you are right.”  But, thinking you can will lead you to asking the right question and will at least get you closer to “there” where ever that may be. </p>\n<p>Here are some questions for you to ponder: </p>\n<ul>\n<li>How can I get the right amount of sleep? </li>\n<li>How can I get good quality sleep? </li>\n<li>What is keeping me from sleeping? </li>\n<li>How can I eat healthier? </li>\n<li>What foods will help me? </li>\n<li>What foods will hurt me? </li>\n<li>What in my environment needs to change?</li>\n</ul>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p>I’d put resources here of stuff I’ve read.  But I want you to do the research.  If I give it to you, you are a lot less likely to put it into action. </p>\n<p>Instead, I want to ask you a few questions. </p>\n<p>Listen, I know you are reluctant to change.  I get that.  I really do.  But if you were to change even just a few of your habits, what might some of the benefits be for you? </p>\n<p>On a scale of 1 to 10, how likely are you to investigate some of the changes mentioned above? </p>\n<p>Why didn’t you rate it lower? </p>\n<p>Imagine you’ve investigated the changes and implemented them, what kind of impact would that have on your life? </p>\n<p>Why is that important to you? </p>\n<p>Now, what are you going to do about this next?</p>\n",
            "tags": [
                "brain",
                "health",
                "programmer"
            ]
        },
        {
            "id": "http://davembush.github.com/secrets-to-your-first-programming-job/",
            "url": "http://davembush.github.com/secrets-to-your-first-programming-job/",
            "title": "Secrets to Your First Programming Job",
            "date_published": "2017-05-13T16:47:50.000Z",
            "content_html": "<p>This past week I was talking to a guy who is graduating from College and looking for a job. He asked me what most people ask at that point in their career. “Everyone wants experience, but how do you get experience if no one will give it to you?”</p>\n<p>What is interesting is that for all the advances in the 30 years since I started my career, that question is still the main question every graduate asks.</p>\n<p>Now, before I get started, I want to make sure we are clear. These tips may or may not work for you. They are what I would do, and in large part are what I did 30 years ago, just updated to be appropriate to the current technology. How well they work for you are going to depend on a lot of different factors, not least of which is how much effort you apply. They are also very much based on my culture here in the USA. If you are looking for a job in another country that is dissimilar culturally, you may want to ignore this advice completely. But, I’ll also say this. If what you are currently doing isn’t working, what do you have to lose?</p>\n<figure>![](/uploads/2017/05/2017-05-13.png)<figcaption>Photo credit: [MDGovpics](//www.flickr.com/photos/mdgovpics/8157677890/) via [Visualhunt.com](//visualhunt.com/re/abeb67) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n\n<h2 id=\"Get-a-Job\"><a href=\"#Get-a-Job\" class=\"headerlink\" title=\"Get a Job\"></a>Get a Job</h2><p>Wait! Wasn’t the whole point of this article to help you find a job? No! The point of this article is help you get a Programming job. And the first step in the process is to get A job. Any job. Don’t be picky. When I started my career, I was working in the Sporting Goods and Automotive department at K-Mart. Minimum wage. Nothing to write home about. Prior to that I worked as a maintenance man.</p>\n<p>Listen, I know you want a job in whatever it was you went to school for. But the fact of the matter is, you have college bills to pay off. You probably have a car that needs gas and insurance. You may even have rent and groceries. If Mom and Dad are taking care of all that for you, shame on them! And shame on you for letting them, no matter how easy that makes life. Cut the cord and grow up!</p>\n<p>OK, enough on that rant. If I can’t convince you on the financial terms, let me try a couple other really good reasons.</p>\n<p>First, the fact of the matter is, no one wants to be the first one to take a chance on you.  If you don’t currently have a job that you’ve been able to hold for a while, how can I be sure that you will work out?  Even if you have all the credentials I’m looking for, will you stick around when things get hard?  Getting a job, particularly a crappy job, shows that you are a worker.  That nothing is beneath you.  And trust me, with all the stories about how millennials are lazy and want the world handed to them (even if that isn’t totally accurate) you can bet someone who is working for minimum wage at a job that don’t particularly like is going to stand out.</p>\n<h2 id=\"Your-Job-is-Getting-a-Job\"><a href=\"#Your-Job-is-Getting-a-Job\" class=\"headerlink\" title=\"Your Job is Getting a Job\"></a>Your Job is Getting a Job</h2><p>Until you have a job of some kind, your job is getting a job. The harder you work at getting a job, the faster you will get the job you want. This means you should have a list of things you can do today that will get you closer to landing a job.  Work on your resume. Implement some of the tips below. Apply for any and every job that is open.  Go door to door if you have to.</p>\n<p>Once you’ve finished reading this article, make a list and work through it.</p>\n<h2 id=\"It’s-a-Numbers-Game\"><a href=\"#It’s-a-Numbers-Game\" class=\"headerlink\" title=\"It’s a Numbers Game\"></a>It’s a Numbers Game</h2><p>Now here is a very sad truth. Getting that first job is a numbers game. You are going to apply to a lot of places before anyone hires you. And the thing your college won’t tell you as they prepare you to get out into the real world is just how much work this is going to be.</p>\n<p>When I was your age…</p>\n<p>…we just had the newspaper. I sent my resume to anyone and everyone that looked like they might have a programming job available.</p>\n<p>In your case, you are going to make sure you are as visible as possible. Post your resume on job boards. Apply to every company that has an open computer job, even if you don’t qualify for the one they advertised. Ask your friends if they know anyone who might be able to help.</p>\n<p>Note: I said, “might be able to help.” Not, “might be able to get you a job.” I’ll talk more about this later. But HOW you ask for help plays a HUGE part in being able to GET help.</p>\n<p>When someone ask you what you do, the answer is, “Well, actually, right now I’m trying to find a job as a ______ do you know anyone who might be able to help?”</p>\n<p>It is the whole networking thing.</p>\n<p>Allow me to tell you a story. When I graduated, this was the exact line I used. “Do you know anyone who might be able to help?” And when I contacted the person I was referred to, I asked the same question. Typically, the letter I sent looked something like this:</p>\n<blockquote>\n<p>Dear sir, I just graduated from such and such college&#x2F;university. My degree is in X and I’m trying to find work.</p>\n</blockquote>\n<blockquote>\n<p>I was speaking with John Doe who suggested that I contact you. I realize you may or may not have anything for me, but I was hoping you might be able to suggest some people who might be able to help me find an entry level programming position.</p>\n</blockquote>\n<blockquote>\n<p>Thanks for any help you can give me.</p>\n</blockquote>\n<h2 id=\"Your-Degree-isn’t-Primary\"><a href=\"#Your-Degree-isn’t-Primary\" class=\"headerlink\" title=\"Your Degree isn’t Primary\"></a>Your Degree isn’t Primary</h2><p>I know your degree is probably all you feel like you have. But mostly, no one cares. Oh, we care that you have a degree, but that is about all.</p>\n<p>What do we care about?</p>\n<p>What can you do?</p>\n<p>Now, what you need to do is think outside the box. When you put your resume together, you are going to put anything on your resume that is remotely related to the kind of job you are trying to get. Even if you did it for free.</p>\n<p>The next best thing you can do is to put something on your resume that indicates you are a go-getter. Did you have any leadership roles in college? Make sure that gets on your resume! Have you done a lot of volunteer work?</p>\n<h2 id=\"Dress-Up\"><a href=\"#Dress-Up\" class=\"headerlink\" title=\"Dress Up\"></a>Dress Up</h2><p>Really! This shouldn’t need to be said. But unless you are told otherwise ahead of time, you never get in trouble for dressing up for an interview. But nothing will kill it faster if you don’t. Yes, even in this modern day and age. Even if the organization sells itself as a casual organization, dress in business attire. Guys, this means where a suit. Gals, let’s face it, I doubt you’ll have any problem with this.</p>\n<h2 id=\"LinkedIn\"><a href=\"#LinkedIn\" class=\"headerlink\" title=\"LinkedIn\"></a>LinkedIn</h2><p>I wrote about <a href=\"/linkedin-tips-for-programmers/\">my LinkedIn strategy</a> a while ago.  As I stated there, the more connections you have, the better off you will be.  This is true of all social media.  Connect to anyone who ask to connect with you.</p>\n<p>Your LinkedIn connections are a large field of people you can send a version of the letter above.  Remember, you aren’t asking them for work, you are asking for help finding work.</p>\n<p>Which leads to a little rant I have built up about how to ask for help on LinkedIn.</p>\n<h2 id=\"Asking-for-Help\"><a href=\"#Asking-for-Help\" class=\"headerlink\" title=\"Asking for Help\"></a>Asking for Help</h2><p>This time of year, I get multiple in-Mails that all say essentially the same thing.  “Hi, I am graduating from X with a degree in Y.  Let me know if you have any work.”  Oh, yes, they use a few more words than that.  But the gist is exactly that short little sentence.</p>\n<p>Now, imagine you are me and everyone sends you that same in-Mail. What would you do? Probably the same thing I do. Delete it.</p>\n<p>Occasionally, I’ll get some sort of variation that amounts to exactly what I’ve been saying. “I was hoping I could talk to you about …” Why does this work when the other way doesn’t. Simple, you aren’t asking me for work. You are asking for advice.</p>\n<p>If you want to get help, you need to stand out.  If you ask me for advice and I have a job for you, I’ll let you know.  If all you do is ask for a job… “Delete”</p>\n<p>This, of course, doesn’t always work. But, this is exactly how I got my first job. Now, if you follow the advice I’ve given so far, eventually, you’ll find a job. But there is a lot more you can do that will make you stand out.</p>\n<h2 id=\"Volunteer\"><a href=\"#Volunteer\" class=\"headerlink\" title=\"Volunteer\"></a>Volunteer</h2><p>Hey, you aren’t doing anything yet anyhow.  If you took my advice and have a minimum wage job, you still have some brain power left.  So, find some organization that needs help with what you want to do and volunteer.  Now you have experience you can put on your resume and the organization has some program that helps them along.</p>\n<h2 id=\"Stack-Overflow\"><a href=\"#Stack-Overflow\" class=\"headerlink\" title=\"Stack Overflow\"></a>Stack Overflow</h2><p>Another place you can gain some points is on Stack Overflow.  Answer question.  The fastest way to learn is to find a question that no one has answered.  Figure out the answer and post it.  If you do one question a day, your points will rise and you can include a link to your profile as part of your resume.</p>\n<h2 id=\"Open-Source\"><a href=\"#Open-Source\" class=\"headerlink\" title=\"Open Source\"></a>Open Source</h2><p>Regardless of the type of work you want, participating in an Open Source project is another way of showing that you know your stuff. You might think you need to know a lot to participate in a project. But there are some low entry ways of participating.</p>\n<p>An easy way to get started is by visiting these sites and finding some low hanging fruit that will get you started:</p>\n<ul>\n<li><a href=\"//up-for-grabs.net/#/\">Up for Grabs</a> – A list of sites looks for help from new contributors.  Easy way to get started.</li>\n<li><a href=\"//github.com/MunGell/awesome-for-beginners\">Awesome for Beginners</a> – List of beginner friendly projects</li>\n<li><a href=\"//medium.freecodecamp.com/finding-your-first-open-source-project-or-bug-to-work-on-1712f651e5ba\">Check Out this Post</a> – Even more ways to get started</li>\n</ul>\n<h2 id=\"Your-Resume\"><a href=\"#Your-Resume\" class=\"headerlink\" title=\"Your Resume\"></a>Your Resume</h2><p>I wrote about <a href=\"/your-programming-resume-is-garbage/\">how I think a Resume should be put together</a> before.  Read it and implement it. Two things to remember:</p>\n<ul>\n<li>You need to stand out.</li>\n<li>The how-to class your college gave you is useless.</li>\n</ul>\n<h2 id=\"Job-Boards\"><a href=\"#Job-Boards\" class=\"headerlink\" title=\"Job Boards\"></a>Job Boards</h2><p>You can post your resume to all the job boards if you like.  But the only one I bother with is Dice.com because it is the only one I know of that is focused on what we do.</p>\n<h2 id=\"The-Interview\"><a href=\"#The-Interview\" class=\"headerlink\" title=\"The Interview\"></a>The Interview</h2><p>Once again, I’ve <a href=\"/categories/Interview/\">written about the interview process</a> before too.</p>\n<p>But here I want to talk to the new programmer specifically.</p>\n<p>First, no one expects you to have all the answers. If you don’t know, just say so. Don’t try to bluff you way through. They will find out you don’t know eventually. But more importantly, saying “I don’t know.” Means you really do know the stuff you’ve given an answer for.</p>\n<p>Second, while hardly anyone in this field wants to admit it, the interview is about interpersonal skills. A lot of the time, if you <a href=\"/confident-programmer-secrets-revealed/\">act confident in yourself</a>, they will be confident in you.</p>\n<p>Learn body language, power poses, etc.</p>\n<p>I was just thinking about this more today and realized … what’s the one thing most people want? They want to be liked. They want people to be interested in them. Sure, there are a lot of hacks I could tell you. But the simplest, and most genuine hack of all is to be interested in your interviewer.</p>\n<p>You know that part of the interview where they ask you if you have any questions? This is where you ask question that show you know something about the job you are interviewing for. But, you can also use this to ask a question that is both about the job and the person interviewing. Like, “What is your favorite part of working here?” and “What is your least favorite …” You find out something about the organization and you get them talking about something that is important to them.</p>\n<h2 id=\"Bet-on-Yourself\"><a href=\"#Bet-on-Yourself\" class=\"headerlink\" title=\"Bet on Yourself\"></a>Bet on Yourself</h2><p>As a last resort. Bet on yourself. “I’ll work for you for free for 3 months to prove to you that you want to hire me full-time.”  Even if things don’t work out, you’ve gotten more experience.</p>\n",
            "tags": [
                "interview",
                "job search"
            ]
        },
        {
            "id": "http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/",
            "url": "http://davembush.github.com/coasting-curiosity-diversification-and-being-awesome/",
            "title": "Coasting, Curiosity, Diversification and Being Awesome",
            "date_published": "2017-03-21T10:30:00.000Z",
            "content_html": "<p>There are two twin evils that I see in the programming community. The first is the programmer who knows what he knows and has no desire to learn more. I call these, “coasters”. And then there are the programmers who are so curious that they try to learn every new thing that comes along, with no focus. The interesting thing is, both of these types of people end up at the same place. Out of work. The cure for both is the same.  Being Awesome.</p>\n<figure>![](/uploads/2017/03/image-3.png \"Coasting, Curiosity, Diversification and Being Awesome\")<figcaption>Photo credit: [aaronHwarren](//www.flickr.com/photos/pedalfreak/3745777389/) via [Visual hunt](//visualhunt.com/re/1b14eb) / [ CC BY-ND](//creativecommons.org/licenses/by-nd/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Coasting-Is-for-Morons\"><a href=\"#Coasting-Is-for-Morons\" class=\"headerlink\" title=\"Coasting Is for Morons\"></a>Coasting Is for Morons</h2><p>If you are reading this blog, you are probably not in this category. In fact, it probably frustrates you to watch these types of programmers as much as it does me. But for completeness, let’s describe the coasting moron.</p>\n<p>These are the programmers who learned how to program more than 5 years ago and got a job and have never moved since. They are still programming in the same language they learned originally. They are probably still at the same job they started at. And, if they had to get a new job, they probably would not be able to find one because their skills are SO out-of-date.</p>\n<p>They are still using Web Forms or MVC in ASP.NET, have no idea how to use anything beyond .NET 2.0. Or worse, they learned how to program in Visual Basic back in the day and couldn’t write a proper .NET application to save their life.</p>\n<p>They know HTML 3.2 and maybe xHTML, but have no idea what HTML5 is.</p>\n<p>And if they had to use JavaScript, they are probably still stuck using ECMA Script 3. This is to say nothing of knowing the dangers of global variables or what prototypal inheritance is.</p>\n<p>They are doomed because they are so far behind, it would be impossible to catch up.</p>\n<h2 id=\"Curiosity-Killed-the-Cat\"><a href=\"#Curiosity-Killed-the-Cat\" class=\"headerlink\" title=\"Curiosity Killed the Cat\"></a>Curiosity Killed the Cat</h2><p>On the opposite end of the spectrum is the programmer who chases every new programming idea that comes out. These are the programmers who typically complain about things like <a href=\"/javascript-fatigue-makes-me-scream/\">JavaScript Fatigue</a>. While they are slightly better off than the programmer who learns nothing, they problem they face is that because they are trying to learn too much at once, they learn nothing. You have to commend their curiosity though.</p>\n<p>Fortunately, with a bit of structure, we can help the curious programmer. They are already motivated. And while I might be able to help the coaster in a one on one situation, I’m not going to spend a lot of time trying in this post. Why write to people who aren’t even likely to read?</p>\n<p>But I can help you.</p>\n<h2 id=\"Diversification-for-Programmers\"><a href=\"#Diversification-for-Programmers\" class=\"headerlink\" title=\"Diversification for Programmers\"></a>Diversification for Programmers</h2><p>So, first, what should you learn next? Another language? A new operating system?</p>\n<p>Well, the first thing you need to do is list out all the things you are interested in. Once you have that list, the next thing you want to try to figure out is which of those things is going to make you more valuable where you are today without causing you to learn more than one new thing.</p>\n<p>For example, you may currently know how to program in C# or VB.NET but only have a rough idea of how to use SQL other than basic CRUD operations. Maybe a deep dive into <a href=\"/SqlForNetProgrammers\">learning SQL</a> would be the next path.</p>\n<p>Or maybe you are doing some web development and know a bit of JavaScript, but haven’t looked at any of the SPA frameworks that are currently available. Pick one and learn it. I recommend Angular2 at this point, but it doesn’t really matter. Find something on your list and learn it.</p>\n<p>Anything you learn is good. Or maybe you are interested in a brand new language, but you can stay within the same basic framework. For example, I know C#, but I’m intrigued by functional programming. F# is on my short list of things I might learn next.</p>\n<p>The idea is to move incrementally rather than leaping to something where everything is new again. If you can somehow work this all into your day job, even better. You can’t always, but it is the fastest way to learn new stuff.</p>\n<h3 id=\"Learn-Outside-of-Programming\"><a href=\"#Learn-Outside-of-Programming\" class=\"headerlink\" title=\"Learn Outside of Programming\"></a>Learn Outside of Programming</h3><p>But it isn’t all about programming, is it? What can you learn that isn’t directly related to programming? There are all kinds of things. And the broader knowledge can help your programming as well. Maybe you have a side interest in business, finance, or marketing. Maybe you find yourself having trouble with interpersonal relationships. There are all kinds of other things you could be studying that really have nothing to do with programming directly, but have everything to do with making you more valuable both as a person and as an employee.</p>\n<p>Find outside interest!</p>\n<h2 id=\"Focus-Makes-Awesome\"><a href=\"#Focus-Makes-Awesome\" class=\"headerlink\" title=\"Focus Makes Awesome\"></a>Focus Makes Awesome</h2><p>Having said all of this. The real trick is focus. As I pointed out above, it is great to be curious. We can do something with that. But, if you try to learn more than 3 things at a time, you will end up learning nothing well.</p>\n<p>One of the guys I work with has a Trello board with a list of possible things to learn. I have a stack of sample kindle books to read someday, maybe. They are things I was curious about at one point. If I’m still interested when I’m looking for something new to read, I’ll pull them down and read the sample.</p>\n<p>But here’s the thing. I only focus on learning 2 or 3 new things at a time. Generally, one new programming thing and one new not programming thing.</p>\n<p>Currently, I’m learning all things Angular2. My goal is to be THE Angular2&#x2F;JavaScript expert in Connecticut. I’m well on my way.</p>\n<p>I have two other interest that have nothing to do with programming. One is Options Trading. I’m at a point with that where it only takes a few minutes a day. So, I have room for something else.</p>\n<p>That something else is everything brain science. Psychology, Sociology, Hypnosis, Memory, and more. It is a fascinating world.</p>\n<h2 id=\"Be-Awesome\"><a href=\"#Be-Awesome\" class=\"headerlink\" title=\"Be Awesome\"></a>Be Awesome</h2><p>There is a story about two guys who were in the woods when they ran into a bear. Being smart hikers, they agreed to try standing still to see if the bear would just ignore them. This worked well.</p>\n<p>But, after the bear left, one of the guys said to the other, “What would you have done if standing still didn’t work?” To which the second guy said, “I would have run as fast as I can.” The first guy responded, “But, do you really think you can outrun a bear?!” And then the second guy says, “I wouldn’t have to out run the bear. I only need to out run you.”</p>\n<p>And that is the market we live in. The good news is, there are so many people that are coasting right now that “awesome” is a pretty easy level to achieve in life.</p>\n<p>So, go out, do some focused learning and be awesome</p>\n",
            "tags": [
                "programming",
                "javascript",
                "c#",
                ".net"
            ]
        },
        {
            "id": "http://davembush.github.com/confident-programmer-secrets-revealed/",
            "url": "http://davembush.github.com/confident-programmer-secrets-revealed/",
            "title": "Confident Programmer Secrets, Revealed",
            "date_published": "2017-03-07T12:30:00.000Z",
            "content_html": "<p>To say there are secrets to being a confident programmer may seem a bit over the top. But, you would be surprised at what makes a programmer seem confident, how you can be more confident, why confidence is no real indicator of truth, and why you need to arm yourself against confidence.</p>\n<figure>![](/uploads/2017/03/image.png \"Confident Programmer Secrets Revealed\") Photo via [VisualHunt.com](//visualhunt.com/re/7edea7)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Be-Confident\"><a href=\"#Why-Be-Confident\" class=\"headerlink\" title=\"Why Be Confident\"></a>Why Be Confident</h2><h3 id=\"Persuade-the-Decision-Makers\"><a href=\"#Persuade-the-Decision-Makers\" class=\"headerlink\" title=\"Persuade the Decision Makers\"></a>Persuade the Decision Makers</h3><p>Look around the organization you work at.  Have you ever noticed that there are one or two people who have your manager’s ear?  Every time a decision needs to be made, the boss goes to them?  Why is that?  Why don’t they come to you?  You know just as much as they do, right?  Could it be that you simply don’t portray yourself as confident?  I didn’t say you weren’t confident.  Just that you aren’t perceived as confident.  Don’t worry, we’ll fix that shortly.</p>\n<h3 id=\"Better-Pay\"><a href=\"#Better-Pay\" class=\"headerlink\" title=\"Better Pay\"></a>Better Pay</h3><p>You will also notice that people who seem more confident also command a larger salary. This is both because their confidence has moved them up the corporate ladder faster and because they are better able to interview for positions that most people would feel like are out of their reach. Confidence, and the ability to communicate confidence is better for your bottom line.</p>\n<h3 id=\"Interview-Skills\"><a href=\"#Interview-Skills\" class=\"headerlink\" title=\"Interview Skills\"></a>Interview Skills</h3><p>Anyone who knows me knows I’m a big proponent of interviewing for new jobs even if you like where you are. But let’s raise the bar on that. Don’t just interview. Practice interviewing for jobs that are a bit out of your reach projecting confidence that you do, indeed, qualify. I can tell you from firsthand experience. If you know your stuff and you project confidence that you know your stuff, you’ll end up being asked to fill positions you never dreamed of filling.</p>\n<h3 id=\"Consistency-with-Who-You-Are\"><a href=\"#Consistency-with-Who-You-Are\" class=\"headerlink\" title=\"Consistency with Who You Are\"></a>Consistency with Who You Are</h3><p>You are confident, right? Imagine what would happen if you projected that confidence? How would you feel if everyone else thought you were confident as well?</p>\n<h3 id=\"Feel-better\"><a href=\"#Feel-better\" class=\"headerlink\" title=\"Feel better\"></a>Feel better</h3><p>Let’s just assume for a second that nothing else I’ve said comes true. I can tell you that if you follow my suggestions on how to be confident, you will feel better about yourself. The fact of the matter is, you may have to exercise this confidence muscle a bit. But the good news is that by following my confidence tips, you’ll also end up feeling more confident which will make the tips easier to implement, which will make you feel more confidence. Confidence breeds confidence. And, confidence feels really good.</p>\n<h2 id=\"How-to-Be-Confident\"><a href=\"#How-to-Be-Confident\" class=\"headerlink\" title=\"How to Be Confident\"></a>How to Be Confident</h2><h3 id=\"Know-your-stuff\"><a href=\"#Know-your-stuff\" class=\"headerlink\" title=\"Know your stuff\"></a>Know your stuff</h3><p>While it is possible to fake confidence, eventually that is going to catch up with you. Confidence isn’t a con game. Confidence is a projection of something that already exist. So, the foundation of confidence is to know your stuff. If you are projecting confidence about all things JavaScript, you’d better know all things JavaScript. Follow podcast. Read blogs. Read books.  Rinse, lather, repeat.</p>\n<p>But the simple fact is, there are some of you who know all there is to know about a subject and you still aren’t confident.</p>\n<h3 id=\"Stand-up-straight\"><a href=\"#Stand-up-straight\" class=\"headerlink\" title=\"Stand up straight\"></a>Stand up straight</h3><p>I’ve written before about how <a href=\"/the-psychology-of-programming/\">your body language impacts your perception of yourself</a>. I’ll say it again here. If you want to feel more confident, stand up straight. It isn’t just good for your posture. It’s good for your emotional health. And the fastest way I know of feeling more confident and being perceived as more confident is to stand up as straight as I can. As you stand, walk and sit, imagine a string attached to your scalp pulling you up. Be as tall as you possibly can. Tuck in your belly.</p>\n<h3 id=\"Spread-out\"><a href=\"#Spread-out\" class=\"headerlink\" title=\"Spread out\"></a>Spread out</h3><p>Another body position that communicates confidence is spreading out. The open, spread out posture communicates that you are comfortable in your own skin. Avoid the closed off posture. This communicates that you are protecting yourself. The obvious question the brain has to ask is, “what are they protecting themselves from?”</p>\n<h3 id=\"Speak-with-authority\"><a href=\"#Speak-with-authority\" class=\"headerlink\" title=\"Speak with authority\"></a>Speak with authority</h3><p>The more confidently you can state a fact, the more likely it is to be accepted. In fact, I’ve seen people state things that were verifiably false with such confidence even I wanted to believe them. The only thing that kept me from doing so is that I intentionally went into that meeting keeping in mind that I was probably the most authoritative person on the subject in the room even though the person we were meeting with was the one who had been designated the authority for the moment.</p>\n<h3 id=\"Start-a-blog\"><a href=\"#Start-a-blog\" class=\"headerlink\" title=\"Start a blog\"></a>Start a blog</h3><p>Starting a blog is a confidence muscle exercise. The more you write, the more you will end up knowing about what you are writing about. It will also be the place where you are told you are wrong the most often. I’ve written articles in the past where people have told me I was wrong. Many times, they haven’t been very nice in how they tell me. But this has been good because now I have learned to take criticism and correction even of the worst kind without losing confidence in my overall knowledge. I’ve learned stuff in the process which has made me even more confident.</p>\n<h3 id=\"Be-willing-to-be-wrong\"><a href=\"#Be-willing-to-be-wrong\" class=\"headerlink\" title=\"Be willing to be wrong\"></a>Be willing to be wrong</h3><p>Which leads to the last point. Be willing to be wrong. You can be confident. As long as you are right most of the time, you can be wrong a few times and no one will care. What you don’t want to do is to be wrong all the time. Soon, no one will listen to you. This is what happened in the situation I mentioned above.  here were so many things the “authority” said during our meeting that were verifiably wrong that I left not trusting anything he had said.</p>\n<h2 id=\"Defending-against-confidence\"><a href=\"#Defending-against-confidence\" class=\"headerlink\" title=\"Defending against confidence\"></a>Defending against confidence</h2><p>And this leads nicely into my next point. Just because someone is confident, doesn’t mean they are right. And some people will, knowingly or not, project confidence to bullshit their way to where they want to go.</p>\n<h3 id=\"When-Two-People-Meet\"><a href=\"#When-Two-People-Meet\" class=\"headerlink\" title=\"When Two People Meet\"></a>When Two People Meet</h3><p>Basic social interaction theory says that when two people meet, a pecking order will be established such that one will be the leader and the other the follower. In a group, a leader will emerge. If you are a speaker, you can leverage this by identifying the perceived leader and speaking to them. Everyone else will follow.</p>\n<p>In our situation, you want to go into meetings with the knowledge that you know as much as the person leading. That everything that person says is subject to how you understand the world. If they say something that contradicts your understanding, you can do one of two things. You can contradict on the spot. Or, you can verify later. This depends on the situation and how well each strategy will advance your cause. In the meeting I’ve been referencing, I kept my mouth shut. He was already going the direction we wanted him to go, contradicting him would have worked against us and would not have served our purposes even a small amount.</p>\n<p>But, I maintained my status as the authority in the room, even if I said nothing.</p>\n<h3 id=\"Fact-Checking\"><a href=\"#Fact-Checking\" class=\"headerlink\" title=\"Fact Checking\"></a>Fact Checking</h3><p>I already mentioned this, but let’s bring this further into focus. Just because someone says something is true doesn’t mean it is. If someone says something and this is the first you’ve heard of it. You’d better make sure it really is true. This goes double if you’ve already heard him say things you know are wrong.</p>\n<p>Which items you actually point out will depend on the situation. Again, in the case above, while we were told several things that were wrong, I only pointed out one that could have been a potential stumbling block.</p>\n<h3 id=\"Emotional-Awareness\"><a href=\"#Emotional-Awareness\" class=\"headerlink\" title=\"Emotional Awareness\"></a>Emotional Awareness</h3><p>One thing I think programmers tend to have a really hard time doing is listening to their emotions. But, if you get good at this, you will often know that something is not right before you can articulate why. Listen to that inner voice.</p>\n<h2 id=\"Authority-and-Confidence\"><a href=\"#Authority-and-Confidence\" class=\"headerlink\" title=\"Authority and Confidence\"></a>Authority and Confidence</h2><h3 id=\"Confidence-Without-Speaking\"><a href=\"#Confidence-Without-Speaking\" class=\"headerlink\" title=\"Confidence Without Speaking\"></a>Confidence Without Speaking</h3><p>You might think that authority and confidence are the same thing. But they aren’t. I can be the perceived authority on a subject without confidence and I can portray confidence without being the authority. In fact, just how I hold myself shows that I am confident even if I have no authority or don’t perceive myself as an authority.</p>\n<h3 id=\"Confidence-vs-Respect\"><a href=\"#Confidence-vs-Respect\" class=\"headerlink\" title=\"Confidence vs Respect\"></a>Confidence vs Respect</h3><p>In the same way, I can be confident while still respecting those who are in authority. We all have people who are in authority over us. This does not have to reduce our confidence. I’m good at what I am good at. They are good at what they do. We each have jobs that we are best suited for. Confidence doesn’t mean we take over, it just means we have influence.</p>\n<h2 id=\"Don’t-Get-Caught\"><a href=\"#Don’t-Get-Caught\" class=\"headerlink\" title=\"Don’t Get Caught\"></a>Don’t Get Caught</h2><h3 id=\"Don’t-Assert-Something-You-Can’t-Defend\"><a href=\"#Don’t-Assert-Something-You-Can’t-Defend\" class=\"headerlink\" title=\"Don’t Assert Something You Can’t Defend.\"></a>Don’t Assert Something You Can’t Defend.</h3><p>Do yourself a favor. If you aren’t sure, keep your mouth shut. As I’ve already illustrated, if you say something that someone else can verify is inaccurate, everything else you say is subject to evaluations.</p>\n<h3 id=\"Know-Your-Topic-Inside-Out\"><a href=\"#Know-Your-Topic-Inside-Out\" class=\"headerlink\" title=\"Know Your Topic Inside Out\"></a>Know Your Topic Inside Out</h3><p>The danger, of course, is that you may think you know, but you really don’t. Make sure you are a student of what you think you know. Don’t be that guy who thinks he knows, but really knows nothing. Or that guy who is working with old information.</p>\n<h4 id=\"4-Levels-of-Learning\"><a href=\"#4-Levels-of-Learning\" class=\"headerlink\" title=\"4 Levels of Learning\"></a>4 Levels of Learning</h4><p>There are four levels of learning. Or knowledge. The first level is that we don’t even know that there is something to know. Most of us start there. But the second level is probably the most dangerous. Knowing just enough to think you know when you really know relatively little. As you progress, you’ll eventually end up realizing there is a whole lot more to know than what you thought until finally, you know the subject so well you aren’t even thinking about it anymore. Kind of like breathing.</p>\n<p>You want to make sure you are working from the level of knowing the subject so well, it is like breathing. The problem is, many people who are in the second level think they are in the fourth level. If you are not reading the latest on the subject, not reading blog post, not listening to podcast, you are probably still in level 2 and working off of assumptions rather than facts.</p>\n<h4 id=\"One-eyed-Man-is-King\"><a href=\"#One-eyed-Man-is-King\" class=\"headerlink\" title=\"One-eyed Man is King\"></a>One-eyed Man is King</h4><blockquote>\n<p>In the kingdom of the blind, the one-eyed man is king.</p>\n</blockquote>\n<p>The point is this, you may currently be that one-eyed man. The only reason you have the authority you do is because you are the best they have. In fact, most of us are where we are because that’s the best they have. But, don’t rest there. Try to gain that second eye. You really don’t want to be in a position where a two-eyed man can come in and point out all that isn’t right. This is why you want to go for the fourth level of learning in all that is important to you.</p>\n",
            "tags": [
                "programming",
                "authority",
                "confidence"
            ]
        },
        {
            "id": "http://davembush.github.com/the-psychology-of-programming/",
            "url": "http://davembush.github.com/the-psychology-of-programming/",
            "title": "The Psychology of Programming",
            "date_published": "2017-02-07T12:30:00.000Z",
            "content_html": "<p>Over the past week, I’ve listened to and read several articles that have started me thinking more about the Psychology of Programming.</p>\n<p>Not that I haven’t been thinking about this for a while. I’ve been quite intrigued by human behavior for a while now. But more recently, there was this podcast over on dotNetRocks about “<a href=\"//dotnetrocks.com/?show=1406\">Punishment Driven Development</a>”. And this comment:</p>\n<blockquote>\n<p>The happiest people in my experience are those that have options. They have transferable skills, see their employment as a personal choice, have self-confidence that they are providing value to the company and are in a position professionally and personally where they could change job if they needed. The feeling of being trapped in a position from which you can’t escape (either a dissatisfying job, bad manager or whatever) will lead to negativity.</p>\n</blockquote>\n<p>Which I almost agree with, except I think it is the negativity that leads to feeling trapped. And then there is the book I am reading, “<a href=\"//amzn.to/2l4O96Y\">Influence: The Psychology of Persuasion</a>” which goes into detail on why we make decisions that seem to go against our better judgment.</p>\n<p>Then there is another podcast that discusses <a href=\"//devchat.tv/js-jabber/jsj-247-building-a-development-environment-with-cory-house\">the decisions we make as we start a new JavaScript project</a>.</p>\n<p>And all of this culminates into the following thoughts: <figure><img src=\"/uploads/2017/02/image.png\" title=\"The Psychology of Programming\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/deltamike/751707089/\">deltaMike</a> via <a href=\"//visualhunt.com\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Makes-You-Happy\"><a href=\"#What-Makes-You-Happy\" class=\"headerlink\" title=\"What Makes You Happy?\"></a>What Makes You Happy?</h2><p>It really does amaze me that I work with people who seem so unhappy with their work place and yet, aren’t making any effort to find another place to work. As a consultant with nearly 30 years of experience, I can tell you first-hand that some places are better than others to work. There is probably a place for you if you’d just try to find it.</p>\n<p>Or, maybe the problem is you. Maybe you’ve never liked working. Or maybe you like complaining. Maybe being happy is an attitude and isn’t really dependent on our circumstances. Maybe, the happy people like their jobs?</p>\n<p>Or maybe it is just easier to blame the company than to take responsibility. I find happy people take action. Make opportunities. Learn new stuff. </p>\n<p>The unhappy people I know blame something or someone for who they are.</p>\n<h2 id=\"It’s-All-in-your-Head\"><a href=\"#It’s-All-in-your-Head\" class=\"headerlink\" title=\"It’s All in your Head\"></a>It’s All in your Head</h2><p>Here is a scary thought though. All your ways of reacting to events in your life are learned responses. Most of those responses you learned before you were 5. But, here’s the good news. Since they are learned responses, you can, if you want to, re-learn responses.</p>\n<p>We all have behaviors we don’t like. Some of us get angry for stupid stuff. Some of us over eat. Some drink too much. Some smoke. In almost all cases, the behavior isn’t the real issue. The question we need to ask ourselves is why do we do those things? In what way do we believe doing these things is going to help us? What would you need to believe differently in order to change? What is keeping you from believing something different?</p>\n<h2 id=\"It’s-Just-an-Opinion\"><a href=\"#It’s-Just-an-Opinion\" class=\"headerlink\" title=\"It’s Just an Opinion\"></a>It’s Just an Opinion</h2><p>I have a rule.  “Never argue about opinion.” I’ll present why I believe something is true. State all my reasons. Clarify if I think that is necessary. But as soon as I realize that the discussion has turned into an argument where no one is going to convince the other of anything. I disengage.</p>\n<p>Not everything is opinion. I’ve had people leave comments correcting my understanding and pointing to authoritative documentation that says they are right. Thank you. But, in the grand scheme of life, there is very little that falls into the realm of fact. Most of what we argue about as programmers is opinion.</p>\n<p>What is interesting about opinion is that the more you know about a subject, the more opinionated you are likely to be. That can be a good thing. Show me a programmer who doesn’t have opinions and I’ll show you a programmer who is just doing what they’ve been told to do. Show me a programmer who has an opinion but can actually argue multiple sides of an argument and I’ll show you a programmer who really knows his stuff. If you hold opinions so strongly that you are offended when someone disagrees with you, you have an issue.</p>\n<h2 id=\"Herd-Mentality\"><a href=\"#Herd-Mentality\" class=\"headerlink\" title=\"Herd Mentality\"></a>Herd Mentality</h2><p>For years, it has puzzled me how, as a community, we can know that writing unit test for our code is a worthwhile activity, and yet hardly anyone I know does this. Truth be told, it is a struggle even for me.</p>\n<p>But, here’s an interesting fact. We tend to do what we SEE others doing. If no one on your team is writing test, you think, “we don’t write test here.” This behavior explains why, in test after test, groups will ignore people who need help while individuals by themselves will provide aid. This impacts a lot of our life if you think about it. How many times have I assumed that someone else is going to call the power company when the power goes out during a snow storm? Certainly, if the whole street is impacted, someone will call.</p>\n<p>The very fact that it has impacted the whole street is indication enough that no one else has called. I hope I remember this the next time the power goes out.</p>\n<h2 id=\"Appeal-to-Authority\"><a href=\"#Appeal-to-Authority\" class=\"headerlink\" title=\"Appeal to Authority\"></a>Appeal to Authority</h2><p>Another scary statistic is that people will do whatever they are told to do if an authority figure has told them to do it. If there is any question about what we should do, we will try to figure out what the authority figure wants.</p>\n<p>This is how con men work. In a very scary experiment, a “doctor” calls the nursing desk and tells the person who answers the phone to administer a drug to a patient. The problem is, the prescription is too high and is of a drug that is not approved for the nurses to give. Yet, because a doctor has said so, they are willing to comply In a more humorous example, a patient had an ear ache in their right ear. The doctor left a note with instructions to administer ear drops to the R ear. So, the nurse administered ear drops to the patients rear. Neither the nurse nor the patient questioned the instructions.</p>\n<p>Oh, but that would never happen to programmers now. Or would it?</p>\n<p>Again, I go back to the point of testing. I can’t tell you how many times I’ve heard programmers tell me they “aren’t allowed to write unit test.” For the most part, I’m not sure anyone asked, they are just assuming that the boss won’t let them because of the Herd Mentality I mentioned above. But let’s assume the boss really has made such an edict. Is that a good reason to not tests? I’m not sure it is. At least no more so than administering ear drops to someone’s butt.</p>\n<p>But I’ve also seen this behavior first hand. I was on a project once where the organization claimed to be “Agile.” For the most part they were. They worked iteratively. They had something resembling sprints.</p>\n<p>But a “boss” several layers up the ladder who we never saw had “instructed” the team to do this project using a waterfall approach because “we already know what this product is supposed to do.”</p>\n<p>The problem is, while this project was a rewrite of an older system, the rewrite encompassed many changes to the existing system. So, even using that argument, using waterfall made no sense. But, everyone on the team also knew that what made a project an agile project vs a waterfall project had a lot more to do with being able to adjust. Why no one ever told the manager he was wrong is beyond me. What is further interesting is that even though that project received a new manager, the team STILL tried to obey the old rule because they hadn’t been given an alternate direction.</p>\n<h2 id=\"Inertia\"><a href=\"#Inertia\" class=\"headerlink\" title=\"Inertia\"></a>Inertia</h2><p>The famous last words of every dying group are, “But, we’ve never done it that way before.” Why?</p>\n<p>Did you know that people will work twice as hard to keep the dollar in their pocket than they will to gain an extra dollar? This explains so much of human behavior for me. This is why startups have such an advantage over established companies. The startup has nothing to lose. As soon as they feel like making a change will cause them to lose something important, they’ll stop innovating. They become the established company. If an established company can survive long enough to have nothing to lose, they might innovate. For an example of this, check out the turn around of both Apple and Microsoft. If you look very closely, you’ll see that Apple is moving into the “we have something to lose” cycle.</p>\n<p>Now, how does this apply to you as the lonely programmer?</p>\n<p>Well, back to our sad programmer example. Could it be that our sad programmer doesn’t change jobs because he’s holding on to his dollar instead of trying to get a new one?</p>\n<p>Could it be you aren’t testing your code with formal unit test because you are holding onto your dollar?</p>\n<p>When is the last time you tried anything new?</p>\n<h2 id=\"Break-Free\"><a href=\"#Break-Free\" class=\"headerlink\" title=\"Break Free\"></a>Break Free</h2><p>And so, the question naturally becomes, “How do we break free?”</p>\n<p>So much of this is a part of who we’ve learned to be. Many of our behaviors have helped us get to where we are. But like the company who has moved from startup to established player, we need to become comfortable with being uncomfortable so that we can not just break free, but break into a better version of ourselves.</p>\n<p>Maybe you are comfortable where you are. I don’t know  Personally, I’m always trying to improve. I’d much rather have the new dollar than keeping the dirty old one. You might have a different set of values. Maybe a different opinion.</p>\n<p>I could be wrong. But, what if I’m right?</p>\n",
            "tags": [
                "programming",
                "behavior",
                "psychology"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-be-a-lucky-programmer/",
            "url": "http://davembush.github.com/how-to-be-a-lucky-programmer/",
            "title": "How to be a Lucky Programmer",
            "date_published": "2017-01-24T12:30:00.000Z",
            "content_html": "<p>I’ve been studying topics related to social science recently and one item that keeps popping up in various places is the idea of luck. It turns out that lucky people aren’t really all that lucky. There life has been arranged either by them directly or indirectly by their environment so they end up having more chances of good things happening to them. </p>\n<p>How can we apply this to programming? How can you be a lucky programmer? <figure><img src=\"/uploads/2017/01/image-1.png\" title=\"How to be a Lucky Programmer\"> Photo <a href=\"//visualhunt.com/p/gaertringen/\">Gaertringen</a> via <a href=\"//visualhunt.com/\">Visual Hunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"What-You-Believe\"><a href=\"#What-You-Believe\" class=\"headerlink\" title=\"What You Believe\"></a>What You Believe</h2><p>It turns out that what you believe about yourself has a HUGE impact on how lucky you are. In fact, lucky people see themselves as lucky.</p>\n<h3 id=\"Lucky-People-are-Lucky\"><a href=\"#Lucky-People-are-Lucky\" class=\"headerlink\" title=\"Lucky People are Lucky\"></a>Lucky People are Lucky</h3><p>Now, you might think that a lucky person seeing themselves as lucky would be self-evident, right? I mean if good stuff keeps happening to you, you are obviously going to view yourself as lucky. But, the dirty little secret is that bad stuff happens to lucky people too. They just aren’t as likely to see it as unlucky and may even see it as lucky. </p>\n<p>To take an example from my own life, I was in an accident about a month and a half ago. I totalled the car. But,</p>\n<ul>\n<li>No one got hurt, and given the shape of the car, I’m still amazed.</li>\n<li>Someone showed up within minutes and stopped long enough to help me figure out what my next steps were.</li>\n<li>The police man showed up immediately after I hung up the phone with the dispatcher.</li>\n<li>We got more for the car than we would have if we had traded it in.</li>\n<li>We ended up with a much nicer car than we were planning on.</li>\n</ul>\n<p>Was I lucky or unlucky? It is just a matter of what I focus on. </p>\n<p>In short, lucky people focus on what they have instead of what they don’t. According to people who measure these things, if you made more than $34K (usd) in 2012 you made more than 99% of the world’s population. Yes, I know, there are other factors, like cost of living to consider. But really, by just about any standard, I’d say from an income perspective, we as programmers are pretty lucky!</p>\n<h3 id=\"Lucky-People-Ask-Good-Questions\"><a href=\"#Lucky-People-Ask-Good-Questions\" class=\"headerlink\" title=\"Lucky People Ask Good Questions\"></a>Lucky People Ask Good Questions</h3><p>It turns out that our brains answer any question we give it. In fact, you’ve probably been in situations where someone has asked you a question you really didn’t want to answer and you’ve answered it anyhow. This is how compelling question are. </p>\n<p>The problem lies in the questions we ask ourselves. When you are struggling with an issue, are you more likely to ask, “How can I solve this?” or “Why can’t I solve this?” Do you see the three things you’ve tried as proof that the problem can’t be solved or just three ways that it can’t be solved? </p>\n<p>I’m going to guess that if you are any good at programming, you’ll be more likely to ask “How can I…” questions. But what about the rest of your life? Does this carry over into finding your dream job? Making friends? Investing?</p>\n<h3 id=\"Entitled-vs-Deserving\"><a href=\"#Entitled-vs-Deserving\" class=\"headerlink\" title=\"Entitled vs Deserving\"></a>Entitled vs Deserving</h3><p>This last point is a little tricky to explain. Lucky people feel like they deserve to have good things happen because they’ve put in the effort so that good things can happen. This is different from either feeling entitled or wishful thinking. Lucky people have studied hard, made connections, tried stuff, improved their social skills, and more. So, you can believe you are lucky all you want, and that’s a really good start, but there is more to being lucky than just being “The Little Engine That Could” you need to be “The Little Engine That Does”</p>\n<h2 id=\"Try-New-Stuff\"><a href=\"#Try-New-Stuff\" class=\"headerlink\" title=\"Try New Stuff\"></a>Try New Stuff</h2><p>You could also call this “be curious.” </p>\n<p>I think my love of learning has helped make me lucky. But again, the people who study this stuff agree with me. The more stuff you try, the more likely you are to be lucky. When you try lots of stuff, you can keep what works, toss what doesn’t. Do more of what is working. Do less of what is not. </p>\n<p>That sounds pretty simple. But where most people goof this up is that they see themselves as failures when something doesn’t work. It may not have worked for a lot of different reasons. One may just be you don’t have enough other experience yet. Some might be that it isn’t who you are deep down. </p>\n<p>Check this out. Do an inventory of yourself and try to figure out what has always been true of you. For me, it is learning. I remember all through Jr High and High School, I would come home, finish whatever homework I had, and then I’d go learn something that was interesting to me. I studied flying, weather, electronics. And that hasn’t changed. If you’ve been following this blog, you’ve benefited from a lot of what I’ve learned over the last several years. </p>\n<p>I also like to teach and help people get ahead. Something I’ve been doing in some fashion since I was twelve. </p>\n<p>I got very involved in the Internet Marketing thing for a while. I made about as much money as I spent learning, so it wasn’t an entire waste of time. But, the year I gave up on that, I made significantly more money by using my resources in a more productive way. Learn when you’ve done enough. But don’t give up when something doesn’t work out right away either. Doing several things at a time will help you figure out what you should be spending more time on.</p>\n<h2 id=\"Hone-Your-Skills\"><a href=\"#Hone-Your-Skills\" class=\"headerlink\" title=\"Hone Your Skills\"></a>Hone Your Skills</h2><p>One of the biggest frustrations I have is when I find someone “over 50” who has posted a comment saying he (most always it is a male) can’t find a job because of age discrimination. I always wonder what skills he has, because where I live, we’ll hire anyone who has an up to date skill set who can prove to us they really do know what they are doing. </p>\n<p>So, you have a job. Great. Don’t coast, or you’ll be that guy. I almost was. I got comfortable at a company and didn’t keep my programming skills up to date. It took me three years to recover. </p>\n<p>Not only should you not coast. If you are serious about programming, you should become an expert in something. Full stack is crap! Niche down. This doesn’t mean you can’t do some other part of the stack. But be awesome at something. Trust me, it WILL pay off. </p>\n<p>But also, learn around the fringes. It does no good for you to proclaim “Windows is the best operating system.” if you’ve never tried Linux or OSX. (Just as an example). In the same way, you can’t say a particular framework is the best if you don’t have several that you’ve tried. Bonus points if you can explain what the differences are and why someone might choose one over the other, even if it isn’t what you would select. </p>\n<p>Since you are reading this, I have to assume you read several tech related blogs. But how about podcasts? How are you spending that time on your commute to work? I have so many podcasts that I listen to that I have to listen to them on evenings and weekends to keep up. And don’t just read blogs and listen to podcasts about tech. Branch out. Get a life. </p>\n<p>Finally, interview for a job at least once a year even if you aren’t looking for a new job. Why? Well, remember I told you I got comfortable working for one company? It turns out the whole interview process changed while I was sleeping. Like Rip Van Winkle, nothing was the same to me. The more you interview, the better you get at it. This is why I recommend interviewing four times a year. Once a year is the absolute minimum. Better to try new interview strategies on an interview you don’t care about than when you really need a job. And who knows, you might find a job you really like in the process.</p>\n<h2 id=\"Social-Skills\"><a href=\"#Social-Skills\" class=\"headerlink\" title=\"Social Skills\"></a>Social Skills</h2><p>But it doesn’t matter how great you are technically if you can’t convince someone else that you are. And this means you are going to need to work on your social skills. Yes, lucky people, and that means lucky programmers, need social skills. And I’m not just talking “Please” and “Thank you” But, that would be a great place to start.</p>\n<h3 id=\"Body-Language\"><a href=\"#Body-Language\" class=\"headerlink\" title=\"Body Language\"></a>Body Language</h3><p>Body language is a great place to start. You’ve probably seen the Amy Cudy video where she talks about power poses. But body language goes much further than power poses. But let’s start there. </p>\n<p>As I walk around the office, I notice that between typing on our keyboards and keeping our eyes glued to our phones, our default “pose” is one of submission and meekness. Have you ever noticed that even people who aren’t looking at their phone when they walk are looking at the ground? Doesn’t anyone make eye contact anymore? </p>\n<p>Over the last several months, I’ve focused on looking up and out as I walk. What a difference in how I feel about myself, not to mention how people perceive me. Look out. Not up. You don’t want to look like a snob. </p>\n<p>On the off chance that someone makes eye contact with you, smile at them. An interesting thing will happen, they’ll smile back which will make you want to smile more. </p>\n<p>An interesting story. There is a guy in our office who seems to have caught the giggles. He’s got this contagious smile and is almost always laughing. It is a genuine laugh and I am going to try to incorporate laughing more into who I am. The thing is, the more he smiles and laughs, the more people want to be around him. Hmmmmm. </p>\n<p>The other thing you can do related to power posing is to just take up space. Again, don’t overdo this. Stand up straight. Spread your arms. Show you are comfortable more than that you are the boss. Too much in the wrong place and you’ll just look like you are posing. Think of the posing as something that changes how you feel about you, not how you want them to feel about you.</p>\n<h3 id=\"Make-Them-Like-You\"><a href=\"#Make-Them-Like-You\" class=\"headerlink\" title=\"Make Them Like You\"></a>Make Them Like You</h3><p>We’ve already discussed laughing. That’s a great way to make people like you. And smiling also makes people think you are smart. But there are some other “tricks” you can learn that will help people like you. </p>\n<p>One simple one to implement is eye contact. People feel like you are listening if you make eye contact. How you pull this off is to look at one of their eyes. Obviously, you can’t look at both of them. But where people get this eye contact thing wrong is that they tend to stare instead of look. Don’t be a robot about it. And it is OK to look away for a second or two. </p>\n<p>The other way you can make people like you is by mirroring their words and body language. Especially gestures. </p>\n<p>I find this fascinating. </p>\n<p>You may have heard that you should use “active listening” to make sure you understand what the other person is saying. For those of you who don’t know, active listening is the process of paraphrasing what the person said and saying it back to them in your own words to make sure you got the idea of what they said. </p>\n<p>The problem is, using active listening won’t make the person FEEL like you understand them. Mirroring does this. And you mirror by using the same words and phrases they used. In particular, you want to use the words that seem to have the most emotion attached to them. What’s even crazier about this than the fact that it establishes rapport quickly is that the person you are mirroring won’t notice. </p>\n<p>Now, all these tricks are just tools to grease the process. But if you just take the attitude of genuinely being interested in other people, you’ll probably end up doing a lot of this stuff anyhow. But if you are genuinely interested in people AND you add on the above skills, other people around you will feel the love and be attracted to you. You’ll be that guy or gal everyone wants to hang with.</p>\n<h3 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h3><p>Yeah, networking. It is amazing to me that I can go to a programming user group meeting where we are all there for the same reason. That is, we all KNOW we have something in common. And no one is talking. 30 people in the room and barely a noise. This is not good. Your next job could be in that room. </p>\n<p>But, what should we do? </p>\n<p>One thing I’ve started doing is this. You walk up to someone who isn’t already talking to someone and you shake their hand while saying, “Hi, I’m (your name here)” And then you ask them a question to get things rolling. Here are a few of my favorites:</p>\n<ul>\n<li>Ask them something about the event.</li>\n<li>Are you using X yet?</li>\n<li>What brought you here tonight?</li>\n<li>How did you get started in programming?</li>\n<li>What does a typical day look like for you?</li>\n</ul>\n<p>Once they’ve given you an answer, just ask them a question about something they just told you. </p>\n<p>It really isn’t that hard unless it becomes obvious that the person isn’t in the mood to talk. But that hardly ever happens when you’ve asked them about something they care about. </p>\n<p>Some of these questions are appropriate even if you are talking with someone who doesn’t program and you can quickly use them to get people talking about things they care about. </p>\n<p>Once they start talking, just listen, mirror, and ask more questions.</p>\n<h2 id=\"Connections\"><a href=\"#Connections\" class=\"headerlink\" title=\"Connections\"></a>Connections</h2><p>Another interesting thing I’ve learned is that lucky people have lots of connections. This doesn’t mean they have a lot of close friends. But they are connected, even if all that means is that you are connected on the social networks. So, when someone wants to connect to you on LinkedIn, FaceBook, Google+ or some other social network, connect. If they end up being jerks, you can delete them. </p>\n<p>One of the most common objections I hear when I suggest that people connect to anyone and everyone on LinkedIn is that they will get all kinds of messages and emails from recruiters. So, I want to address that now. </p>\n<p>You’re looking at something that has the biggest chance of making you lucky as an annoyance. Yes, I have nearly 10,000 connections on LinkedIn. Yes, every day I get a ton of email. But, I’ve also been able to narrow down which recruiters I am willing to talk with and which ones I may want to talk with and the ones I never want to hear from again. My white list, grey list, and black list. </p>\n<p>When I need a new contract, guess how long it will take me to find something I want to do?</p>\n<h2 id=\"Take-Action\"><a href=\"#Take-Action\" class=\"headerlink\" title=\"Take Action\"></a>Take Action</h2><p>Finally, lucky people do something. The whole self-help industry is banking on the fact that you’ll never do anything they tell you to do. A lot of what they tell you to do in those books would work if you did what they said. But for various reasons, we think buying the book, or even reading the book, is going to change our life. </p>\n<p>So, pick something I’ve mentioned above that you aren’t already doing and do it. </p>\n<p>For a start, connect with me on social media using one of the buttons in the upper right corner. I highly recommend LinkedIn because I am connected with so many people, you’ll automatically get all of my first-degree connections as your second-degree connections and all of my second-degree connections as your third-degree connections. What this means is that by connecting to me, more people will be able to find you on LinkedIn when they search for you on LinkedIn. </p>\n<p>For more about how to use LinkedIn, check out my article, “<a href=\"/linkedin-tips-for-programmers/\">LinkedIn Tips for Programmers</a>”</p>\n",
            "tags": [
                "programming",
                "luck",
                "social skills"
            ]
        },
        {
            "id": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "url": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "title": "Are You Average or Awesome? 9 Ways to Improve.",
            "date_published": "2016-05-12T11:30:00.000Z",
            "content_html": "<p>The story goes that there were two men, Joe and Frank, who were camping out in the woods when a bear showed up in the camp.  Terrified, they decided the best they could do would be to stay perfectly still until the bear left.  Hopefully, the bear wouldn’t notice them.  As the bear was poking around, Joe says to Frank, “What are we going to do if this doesn’t work?”  Frank says, “Run!”  Joe says, “You really think we can out run a bear?”  Frank says, “I don’t need to out run the bear.  I only need to out run you.”</p>\n<figure>![](/uploads/2016/05/image.png \"9 Ways to Improve\")<figcaption>Photo credit: [Internet Archive Book Images](//www.flickr.com/photos/internetarchivebookimages/14767148885/) via [VisualHunt.com](//visualhunt.com) / [No known copyright restrictions](//flickr.com/commons/usage/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<p>For years I have used this story to encourage my kids to be better than their peers.  Right now, most people are so “out of shape” that “running faster” than the competition is easy.  By comparison, my kids look awesome when by any other measure, they are probably only doing the bare minimum necessary.  This is not to say they aren’t REALLY good at what they do but, there is always room for improvement.</p>\n<h2 id=\"Average-Programmers\"><a href=\"#Average-Programmers\" class=\"headerlink\" title=\"Average Programmers\"></a>Average Programmers</h2><p>And then there are conversations I have with other programmers.  So many think they are great when they are only slightly better than the people they are working with.  The lack of desire to learn more, to be any better than adequate, is appalling.  And this is to say nothing of the programmers who never make the cut.  The ones I never work with because the people I work with and for won’t hire them.  I’ve been a part of some of those interviews.</p>\n<p>People who can’t answer the most basic of <a href=\"/7-c-interview-questions-that-weed-out-the-losers/\">C#</a>, ASP.NET, or <a href=\"/7-javascript-interview-questions-to-weed-out-imposters/\">JavaScript questions</a>.  This is to say nothing of <a href=\"/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/\">people who believe knowing concepts trumps knowing the terms</a> that specify them.</p>\n<h2 id=\"Average-Organizations\"><a href=\"#Average-Organizations\" class=\"headerlink\" title=\"Average Organizations\"></a>Average Organizations</h2><p>And then there are the organizations who settle for frameworks that provide “Silver Bullet” answers to problems.  Not because this is technically, the best solutions, but because this is the solution the requires the least from the developers they have working for them.  The problem with this approach is that it doesn’t demand excellence from the programming team that works for them.  And don’t get me started on managers who think they are “doing Agile” who obviously don’t even recognize that “Agile” is not a noun.</p>\n<p>The problem with comparing ourselves to our peers is that you can always find someone worse than yourself.  Not only is this true because you will always find someone who just doesn’t care, but even if we all cared, there will always be someone, who for any number of reasons, can’t be as good as you are.</p>\n<h2 id=\"Be-Awesome\"><a href=\"#Be-Awesome\" class=\"headerlink\" title=\"Be Awesome\"></a>Be Awesome</h2><p>But we can all strive to be the best.</p>\n<p>As programmers, what if we all decided to make as our goal code so bug free that no one could find problems with the code we wrote?  Maybe there is some part of the language you program in, or the framework that you use, that you’ve never tried.  How about learning it?  Is there a tool you could start using that would help you program better?  Maybe you’ve exhausted everything there is to learn about the language or framework that you use.  Maybe it is time to learn some other language.</p>\n<p>Who do you want to be? What do you want to be known for? These are interesting questions because they cause us to focus.  Do you want to be known as mediocre?  Keep coasting.  Do you want to be the person who gets the challenging problems because you are the only person who is reliable enough to give the project to? The problem with out-running your peers is that eventually, the bear will be the only thing behind you.  Where will you be?</p>\n<h2 id=\"Action-Steps\"><a href=\"#Action-Steps\" class=\"headerlink\" title=\"Action Steps\"></a>Action Steps</h2><p>OK, fine.  How do we get from mediocre to awesome?</p>\n<h3 id=\"1-Decide-to-Master-a-Skill\"><a href=\"#1-Decide-to-Master-a-Skill\" class=\"headerlink\" title=\"1. Decide to Master a Skill\"></a>1. Decide to Master a Skill</h3><p>I don’t care who you are or how good you are, there is still something you don’t know.  The great thing about being a programmer is that there is always something to master.  Do some sort of self-evaluation on your skills and determine to master some skill.</p>\n<p>Just by way of example, here are some possible skills you might learn.</p>\n<ul>\n<li>Test Driven Development</li>\n<li>Deep Dive a Language you “Know”</li>\n<li>Learn a Language You Don’t Know</li>\n<li>Design Patterns</li>\n</ul>\n<h3 id=\"2-Teach\"><a href=\"#2-Teach\" class=\"headerlink\" title=\"2. Teach\"></a>2. Teach</h3><p>The best way to learn a topic is to teach the topic.  There are at least two reasons for this.  First, preparing to teach makes you organize all of those scattered bits of information in your brain in a way that someone else can grasp.  Second, it will raise questions you didn’t even know you should ask.  I can’t tell you how many times I’ve explained something and the person I am teaching ask a question I’ve never considered before.  If you don’t know the answer, find the answer.  You obviously don’t know your subject as well as you think you do.</p>\n<p>Here are some possible ways to teach.</p>\n<ul>\n<li>Host a “Lunch and Learn”</li>\n<li>Start a Blog</li>\n<li>Write a Book</li>\n<li>Mentor a Younger Programmer</li>\n<li>Present Something at a Users Group or Meet-up.</li>\n</ul>\n<h3 id=\"3-Track-Progress\"><a href=\"#3-Track-Progress\" class=\"headerlink\" title=\"3. Track Progress\"></a>3. Track Progress</h3><p>In the business world, they say, “what you measure, grows.”  So, measure:</p>\n<ul>\n<li>Decrease in bugs reported.</li>\n<li>Elapse time from start of project to bug free code.</li>\n<li>Cyclomatic complexity of your methods.</li>\n</ul>\n<h3 id=\"4-Interview-for-a-New-Job\"><a href=\"#4-Interview-for-a-New-Job\" class=\"headerlink\" title=\"4. Interview for a New Job\"></a>4. Interview for a New Job</h3><p>One of the things I’ve found that interviewing for new gigs does for me is that it reveals things I should know.  I find out quickly what I should know that I don’t.  And don’t be the guy who says, “If my 30 years of experience isn’t good enough for you, I don’t want your stinking job.”  Answer the questions, not matter how much experience you have.  You might just learn something.  If you don’t know the answer, after the interview, go find the answer.  Don’t be like, “why should I keep that in my brain?”  I mean, that might be true, but go find the answer too.</p>\n<p>I had one of those interviews.  I wrote a whole post about it that I deleted.  They had me doing something I was unable to do and that I felt the rest of my knowledge and skills more than compensated for.  But, after the interview, I went and found out how to do what they had asked.</p>\n<h3 id=\"5-Change-Jobs\"><a href=\"#5-Change-Jobs\" class=\"headerlink\" title=\"5. Change Jobs\"></a>5. Change Jobs</h3><p>This probably sounds like odd advice, but as a contract programmer, I’ve been on assignments that have lasted as long as 8 years and I’ve been on assignments that were as short as 4 months.  What I’ve learned is that the longer I stay on an assignment, the staler my skills become.  That 8-year gig nearly made me unmarketable.  Why?  Because I never had to learn something new.  The only reason I am still marketable is because I started learning newer stuff toward then end of that gig.  When the gig was changing every 2 years or so, I was a lot more capable of moving into a new position.  Now, I’m learning all the time.  Learning what I think will make me more marketable as well as what I would really like to be doing next.  Some of that makes its way into what I’m doing today.  Some of it will have to wait.  But it is all experience and it is all valuable.  The point is, don’t get stuck knowing what you know.  Switching jobs is the fast way to achieve that.</p>\n<h3 id=\"6-Ask-for-a-Code-Review\"><a href=\"#6-Ask-for-a-Code-Review\" class=\"headerlink\" title=\"6. Ask for a Code Review\"></a>6. Ask for a Code Review</h3><p>To be clear, what you are asking for is a review of your code, not how pretty it is.  Although, depending on how much experience you have, there may be some benefit in having your code reviewed for formatting as well as clarity.</p>\n<p>What I would hope you would get out of this exercise is several, “Have you considered doing it this way…” kind of comments.  If you can’t get someone to review your code, there are some great code cop kind of tools available for every language that you can have review your code for common mistakes.  But even better if you can get another human to look at your code.</p>\n<p>It is interesting, I’ve been coding for 28 years and I’ve lost track of how many companies I’ve worked for.  There was only one company that I’ve ever worked for that did code reviews.</p>\n<h3 id=\"7-Change-Your-Body-Language\"><a href=\"#7-Change-Your-Body-Language\" class=\"headerlink\" title=\"7. Change Your Body Language\"></a>7. Change Your Body Language</h3><p>This probably seems like really odd advice so let me explain.  Or maybe you’ve already seen the <a href=\"//www.ted.com/speakers/amy_cuddy\">Ted talk</a> by Amy Cuddy that says the research shows that if you assume a body position that says, “I’m awesome” you are more likely to feel awesome.  But you may wonder what feeling awesome has to do with BEING awesome.</p>\n<p>Well, in my experience, you end up being who you believe yourself to be.  One way of hacking yourself into being awesome is to convince yourself that you are.  The best way to do that is to assume body positions that communicate that you are.</p>\n<p>Don’t think this is possible?  I grew up walking toe out.  At some point in High School or College, I read that it was more efficient to walk with my feet parallel to each other.  I started concentrating on changing how I walk.  Now I no longer think about it.  I haven’t thought about it for years.</p>\n<p>I’ve done the same thing with my body position.  Not as hard a modification, but I’ve noticed that it DOES work.</p>\n<h3 id=\"8-Don’t-Brag\"><a href=\"#8-Don’t-Brag\" class=\"headerlink\" title=\"8. Don’t Brag\"></a>8. Don’t Brag</h3><p>The other thing that changing your body language will do is that it will communicate that you are confident and you’ll never have to say a word.  I believe I’m pretty good at what I do, but my general practice is to let what I know be discovered.  As I’ve observed my peers, I’ve found that the more they proclaim how great they are, the less confident they are that they really are, and generally, they aren’t.  You don’t want to be that person.  You want to portray confidence to be confident, but you want to be discovered.  “Even a fool, when he is silent, is considered wise.” and “Better to be silent and be thought a fool than to open your mouth and remove all doubt.”</p>\n<h3 id=\"9-Focus-On-One-Thing\"><a href=\"#9-Focus-On-One-Thing\" class=\"headerlink\" title=\"9. Focus On One Thing\"></a>9. Focus On One Thing</h3><p>The temptation, if you are motivated at all, is to try to improve in every area all at once.  That is a recipe for disaster.  Focus on one thing.  I didn’t change how I walked and how I talked and how I ran and how I sat and… you get the picture.  I focused on how I walked.  Sometime later I focused on how I sat.  I learned how to code well and then how to do Test Driven Development.  I’m often asked how I learned all I know.  It is easy, I learned one thing at a time.</p>\n",
            "tags": [
                "tdd",
                "interview",
                "best practices",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/do-programmers-even-need-a-degree/",
            "url": "http://davembush.github.com/do-programmers-even-need-a-degree/",
            "title": "Do Programmers even NEED a degree?",
            "date_published": "2013-09-11T15:32:04.000Z",
            "content_html": "<p>Well, a post that is no longer available really got  things going in blog-o-sphere.  Shoot!  Even <a href=\"//www.joelonsoftware.com/items/2008/01/08.html\">Joel Spolsky</a> got involved.  I saw another post, but I’m sorry to say, I can’t find it right now.</p>\n<p>The original article put forth the idea that we are teaching the right stuff in our undergraduate Computer science degree programs.</p>\n<span id=\"more\"></span>\n\n<p>Joel’s article suggested that what we really need is a bachelor of fine arts program for programmers.  That programming, and computer science are really two entirely different disciplines.</p>\n<p>I think Joel’s onto something and his solution is probably the closest to what our current educational system can handle.  But, I have another solution to the problem that goes further.</p>\n<p>Why get a degree at all.  Most of you reading this post know as well as I do that a good 80% of what most programmers learn, they didn’t learn from college.  Let’s face reality here.  First, any degree program is, at best, 20 years behind.  It’s just a fact.  Ours is not the only industry facing this reality.  Second, the really good programmers are already doing what these schools are trying to teach.</p>\n<p>Joel suggest that we have people from the industry come in and teach this BA course work he’s suggesting.  There are several major problem with this.  First, most (not all) of the really good programmers can’t teach.  Some could with some training, but the school isn’t going to train them.  And those who can teach, probably don’t know the recent material.  There ARE exceptions.  My point here is that the exceptions won’t fill the need.</p>\n<p>But, what would happen if we went back to a really old way of doing things?  It worked.  We are almost doing some form of this already, mostly after graduation.  What if we just skipped the programming degree completely.</p>\n<p>I’ve been in this field long enough (20+ years) to know that most of the really good programmers got into our field through some back door.  I was a camp and recreation major that converted to programming via DePaul’s career change program.  A hoop I jumped through simply so I could get the first job.  At least 80% of what I was taught I was already doing as I had experimented with Basic, Pascal, and C.</p>\n<p>I know another guy who dropped out of school his sophomore year because he already had the job he was going to school to get.</p>\n<p>And don’t even get me started on certifications.  Let’s say we stop testing knowledge and start testing aptitude.  The aptitude test I took nearly knocked me out of the DuPaul program.  At the end of the program, the main prof told me I was the best natural talent he’d seen come through the program.  I wonder if he knows he almost never saw me?</p>\n<p>Let’s face it, what we as programmers need to know to do our jobs effectively can’t be taught.  And most of what can be taught could be taught on the job.</p>\n<p>So, here’s my recommendation.  Why don’t we go back to using the apprentice system?  This allows a good senior programmer to get a feel for what kind of programmer the new guy is going to be.  It would help the new programmer find out really quickly if this is what he really wants to do with his life.  He gives the formal training the new programmer needs.</p>\n<p>Unless you’re just starting out, you know that most of what you learn, you learn from experience.  Why not just admit that and stop trying to fit programming into a degreed program that largely doesn’t work for our industry?</p>\n",
            "tags": [
                "programming",
                "education"
            ]
        },
        {
            "id": "http://davembush.github.com/cms-vs-code-it-yourself/",
            "url": "http://davembush.github.com/cms-vs-code-it-yourself/",
            "title": "CMS vs Code It Yourself",
            "date_published": "2013-08-14T12:42:39.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/trav064.jpg\" alt=\"trav-064\" title=\"trav-064\"> This post has been percolating in my brain for several weeks now and I think it’s finally at the point where it’s “done.”  Well, see…</p>\n<p>The problem area is this.  At what point and under what conditions would you write the code yourself vs. using a content management system?  And if you were to use a content management system, which one should you use and why?</p>\n<p>Along the way I’ll tell you what my current choices are, but more importantly, I’ll tell you what my thought process is.  So even if you decide to use different tools than I do, you can ask the same questions to select the tools you have decided to use.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"My-Primary-Tools\"><a href=\"#My-Primary-Tools\" class=\"headerlink\" title=\"My Primary Tools\"></a>My Primary Tools</h2><p>I think in order to give the rest of this post some context, it makes the most sense to tell you what my current tools are.</p>\n<ol>\n<li>WordPress<ol>\n<li>Linux&#x2F;Apache</li>\n<li>Windows&#x2F;Apache</li>\n<li>Windows&#x2F;IIS</li>\n</ol>\n</li>\n<li>DotNetNuke</li>\n<li>Write it myself.</li>\n</ol>\n<h2 id=\"Advantages-of-WordPress\"><a href=\"#Advantages-of-WordPress\" class=\"headerlink\" title=\"Advantages of WordPress\"></a>Advantages of WordPress</h2><p>I’ve actually had people ask me why I use WordPress for my .NET blog instead of some .NET blog engine.  The primary reason is, it has been around longer so it has more plug-ins and more themes available than anything I can find for .NET.</p>\n<p>What this means to me is that I can achieve a lot of goals by simply searching for an appropriate plug-in.</p>\n<p>Just by way of example, here are some plug-ins I’ve used.</p>\n<ul>\n<li>Plug-in to allow me to change the Title tag for each page from the “standard” title.</li>\n<li>Plug-in to create a forum on my site</li>\n<li>Plug-in to allow pages to redirect to other pages.</li>\n<li>Plug-in to automatically cross-link my post</li>\n<li>Plug-in to automatically cross-link my site with other sites (not using that here… yet)</li>\n<li>Plug-in to run a slide show</li>\n<li>Plug-in to keep out spam</li>\n<li>Plug-in for forms creation.</li>\n<li>Plug-in for podcasting.</li>\n<li>Plug-in for increased role-based access to just about every imaginable module in WordPress.</li>\n</ul>\n<p>So you have the ability to easily create anything from a blog to a brochure site to e-commerce (yes, there are e-commerce-related plugins) without having to write any code.</p>\n<p>While there are several themes that you can pay for, there are so many themes that are free that I’ve never had to buy one of the “premium” themes for any of my sites.  It does help that I can tweak the themes.  But they generally work out of the box.</p>\n<p>Finally, I find that my clients find WordPress sites easier to manage than DotNetNuke.</p>\n<h2 id=\"Disadvantages-of-WordPress\"><a href=\"#Disadvantages-of-WordPress\" class=\"headerlink\" title=\"Disadvantages of WordPress\"></a>Disadvantages of WordPress</h2><p>You are limited in how flexible your UI is compared to my other two options.  But I rarely find this to be a problem.</p>\n<p>I don’t consider myself a PHP programmer, so I can’t create any new plug-ins I might need.  I can hack the PHP, and anyone who’s familiar with ASP.NET probably could at least hack PHP as well, so don’t let the fact that you don’t know PHP keep you from a PHP solution.</p>\n<p>It also doesn’t run as well under Windows as it does under Linux.  If all you know is Windows, this might be an issue for you.</p>\n<h2 id=\"Advantages-of-DotNetNuke\"><a href=\"#Advantages-of-DotNetNuke\" class=\"headerlink\" title=\"Advantages of DotNetNuke\"></a>Advantages of DotNetNuke</h2><p>There are two main advantages of DotNetNuke over WordPress that would make me choose it over WordPress in most situations.  First, I know .NET, so if I need to write my own module, I can do that.  Second, it allows much greater freedom in HOW things are presented on the page.</p>\n<p>There are also quite a few skins available for DotNetNuke, however most of them you have to pay for and I’ve never put up a site yet that I didn’t buy a theme for.</p>\n<h2 id=\"Disadvantages-of-DotNetNuke\"><a href=\"#Disadvantages-of-DotNetNuke\" class=\"headerlink\" title=\"Disadvantages of DotNetNuke\"></a>Disadvantages of DotNetNuke</h2><p>There are two huge disadvantages to DotNetNuke as well.  The first is that it is harder for my clients to manage.  In fact, while managing a DotNetNuke site is easier than having to change code, I would suggest that you not even tell the end user that they can manage the site.  You might expose specific pages to them, but leave the overall administration to people who understand DNN.</p>\n<p>Second, the level of granularity of role based permissions is less than the plug-in for WordPress gives me, and I’ve yet to find a module for DotNetNuke that gives me the same level of granularity.</p>\n<p>Finally, because you can mix and match skins and containers in such a way that it is difficult for the skin designers to test every possible mix, I find that every skin I’ve used has needed to be tweaked.  Unlike the WordPress themes that just work.</p>\n<h2 id=\"Write-it-Yourself\"><a href=\"#Write-it-Yourself\" class=\"headerlink\" title=\"Write it Yourself\"></a>Write it Yourself</h2><p>Of course, the advantage to writing all the code yourself is that you have complete control.  The disadvantage is that you have to write everything yourself, including the skin.</p>\n<h2 id=\"A-Word-about-Skins-and-Themes\"><a href=\"#A-Word-about-Skins-and-Themes\" class=\"headerlink\" title=\"A Word about Skins and Themes\"></a>A Word about Skins and Themes</h2><p>As recent as 3 years ago, I used to have the presentation layer designed for me by a designer.  This process typically cost between $5,000 and $10,000 depending on how many iterations we went through.</p>\n<p>However, I’ve come to the realization that design matters very little.  Yes, the site has to look good.  Yes, it has to be usable.  But it doesn’t have to be unique from every other design.  In fact, with the number of sites available today, I doubt that even a unique design is really that unique.</p>\n<p>So save yourself a lot of time and money and just go grab a design from one of the many sites that specialize in skins or themes for sites.  Even if you have to modify it a bit, you’ll be much further ahead of the game.</p>\n<p>The flexibility that DotNetNuke gives you comes at a pretty high cost both in terms of finding Skins that work reliably right out of the box and in terms of training users to use the site.  So just because DNN is more flexible does not necessarily mean it is “better.”</p>\n<h2 id=\"The-Questions-I-Ask\"><a href=\"#The-Questions-I-Ask\" class=\"headerlink\" title=\"The Questions I Ask\"></a>The Questions I Ask</h2><p>What are the requirements of the site?</p>\n<p>If I have a requirement that can only be met by one of the platforms, that pretty much ends the list of questions.  If I can meet all the requirements with WordPress, that will probably be my choice of platform unless a future question indicates other wise.  My second choice would be DotNetNuke.</p>\n<p>Is there any possibility of a future requirement that would lead me to another platform?</p>\n<p>We want to try our best not to lock ourselves out of expansion.  At the same time we don’t want to provide more room for growth than will ever be needed.</p>\n<p>Will the requirements for this project require me to write special code?</p>\n<p>If I can’t find a plug-in or module that does what I need it to do, then I’m going to automatically be left with two choices.  Write it myself or use DotNetNuke and write a module.</p>\n<p>Does the client want to be able to maintain the site himself?</p>\n<p>If the answer to this is “yes” I’m going to lean very heavily toward WordPress as my first choice and DotNetNuke as my second.</p>\n<p>What servers are available to install this on?</p>\n<p>If you don’t have a Linux server, you are kind of stuck.  This isn’t true in my case, but for some of my clients, it is a factor.  It doesn’t completely rule out using WordPress but it does discourage from going in that direction.</p>\n<p>Is Search Engine Optimization a Factor?</p>\n<p>For most people it is.  Again, this favors WordPress.</p>\n<h2 id=\"When-Would-You-Just-Write-It-Yourself\"><a href=\"#When-Would-You-Just-Write-It-Yourself\" class=\"headerlink\" title=\"When Would You Just Write It Yourself?\"></a>When Would You Just Write It Yourself?</h2><p>At this point, hardly ever.  Sometimes the choice is made for you. “I want you to write this from scratch using ASP.NET.”  Well, OK, if you’re willing to pay for it…</p>\n<p>But it really seems silly to have to write code I know I can get for next to nothing.</p>\n<p>You may not have the same selection of tools that I do.  I wish I had some time to look at a few others.  But you should be asking similar questions about the project at hand as you decide how you are going to achieve the goals of the project.  “If all you have is a hammer, everything looks like a nail.”</p>\n",
            "tags": [
                "asp.net",
                "cms",
                "dotnetnuke",
                "WordPress"
            ]
        },
        {
            "id": "http://davembush.github.com/why-programmers-can%E2%80%99t-program/",
            "url": "http://davembush.github.com/why-programmers-can%E2%80%99t-program/",
            "title": "Why Programmers Can’t Program",
            "date_published": "2010-03-11T12:53:24.000Z",
            "content_html": "<p><img src=\"/uploads/2010/03/WEST0241.png\" alt=\"WEST0241\" title=\"WEST0241\"> Jeff Atwood of <a href=\"//www.codinghorror.com/blog/2010/02/the-nonprogramming-programmer.html\">Coding Horror</a> writes:</p>\n<p>“I find it difficult to believe, but the reports keep pouring in via Twitter and email: **many candidates who show up for programming job interviews can’t program. At all.**”</p>\n<span id=\"more\"></span>\n\n<p>Jeff, you must not have visited a college campus recently.  The reason most that most “programmers” can’t program is because their instructors led them to believe they could program.</p>\n<p>I have two stories that illustrate the point.</p>\n<p>I do work for a local community college.  The college hired one of their students to work on an ASP.NET project because he was recommended by the professor and because he got all A’s in his programming classes.  The professor told the manager, “this is one of the best students I’ve ever had.”</p>\n<p>Maybe he was the best if you evaluate by his grades, but he sure couldn’t program.  And even if he were to read this, or one of his buddies were to read this and show it to him, I think he’d agree.  He eventually quit and went back to doing what he used to do before he learned how to be a programmer.</p>\n<p>To the school’s credit, they did actually teach current languages.  But that’s where the education stopped.  They taught various programming languages like most of us learned math.  Here’s the formula.  Here’s an exercise that uses the formula.  Nothing in the classes require the student to solve a real-life problem, or even to solve any of the interview problems.</p>\n<p>At the school my daughter goes to, I found the situation even worse.  They have a computer science program but as I was talking to a recent graduate I found out there was no way I’d hire this kid.  I found out because the kid knew he’d been cheated and was freely telling me about it.  So just to find out how bad things were I asked a few questions.</p>\n<p>Turns out, he’d been educated in Java, but he couldn’t tell me what polymorphism was, or when I asked it as, “what is inheritance and how would you use it practically?”  he couldn’t tell me.</p>\n<p>He’d never seen JSP, HTML, or JavaScript either.  What school teaches Java and doesn’t teach those subjects with it?</p>\n<p>One of the commenters suggests that we need government-regulated tests (like that would work any better than any other government-regulated test?)  to help weed out those who can’t program.  While I’m sure there are some great examples of teachers who can program, can teach programming, and care about the quality of programmers they are graduating, I’d suggest changing the education system to weed out the professors who can’t teach, can’t program, and don’t care.  Maybe the certification tests need to go higher than the students we end up interviewing.</p>\n",
            "tags": [
                "programming",
                "education",
                "college"
            ]
        },
        {
            "id": "http://davembush.github.com/object-oriented-programming-has-failed-us/",
            "url": "http://davembush.github.com/object-oriented-programming-has-failed-us/",
            "title": "Object Oriented Programming has Failed Us",
            "date_published": "2008-05-13T05:36:40.000Z",
            "content_html": "<p>I’ve been thinking about the state of the programmers coming into our industry recently.  It seems to me that many of the college students who graduate today understand the syntax, but few know how to apply true object oriented principles to the real world.</p>\n<p>I recently had a discussion with a friend who confirmed my observations.  Simply put, most people do not think in object oriented terms.</p>\n<span id=\"more\"></span>\n\n<p>We’ve both spent time teaching other programmers, or having other programmers work for us.  We’ve watched good programmers stumble over this whole concept of object oriented programming.  Some leave understanding it and being able to apply it right away.  Others, struggle to do the exercises we give them.  Why is that? When a high school student ask me about getting a Computer Science degree.  The first question I ask him is, “Did you like Algebra or Geometry better?  Specifically, did you like the proofs you did in Geometry or did you like plugging in the numbers in Algebra?”  The reason I ask this question is because programming is a lot like working a proof.  If you didn’t like proofs, if you wouldn’t be willing to spend the bulk of your day working a proof, you should not be a programmer.</p>\n<p>But, with object oriented programming, there is another layer on top of this.  You see, proofs are linier, one dimensional problems.  Object oriented programming is at least two dimensional in nature and maybe even three dimensional.</p>\n<p>So, now, my question needs to be modified to include the following question, “Have you ever worked on anything three dimensional.  Something you had to see in your mind’s eye and then transfer to the real world?”  Building with Legos, Tinker Toys, or taking a shop class would qualify.</p>\n<p>But, you can see right away, that if I ask both questions, I’ve limited the number of people who are really able to program using object oriented principles to a very small subset.</p>\n<p>Back in the day, we moved from C to C++.  I remember that maybe 20% of the programmers were able to make the jump.  Most who switched ended up writing C code using C++ syntax.  I’m pretty sure that’s NOT what Borland or Microsoft had in mind when they gave us the C++ compilers.</p>\n<p>I used to think that as we progressed, as kids came out of college, that more people would understand object oriented programming because that’s what they started with.  The reality is that many of them do not.  I used to think this had something to do with the education they were getting.</p>\n<p>That somehow the teachers were spending time on the syntax and not enough time on application.  But, the more I ponder the problem, the more I realize that the problem is not the students.  You can only do so much with the talent people have.  No, the real problem is that object oriented programming as a mass solution has failed us.</p>\n<p>In a world driven by computers.  A world that already has too few programmers available.  Do we really want to limit the number of programmers we have available? Folks, we’ve been looking at the programming language issue from the wrong perspective.  As we develop programming solutions in the future, we need to aim for solutions that most programmers understand.  Solutions that people understand.  Not solutions that mirror reality but solutions that work in the real world.</p>\n<p>I really hate to say this, as much as I like object oriented programming but, I really think we might be better off if we went back to procedural programming for the bulk of the applications that we write and left the object oriented stuff to people who really understand it and for problems that can not be solved any other way.</p>\n<p>Meanwhile, back at the lab, we need to come up with a programming environment that most people understand naturally.  We need to do usability studies on the languages we develop just like we test applications we develop for users.  Instead of trying to simplify what we are already doing, which continues to provide solutions that only programmers understand, we need to provide solutions that are no longer programmer centric.</p>\n<p>Once we train and use up all the programming talent in the world, we will be forced to do this.  We might as well start now.</p>\n",
            "tags": []
        }
    ]
}