{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"none\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "url": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "title": "Humpty Dumpty and Programming",
            "date_published": "2017-12-05T11:30:32.000Z",
            "content_html": "<p>I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” </p>\n<p>There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. <figure><img src=\"/uploads/2017/12/2017-12-05.png\" title=\"Humpty Dumpty and Programming\"> Photo by <a href=\"//visualhunt.com/author/f31767\">aturkus</a> on <a href=\"//visualhunt.com/re/b4881b\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Agile\"><a href=\"#Agile\" class=\"headerlink\" title=\"Agile\"></a>Agile</h2><p>Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. </p>\n<p>“Have you ever worked in an Agile organization before?” </p>\n<p>I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? </p>\n<p>It is like Humpty Dumpty trying to explain the meaning of the poem <a href=\"//www.jabberwocky.com/carroll/jabber/jabberwocky.html\">Jabberwocky</a>. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. </p>\n<p>Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” </p>\n<p>Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. </p>\n<p>In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” </p>\n<p>This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.</p>\n<h2 id=\"A-Community-of-Hacks\"><a href=\"#A-Community-of-Hacks\" class=\"headerlink\" title=\"A Community of Hacks?\"></a>A Community of Hacks?</h2><p>Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. </p>\n<p>If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. </p>\n<p>The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. </p>\n<p>Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!</p>\n<h2 id=\"What-If\"><a href=\"#What-If\" class=\"headerlink\" title=\"What If?\"></a>What If?</h2><p>In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? </p>\n<p>What if we got beyond tools to how people think?</p>\n<h2 id=\"Code-Puzzles\"><a href=\"#Code-Puzzles\" class=\"headerlink\" title=\"Code Puzzles\"></a>Code Puzzles</h2><p>Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. </p>\n<p>I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  </p>\n<p>And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. </p>\n<p>And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?</p>\n<h2 id=\"The-Advantage\"><a href=\"#The-Advantage\" class=\"headerlink\" title=\"The Advantage\"></a>The Advantage</h2><p>The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!</p>\n<h2 id=\"Be-Intentional\"><a href=\"#Be-Intentional\" class=\"headerlink\" title=\"Be Intentional\"></a>Be Intentional</h2><p>So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. </p>\n<p>Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? </p>\n<p>Do you really know what Agile is? </p>\n<p>How many design patterns do you know that aren’t the hot new trend? </p>\n<p>Could you code your way out of an interview with Google, Facebook or Amazon? </p>\n<p>Where do you want to be with your career next year?  In 5 years? </p>\n<p>Are you average or striving to be awesome? </p>\n<p>Join me on the journey!</p>\n",
            "tags": [
                "programming",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-effects-design-patterns/",
            "url": "http://davembush.github.com/ngrx-effects-design-patterns/",
            "title": "NgRX Effects Design Patterns",
            "date_published": "2017-10-17T10:30:03.000Z",
            "content_html": "<p>Since I don’t seem to have a blogs worth of any one topic to write about, I thought maybe something more along the lines of a cluster of small tips and tricks might work.  Since I’ve been writing my Angular book over the last couple of weeks, there hasn’t been much new that I’ve discovered worth sharing.  But there are a few small discoveries I’ve made.  This week, they center around NgRX Effects. <figure><img src=\"/uploads/2017/10/2017.10.17.png\" title=\"NgRX Effects Design Patterns\"> Photo via <a href=\"//visualhunt.com/re/79a90d\">Visual hunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Returning-No-Actions\"><a href=\"#Returning-No-Actions\" class=\"headerlink\" title=\"Returning No Actions\"></a>Returning No Actions</h2><p>There have been times in the past where I didn’t want to return an Action from my Effect.  Not knowing any better, I just returned the Object Literal, <code>&#123;type: &#39;noop&#39;&#125;</code>.  But there is a much better way. </p>\n<p>BTW, did you know that unless you tell NgRX otherwise, all @Effects must return an Action? </p>\n<p>So, what is the better way?  It turns out that the guys who wrote NgRX already thought of the possibility that you wouldn’t want to return an action from an @Effect.  All you need to do is to pass the object literal <code>&#123;dispatch: false&#125;</code> to the @Effect() decoractor. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>(&#123;<span class=\"attr\">dispatch</span>: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\"><span class=\"attr\">member$</span>: <span class=\"title class_\">Observable</span>&lt;&#123;&#125;&gt; = </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span> ...</span><br></pre></td></tr></table></figure>\n\n<p>Like I said, I needed this because I didn’t yet know about some of the other things I’m going to mention below.  My experience says, if you need this, you are probably doing something wrong.</p>\n<h2 id=\"Strong-Typing\"><a href=\"#Strong-Typing\" class=\"headerlink\" title=\"Strong Typing\"></a>Strong Typing</h2><p>If you’ve read any of my other post about Angular, you’ll know I’m a very strong proponent of strongly typing everything.  Nowhere is this more useful than when creating the Effect chain.  By typing everything, I can easily tell that my code is written correctly.  Even while writing my book on how to get started with Angular, it has helped me figure out that I’m missing a closing bracket or parenthesis.  Not to mention it has told me exactly what block of code I had wrong.  I’ve probably saved hours of debugging time with this one simple enhancement to my coding practice.</p>\n<h2 id=\"Chaining-Observables\"><a href=\"#Chaining-Observables\" class=\"headerlink\" title=\"Chaining Observables\"></a>Chaining Observables</h2><p>I’m almost ashamed to mention this next one.  But, I never really caught on that <code>switchMap()</code> was a silent subscriber.  Oh! So many places you can use this. If you’ve been using Effects, you’ve probably seen code that looks like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>()</span><br><span class=\"line\"><span class=\"attr\">get$</span>:<span class=\"title class_\">Observable</span>&lt;<span class=\"title class_\">Edit</span>.<span class=\"property\">Update</span>&gt; =</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">actions$</span></span><br><span class=\"line\">    .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">Edit</span>.<span class=\"property\">GET</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">switchMap</span>((<span class=\"attr\">action</span>: <span class=\"title class_\">Edit</span>.<span class=\"property\">Get</span>): <span class=\"title class_\">Observable</span>&lt;&#123;&#125; |</span><br><span class=\"line\">      <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"title class_\">Contact</span>&gt;&gt; =&gt;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">contactsService</span>.<span class=\"title function_\">get</span>(<span class=\"string\">``</span>action.<span class=\"property\">id</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>((<span class=\"attr\">x</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"title class_\">EditForm</span>&gt;):<span class=\"string\">``</span><span class=\"title class_\">Edit</span>.<span class=\"property\">Update</span> =&gt;</span><br><span class=\"line\">      newEdit.<span class=\"title class_\">Update</span>(x[<span class=\"number\">0</span>]));<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>But, do you know why it works? </p>\n<p>That <code>switchMap()</code> bit expects that you’ll return an observable.  It subscribes to it and passes the data inside the observable to the <code>map()</code> that follows.  Kind of like how the <code>async</code> pipe works in our templates. </p>\n<p>The cool thing about this is that you can chain subscriptions together using this.  It isn’t just some cleaver way of getting the results of a service into your final action that you will return.  I’ve used <code>switchMap()</code> to get data from the store and pass that on to a <code>switchMap()</code> that call my service with that data. </p>\n<p>The only thing you need to watch out for is that your observable is either a cold observable or that you call <code>.first()</code> so you it becomes a cold observable.  Otherwise, you’ll end up in an infinite loop.  Ask me how I know :).</p>\n<h2 id=\"Grouping-Observables\"><a href=\"#Grouping-Observables\" class=\"headerlink\" title=\"Grouping Observables\"></a>Grouping Observables</h2><p>Chaining observables together using <code>switchMap()</code> works well when the output only needs to be used by the next function in the chain.  But what about when you need to use the results from two different observables at once.  There are a couple of different ways you might do this. </p>\n<p>One function you might consider using is <code>withLatestFrom()</code>. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firstObservable</span><br><span class=\"line\">  .<span class=\"title function_\">withLatestFrom</span>(secondObservable, <span class=\"function\">(<span class=\"params\">[firstResult, secondResult]</span>) =&gt;</span> </span><br><span class=\"line\">  <span class=\"comment\">// your code here)</span></span><br></pre></td></tr></table></figure>\n\n<p>or if you have more than two you need to combine, you can use <code>combineLatest()</code> </p>\n<p>Another way you might consider combining them is with <code>forkJoin()</code> although that might be the last tool you reach for.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Another mistake I’ve been making is trying to make my Effect do too much.  If I restrict my effect to only doing one thing at a time and always returning one or more actions, they become much easier to manage.  Maybe this has only be my problem.  But once I saw what switchMap() could do for me, the light bulb went on in my brain.</p>\n<h2 id=\"Returning-Multiple-Actions\"><a href=\"#Returning-Multiple-Actions\" class=\"headerlink\" title=\"Returning Multiple Actions\"></a>Returning Multiple Actions</h2><p>And speaking of returning one or more actions, it is possible to return multiple actions from an Effect using.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">mergeMap</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\"> result: <span class=\"built_in\">string</span>[] </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Observable</span>.<span class=\"title function_\">from</span>([ </span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ActionOne</span>( result ), </span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">ActionTwo</span>() </span><br><span class=\"line\">    ]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "url": "http://davembush.github.com/enforce-typescript-functional-programming/",
            "title": "Enforce TypeScript Functional Programming",
            "date_published": "2017-07-25T10:30:00.000Z",
            "content_html": "<p>As consistent readers of this blog are aware, I’ve fallen in love with Functional Programming.  But I also live in a primarily Angular&#x2F;TypeScript world where some code is still Object Oriented and other code is more Functional in nature.  And while TypeScript lets you do some Functional things, I’ve found it hard to force functional concepts in TypeScript.  So, I’ve gone searching.  Wouldn’t it be great if there were some sort of flag you could set that said, “Hey compiler, I’m in ‘Functional’ mode now!”  And the compiler would make sure that you never used a conditional statement, never accessed hidden parameters, and never mutated state? </p>\n<p>Well, I think I’ve figured out some of how to manage all of this using nothing more than TypeScript and some TSLint rules. <figure><img src=\"/uploads/2017/07/2017-07-25.jpg\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/15127010075/\">archer10 (Dennis) 99M Views</a> via <a href=\"//visualhunt.com/re/52cd50\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h2><p>Several weeks ago, I demonstrated how to <a href=\"/really-use-ngrx-better/\">protect against immutability using freeze</a>.  But, wouldn’t it be better to catch immutability issues at compile time? </p>\n<p>There are a couple features in TypeScript that do just that. </p>\n<p>First, we can use the <code>readonly</code> keyword on a field to ensure that it doesn’t change.  And second, we can declare arrays using <code>ReadonlyArray</code>.  For this to be most useful, we are going to want to provide an interface for all of our data that needs to be immutable.  This is how I typically use NgRX.</p>\n<h2 id=\"Enforcing-Functional\"><a href=\"#Enforcing-Functional\" class=\"headerlink\" title=\"Enforcing Functional\"></a>Enforcing Functional</h2><p>Now, that is as far as it goes for support in TypeScript itself, as far as I am aware.  But, we can get more support by using TSLint.  If you are using the Angular-CLI, this gets installed when you create your project.  If you aren’t using the Angular-CLI, or you are using some other framework, you are on your own for getting that installed and setup. </p>\n<p>There are two problems we need to overcome in order to use TSLint to solve our “switch into Functional mode” issue.  First, is that we need a set of rules we can use.  The second is that we will need some way of isolating where those rules take effect. </p>\n<p>Fortunately, we can create a separate <code>tslint.json</code> file for each directory.  And since all of my Functional code is isolated to my NgRX state management stuff, I can put a file in that directory and it will take care of my Functional needs while leaving my normal <code>tslint.json</code> file for the rest of my code. </p>\n<p>The other thing you will want to do is that you’ll want to install <a href=\"//www.npmjs.com/package/tslint-immutable\">tslint-immutable.</a> </p>\n<p>tslint-immutable adds some rules specifically for immutability that are not included in the core implementation.  I love plugable systems. </p>\n<p>I’ll let you read the documentation on the site for the rules that it adds.  Who knows when you’ll be reading this and the package may have changed by the time you get here.</p>\n<h2 id=\"pre-commit-hooks\"><a href=\"#pre-commit-hooks\" class=\"headerlink\" title=\"pre-commit hooks\"></a>pre-commit hooks</h2><p>Having a good set of linting rules if of no use if they get ignored.  Right? </p>\n<p>Now, another package I install into my projects is pre-commit.  Be warned though.  If you are using Windows as your development computer, you’ll also need to install <a href=\"//gnuwin32.sourceforge.net/packages/coreutils.htm\">coreutils</a> because pre-commit assumes you are able to run bash. </p>\n<p>But of course, someone could comment out or remove the pre-commit hooks or otherwise force a commit.  This is why you also want a good code review process in place for your team.  Or better yet, a job that runs on your central repository that verifies that these precommit task have run successfully. </p>\n<p>When I review code, I check several items regularly.</p>\n<ul>\n<li>What changed and was it changed in a way consistent with how we want things coded.</li>\n<li>If something wasn’t coded correctly, is there a linting rule we can put in place to correct it?</li>\n<li>When I pull down the code, can I compile for production as well as for development mode?</li>\n</ul>\n<p>Point 2 is critical.  The more reviewing the computer can do for you the better off you’ll be.</p>\n<h2 id=\"Conditionals\"><a href=\"#Conditionals\" class=\"headerlink\" title=\"Conditionals\"></a>Conditionals</h2><p>What I haven’t been able to find is a rule that will prevent conditions from showing up inside of observable functions or their array cousins.  If you know of something, please let me know in the comments below.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now, a little code would be nice to flesh this all out.  So, this is what I’m currently using: </p>\n<p>First, the scripts and pre-commit sections from my package.json file: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ng lint --type-check&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>And then the tslint that I put with my NgRX code: </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tslint-immutable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rulesDirectory&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;../../../node_modules/codelyzer&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* New rules to enable immutable checks */</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typedef&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">      <span class=\"string\">&quot;call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-call-signature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;arrow-parameter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;property-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;member-variable-declaration&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;object-destructuring&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;array-destructuring&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-keyword&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;readonly-array&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"keyword\">true</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;ignore-local&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-let&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;no-any&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">/* existing rules follow */</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "functional",
                "typescript",
                "tslint"
            ]
        }
    ]
}