{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"c#\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "url": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "title": "CefSharp Offscreen [Why do I have so many instances of Chromium?]",
            "date_published": "2015-10-01T11:32:00.000Z",
            "content_html": "<p>I’ve been using the CefSharp.Offscreen library to drive the Chromium browser for a couple of months now.  While the code I’ve been working on has been working correctly, I could never figure out why so many instances of Chromium are left dangling in my task manager.  Oh, they’d all go away once I exited the application, but then it would take a very long time for my application to completely close because there were so many instances of Chromium hanging around.</p>\n<p>This past week, I finally figured out how to keep the number of Chromium instances in line with the number of off-screen browser windows I was actually creating.</p>\n<p><img src=\"/uploads/2015/09/image4.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<p>I’m using version 41 of CefSharp, any future problem may not have this problem.  This post is intended to walk through the discovery steps and is not meant as a ding on the CefSharp developers.  Hey!  For all I know, the problem is in Chromium.</p>\n<p>So, as I’ve already mentioned, I noticed many instances of Chromium in my task manager.  At first I thought this was normal.  I’ve seen many instances of the Chrome browser in my task manager even though I only had one browser window open.  And I’ve seen information on the web that says multiple windows are needed to make Chromium work.</p>\n<p>But the more I run my program, the more windows show up in task manager.  Certainly this isn’t right.</p>\n<p>And then I started thinking about my code.  Every instance of my browser is wrapped in a using statement because the browser windows is disposable.  Could it be possible that some resource isn’t being disposed correctly as we use the same browser window to navigate from one page to another? Here is some code to illustrate my point.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Multiple browser windows open here</span></span><br></pre></td></tr></table></figure>\n\n<p>So, obviously this isn’t right.  Well, at least it is obvious to me.</p>\n<p>But what if the use case for this never was intended for it to be used like a regular window.  In that case, putting the using statement inside of the foreach would solve my problem.  It isn’t quite as efficient as I would like, but at least it would work.  And the fact that I had so many instances of chromium running was eating up memory and slowing my whole computer down.  At least this would give me my computer back.</p>\n<p>So, I changed the code to look more like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// One browser window open here.</span></span><br></pre></td></tr></table></figure>\n\n<p>Fixed!</p>\n",
            "tags": [
                "c#",
                "Chromium",
                "debugging"
            ]
        },
        {
            "id": "http://davembush.github.com/browser-automation-in-net-w-chromium/",
            "url": "http://davembush.github.com/browser-automation-in-net-w-chromium/",
            "title": "Browser Automation in .NET w/ Chromium",
            "date_published": "2015-07-09T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/07/image.png\" alt=\"image\" title=\"image\"> Over the past ten years, I’ve successfully implemented various types of screen scraping in order to provide data to my clients.  Most of these implementations have involved accessing HTML and parsing out the data we needed for the web application.</p>\n<p>My latest implementation of this made use of the <a href=\"//htmlagilitypack.codeplex.com/\">HTML Agility Pack</a> and managed to incorporate the e-Labels For Education site into the Labels For Education site.  (No links, because the e-Labels program is being phased out.) Recently, I’ve been spending a lot of times on some site doing the same thing over and over again.  But most of the sites I visit now implement some kind of AJAX so that doing a simple web request to a page without also loading and parsing the JavaScript ends up giving me a page with no useful data at all.  Unlike the work I’ve done in the past where this was sufficient.</p>\n<p>This, combined with my recent work implementing Jasmine unit test for JavaScript and running them in the PhantomJS headless browser has had me thinking, wouldn’t it be great if I could do similar kinds of screen scraping, or even browser automation, but use something like an embedded version of PhantomJS to get the work done.</p>\n<span id=\"more\"></span>\n\n<p>Well, do a search for “embedded PhantomJS for .NET” or something similar and you’ll find that that isn’t possible.  At least not yet.</p>\n<p>But there is a viable alternative.  Actually there are a couple of viable alternative.  But they all end up using the Google Chromium browser API.  The implementation I ended up using is <a href=\"//github.com/cefsharp\">CefSharp</a>.  Mostly because this is what is available from NuGet.</p>\n<p>What follows are some of the tricks I learned along the way.</p>\n<h2 id=\"Installing-Chromium\"><a href=\"#Installing-Chromium\" class=\"headerlink\" title=\"Installing Chromium\"></a>Installing Chromium</h2><p>The first thing you’ll need to do once you have a project started, is that you’ll need to install the Chromium DLLs.  In the NuGet package manager, do a search for CefSharp.  This will bring up a list of plugins, you’ll want to install CefSharp.OffScreen and CefSharp.Common (I’m assuming you want to do off-screen automation here.)  The version I am working with is version 39.</p>\n<p>What I found difficult to figure out next was how to actually use the library.</p>\n<h2 id=\"Get-It-Initialized\"><a href=\"#Get-It-Initialized\" class=\"headerlink\" title=\"Get It Initialized\"></a>Get It Initialized</h2><p>You’ll want to initialize the library before you use it.  The following lines will do that.  I just put this as early in my code as possible.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"keyword\">new</span> CefSettings</span><br><span class=\"line\">    &#123;LogSeverity = LogSeverity.Verbose&#125;;</span><br><span class=\"line\">settings.CefCommandLineArgs.Add(<span class=\"string\">&quot;no-proxy-server&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Cef.OnContextInitialized = ()</span><br><span class=\"line\">    =&gt; Cef.SetCookiePath(<span class=\"string\">&quot;cookies&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!Cef.Initialize(settings, shutdownOnProcessExit: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    performDependencyCheck: <span class=\"literal\">true</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unable to Initialize Cef&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to use a proxy server, you’ll need to look up the documentation for how to set the proxy server.</p>\n<p>The Cef.SetCookiePath sets the location of your cookie file.</p>\n<h2 id=\"Creating-The-Browser-“Window”\"><a href=\"#Creating-The-Browser-“Window”\" class=\"headerlink\" title=\"Creating The Browser “Window”\"></a>Creating The Browser “Window”</h2><p>Now that you have this all set, you can use the ChromiumWebBrowser class to create a browser window.  Since the browser is disposable, you’ll want to either wrap the code in a using() statement or you’ll want to make sure you dispose of the browser object when you are done.</p>\n<p>You’ll want to set a few things on the browser object next.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .FileAccessFromFileUrlsAllowed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .UniversalAccessFromFileUrlsAllowed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .WebSecurityDisabled = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And then you’ll want to wait for the browser to initialize.</p>\n<p>Now the code I was given for this looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForBrowserToInitialize</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;<span class=\"built_in\">bool</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    EventHandler handler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    handler = (sender, args) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        browser.BrowserInitialized -= handler;</span><br><span class=\"line\">        tcs.TrySetResult(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    browser.BrowserInitialized += handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll recognize this as an extension method.  What it is doing is waiting for the BrowserInitialized event to fire and then telling the task it can return.  This works great the first time you use it, but I found that when I created a new browser “window” the initialization happened so quickly that this was unreliable.  I’ve replaced this code with the more reliable version below.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForBrowserToInitialize</span></span></span><br><span class=\"line\"><span class=\"function\">    (<span class=\"params\"><span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Browser.IsBrowserInitialized)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It does the same thing.  It is just more reliable.</p>\n<h2 id=\"Load-a-Page\"><a href=\"#Load-a-Page\" class=\"headerlink\" title=\"Load a Page\"></a>Load a Page</h2><p>Everything else is pretty straight forward.  To load a web page:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">LoadUrl</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser, <span class=\"built_in\">string</span> url</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    browser.Load(url);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> browser.WaitForPage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That WaitForPage() method looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForPage</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;<span class=\"built_in\">bool</span>&gt;();</span><br><span class=\"line\">    EventHandler&lt;NavStateChangedEventArgs&gt; handler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    handler = (sender, args) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Wait for while page to finish loading not</span></span><br><span class=\"line\">        <span class=\"comment\">// just the first frame</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!args.IsLoading)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            browser.NavStateChanged -= handler;</span><br><span class=\"line\">            tcs.TrySetResult(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    browser.NavStateChanged += handler;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Get-Data-Out\"><a href=\"#Get-Data-Out\" class=\"headerlink\" title=\"Get Data Out\"></a>Get Data Out</h2><p>If you need to get data out of the page, you can use GetSourceAsync();</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">await</span> browser.GetSourceAsync();</span><br></pre></td></tr></table></figure>\n\n<p>or you can use JavaScript to get at the DOM using</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> EvaluateScriptAsync(javaScriptCodeHere);</span><br></pre></td></tr></table></figure>\n\n<p>Note, you can also use <code>EvaluateScriptAsync</code> to do things like clicking buttons, scrolling the window and a lot of other useful things.</p>\n<h3 id=\"Other-Places-Talking-About-Chromium-for-NET\"><a href=\"#Other-Places-Talking-About-Chromium-for-NET\" class=\"headerlink\" title=\"Other Places Talking About Chromium for .NET\"></a>Other Places Talking About Chromium for .NET</h3><ul>\n<li><a href=\"//umaranis.com/2013/10/16/how-to-embed-chrome-browser-in-net-application/\">Embed Chromium Using CefGlue</a></li>\n<li><a href=\"//thechriskent.com/2014/08/18/embedded-chromium-in-winforms/\">Embedded Chromium in WinForms</a></li>\n</ul>\n",
            "tags": [
                "c#",
                "CefSharp",
                "Chromium"
            ]
        },
        {
            "id": "http://davembush.github.com/string-and-stringbuilder/",
            "url": "http://davembush.github.com/string-and-stringbuilder/",
            "title": "String and StringBuilder",
            "date_published": "2014-12-11T12:00:00.000Z",
            "content_html": "<p>A couple of weeks ago, we discussed <a href=\"/value-type-vs-reference-type/\">Value types and Reference types</a> where we said that a reference type points to the value it represents and a value type is the value it represents. This has implications when we work with the assignment operator because when you assign a reference type and change the content of what it is pointing to, both variables get changed because they are both pointing to the same location in memory.  If you do this with a value type, only the one you change sees the change because you are working with a copy.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Is-String-A-Value-or-Reference-Type\"><a href=\"#Is-String-A-Value-or-Reference-Type\" class=\"headerlink\" title=\"Is String A Value or Reference Type?\"></a>Is String A Value or Reference Type?</h2><p>So, if you’ve done any work with the String class, you might think it is a value type, because if you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(a);</span><br><span class=\"line\">Console.WriteLine(b);</span><br></pre></td></tr></table></figure>\n\n<p>You will quickly discover that the values that get written out are: abc def Which is not what you’d expect if String is a reference type. So, the question we need to ask is, why is String acting like a value type if it is really a reference type?</p>\n<h2 id=\"Strings-Are-Immutable\"><a href=\"#Strings-Are-Immutable\" class=\"headerlink\" title=\"Strings Are Immutable\"></a>Strings Are Immutable</h2><p>The answer is that Strings are immutable.  That is, a string never changes.  And if you are a thinking person I can already hear you saying, “Sure they change, just look at this code…”</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(a);</span><br></pre></td></tr></table></figure>\n<p>“See, I changed the string variable a from ‘abc’ to ‘def’” And yes, you did change the a variable.  But what did you change?  You didn’t change “abc” to “def” you change what a was pointing to.</p>\n<p>You see, “abc” is the object of type string and “def” is an object of type string.  All you managed to do was change what a was pointing to. In fact, if you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The result is exactly the same as if you’d written:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> a = b;</span><br></pre></td></tr></table></figure>\n\n<p>Because in .NET, there is only one instance of any given string in the system.  The duplicates get optimized out.</p>\n<h2 id=\"String-Concatenation\"><a href=\"#String-Concatenation\" class=\"headerlink\" title=\"String Concatenation\"></a>String Concatenation</h2><p>Now all of this has implications when it comes to concatenation. Let’s say you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> c = a + b;</span><br></pre></td></tr></table></figure>\n\n<p>What’s happening here? First we create a string object that contains “abc” and point the a variable to it.  Then we create another string object that contains “def” and point the b variable to it.  And now this is where strings get interesting because the next thing that happens is that a NEW string object is created that contains “abcdef” and we point the c variable to that new value. Now, if you think about this for a minute, you’ll understand that this is incredibly inefficient.  Creating new objects is one of the most expensive operations that anyone can do is just about every object oriented language we have available.  In fact, I can’t think of one where this is not true.  I’m just assuming there must be an exception to the rule. It would be much more efficient if we were to make string so that it wasn’t immutable.  This would mean we could skip the create new object part of the assignment and our concatenation operations would work much faster.</p>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><p>Enter StringBuilder.  StringBuilder is, essentially, the mutable version of the String class.  Now you can write code that looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;efg&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> c = <span class=\"string\">&quot;hij&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> StringBuilder(a);</span><br><span class=\"line\">d.Append(b);</span><br><span class=\"line\">d.Append(c);</span><br><span class=\"line\"><span class=\"built_in\">string</span> e = d.ToString();</span><br></pre></td></tr></table></figure>\n\n<p>Note, at the end, we still have to convert our StringBuilder object to a String object using ToString().  So, there is a new object creation penalty there.  What this means is that you probably don’t want to use a StringBuilder unless you are appending to a string more than three times. So, there you go.  That’s the difference between String and StringBuilder, why a String looks like a value type, and when you should use StringBuilder instead of String.</p>\n",
            "tags": [
                "string",
                "reference types",
                "stringbuilder",
                "value types"
            ]
        },
        {
            "id": "http://davembush.github.com/value-type-vs-reference-type/",
            "url": "http://davembush.github.com/value-type-vs-reference-type/",
            "title": "Value Type vs Reference Type",
            "date_published": "2014-11-27T12:00:00.000Z",
            "content_html": "<p>It is amazing to me how few programmers understand the fundamentals of how variables work.  Not just in .NET or C# specifically, but in every language they work in.  It amazes me for two reasons.  First, I don’t think I could program if I didn’t understand what was physically happening as a result of the code I was writing.  Not knowing how the variables relate to the memory that they use would be, to me, a major limitation.  But it also amazes me because I don’t think anyone can program intelligently until they do know what is happening. So, I’ll start from the outside and move in to what’s happening in memory.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-A-Value-Type\"><a href=\"#What-is-A-Value-Type\" class=\"headerlink\" title=\"What is A Value Type\"></a>What is A Value Type</h2><p>The first question we need to qualify is, “What types in .NET are referred to as Value types?  Common value types are int, double, float, decimal, and bool.  What we ypically refer to as “primitives”.  But, there are other types that are also value types.  Enums, structs, and DateTime(because it is a struct) are also value types.</p>\n<h2 id=\"What-is-a-Reference-Type\"><a href=\"#What-is-a-Reference-Type\" class=\"headerlink\" title=\"What is a Reference Type\"></a>What is a Reference Type</h2><p>Reference types are any types in .NET that derive from a Class and require the “new” keyword in order to have an instance of a variable of that type. Why didn’t I just say, “any type that derives from a Class?”  Well, the fact of the matter is that every type in .NET derives from a Class.  The top most class is “Object”.  All of the value types derive from the subclass of Object named, “System.ValueType”.</p>\n<h2 id=\"What-Happens-In-Memory\"><a href=\"#What-Happens-In-Memory\" class=\"headerlink\" title=\"What Happens In Memory\"></a>What Happens In Memory</h2><p>But it is what happens in memory when we use these variable types that is of interest to us. When you declare a variable that is a Value type and then assign a value to it, the memory that variable occupies holds the value you assigned to it.  The variable is just a representation of the actual value. Contrast this to a reference type.  When you new up (instantiate) a variable that is a reference type, the first thing that is happening is that memory is being allocated to hold the variables in the class and then memory is being set aside to hold a pointer to the memory we just allocated. So, with a reference type, we are only pointing to the memory we are actually using.  With a value type the variable IS the value we are using. This has implications to how the memory is used when we do assignments.</p>\n<h2 id=\"Value-Example\"><a href=\"#Value-Example\" class=\"headerlink\" title=\"Value Example\"></a>Value Example</h2><p>For example, look at the code below.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a = b;</span><br></pre></td></tr></table></figure>\n\n<p>When we assign b to a, we are copying the value occupied by b into the memory location occupied by a.</p>\n<h2 id=\"Reference-Example\"><a href=\"#Reference-Example\" class=\"headerlink\" title=\"Reference Example\"></a>Reference Example</h2><p>But what happens when we do the same thing with a reference type?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> Name;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">joe.Name = <span class=\"string\">&quot;Joe&quot;</span>;</span><br><span class=\"line\">joe.age = <span class=\"number\">23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> alice = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">alice.Name = <span class=\"string\">&quot;alice&quot;</span>;</span><br><span class=\"line\">alice.age = <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">joe = alice;</span><br><span class=\"line\">joe.age = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What will be the value of alice.age? You should say 50 because once we assigned alice to joe, alice and joe point to the same Person object and the Person object that alice pointed to is no longer available.</p>\n<h2 id=\"How-About-Structs\"><a href=\"#How-About-Structs\" class=\"headerlink\" title=\"How About Structs?\"></a>How About Structs?</h2><p>But what happens if we make the Person class a struct instead?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> Name;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person joe;</span><br><span class=\"line\">joe.Name = <span class=\"string\">&quot;Joe&quot;</span>;</span><br><span class=\"line\">joe.age = <span class=\"number\">23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Person alice;</span><br><span class=\"line\">alice.Name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">alice.age = <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">joe = alice;</span><br><span class=\"line\">joe.age = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now, what is the value of alice.age? In this case, you should say that alice is still 33 because when we assigned alice to joe, joe got a copy of everything that alice had. So, joe’s name is “alice” and before we asign 50 to joe.age, joe.age holds the value of 33.  But the assignment has no impact on the value of alice.age.</p>\n<h2 id=\"Stacks-And-Heaps\"><a href=\"#Stacks-And-Heaps\" class=\"headerlink\" title=\"Stacks And Heaps\"></a>Stacks And Heaps</h2><p>Now, no description of value types and reference types would be complete without some discussion of stacks and heaps. The stack is the location in memory that holds value types and reference pointers (remember I said the variable points to the memory being occupied by the value?) in your method. So when you declare a variable inside of a method that memory gets “Pushed” onto the stack. When you pass a variable to another method, that variable gets copied into a temporary variable and placed on the stack. So, doing something like</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">23</span>;</span><br><span class=\"line\">    Foo2(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\"><span class=\"built_in\">int</span> f</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something with f</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>will copy 23 so that the variable f in Foo2 will not be the variable i in Foo. So if we change the value of f in Foo2 to 32, what will be the value of i when Foo2 returns? Because it is a copy, it will still be 23. The heap, on the other hand, is a location in memory that is outside of the scope of the methods we create.  So the only thing being passed around in our functions that use reference variables is pointers.  But, because they are pointers, any thing we do do a reference object inside of a method will be reflected in the variable located inside of the method that called it.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    p.age = <span class=\"number\">24</span>;</span><br><span class=\"line\">    Foo2(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\">Person person</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    person.age = <span class=\"number\">44</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So when Foo2 returns, p.age will be 44. However, if we change what person is pointing to…</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\">Person person</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.age = <span class=\"number\">44</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p would remain unchanged and p.age would still be 24.</p>\n<h2 id=\"Values-Inside-of-a-Class\"><a href=\"#Values-Inside-of-a-Class\" class=\"headerlink\" title=\"Values Inside of a Class\"></a>Values Inside of a Class</h2><p>The final question that you should be asking at this point is when I declare a value type as a member variable of my class, as I’ve done with the age variable in Person above, where is the age variable located, on the stack or on the heap? The answer to that would be it is located in the heap because it is a member of a class that is located in the heap.  And if we created another person object inside of person, the pointer would also be located in the heap and it would point to another location of the heap.</p>\n",
            "tags": [
                "programming",
                "c#",
                "reference types",
                "value types",
                "objects"
            ]
        },
        {
            "id": "http://davembush.github.com/c-properties-get-and-set/",
            "url": "http://davembush.github.com/c-properties-get-and-set/",
            "title": "C# Properties Get and Set",
            "date_published": "2014-11-13T12:00:00.000Z",
            "content_html": "<p>My son is learning to program.  Last week he asked me to explain C# properties get and set and, as it turns out, it looks like many others are asking for the same.  So, I’ve decided to spend the time on this post, explaining getters and setters in about as much detail as one can expect. So here it goes…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Member-Variables\"><a href=\"#Member-Variables\" class=\"headerlink\" title=\"Member Variables\"></a>Member Variables</h2><p>So, a class has “member variables” that are typically scoped as private, although they could be (but shouldn’t be) scoped as public.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> _someMemberIntegerVariable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Inside the class definition but not in the methods.  You’ll also sometimes see this referred to as a “field”.  I call them “member variables” because that is what I learned them as back when I was programming C++.</p>\n<h2 id=\"Local-Variables\"><a href=\"#Local-Variables\" class=\"headerlink\" title=\"Local Variables\"></a>Local Variables</h2><p>If the variable is in a method, it is called a “local variable”</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SomeMethod</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> someLocalIntegerVariable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class-“State”\"><a href=\"#Class-“State”\" class=\"headerlink\" title=\"Class “State”\"></a>Class “State”</h2><p>Now, the reason we have member variables is because they hold the “state” of the object.  For example, you might have a person class (typical example).  The Person class would have a firstName, lastName, birthDate as member variables so that when the class is created (and becomes an object) they can hold the state of the person. “Dave”, “Bush”, 6&#x2F;20&#x2F;61.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date _birthDate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Old-Time-Get-and-Set\"><a href=\"#Old-Time-Get-and-Set\" class=\"headerlink\" title=\"Old Time Get and Set\"></a>Old Time Get and Set</h2><p>Now, in the old days (my C++ days) we’d just make those member variables public so that any other class could access them directly.  The problem with that is that any other class could access them directly leaving our class unable to control what exactly came into them.  And so, some gatekeeping was added.  In C++ and Java, that was done with setter methods and getter methods.  In Java that may have changed since the days I programmed in Java, but they started that way at least. That is, setFirstName(string name), setLastName(string name), setBirthDay(date birthday)</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _lastName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date _birthDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setFirstName</span>(<span class=\"params\">firstName</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _firstName = firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setLastName</span>(<span class=\"params\">lastName</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setFirstName</span>(<span class=\"params\">Date birthDate</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _birthDate = birthDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  and to retrieve them…. getFirstName(), getLastName(), getBirthDate() the setters and getters are public (or protected, or private as needed) but the member variables are always private so that only the class they are declared in can access them. Inside the setter, we make sure the data is valid before we set the member variable, or possibly do some sort of computation before we store it, or even pass it on to some other location. But as far as anyone using the class is concerned, it is set setting a value and when it calls the getter, it retrieves the value, or something similar.</p>\n<h2 id=\"C-Properties-Get-and-Set\"><a href=\"#C-Properties-Get-and-Set\" class=\"headerlink\" title=\"C# Properties - Get and Set\"></a>C# Properties - Get and Set</h2><p>So along comes C# and that language says, “having a getter method and a setter method is pretty dumb, we should syntactically stich them together.” And so they came up with properties The syntax for that is</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> datatype _propertyName;</span><br><span class=\"line\"><span class=\"keyword\">public</span> datatype PropertyName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> _propertyName;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>&#123;_propertyName = <span class=\"keyword\">value</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which is all declared inside a class.  The member variable doesn’t have to be named the same as the property, but it often is .  It is customary to name member variables with a leading underscore.  Local variables start with a lowercase character. So, properties and member variables are distinct. Although, you may have thought they were essentially the same thing. At the end of the day, once they are compiled, properties are just methods. But syntactically, you access them as though they were variables.  In fact, if you looked at a property in Intermediate Language (IL), the language that all .NET code compiles to, you would see that it is just a method. To access a property from within your code, you would access it as</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someObject.FirstName = <span class=\"string\">&quot;Dave&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">someVariable = someObject.FirstName;</span><br></pre></td></tr></table></figure>\n\n<p>the only reason they exist at all is to keep the outside world (outside the class) from stomping on the member variables of the class directly. The compiler does for us what the old timers did (and the Java guys still do) using getMethod and setMethod So, as it turns out, we need all that gatekeeping, but the fact of the matter is, many times we don’t. When I was teaching, I’d have guys say, “if I don’t need the gatekeeper, why even bother with the properties?” Which is kind of a valid point But I always countered, “But what if you eventually do?</p>\n<h2 id=\"Enhanced-Properties\"><a href=\"#Enhanced-Properties\" class=\"headerlink\" title=\"Enhanced Properties\"></a>Enhanced Properties</h2><p>I think Microsoft heard that so they embellished the language so that we don’t have to declare the member variable if all we are going to do is just pass the data on through to it. That syntax is</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> dataType PropertyName &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>the compiler generates the member variable for you So if I wanted to actually do something with the member variable, you would need to declare the member variable. It depends on what you were going to do with it. If you just wanted to retrieve the data at some other point in your application, you’d just use the property.  But if you needed to manipulate the data as it was being set or retrieved, you’d have to use the original syntax. And that’s properties up until today.</p>\n",
            "tags": [
                "c#",
                ".net",
                "get",
                "properties",
                "set"
            ]
        },
        {
            "id": "http://davembush.github.com/why-get-certified/",
            "url": "http://davembush.github.com/why-get-certified/",
            "title": "Why Get Certified?",
            "date_published": "2014-07-24T17:00:00.000Z",
            "content_html": "<p>Last week I mentioned that I’m working toward getting my MCSD certification.  Several weeks ago I received my <a href=\"//www.scrumalliance.org/community/profile/dbush2\">ScrumMaster Certification</a>.  This raises the question, “Why get certified at all?” What follows is a list of reasons why I am perusing certification.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"I-don’t-know-what-I-don’t-know\"><a href=\"#I-don’t-know-what-I-don’t-know\" class=\"headerlink\" title=\"I don’t know what I don’t know\"></a>I don’t know what I don’t know</h2><p>I know what I know.  And I can figure stuff out pretty fast when I need to know it.  So working without certification has been working for me for a pretty long time.  However, while I was studying for my ScrumMaster Certification, I realized that while I had most of the concepts right, there where a few holes in my thinking.  Studying for the ScrumMaster certification filled in those holes.</p>\n<h2 id=\"Authority\"><a href=\"#Authority\" class=\"headerlink\" title=\"Authority\"></a>Authority</h2><p>The reason I went after ScrumMaster certification was because everywhere I go, everyone has  their own definition of what Scrum looks like.  Most of them only know about Scrum from what they’ve heard about it from very informal sources. Only one that I know of is certified. But when I was talking about Scrum or Agile, it was my opinion against someone else’s opinion.  While I was sure I was right, if I were honest about it I had no more reason to believe I was right than anyone else. Now, with the certification, I have someone else saying I know what I’m talking about.  And since I got 100% of the 30, rather difficult, questions right, I have a higher confidence that my understanding of the subject is correct.</p>\n<h2 id=\"Fear\"><a href=\"#Fear\" class=\"headerlink\" title=\"Fear\"></a>Fear</h2><p>After I passed the test for the ScrumMaster certification, I realized that I am afraid of tests.  I used to say that all a certification did was show that you could pass a test.  But I’ve realized recently that that may have just been a cover because I didn’t want to take the test and fail. So, the reason I’m going after my MCSD is because I’m afraid of the test.  So, I fail.  So what?  At least in the process of studying for the test I’ll learn a few things.  The worse thing that can happen is that I don’t get the certification.  Ironically, from that point of view, not trying to get certified puts me in the same, if not worse, situation.  Not studying means no certification AND I haven’t learned anything in the process of studying for the exams.</p>\n<h2 id=\"Birds-of-a-feather\"><a href=\"#Birds-of-a-feather\" class=\"headerlink\" title=\"Birds of a feather\"></a>Birds of a feather</h2><p>I find it interesting that I personally only know one person who has their  MCSD.  Could that be because I don’t have MY MCSD?  Could it be that the organizations where all of the people who have their MCSD only hire people who have their MCSD?  I know several really good programmers.  Only one has their MCSD.  The others could get it if they wanted to.  But are they stuck in their current position because they aren’t certified?  It’s worth finding out.</p>\n<h2 id=\"The-test-isn’t-a-joke-anymore\"><a href=\"#The-test-isn’t-a-joke-anymore\" class=\"headerlink\" title=\"The test isn’t a joke anymore\"></a>The test isn’t a joke anymore</h2><p>For the longest time, my attitude about the test, as I mentioned above, was that it only showed that you could pass the test.  It didn’t really say you knew how to program or that you knew how to use the APIs.  I’m not the only one who felt this way.  Do a search online and you’ll find statements from years ago that say as much. While I’m sure it might be possible to pass the exams and still know nothing about how to program or how to use the APIs, it does seems that Microsoft is doing a much better job at ensuring that people who pass this certification can actually do the work as well.</p>\n<h4 id=\"Other-places-talking-about-the-MCSD\"><a href=\"#Other-places-talking-about-the-MCSD\" class=\"headerlink\" title=\"Other places talking about the MCSD\"></a>Other places talking about the MCSD</h4><ul>\n<li><a href=\"/pluralsightMCSDpath\" title=\"MCSD Learning Path\">PluralSight Learning Path for MCSD</a></li>\n</ul>\n",
            "tags": [
                "c#",
                "certification",
                "mcsd",
                "microsoft"
            ]
        },
        {
            "id": "http://davembush.github.com/csharp-idisposable-confusion/",
            "url": "http://davembush.github.com/csharp-idisposable-confusion/",
            "title": "CSharp IDisposable Confusion",
            "date_published": "2014-07-17T17:00:00.000Z",
            "content_html": "<p>I’m planning to get my MCSD certification next and the first exam I plan to take is the 70-483 which will test my knowledge of CSharp. To study, I got this free PDF: <a href=\"//www.it-ebooks.info/book/2564/\">MCSD Certification Toolkit (Exam 70-483)</a> (Which I wouldn’t recommend, but I haven’t found anything yet that I WOULD recommend, so this will have to do.) In this book (Chapter 5) and other places on the web, it makes this statement:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>If a class contains no managed resources and no unmanaged resources, it doesn’t need to implement IDisposable or have a destructor.</li>\n<li>If the class has only managed resources, it should implement IDisposable but it doesn’t need a destructor. (When the destructor executes, you can’t be sure managed objects still exist, so you can’t call their Dispose methods anyway.)</li>\n<li>If the class has only unmanaged resources, it needs to implement IDisposable and needs a destructor in case the program doesn’t call Dispose.</li>\n<li>The Dispose method must be safe to run more than once.  You can achieve that by using a variable to keep track of whether it has been run before.</li>\n<li>The Dispose method should free both managed and unmanaged resources.</li>\n<li>The destructor should free only unmanaged resources.  (When the destructor executes, you can’t be sure managed objects still exist, so you can’t call their Dispose methods anyway.)</li>\n<li>After freeing resources, the destructor should call GC.SuppressFinalize, so the object can skip the finalization queue.</li>\n</ul>\n<h2 id=\"Managed-VS-Unmanaged\"><a href=\"#Managed-VS-Unmanaged\" class=\"headerlink\" title=\"Managed VS Unmanaged?\"></a>Managed VS Unmanaged?</h2><p>So what is the difference between a managed resource and an unmanaged resource?  An unmanaged resource is something that is not under the direct control of the .NET memory manager.  So, file handles, connections to the database, memory handles, and other OS items fall under the realm of “unmanaged.”  Managed code is everything else. So, if you read the points above and read the statements about managed resources, you would think, or should think, “That’s already under the control of the .NET memory manager, so I shouldn’t have to do ANYTHING!” But with one little tweak, this all becomes clear.  What this block of text is talking about specifically is managed code that is referencing other code that implements IDisposable.</p>\n<h2 id=\"Corrected-Version\"><a href=\"#Corrected-Version\" class=\"headerlink\" title=\"Corrected Version\"></a>Corrected Version</h2><p>So, let’s rephrase the block of text to the following:</p>\n<ul>\n<li>If a class contains no managed resources that implement IDisposable and no unmanaged resources, it doesn’t need to implement IDisposable or have a destructor.</li>\n<li>If the class has only managed resources that reference resources that implement IDisposable, it should implement IDisposable but it doesn’t need a destructor. (When the destructor executes, you can’t be sure managed objects still exist, so you can’t call their Dispose methods anyway.)</li>\n<li>If the class has only unmanaged resources, it needs to implement IDisposable and needs a destructor in case the program doesn’t call Dispose.</li>\n<li>The Dispose method must be safe to run more than once.  You can achieve that by using a variable to keep track of whether it has been run before.</li>\n<li>The Dispose method should free both managed resources that implement IDisposable and unmanaged resources.</li>\n<li>The destructor should free only unmanaged resources.  (When the destructor executes, you can’t be sure managed objects still exist, so you can’t call their Dispose methods anyway.)</li>\n<li>After freeing resources, the destructor should call GC.SuppressFinalize, so the object can skip the finalization queue.</li>\n</ul>\n<h2 id=\"One-Other-Circumstance\"><a href=\"#One-Other-Circumstance\" class=\"headerlink\" title=\"One Other Circumstance\"></a>One Other Circumstance</h2><p>There is one other situation where you might want to implement IDisposable on a class that doesn’t reference an object that implements IDisposable.  While this particular case is rare, I think it is probably good to list it here for completeness. If you have a class that will consume a lot of memory either directly or indirectly, you might want to consider implementing IDisposable and the Dispose method so that any class that is calling this method has a way of immediately releasing the memory the class is using by dereferencing the memory it is using, and then calling:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GC.Collect();</span><br><span class=\"line\">GC.WaitForPendingFinalizers();</span><br><span class=\"line\">GC.Collect();</span><br></pre></td></tr></table></figure>\n\n<p>I can already hear some of you saying, “but you shouldn’t have to ever need to do this!” And yes, 99% of the time, you shouldn’t.  But, if you have an issue with this, talk to <a href=\"//www.microsoftvirtualacademy.com/training-courses/developer-training-with-programming-in-c\">the guys over at the Microsoft Virtual Academy</a> where I learned this.</p>\n<h4 id=\"Other-Places-Talking-About-IDisposable-and-NET-Memory-Management\"><a href=\"#Other-Places-Talking-About-IDisposable-and-NET-Memory-Management\" class=\"headerlink\" title=\"Other Places Talking About IDisposable and .NET Memory Management\"></a>Other Places Talking About IDisposable and .NET Memory Management</h4><ul>\n<li><a href=\"//coding.abel.nu/2011/12/idisposable-and-using-in-c/\">IDisposable and Using in C#</a></li>\n<li><a href=\"//manski.net/2012/01/idisposable-finalizer-and-suppressfinalize/\">IDisposable, Finalizer, and SuppressFinalize in C# and C++</a></li>\n<li><a href=\"//manski.net/2012/01/idisposable-finalizer-and-suppressfinalize/\">Common Pitfalls with IDisposable and Using</a></li>\n<li><a href=\"//www.technofranchise.com/c-memory-management/\">CSharp Memory Management</a></li>\n<li><a href=\"//www.go4expert.com/articles/disposal-garbage-collection-c-sharp-t30059/\">Disposal and Garbage Collection in CSharp</a></li>\n</ul>\n",
            "tags": [
                "c#",
                "idisposable"
            ]
        },
        {
            "id": "http://davembush.github.com/csharp-numeric-overflows/",
            "url": "http://davembush.github.com/csharp-numeric-overflows/",
            "title": "CSharp Numeric Overflows",
            "date_published": "2014-07-03T17:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/06/NumericOverflow.png\" alt=\"NumericOverflow\" title=\"NumericOverflow\">Did you know that when you are dealing with numbers, by default, .NET will do, or try to do exactly what you tell it to do?  If you tell it to do the impossible, it will do the next most logical thing.  It won’t throw any errors in the process.</p>\n<p>No, neither did I.  But then, most of the time I don’t write code where this would matter, and I bet you don’t either.</p>\n<p>So here are some examples.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Integer-Types\"><a href=\"#Integer-Types\" class=\"headerlink\" title=\"Integer Types\"></a>Integer Types</h2><p>What happens if you write code that looks like this?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">long</span> l = <span class=\"built_in\">long</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) l;</span><br></pre></td></tr></table></figure>\n\n<p>Well, if we are working with the compiler set with default settings, you’ll end up with the variable l having the value of 9223372036854775807 and the value of i having the value of -1.</p>\n<p>Why is this?  Because, by default, .NET does not check for numeric overflow.</p>\n<p>However, if you wanted to add the ability to check for numeric overflow, you would wrap this code in a checked block.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    checked</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">long</span> l = <span class=\"built_in\">long</span>.MaxValue;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> i;</span><br><span class=\"line\">        i = (<span class=\"built_in\">int</span>)l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle overflow exception here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can force all of your code to be checked by changing your compiler settings.  In Visual Studio 2013, go to Project Properties –&gt; Build.  Click the “Advanced” button (bottom right corner) and then check the “Check for … overflow” checkbox.</p>\n<p>Once you’ve done that, all of your code will be checked by default.  If you don’t want to check for overflows while you are working on a block of code, for performance reasons, wrap the code in an unchecked block instead.</p>\n<h2 id=\"Float-to-Int\"><a href=\"#Float-to-Int\" class=\"headerlink\" title=\"Float to Int\"></a>Float to Int</h2><p>Now, what about putting a floating point number in an integer?</p>\n<p>Let’s say that instead of a long, we use a float.</p>\n<p>First, let’s look at a simple case:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> l = <span class=\"number\">3.563f</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) lf</span><br></pre></td></tr></table></figure>\n\n<p>In this case, you’ll end up with f holding a floating point number of 3.563 and i holding an integer of 3.  The rule is pretty simple, floats always have the decimal portion stripped off and assigned to the integer, short, or long.</p>\n<h2 id=\"Large-Float-to-Int\"><a href=\"#Large-Float-to-Int\" class=\"headerlink\" title=\"Large Float to Int\"></a>Large Float to Int</h2><p>But what happens if we use float.MaxValue?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> f = <span class=\"built_in\">float</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) f;</span><br></pre></td></tr></table></figure>\n\n<p>In this case, what you’ll end up with is a very large floating point number and an integer of -2147483648.  Basically it does it’s best to convert a really large integer number into the int and just uses what it can.  Not really what you probably have in mind.</p>\n<p>The solution is the same.  Use a checked block or compile with checked turned on.</p>\n<h2 id=\"Double-to-Float\"><a href=\"#Double-to-Float\" class=\"headerlink\" title=\"Double to Float\"></a>Double to Float</h2><p>Now, you would expect that if I had a really large double and tried to assign that to a float, something similar would happen. </p>\n<p>You’d be right, kind of.</p>\n<p>If you assign a double that is too large for a float to a float variable, the float variable will end up with infinity.  But, unlike the shorts, ints, and longs, you can’t wrap the code in a checked block to cause it to throw an exception.  No.  In this case you must always check for infinity once you’ve done the assignment.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"built_in\">double</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">float</span> f;</span><br><span class=\"line\">f = (<span class=\"built_in\">float</span>)d;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">float</span>.IsInfinity(f))</span><br><span class=\"line\">    <span class=\"comment\">// do something intelligent here</span></span><br></pre></td></tr></table></figure>\n\n<p>So there you have it.  This is how you really deal with numeric casting in your CSharp code.</p>\n",
            "tags": [
                "c#",
                "checked",
                "double",
                "float",
                "int",
                "long",
                "short",
                "unchecked"
            ]
        },
        {
            "id": "http://davembush.github.com/csharp-enum/",
            "url": "http://davembush.github.com/csharp-enum/",
            "title": "CSharp Enum",
            "date_published": "2013-10-02T16:57:23.000Z",
            "content_html": "<p><img src=\"/uploads/2008/11/tp-vol4-002.jpg\" alt=\"tp_vol4_002\"> It is often tempting when working with your code to test against static values in your system.  For example:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>Or, if you are a bit more clever, you use a switch statement instead.  But neither of these methods tell you what 1 and 2 actually represent. Now, you could use constants:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span> Thing1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">int</span> Thing2 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i == Thing1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == Thing2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which goes a bit further.  But if I need to use Thing1 and Thing2 in other sections of my code, I’m kind of stuck.  Oh, I guess one could use a class with properties and evaluate against them, but there is a better way. Enums. When you have a set of items that are all related to each other, you can create an enumeration (enum) to represent them as a set.  There are several of these built into the .NET Framework.  One of the most common is the DialogResult enum that holds all of the return values for a DialogBox. We can create our own by either placing code similar to the following in an existing file or in a new code file:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Thing &#123;</span><br><span class=\"line\">    One,</span><br><span class=\"line\">    Two</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which can then be used in our code as:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Thing.One:</span><br><span class=\"line\">        <span class=\"comment\">// do something break;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> Thing.Two:</span><br><span class=\"line\">        <span class=\"comment\">// do something break;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the example above One represents zero and Two represents the value of one.  But it really doesn’t matter because we are always going to reference the value by name. You are not stuck with having to have Thing.One be one.  You can assign a value to it or any of the other values.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Thing &#123;</span><br><span class=\"line\">    One =<span class=\"number\">2</span>,</span><br><span class=\"line\">    Two</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the code above, One equals the value 2 and Two equals 3.  Each item in the list is automatically incremented by one unless it is overwritten with a value. In the case of items that need to be bit representations you can do something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Thing &#123;</span><br><span class=\"line\">    BitOne = <span class=\"number\">1</span>,</span><br><span class=\"line\">    BitTwo = <span class=\"number\">2</span>,</span><br><span class=\"line\">    BitThree = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then your code can evaluate them using bit wise and statements:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((i &amp; Thing.BitTwo) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This will be true if i is equal to 2, 3, 6, or 7.  The expression above is a lot easier to evaluate than “if i is equal to 2, 3, 6 or 7.” Aside from the practical ease of coding that enums provide, it also makes the code much clearer.  Which would you rather do?  Lookup what the return value for OK is or just have intellisense provide it to you from the DialogResult enum?  Obviously, having it provided by its name is much easier.  You should provide the same benefit to any future developer who works on YOUR code.</p>\n",
            "tags": []
        },
        {
            "id": "http://davembush.github.com/dispose-finalize-and-suppressfinalize/",
            "url": "http://davembush.github.com/dispose-finalize-and-suppressfinalize/",
            "title": "Dispose, Finalize and SuppressFinalize",
            "date_published": "2013-06-12T08:04:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/fooddrk017.jpg\" alt=\"food-drk-017\" title=\"food-drk-017\"> I got the following question recently.</p>\n<blockquote>\n<p>What is the difference between Dispose and SupressFinalize in garbage collection?”</p>\n</blockquote>\n<p>The problem with this question is it assumes Dispose and SupressFinalize have similarities, which I’m sure is not what is being asked here.  So let’s rephrase it in terms that make sense.</p>\n<blockquote>\n<p>I see three methods available to me in .NET that all seem to have something to do with garbage collection.  Can you explain what Dispose, Finalize, and SupressFinalize do and why I could use or call each one in my code?”</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>Now, that’s something we can answer.</p>\n<h2 id=\"A-Brief-History-of-Memory-Management\"><a href=\"#A-Brief-History-of-Memory-Management\" class=\"headerlink\" title=\"A Brief History of Memory Management\"></a>A Brief History of Memory Management</h2><p>Before we answer the question, we need to review how memory management works in .NET compared to historical languages such as C&#x2F;C++.</p>\n<p>In the old days, if an application allocated memory on the heap (generally done with the “new” keyword in CSharp) the application was also responsible for releasing the memory.  In languages such as C++, this was done with the “delete” keyword which triggered a call to a special method called a destructor.  If the object was holding on to memory or other resources, it was the destructor’s job to release those resources.</p>\n<p>In .NET memory is deallocated for us using garbage collection.  We no longer call the destructor using anything like a delete keyword and the deallocation process happens at some point in time that is after the memory goes out of scope.  This might be immediately after the object goes out of scope or it could be hours or days.</p>\n<p>Generally, this is not a problem, but what about an object that is holding on to additional resources that need to be freed up right away? For that we have the Dispose() method.</p>\n<h2 id=\"Dispose-is-the-new-destructor\"><a href=\"#Dispose-is-the-new-destructor\" class=\"headerlink\" title=\"Dispose is the new destructor\"></a>Dispose is the new destructor</h2><p>While we don’t need a destructor to handle our memory, we do need something to release resources.</p>\n<p>This is why the IDisposable interface was created with one method that needs to be implemented called Dispose().</p>\n<p>If your class allocates resources that need to be freed up that aren’t memory, you should implement the IDisposable interface on that class and implement the Dispose() method.  Inside that method, you would release any resources that the class may have created and not freed.</p>\n<h2 id=\"Dispose-will-then-automatically-get-called-by-Finalize\"><a href=\"#Dispose-will-then-automatically-get-called-by-Finalize\" class=\"headerlink\" title=\"Dispose() will then automatically get called by Finalize()\"></a>Dispose() will then automatically get called by Finalize()</h2><p>When the garbage collector starts releasing memory, one of the things it will do is that it will go through your code and call Finalize() on each of the objects.  Finalize() will then call any dispose methods that are available.</p>\n<p>This is done to protect the programmer from himself, not because it is expected.  Remember I said the memory will get freed up at some indeterminate point in the future but the Dispose() method was created so we could free up the resources right away? What we really want to do is call Dispose() ourselves.  We call Dispose from our own code.  Finalize() only exists so that Dispose() will get called if we don’t.</p>\n<h2 id=\"And-that’s-where-SupressFinalize-fits-in\"><a href=\"#And-that’s-where-SupressFinalize-fits-in\" class=\"headerlink\" title=\"And that’s where SupressFinalize() fits in.\"></a>And that’s where SupressFinalize() fits in.</h2><p>If my code calls Dispose() then there is no reason for the Finalizer to run at all.  Without SupressFinalize() we would need to set a flag in our class indicating that Dispose() had already been called so that when Finalize() called it, we didn’t re-run the clean up code.</p>\n<p>With SupressFinalize() we can just call SuppressFinalize() from within Dispose() and that will tell .NET to not run the Finalize method when it gets to our object.</p>\n<p>Your call to SupressFinalize() should almost always look like</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<p>but you can pass in any object instead of “this.”</p>\n",
            "tags": [
                "c#",
                "idisposable",
                "dispose",
                "finalize",
                "suppressfinalize"
            ]
        },
        {
            "id": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "url": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "title": "Decimal vs Float (Single) or Double",
            "date_published": "2012-09-18T09:17:13.000Z",
            "content_html": "<p><img src=\"/uploads/2008/10/money-016.jpg\" alt=\"money-016\"> When you need to deal with a number that is a fraction, what do you specify for its type?  If you are like most programmers I know, you’ll reach for Float (Single if you are using VB) or Double.</p>\n<p>If you are working with currency, though, this could get you into a lot of trouble.</p>\n<p>Here’s why.</p>\n<span id=\"more\"></span>\n\n<p>When you store a number into a float, you are not storing an exact number.  This is because the number you are storing is an approximation of the number you entered.  When you store a number, the integer portion of the number gets priority and the fractional part gets entered as close as is possible given the size of the type you are storing it as.</p>\n<p>That is, a Double will be able to save the information more accurately than the Float, but neither of them will store the information precisely.</p>\n<p>And that’s just storing a number we enter directly.  What happens if we need to multiply or divide that number?</p>\n<p>For simplicity, let’s just say we need to divide a dollar by three.  How would that get stored accurately into a float or a double?  The answer is that it won’t.  It will store as many threes on the right side of the decimal as possible.</p>\n<p>This is what the Decimal data type was created for.  A decimal data type deals with the data more like we would if we were dealing with the problem with paper and pencil.  In effect, a decimal data type is similar to an integer that has a decimal point.</p>\n<p>Let me illustrate.  Let’s imagine that we have an integer that holds our value and another that holds how many decimal places the value has.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> mainValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> decmialPlaces;</span><br></pre></td></tr></table></figure>\n\n<p>To represent a dollar we would say:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = <span class=\"number\">100</span>;</span><br><span class=\"line\">decimalPlaces = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now, we want to divide our dollar by three:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = mainValue / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>obviously, mainValue will end up with 33 as a value, which means our result is .33, exactly what we would expect if we did this computation by hand.</p>\n<p>If we multiplied the result by 3, we’d get .99, which is what we’d expect.  We still have to account for that lost penny, but we would deal with the lost penny using standard accounting practices.</p>\n<p>Fortunately, we don’t have to go to all that trouble because this is exactly why the decimal type was created for us.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">decimal</span> money = <span class=\"number\">1.00</span>M;</span><br><span class=\"line\">money = money / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>I once went to consult in a project that was entirely currency based.  It was basically an accounting package.  This application was not only dealing with money, but it also had to deal with conversion rates between countries.  They wanted to know why they were losing pennies when they converted from one currency to another when the entire application was using floats (not even doubles) instead of decimal values.  That handled most of the problem for them.  The second recommendation I had was to choose a base currency type and always convert from that currency to all the other countries rather than converting from country A to country B and then back to country A.</p>\n",
            "tags": [
                "double",
                "float",
                "currency",
                "decimal",
                "floating point math",
                "single"
            ]
        },
        {
            "id": "http://davembush.github.com/vs-and-vs-what-s-the-difference/",
            "url": "http://davembush.github.com/vs-and-vs-what-s-the-difference/",
            "title": "&& vs & and | vs ||... What's the difference?",
            "date_published": "2012-08-21T08:12:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/03/color-01.jpg\" alt=\"color-01\"> It seems like such a trivial thing to be talking about but not knowing the difference between &amp;&amp; vs &amp; or || vs | can make a huge difference between working code and code that only seems to work. Let me illustrate:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">bool</span> c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(b &amp; c) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something if(b &amp;&amp; c)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// do something</span></span><br></pre></td></tr></table></figure>\n\n<p>In the code above, both b &amp; c and b &amp;&amp; c evaluate to false, so  we are safe.  No problems.  But this leads us to believe that the following code is also safe:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(s != <span class=\"literal\">null</span> &amp; s.Length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something if(s != null &amp;&amp; s.Length &gt; 0)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// do something</span></span><br></pre></td></tr></table></figure>\n\n<p>and this is what would get you in trouble. The single ampersand and single pipe are knows as “bitwise operators.”  What this means in practical terms is that they will take whatever they find on BOTH sides of the operator and AND (&amp;) or OR(|) them together. So in the case of:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(s != <span class=\"literal\">null</span> &amp; s.Length &gt; <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>s.Length &gt; 0 will still get evaluated even if s is null.  Not exactly what we had in mind. There is another side effect of bitwise operators that gets used very infrequently.  Because they are bitwise, I can use them on integers as well as boolean values.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i= <span class=\"number\">5</span> &amp; <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n\n<p>is a perfectly legal construct in CSharp.  It will AND all the bits that make up 5  (101) and all the bits that make up 4 (100) and store the result in i (4 or 100). On the other hand, &amp;&amp; and || are strictly used for boolean expressions and will evaluate as little of the expression as they can get away with. This is why we can write:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span> &amp;&amp; s.Length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If s is null, we already know that the expression will fail, so there is no need to evaluate the string’s length. And now for one of my favorite binary statements.</p>\n<p>There are 10 types of people in the world.  Those who understand binary and those who don’t.</p>\n",
            "tags": [
                "boolean",
                "binary",
                "bitwise",
                "operators"
            ]
        },
        {
            "id": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "url": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "title": ".Net String Pool – Not Just For The Compiler",
            "date_published": "2009-04-22T08:34:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/b03b0055.jpg\" alt=\"B03B0055\" title=\"B03B0055\"> On Monday, I was corrected in my assertion that creating multiple empty strings would create multiple objects.  Turns out the compiler automatically puts all of the strings that are exactly the same in a “string pool” so that there is only ever one empty string in the entire application you’ve created.</p>\n<span id=\"more\"></span>\n\n<p>Duh! I should have known this, or at least I should have expected that this was so since it has been true with every other compiled language I’ve worked with.</p>\n<p>But what I didn’t know and couldn’t expect is that we can make use of this string pool programmatically as well.</p>\n<p><strong>Why would you want to do this yourself?</strong></p>\n<p>Keep in mind that string concatenation in .NET requires the creation of a new object.  So, code such as this,</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a += b;</span><br></pre></td></tr></table></figure>\n\n<p>creates a new object at line 3 every time it is executed.</p>\n<p>So that if we add the following line:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>we would not be pointing to the same object.  That is, a and b would contain the same content but would be pointing to two entirely different objects.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B contain the same data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (String.ReferenceEquals(a,b))</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B are the same object&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>String.Intern Consolidates The Data</strong></p>\n<p>By using String.Intern() we can get both evaluations to be true.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a = String.Intern(a + b);</span><br><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now both evaluations above will be true because line 3 places the string “abcdefgh” in the pool and line 4 uses that same string from the pool to assign to b.  Where we might have created two objects, we are now only creating one and referring to it both times.</p>\n<p>You could also use String.IsInterned(string) to determine if a string has already been placed in the string pool and execute optional code based on that.</p>\n<p><strong>When Would You Use This?</strong></p>\n<p>I still stand by my statement that optimizations should be saved for last.  You would not do this if this was the only place where you were doing the concatenation.  But you might consider doing this if your concatenations were in a loop that was taking a significant amount of processing time.</p>\n<p>Other things you might also want to consider would be to consolidate concatenations on the same line and&#x2F;or using the StringBuilder class for concatenations.  Keep in mind that StringBuilder is only really useful once you get past three concatenations due to the overhead of creating the StringBuilder object vs. creating new objects during the normal concatenation process.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                ".net",
                "string",
                "intern"
            ]
        },
        {
            "id": "http://davembush.github.com/c-%E2%80%9C%E2%80%9D-better-than-string-empty/",
            "url": "http://davembush.github.com/c-%E2%80%9C%E2%80%9D-better-than-string-empty/",
            "title": "C# “” better than string.Empty?",
            "date_published": "2009-04-20T08:43:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/arct013.jpg\" alt=\"arct-013\" title=\"arct-013\">I recently read an article that argued that “” is “Better than String.Empty”</p>\n<p>The argument is that since string.Empty doesn’t work in all situations, we should not use it at all.  He further argues that since the compiler can’t optimize code using string.Empty, the performance gains we might lose due to our lack of this optimization further supports the argument that we should not use it at all.</p>\n<p>But at what price?</p>\n<span id=\"more\"></span>\n\n<p>First, it is impressive that he took the time to evaluate the performance hit that using String.Empty can cause.  I’m pretty sure his evaluation of using String.Empty in a case statement is from his attempt to do so only to find out he couldn’t.</p>\n<p>However, he seems to have overlooked the price of not using String.Empty.  Certainly, Microsoft didn’t put that there without thinking about what they were doing.</p>\n<p>So let’s further evaluate what is happening in our code when we use “” rather than using String.Empty.</p>\n<p><strong>Consider Real World Optimization</strong></p>\n<p>In the article referenced, he does one, and only one, bench mark to prove that “” is faster than String.Empty by putting the code in a loop that could be optimized out.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.Empty == <span class=\"literal\">null</span>) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>vs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;&quot;</span> == <span class=\"literal\">null</span>) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>But what about a real world scenario where the code is NOT optimized out?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = String.Empty;</span><br></pre></td></tr></table></figure>\n\n<p>vs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String x = <span class=\"string\">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>In my test, there was no noticeable difference.  Sometimes string.Empty was faster and sometimes the empty string was faster.   And I expect the reason they are about the same is because the compiler optimized out the assignment.</p>\n<p>In real life, I would expect String.Empty to take just slightly longer.  But not enough to make it worth worrying about.</p>\n<p><strong>Consider String Comparison Cost</strong></p>\n<p>Second, string comparisons are notoriously expensive in every language I’ve ever worked in.  Including the .NET languages.  Instead of arguing that we can’t using String.Empty in a case statement, we would do better to argue that using a string in a case statement is the last of the possible alternatives we might use.</p>\n<p>When evaluating for the empty string, for example, you might check the string’s length rather than checking the string itself. For other strings, you might check the first character of the string.</p>\n<p><strong>Writing Code is About Solving Problems</strong></p>\n<p>When I started my career, computers were slow and had a limited amount of memory.  Writing the smallest amount of code that performed in the most efficient way was half the struggle of writing the application.</p>\n<p>Today, neither of those issues are of primary concern.  The first order of concern is to write an application that works.  Once it is DOING what it is supposed to do, IF there are performance issues, we should do proper code evaluation to determine where the performance bottlenecks are and then, and only then, should we optimize our code for performance.</p>\n<p>Generally, using String.Empty will serve you better than using “”.  In the cases where String.Empty will not work either because of the code evaluation OR because of the performance considerations, yes, use “” instead.  But, do it because there is a supportable reason, not because you think it may produce faster code.</p>\n<p>In fact, I would argue that if your code has performance problems, the last place you should be looking is at this issue.  You’ll get negligible gains. Your real problem is more likely in file IO, including database access and network access.</p>\n",
            "tags": [
                "c#",
                "empty",
                "string"
            ]
        },
        {
            "id": "http://davembush.github.com/just-say-%E2%80%9Cno-%E2%80%9D-to-c-regions-really/",
            "url": "http://davembush.github.com/just-say-%E2%80%9Cno-%E2%80%9D-to-c-regions-really/",
            "title": "Just say “No!” to C# Regions?  Really?!",
            "date_published": "2009-04-16T10:31:49.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/other042.jpg\" alt=\"other-042\" title=\"other-042\">  I just read a post by Casademora on “public abstract string[]  Blog()”</p>\n<p><a href=\"//extractmethod.wordpress.com/2008/02/29/just-say-no-to-c-regions/\">Just say No! to C# Regions « public abstract string[] Blog()</a></p>\n<p>and</p>\n<p><a href=\"//extractmethod.wordpress.com/2008/06/02/i-still-say-regions-are-not-usefulbut/\">I still say Regions are not useful… but…</a></p>\n<p>Arguing that not only should we NOT use code regions, but if we do, we are hiding “bad code.”  He uses words like “retarded,” “lame excuse for a preprocessor tag,” etc.</p>\n<span id=\"more\"></span>\n\n<p>You’d think maybe this guy (gal?) just had a bad day when he wrote this, but no, he goes on to further defend his position in a later post.</p>\n<p>And what I don’t understand at all is how his original post ended up on DotNetKicks today.  It’s an old post that was written last year but was just kicked up to the front page?  I figure someone MUST agree with him or it wouldn’t be there.</p>\n<p>So, are Regions really as evil as Casademora argues that they are?</p>\n<p><strong>First what is a region?</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">region</span> Member Variables</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _refreshState;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _isRefresh;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endregion</span> Member Variables</span></span><br></pre></td></tr></table></figure>\n\n<p>That’s a region.  See the #region and the #endregion preprocessor tags?  They define a named region in your code.</p>\n<p><strong>Why do they exist?</strong></p>\n<p>Any code you surround with a region is collapsible, just like your methods and properties are.  If you collapse the region above, all you see in your editor is:</p>\n<p><img src=\"/uploads/2009/04/image1.png\" alt=\"image\" title=\"image\"></p>\n<p><strong>Are they hiding “bad” code?</strong></p>\n<p>The main argument that Casademora makes is that the use of regions hides “bad” code.  He defines bad code as:</p>\n<p>Oh… wait!  He never defines “Bad” he only defines “Better.”</p>\n<p>But I doubt that anyone could argue that declaration of private member variables is “bad” in any sense of the word.  In fact this code is from one of the best programmers I know.  Here’s a screen grab of the methods in this file:</p>\n<p><img src=\"/uploads/2009/04/image2.png\" alt=\"image\" title=\"image\"></p>\n<p>And the code in those methods is just as pretty.  In fact, Mike’s code is consistently well structured, well organized, follows good naming conventions.  I wish my code looked as good.</p>\n<p>But when you first open the file, this is what you see:</p>\n<p><img src=\"/uploads/2009/04/image3.png\" alt=\"image\" title=\"image\"></p>\n<p>I don’t know about you, but I always feel like I’ve been hit with a breath of fresh air when I open Mike’s code.  Instead of being assaulted with 201 lines of code (that’s how many lines are in this file) I see this.</p>\n<p>So the question is, would Mike’s code be as organized without the regions?  So I asked him.</p>\n<p>He says, “I’d try to do it anyway, but the regions make it easier.  Like, if I need to add a new private method, I go right to that region.  I find it most useful to separate out the properties and event handlers.”</p>\n<p>So, contrary to Casademora’s statement, regions actually help Mike structure his code so that it is easy to read.  They aren’t hiding “bad” code.  If anything they are “hiding” good code.</p>\n<p><strong>Hiding Code is Good</strong></p>\n<p>When you are working on code with lots of properties, methods, and event handlers.  Do you really need to see the member variables at the same time you are working on an Event handler?  Most of the time we don’t.</p>\n<p>Regions, used correctly, make your code more readable, and hide code you aren’t working on so that you can easily find and work on the code you do need to work on.  That’s the whole point.</p>\n<p>I’m sure one could find uses of regions that have nothing to do with code structure.  Uses that obfuscate the code rather than making it easier to maintain.  But if you use the code in a logical way, they can significantly increase the readability of your code.</p>\n",
            "tags": [
                "c#",
                "regions"
            ]
        },
        {
            "id": "http://davembush.github.com/what-is-the-global-keyword-in-csharp/",
            "url": "http://davembush.github.com/what-is-the-global-keyword-in-csharp/",
            "title": "What is the global keyword in CSharp?",
            "date_published": "2008-12-29T12:01:15.000Z",
            "content_html": "<p>During the Christmas break, I received the following question: What does C# global keyword actually do? Code example, from table adapter code:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">global::System.CodeDom.Compiler.GeneratedCodeAttribute(<span class=\"string\">&quot;System.Data.Design.TypedDataSetGenerator&quot;</span>, <span class=\"string\">&quot;2.0.0.0&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.Serializable()</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.ComponentModel.DesignerCategoryAttribute(<span class=\"string\">&quot;code&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.ComponentModel.ToolboxItem(true)</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.Xml.Serialization.XmlSchemaProviderAttribute(<span class=\"string\">&quot;GetTypedDataSetSchema&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.Xml.Serialization.XmlRootAttribute(<span class=\"string\">&quot;AutoTwitDataSet&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">global::System.ComponentModel.Design.HelpKeywordAttribute(<span class=\"string\">&quot;vs.data.DataSet&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">AutoTwitDataSet</span> : <span class=\"title\">global</span>::<span class=\"title\">System.Data.DataSet</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>The global keyword tells the compiler to start looking for the namespace or class starting from the root.  You’ll see it in system-generated code so that the code always works.  That way if you have a namespace right under your current namespace that is the same as the top-level namespace the code is trying to access, there won’t be a conflict.</p>\n<p>For example, say you have namespace A and namespace B and namespace B.A if I write code in namespace B.A that needs to reference a class in namespace A, without global:: I have no way of getting to it.  If I reference A.classname, the compiler will look for classname in B.A.  With global:: I can tell it to look for classname in global::A.classname and it will find classname in the proper location.</p>\n<p>This keyword snuck in during version 2.0.  Since most of us don’t need it, most of us don’t even know it exists.  I didn’t until this past weekend.</p>\n",
            "tags": [
                "c#",
                "global"
            ]
        },
        {
            "id": "http://davembush.github.com/unsafe-mode-in-c/",
            "url": "http://davembush.github.com/unsafe-mode-in-c/",
            "title": "Unsafe Mode in C#",
            "date_published": "2008-12-15T13:14:08.000Z",
            "content_html": "<p><img src=\"/uploads/2008/12/tp-vol4-006.jpg\" alt=\"tp_vol4_006\"> One of the “advantages” of using CSharp instead of VB.NET is that if programmers want to, they have the option of bypassing the memory management of .NET and working with memory directly.  This is called “unsafe” mode.</p>\n<p>While I will show you how to use this keyword, I have to tell you up front that I’ve been using CSharp since Beta 2 of .NET 1.0 and I’ve NEVER needed to switch into unsafe mode to do any of the work that I’ve done.</p>\n<span id=\"more\"></span>\n\n<p>I’ve even written code that bridged down to some unmanaged C++ code and still have not needed to use unsafe mode.  One of the main advantages of using .NET to begin with is the fact that .NET manages our memory for us.  I’ve worked on far too many C++ programs that leaked memory due to their complexity and bad architecture to purposely go back to that model.</p>\n<p>Yes, it is true that you might get a slight performance improvement by bypassing the memory management and working with the memory directly.  But is that slight improvement worth the risk of all of the issues that arise when using memory directly? If you find that you need to use unsafe mode, I would recommend that you consider writing that part of your code in a language that was designed for that level of coding.  Assembler or C++ are some good choices.</p>\n<p>If these are not options, here’s where the unsafe keyword comes in. Any code you wrap in the unsafe keyword:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsafe</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this code is unmanaged</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>becomes unmanaged.  You will also need to add the &#x2F;unsafe compiler switch to your compiler options. You can also make an entire method unsafe by adding the keyword to the method declaration:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">unsafe</span> <span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">int</span> *i</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// i is a pointer that is unsafe</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In a future post, we’ll look at some ways of using pointers in CSharp code.</p>\n",
            "tags": [
                "c#",
                "pointers",
                "unsafe"
            ]
        },
        {
            "id": "http://davembush.github.com/why-you-can-t-cast-an-integer-to-a-string/",
            "url": "http://davembush.github.com/why-you-can-t-cast-an-integer-to-a-string/",
            "title": "Why you can't cast an integer to a string.",
            "date_published": "2008-06-23T09:59:21.000Z",
            "content_html": "<p>I saw a question on Channel 9 that I’ve heard before. My guess is that there are enough people who have the same question that it’s worth addressing.</p>\n<blockquote>\n<p>I know there’s probably a really good reason for this, but I can’t think of what it is, and it keeps bugging me. Why can’t you do int x &#x3D; 10; string y &#x3D; (string)x; in C#? I mean, you could simply use x.ToString(), but why doesn’t the explicit cast do the same?</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-do-you-think-you-can-do-this-in-the-first-place\"><a href=\"#Why-do-you-think-you-can-do-this-in-the-first-place\" class=\"headerlink\" title=\"Why do you think you can do this in the first place?\"></a>Why do you think you can do this in the first place?</h2><p>The people who tend to ask this question are people coming out of a VB background. In VB, we have functions that will allow us to convert any type to any other type. CStr() is one of those functions. Give it an integer and it will convert it to a string. CInt() is another. Give it a value and it will convert it to an integer.</p>\n<p>So, when people from that background first learn about casting, the only thing they have to hook the concept to in their thinking, is the conversion functions that are available in VB. You can’t blame them, really.</p>\n<p>But a cast is not a conversion. A conversion operation actually returns a completely different value. To do a similar operation in CSharp, you’d actually use the functions in the Convert class.</p>\n<p>A cast, on the other hand, doesn’t change the variable. It just lets us access it as though it were another type. And you can only cast if the data you are pointing to is related, via inheritance, to the type you want to cast it to.</p>\n<h2 id=\"So-the-simple-answer-is-“because-an-int-is-not-a-string”\"><a href=\"#So-the-simple-answer-is-“because-an-int-is-not-a-string”\" class=\"headerlink\" title=\"So the simple answer is, “because an int is not a string”\"></a>So the simple answer is, “because an int is not a string”</h2><p>When dealing with an object-oriented language, particularly .NET languages, everything except for the Object type derives from some other object. So technically, a string IS AN object, an int IS AN object, in fact, everything IS AN object. If I have a class “Person” and a class named “Employee” that derives from “Person” and another class “Customer” that derives from “Person” I can say that an “Employee” is a “Person” and that a “Customer” is a “Person” but I can’t say that a “Customer” is an “Employee”.</p>\n<p>Neither can I say that a “Person” is a “Customer”, or that a “Person” is an “Employee”. It doesn’t make sense. So, if I have an object of type Employee, I can cast that object to a type Person. But I can’t cast it to a type of Customer because there is no “is a” relationship between the two.</p>\n<h2 id=\"So-how-does-this-relate-to-Strings-and-ints\"><a href=\"#So-how-does-this-relate-to-Strings-and-ints\" class=\"headerlink\" title=\"So, how does this relate to Strings and ints?\"></a>So, how does this relate to Strings and ints?</h2><p>Well, if you look at the inheritance tree for .NET, you will see that a String inherits directly from the Object class. You will also see that an int inherits from the ValueType class, which inherits from the Object class. Since neither type is derived from the other, you can’t cast them–you can only convert them.</p>\n<p>A little-known fact about VB.NET is that it also has a casting “function.” It looks like a function to the VB guys, but it is really an operator disguised as a function. directcast() takes an object as the first parameter and the type you want to cast it to as the second parameter. The operator does the same thing that the casting operator in CSharp does.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                ".net",
                "casting",
                "convert"
            ]
        },
        {
            "id": "http://davembush.github.com/serializable-attribute-vs-serializable-interface/",
            "url": "http://davembush.github.com/serializable-attribute-vs-serializable-interface/",
            "title": "Serializable attribute vs Serializable Interface",
            "date_published": "2008-04-09T11:11:33.000Z",
            "content_html": "<p>Judging from the comments I received yesterday, it looks like we need to review  serialization in .NET.</p>\n<h2 id=\"The-Easy-Way\"><a href=\"#The-Easy-Way\" class=\"headerlink\" title=\"The Easy Way\"></a>The Easy Way</h2><p>There are two ways of making an object serializable.  The first, and easiest way is by applying the Serializable attribute to the class.  Once you’ve done this all of the member variables in the class will get stored into the stream unless you’ve attributed one of the variables with NonSerialized.</p>\n<p>This method is useful for objects you want to be able to store temporarily.  For example, you might use this to transfer objects using Web Services or if you wanted to store the object in a session variable when your sessions are being stored in a session server.  You would never use this to store the object to a file that you want to be able to retrieve some time in the future after restarting your application.  That is, you would never use this method to implement the <a href=\"/2008/04/08/unauthorizedaccessexception-writing-to-hklm/\">Registry solution</a> I mentioned yesterday.</p>\n<h2 id=\"The-Reliable-Way\"><a href=\"#The-Reliable-Way\" class=\"headerlink\" title=\"The Reliable Way\"></a>The Reliable Way</h2><p>What you need instead is the Serializable Interface, or more correctly, you want to implement ISerializable on your class.  Using the ISerializable interface gives you a lot more control.  Used correctly, you can store an object to a file system, shut down your application, install an upgrade to the application with additional information (or less information) in the class, and still successfully load the object from the file system.  So, let’s illustrate with a simple class:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> m_intVar;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>This is a pretty simple class.  It has one member variable that we will use to save some sort of state information and will need to get stored to the stream when we save the object instance.  To implement the interface, we need to change the class to look like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> : <span class=\"title\">ISerializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> m_intVar;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span>(<span class=\"params\">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_intVar = info.GetInt32(<span class=\"string\">&quot;m_intVar&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetObjectData</span>(<span class=\"params\">SerializationInfo info,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        StreamingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        info.AddValue(<span class=\"string\">&quot;m_intVar&quot;</span>, m_intVar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The thing to watch out for here is that you need a constructor that takes SerializationInfo and StreamingContext as parameters.  Since the interface can’t remember this, you’ll have to remember it.</p>\n<p>You’ll notice that we’ve taken control of storing and retrieving the data by using the AddValue and GetInt32 calls inside of the new, required, constructor and the GetObjectData method.  GetObjectData is called when the data is being saved.  The constructor gets called when the data is being loaded.</p>\n<h2 id=\"Protecting-For-The-Future\"><a href=\"#Protecting-For-The-Future\" class=\"headerlink\" title=\"Protecting For The Future\"></a>Protecting For The Future</h2><p>If we leave the code as it is above, we are no better off than if we had simply implemented the Serializable attribute.  What we need to add to this code is some way of versioning the object.  This is easy to do by adding a few more lines of code: When we initially create the object, all we need to do is add one line of code to our GetObjectData method</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetObjectData</span>(<span class=\"params\">SerializationInfo info,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    StreamingContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    info.AddValue(<span class=\"string\">&quot;VERSION&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    info.AddValue(<span class=\"string\">&quot;m_intVar&quot;</span>, m_intVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Future\"><a href=\"#The-Future\" class=\"headerlink\" title=\"The Future\"></a>The Future</h2><p>Some time later, we decide to add another variable to our class:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> m_intVar;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> m_stringVar;</span><br></pre></td></tr></table></figure>\n\n<p>And save it as part of GetObjectData.  Because we’ve added another variable, we need to increment the version number.  So, GetObjectData now looks like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetObjectData</span>(<span class=\"params\">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    info.AddValue(<span class=\"string\">&quot;VERSION&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    info.AddValue(<span class=\"string\">&quot;m_intVar&quot;</span>, m_intVar);</span><br><span class=\"line\">    info.AddValue(<span class=\"string\">&quot;m_stringVar&quot;</span>, m_stringVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>and our constructor now looks like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span>(<span class=\"params\">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> VERSION = info.GetInt32(<span class=\"string\">&quot;VERSION&quot;</span>);</span><br><span class=\"line\">    m_intVar = info.GetInt32(<span class=\"string\">&quot;m_intVar&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VERSION &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        m_stringVar = info.GetString(<span class=\"string\">&quot;m_stringVar&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> m_stringVar = <span class=\"string\">&quot;default string&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By incrementing the version number every time we make a change to the class and testing for the appropriate version number when we load the object, we can avoid having our application crash simply because the class has changed between the time we save the object and the time we loaded the object from the stream.</p>\n",
            "tags": [
                "c#",
                "serialization"
            ]
        },
        {
            "id": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "url": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "title": "Object Initialization in CSharp 3.0 and VB.NET 9",
            "date_published": "2007-11-28T14:24:13.000Z",
            "content_html": "<p>Yesterday we looked at the new var keyword in CSharp.  This makes CSharp variable declaration similar to VB.  After all, they’ve had the DIM keyword for years which essentially does the same thing.</p>\n<p>Today, we’re going to look at object initializers, which have been added to both CSharp and VB.</p>\n<span id=\"more\"></span>\n\n<p>Let’s say we have a class named, “Customer” with the properties: FirstName, LastName, Address, City, and State.  If you wanted to initialize those properties as part of the object creation process you basically had two choices.  You could create a constructor with each of the properties represented as a parameter, or you could use the default constructor and then initialize each property individually immediately after you instantiate the object.  Using CSharp, that process would look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">c.FirstName = <span class=\"string\">&quot;Dave&quot;</span>;</span><br><span class=\"line\">c.LastName = <span class=\"string\">&quot;Bush&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>in VB you could write code similar to the CSharp code above, with obvious syntax changes for VB, or you could use the WITH keyword to simplify it.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer()</span><br><span class=\"line\"><span class=\"keyword\">With</span> c</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span></span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">With</span></span><br></pre></td></tr></table></figure>\n\n<p>The new versions of these languages make the initialization process a bit easier.  Now, your CSharp code can look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FirstName = <span class=\"string\">&quot;Dave&quot;</span>,</span><br><span class=\"line\">    LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>and your VB code can look like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer() <span class=\"keyword\">With</span> &#123; _</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span>, _</span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span> _</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Keep in mind that the code that I just wrote compiles into the code I wrote using the old syntax.  This means that we can use this syntax in Visual Studio 2008 even if we are writing code for .NET 2.0.  Secondly, this means that it would still be faster to use the constructor with parameters if it is available.</p>\n<p>My fear is that some of the new features in the compilers will allow lazy programmers to write crappy code.  The point of the object initialization syntax is not to help you avoid creating parameterized constructors.  The point is to make your coding life easier when, and only when, the proper parameterized constructors do not exist.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                "visual studio",
                "tutorial",
                "object initializers",
                "video"
            ]
        },
        {
            "id": "http://davembush.github.com/csharp-adds-the-var-keyword/",
            "url": "http://davembush.github.com/csharp-adds-the-var-keyword/",
            "title": "CSharp adds the var keyword!",
            "date_published": "2007-11-27T12:56:11.000Z",
            "content_html": "<p>There have been several new features added to the CSharp language that will significantly reduce the amount of code that ends up in our source files.  It will not significantly reduce the amount of code that we have to write. One of those language features is the ability to create properties, <a href=\"/2007/11/22/simple-properties-in-c-35/\" title=\"Simple properties in CSharp\">which we looked at last week.</a> Another of those features is the new var keyword. So, instead of writing:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>  you can now write:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>Which isn’t a lot of code until you start qualifying the Class name with namespaces.</p>\n<p>During the beta cycle, I saw a demo that let you declare a variable, var c, and then several lines later initialize it with, new MyClass(), which gave the appearance that var was more like the var keyword in javascript, and therefore a variant than what it really is.</p>\n<p>In the release version of CSharp 3.0, if you use the var keyword to declare a variable, you MUST initialize it on the same line, or you will get a compiler error.  I suppose it makes writing the compiler a whole lot easier this way too.</p>\n<p>One other small thing to note, which should be obvious by now.  Since we have to initialize the variable to some object or value, and since we can’t initialize it anywhere other than on the line it is declared on, you can’t treat the variable as a variant.  A variable declared as var is as strongly typed as any other variable you would create.  So, if I did something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">c = <span class=\"string\">&quot;Some string here&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>I would get a compiler error because I’m trying to assign a string type to a MyClass variable.  <code>var</code> does not stand for “variant,” it stands for “variable.”  All the compiler does when it sees this is look at the type being assigned to the variable and replaces the var keyword with that type.</p>\n<p>So, when the compiler processes the code, it takes this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>and turns it into this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>Finally, it may be helpful to point out here that this whole process happens at compile time.  This should be obvious by the fact that this works in both .NET 2.0 code compiled with the CSharp 3.0 compiler as well as .NET 3.x code.  But, sometimes the obvious isn’t obvious until someone states it explicitly.</p>\n",
            "tags": [
                "c#",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/simple-properties-in-c-3-5/",
            "url": "http://davembush.github.com/simple-properties-in-c-3-5/",
            "title": "Simple Properties in C# 3.5",
            "date_published": "2007-11-22T10:49:00.000Z",
            "content_html": "<p>It’s such a little thing.  But, how much of our CSharp code looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _propertyName;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PropertyName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _propertyName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123; _propertyName = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>When I teach other programmers how to use CSharp (or VB) I always stress the importance of using properties instead of public member variables.  You never know when you’ll want your set to do some sort of validation and just about all of the databinding stuff requires us to use properties instead of member variables.  But, that’s a lot of code to write when all you want to do is wrap a member variable. Well, in CSharp 3.5, life just got a lot sweeter.  That code above just got replace with this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PropertyName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can still use the code above if you want to.  But, why write all that code, even if you write it using a code snippet, when you can just write that one line?</p>\n",
            "tags": [
                "c#",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/assign-multiple-enum-values-to-one-variable/",
            "url": "http://davembush.github.com/assign-multiple-enum-values-to-one-variable/",
            "title": "Assign Multiple enum Values To One Variable",
            "date_published": "2007-11-02T11:56:52.000Z",
            "content_html": "<p>I saw this question and immediately thought, “You can’t!  An Enum is an Integer that has been restricted to the values it can accept.”</p>\n<p>And I was basically right.  But, I forgot that even with an integer you can do the following in CSharp:</p>\n<p><img src=\"/uploads/2016/03/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And in VB.NET</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> = <span class=\"number\">1</span> <span class=\"built_in\">Or</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>To end up with a variable i equal to 3 because both do bitwise ands.</p>\n<p>So if I had an enumerated value</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> F &#123;</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span>,</span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or, in VB.NET</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Enum</span> F</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span></span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span></span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Enum</span></span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">You could <span class=\"keyword\">then</span> <span class=\"keyword\">do</span> the following <span class=\"keyword\">in</span> CSharp:</span><br><span class=\"line\"></span><br><span class=\"line\">``` csharp</span><br><span class=\"line\">F fvar;</span><br><span class=\"line\"></span><br><span class=\"line\">fvar = F.thing1 | F.thing2;</span><br></pre></td></tr></table></figure>\n\n<p>Or you could do it in VB.NET like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> fvar <span class=\"keyword\">As</span> F = F.thing1 <span class=\"built_in\">Or</span> F.thing2</span><br></pre></td></tr></table></figure>\n\n<p>There’s just one small problem with doing all of this. </p>\n<p>If you evaluate fvar, you see that it is equal to 3 because we did not define 3 to be a specific value in our enumeration.  However, by adding the Flags attribute to our enum definition:</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Flags]<span class=\"built_in\">enum</span> F &#123;</span><br><span class=\"line\">    thing1 <span class=\"operator\">=</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">    thing2 <span class=\"operator\">=</span> <span class=\"number\">2</span>,</span><br><span class=\"line\">    thing3 <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Flags()&gt; _Enum F</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span></span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span></span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Enum</span></span><br></pre></td></tr></table></figure>\n\n<p>fvar will evaluate to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thing1 | thing2</span><br></pre></td></tr></table></figure>\n\n<p>in CSharp and in VB.NET…</p>\n<p>Well, in VB.NET it still evaluates to 3.</p>\n",
            "tags": [
                ".net",
                "enums",
                "tutorial"
            ]
        }
    ]
}