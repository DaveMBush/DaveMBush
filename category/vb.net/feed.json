{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"vb.net\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/vb-net-nullable-types/",
            "url": "http://davembush.github.com/vb-net-nullable-types/",
            "title": "VB.NET Nullable Types",
            "date_published": "2014-01-16T02:46:57.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/tp_vol4_001.jpg\" alt=\"tp_vol4_001\" title=\"tp_vol4_001\"> SQL has long had the ability to specify that a value is NULL even if it is a primitive type, but the only way you could have a NULL value in VB.NET is if you were dealing with an object. That is, until .NET 2.0</p>\n<span id=\"more\"></span>\n\n<p>Even though .NET 2.0 has been out for a while, I would bet that few VB.NET programmers know about this new feature because it is one of those things most of us have grown to assume is not possible. Values must have content–objects don’t.  That’s just the way it is.  If we were to create an integer for example and then tried to assign a nothing to it, we would most certainly get a compiler error.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>However, the Nullable generic was added so that we can create a VB.NET Nullable Integer</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> Nullable(<span class=\"keyword\">Of</span> <span class=\"type\">Integer</span>)</span><br><span class=\"line\">i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>And by simply putting a question mark at the end of our variable name, we can shorten the syntax to</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i? <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vb.net",
                "value types",
                "nothing",
                "nullable"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-hide-module-name/",
            "url": "http://davembush.github.com/vb-net-hide-module-name/",
            "title": "VB.NET Hide Module Name",
            "date_published": "2013-08-28T13:11:12.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/misc_vol3_064.jpg\" alt=\"misc_vol3_064\" title=\"misc_vol3_064\"> Here’s a quick tip for those of you still using modules in your VB.NET applications.</p>\n<p>If you create a module and don’t want to see the module name in your intellisense, you can hide it with an attribute.  This can be extremely useful when you have a lot of modules that would show up in your intellisense code and they don’t have names that conflict with each other.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HideModuleName()&gt;</span><br><span class=\"line\"><span class=\"keyword\">Module</span> Module1</span><br><span class=\"line\">    <span class=\"keyword\">Sub</span> NewFunction()</span><br><span class=\"line\">        <span class=\"keyword\">Return</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Module</span></span><br></pre></td></tr></table></figure>\n\n<p>You can still reference NewFunction() via Module1</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module1.NewFunction()</span><br></pre></td></tr></table></figure>\n\n<p>But Module1 will no longer show in intellisense.</p>\n",
            "tags": [
                "modules",
                "hide",
                "vb.net attributes"
            ]
        },
        {
            "id": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "url": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "title": "Decimal vs Float (Single) or Double",
            "date_published": "2012-09-18T09:17:13.000Z",
            "content_html": "<p><img src=\"/uploads/2008/10/money-016.jpg\" alt=\"money-016\"> When you need to deal with a number that is a fraction, what do you specify for its type?  If you are like most programmers I know, you’ll reach for Float (Single if you are using VB) or Double.</p>\n<p>If you are working with currency, though, this could get you into a lot of trouble.</p>\n<p>Here’s why.</p>\n<span id=\"more\"></span>\n\n<p>When you store a number into a float, you are not storing an exact number.  This is because the number you are storing is an approximation of the number you entered.  When you store a number, the integer portion of the number gets priority and the fractional part gets entered as close as is possible given the size of the type you are storing it as.</p>\n<p>That is, a Double will be able to save the information more accurately than the Float, but neither of them will store the information precisely.</p>\n<p>And that’s just storing a number we enter directly.  What happens if we need to multiply or divide that number?</p>\n<p>For simplicity, let’s just say we need to divide a dollar by three.  How would that get stored accurately into a float or a double?  The answer is that it won’t.  It will store as many threes on the right side of the decimal as possible.</p>\n<p>This is what the Decimal data type was created for.  A decimal data type deals with the data more like we would if we were dealing with the problem with paper and pencil.  In effect, a decimal data type is similar to an integer that has a decimal point.</p>\n<p>Let me illustrate.  Let’s imagine that we have an integer that holds our value and another that holds how many decimal places the value has.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> mainValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> decmialPlaces;</span><br></pre></td></tr></table></figure>\n\n<p>To represent a dollar we would say:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = <span class=\"number\">100</span>;</span><br><span class=\"line\">decimalPlaces = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now, we want to divide our dollar by three:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = mainValue / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>obviously, mainValue will end up with 33 as a value, which means our result is .33, exactly what we would expect if we did this computation by hand.</p>\n<p>If we multiplied the result by 3, we’d get .99, which is what we’d expect.  We still have to account for that lost penny, but we would deal with the lost penny using standard accounting practices.</p>\n<p>Fortunately, we don’t have to go to all that trouble because this is exactly why the decimal type was created for us.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">decimal</span> money = <span class=\"number\">1.00</span>M;</span><br><span class=\"line\">money = money / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>I once went to consult in a project that was entirely currency based.  It was basically an accounting package.  This application was not only dealing with money, but it also had to deal with conversion rates between countries.  They wanted to know why they were losing pennies when they converted from one currency to another when the entire application was using floats (not even doubles) instead of decimal values.  That handled most of the problem for them.  The second recommendation I had was to choose a base currency type and always convert from that currency to all the other countries rather than converting from country A to country B and then back to country A.</p>\n",
            "tags": [
                "double",
                "float",
                "currency",
                "decimal",
                "floating point math",
                "single"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "url": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "title": "VB.NET Processing Before WinForm Display",
            "date_published": "2009-08-06T10:52:55.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/arct075.jpg\" alt=\"arct-075\" title=\"arct-075\"></p>\n<p>I woke up this morning to an interesting question.</p>\n<p><em>“Using VB.net 2008, I want my project to be a Windows Forms Application, but upon startup, I want to check a few files to see if they exist and if they don’t I do not want the startup form to load. I just want the program to quit. If you have to start this type of application with a form, how do you keep the form from displaying?”</em></p>\n<p>If you program in CSharp, you probably already know the answer to this question, or at least you should.  If you don’t, you will when we finish here.  So since I consider this a VB.NET-specific question, I’m going to answer it using VB.NET syntax.</p>\n<p>When CSharp runs a Windows Forms application, it writes out the following code in Program.cs (in VS 2008, earlier versions put this in the main form).</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Application.EnableVisualStyles();</span><br><span class=\"line\">    Application.</span><br><span class=\"line\">        SetCompatibleTextRenderingDefault(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    Application.Run(<span class=\"keyword\">new</span> Form1());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In VB.NET there is no code that looks like this, because VB.NET writes the code for us behind the scenes.</p>\n<p>So to do what you want to do, we need to take over control of the Windows Form application.</p>\n<p>Since I’m assuming that you already have the Windows Form application created, the next thing you’ll want to do is to create a module.  You can name it what ever you want, but I’m going to name mine “Main” for purposes of this article.</p>\n<p>In your module, create a function called “main” that has the code CSharp would have given us.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    Application.EnableVisualStyles()</span><br><span class=\"line\">    Application.SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">    Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>Now go to your project properties and go to the Application tab.</p>\n<p><img src=\"/uploads/2009/08/image.png\" alt=\"image\" title=\"image\"></p>\n<p>Find the check box that says, “Enable Application Framework” and un-check it.</p>\n<p><img src=\"/uploads/2009/08/image1.png\" alt=\"image\" title=\"image\"></p>\n<p>Then change the startup object to “Sub Main”</p>\n<p>At this point, your application should run as it always has.  To put the checks in that you requested, write that code prior to all the Application… statements that we put in sub main and put an if&#x2F;then&#x2F;end if statement around the Application… statements.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ChecksWereOk <span class=\"keyword\">As</span> <span class=\"type\">Boolean</span> = <span class=\"literal\">False</span> <span class=\"comment\">&#x27; your checks here If ChecksWereOk Then Application.EnableVisualStyles()</span></span><br><span class=\"line\">        Application. _</span><br><span class=\"line\">            SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">        Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>And that should do the trick for you.</p>\n",
            "tags": [
                "vb.net",
                "conditional startup",
                "windows forms",
                "winforms"
            ]
        },
        {
            "id": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "url": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "title": "Manually Adding Event Handlers in VB.NET",
            "date_published": "2009-07-15T10:43:09.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/office019.jpg\" alt=\"office-019\" title=\"office-019\"></p>\n<p>Typically when we write our code, the event handlers get wired up for us using the handles clause.  So we never have to worry about wiring up our event handlers manually.</p>\n<p>But what about the case where we want to dynamically add a control to our Windows Form or our ASP.NET page?  For example, add a button.  How would you respond to the button click event?</p>\n<p>In CSharp, there is no handles clause, so figuring out how to manually wire up the event handler is simply a matter of inspecting the dotNet code and doing a copy&#x2F;paste&#x2F;modify operation in the editor.</p>\n<p>The syntax for adding event handlers manually is not that difficult.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddHandler m_button.Click, AddressOf buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>If you’ve written any threading code, you’ll notice that this looks similar to the code you might have written for that.</p>\n<p>The AddHandler statement takes two parameters.  The first is the event we are going to handle–in this case, the click event from the object that m_button is pointing to.</p>\n<p>The second parameter is a pointer to a function that will handle the event.  What is unique about this is that it can be a method that is part of the current class, which is what the code above is referencing, or it can be a method in another object, or even a method that is shared in another class.</p>\n<p>To reference a method in another object</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeOtherObject.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>To reference a shared method</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeClass.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>Which gives us quite a bit of flexibility when we dynamically wire up our events.</p>\n",
            "tags": [
                "vb.net",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "url": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "title": ".Net String Pool – Not Just For The Compiler",
            "date_published": "2009-04-22T08:34:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/b03b0055.jpg\" alt=\"B03B0055\" title=\"B03B0055\"> On Monday, I was corrected in my assertion that creating multiple empty strings would create multiple objects.  Turns out the compiler automatically puts all of the strings that are exactly the same in a “string pool” so that there is only ever one empty string in the entire application you’ve created.</p>\n<span id=\"more\"></span>\n\n<p>Duh! I should have known this, or at least I should have expected that this was so since it has been true with every other compiled language I’ve worked with.</p>\n<p>But what I didn’t know and couldn’t expect is that we can make use of this string pool programmatically as well.</p>\n<p><strong>Why would you want to do this yourself?</strong></p>\n<p>Keep in mind that string concatenation in .NET requires the creation of a new object.  So, code such as this,</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a += b;</span><br></pre></td></tr></table></figure>\n\n<p>creates a new object at line 3 every time it is executed.</p>\n<p>So that if we add the following line:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>we would not be pointing to the same object.  That is, a and b would contain the same content but would be pointing to two entirely different objects.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B contain the same data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (String.ReferenceEquals(a,b))</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B are the same object&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>String.Intern Consolidates The Data</strong></p>\n<p>By using String.Intern() we can get both evaluations to be true.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a = String.Intern(a + b);</span><br><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now both evaluations above will be true because line 3 places the string “abcdefgh” in the pool and line 4 uses that same string from the pool to assign to b.  Where we might have created two objects, we are now only creating one and referring to it both times.</p>\n<p>You could also use String.IsInterned(string) to determine if a string has already been placed in the string pool and execute optional code based on that.</p>\n<p><strong>When Would You Use This?</strong></p>\n<p>I still stand by my statement that optimizations should be saved for last.  You would not do this if this was the only place where you were doing the concatenation.  But you might consider doing this if your concatenations were in a loop that was taking a significant amount of processing time.</p>\n<p>Other things you might also want to consider would be to consolidate concatenations on the same line and&#x2F;or using the StringBuilder class for concatenations.  Keep in mind that StringBuilder is only really useful once you get past three concatenations due to the overhead of creating the StringBuilder object vs. creating new objects during the normal concatenation process.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                ".net",
                "string",
                "intern"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-char-from-string-with-option-strict/",
            "url": "http://davembush.github.com/vb-net-char-from-string-with-option-strict/",
            "title": "VB.NET - Char from String with Option Strict",
            "date_published": "2009-04-08T08:35:14.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/g04b0079.jpg\" alt=\"G04B0079\"> So here’s the question:</p>\n<blockquote>\n<p>I’m using String.Split() and need to pass in a Char or a Char array as the parameter.  If I pass in a string String.Split(“&#x2F;“) I get an error “Option Strict On disallows implicit conversions from ‘String’ to ‘Char’.”</p>\n<p>Obviously, the easiest way to fix this would be to turn off Option Strict, but I would prefer to keep it on.  So how do I pass in the Char instead of a String in this situation?”</p>\n</blockquote>\n<p>There are actually several ways to accomplish what you are trying to do.</p>\n<span id=\"more\"></span>\n\n<p>The first and most general solution would be to call the ToCharArray() method off the string.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = myString.Split(<span class=\"string\">&quot;/&quot;</span>.ToCharArray())</span><br></pre></td></tr></table></figure>\n\n<p>The advantage to this method is that it will work regardless of what size the string is and it will use each character in the string as a delimiter.</p>\n<p>But what if you only have one character in your array?  Surely there is a shorter, cleaner statement we can use.</p>\n<p>As a matter of fact, there are several other options.  You could use Convert.ToChar() or Char.Parse()</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = _</span><br><span class=\"line\">   myString.Split(Convert.ToChar(<span class=\"string\">&quot;/&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = _</span><br><span class=\"line\">   myString.Split(<span class=\"type\">Char</span>.Parse(<span class=\"string\">&quot;/&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>But the easiest way to convert a single character string to a Char is simply to put a “c” after the closing quote:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = myString.Split(<span class=\"string\">&quot;/&quot;</span>c)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vb.net",
                "string",
                "char",
                "split",
                "strict"
            ]
        },
        {
            "id": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "url": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "title": "The VB.NET Ternary Operator",
            "date_published": "2007-11-29T13:20:09.000Z",
            "content_html": "<p>I think the VB.NET Ternary Operator may be the last operator that I really miss in VB.NET from my curly brace language experience.  Although, I have to admit, I wouldn’t have missed it all that much if they never added it.  There just isn’t a whole lot of use for it.</p>\n<span id=\"more\"></span>\n\n<p>However, the Ternary operator is a REALLY nice feature to have available to you when you do need it.  It’s another one of those language features that falls under, “Just because it is there doesn’t mean you have to use it.”</p>\n<p>If you’ve ever run into a situation where you just need a simple evaluation and assign a variable based on it.  Like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">If</span> Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">    s = <span class=\"type\">String</span>.Empty</span><br><span class=\"line\"><span class=\"keyword\">Else</span></span><br><span class=\"line\">    s = Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString()</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br></pre></td></tr></table></figure>\n\n<p>you’ll appreciate the new Ternary operator which shrinks it to:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = <span class=\"keyword\">If</span>(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Note that this NOT the same as</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = IIf(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Here’s the difference between the two.</p>\n<p>IIf will always evaluate the second and third parameter regardless of if the first parameter evaluates to true or false.  This is because IIf is a function, not an operator.</p>\n<p>If is an operator, and therefore only evaluates the second OR third parameter when they are the value that will ultimately be returned.  So, If() will run my code above without any errors while IIf will throw a null pointer exception when Session(“mySessionVar”) evaluates to nothing because it will try to apply ToString() to the object that is null.</p>\n",
            "tags": [
                "vb.net",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "url": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "title": "Object Initialization in CSharp 3.0 and VB.NET 9",
            "date_published": "2007-11-28T14:24:13.000Z",
            "content_html": "<p>Yesterday we looked at the new var keyword in CSharp.  This makes CSharp variable declaration similar to VB.  After all, they’ve had the DIM keyword for years which essentially does the same thing.</p>\n<p>Today, we’re going to look at object initializers, which have been added to both CSharp and VB.</p>\n<span id=\"more\"></span>\n\n<p>Let’s say we have a class named, “Customer” with the properties: FirstName, LastName, Address, City, and State.  If you wanted to initialize those properties as part of the object creation process you basically had two choices.  You could create a constructor with each of the properties represented as a parameter, or you could use the default constructor and then initialize each property individually immediately after you instantiate the object.  Using CSharp, that process would look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">c.FirstName = <span class=\"string\">&quot;Dave&quot;</span>;</span><br><span class=\"line\">c.LastName = <span class=\"string\">&quot;Bush&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>in VB you could write code similar to the CSharp code above, with obvious syntax changes for VB, or you could use the WITH keyword to simplify it.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer()</span><br><span class=\"line\"><span class=\"keyword\">With</span> c</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span></span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">With</span></span><br></pre></td></tr></table></figure>\n\n<p>The new versions of these languages make the initialization process a bit easier.  Now, your CSharp code can look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FirstName = <span class=\"string\">&quot;Dave&quot;</span>,</span><br><span class=\"line\">    LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>and your VB code can look like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer() <span class=\"keyword\">With</span> &#123; _</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span>, _</span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span> _</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Keep in mind that the code that I just wrote compiles into the code I wrote using the old syntax.  This means that we can use this syntax in Visual Studio 2008 even if we are writing code for .NET 2.0.  Secondly, this means that it would still be faster to use the constructor with parameters if it is available.</p>\n<p>My fear is that some of the new features in the compilers will allow lazy programmers to write crappy code.  The point of the object initialization syntax is not to help you avoid creating parameterized constructors.  The point is to make your coding life easier when, and only when, the proper parameterized constructors do not exist.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                "visual studio",
                "tutorial",
                "object initializers",
                "video"
            ]
        },
        {
            "id": "http://davembush.github.com/assign-multiple-enum-values-to-one-variable/",
            "url": "http://davembush.github.com/assign-multiple-enum-values-to-one-variable/",
            "title": "Assign Multiple enum Values To One Variable",
            "date_published": "2007-11-02T11:56:52.000Z",
            "content_html": "<p>I saw this question and immediately thought, “You can’t!  An Enum is an Integer that has been restricted to the values it can accept.”</p>\n<p>And I was basically right.  But, I forgot that even with an integer you can do the following in CSharp:</p>\n<p><img src=\"/uploads/2016/03/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And in VB.NET</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> = <span class=\"number\">1</span> <span class=\"built_in\">Or</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>To end up with a variable i equal to 3 because both do bitwise ands.</p>\n<p>So if I had an enumerated value</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> F &#123;</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span>,</span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or, in VB.NET</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Enum</span> F</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span></span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span></span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Enum</span></span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">You could <span class=\"keyword\">then</span> <span class=\"keyword\">do</span> the following <span class=\"keyword\">in</span> CSharp:</span><br><span class=\"line\"></span><br><span class=\"line\">``` csharp</span><br><span class=\"line\">F fvar;</span><br><span class=\"line\"></span><br><span class=\"line\">fvar = F.thing1 | F.thing2;</span><br></pre></td></tr></table></figure>\n\n<p>Or you could do it in VB.NET like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> fvar <span class=\"keyword\">As</span> F = F.thing1 <span class=\"built_in\">Or</span> F.thing2</span><br></pre></td></tr></table></figure>\n\n<p>There’s just one small problem with doing all of this. </p>\n<p>If you evaluate fvar, you see that it is equal to 3 because we did not define 3 to be a specific value in our enumeration.  However, by adding the Flags attribute to our enum definition:</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Flags]<span class=\"built_in\">enum</span> F &#123;</span><br><span class=\"line\">    thing1 <span class=\"operator\">=</span> <span class=\"number\">1</span>,</span><br><span class=\"line\">    thing2 <span class=\"operator\">=</span> <span class=\"number\">2</span>,</span><br><span class=\"line\">    thing3 <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Or</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Flags()&gt; _Enum F</span><br><span class=\"line\">    thing1 = <span class=\"number\">1</span></span><br><span class=\"line\">    thing2 = <span class=\"number\">2</span></span><br><span class=\"line\">    thing3 = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Enum</span></span><br></pre></td></tr></table></figure>\n\n<p>fvar will evaluate to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thing1 | thing2</span><br></pre></td></tr></table></figure>\n\n<p>in CSharp and in VB.NET…</p>\n<p>Well, in VB.NET it still evaluates to 3.</p>\n",
            "tags": [
                ".net",
                "enums",
                "tutorial"
            ]
        }
    ]
}