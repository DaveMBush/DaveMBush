{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"agile\" category",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/3-reasons-agile-will-not-succeed/",
            "url": "http://davembush.github.com/3-reasons-agile-will-not-succeed/",
            "title": "3 Reasons Agile Will Not Succeed",
            "date_published": "2016-06-09T10:30:00.000Z",
            "content_html": "<p>I’ve written about <a href=\"/categories/Agile/\">Agile</a> and <a href=\"/tags/scrum/\">Scrum</a> before and most of my regular readers know that I am a huge fan.  But recently I am starting to believe the Agile movement is doomed.  In fact, the most common response to my enthusiasm for Agile and Scrum is, “Yeah, we tried that once and it was a complete failure.”  Which seems odd to me because in every instance where I’ve been able to implement it, it has worked beautifully.  </p>\n<p>So why would I say Agile Will Not Succeed?</p>\n<p>The buzz around Agile has become so loud that Agile has moved from strictly a software development thing, to all corners of the business world.  And yet, as much as I believe Agile is the right way to develop software, as a movement, it is doomed for failure. </p>\n<p>Why?</p>\n<figure>![](/uploads/2016/06/image.png \"3 Reasons Agile Will Not Succeed\")<figcaption>Photo credit: [Tim Evanson](//www.flickr.com/photos/timevanson/9325191852/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Reminder-Agile-Isn’t-a-Method\"><a href=\"#Reminder-Agile-Isn’t-a-Method\" class=\"headerlink\" title=\"Reminder - Agile Isn’t a Method\"></a>Reminder - Agile Isn’t a Method</h2><p>This is the surest sign that a movement is struggling.  It has become so popular that people are using it without knowing anything of what they are doing.  The surest sign you’ve walked into an organization where Agile is doomed is if they say something along the lines of “We do Agile.”</p>\n<p>Why is this a clear sign? </p>\n<p>Because you can’t DO Agile.  You can only BE Agile.  <a href=\"//www.agilemanifesto.org/\">Read the Agile Manifesto</a>.  There is nothing there about how to implement Agile.  It simply isn’t a methodology.  So, when an organization says to me they are “Doing Agile” it tells me right away that they have no idea what it means to be Agile.</p>\n<h2 id=\"‘Doing-Agile’-for-the-Wrong-Reasons\"><a href=\"#‘Doing-Agile’-for-the-Wrong-Reasons\" class=\"headerlink\" title=\"‘Doing Agile’ for the Wrong Reasons\"></a>‘Doing Agile’ for the Wrong Reasons</h2><p>One of the outcomes of implementing an Agile process is that code tends to get developed faster.  Unfortunately, this has become the main selling point of moving toward Agile.  I get it, every shop I’ve worked in has been under some sort of development pressure to get stuff done.  So it is easy to look at faster delivery as the main reason why you would use an Agile method. </p>\n<p>But, speed is a side effect.  In fact, it is only a long term side effect.  Initially, as you move toward being Agile, you will probably end up being slower.  You might have to lay people off because they only know how to work on their own while true Agile requires teamwork.  The more mature your team, the harder it will be to switch.</p>\n<p>So, if you shouldn’t move toward Agile because of speed, why should you? Well, two of the main reasons for me are: visibility, flexibility, and predictability.</p>\n<p>I was once told the story of how plumbers plumb a new house.  The first day they come in and hang all the pipes in hangers.  By the time the owner comes by that evening, everything is hung and it looks like they are practically done.  They now have two weeks to get it all soldered together before the owner comes by again. This is why most Agile methods require short sprints.  The more you can show the customer the progress you are making, the less nervous they will get and the more likely you are to be left alone to do your job.  However, it will take time because the customer has been burned too often in the past, so it may be a while before they learn to wait for the sprint reviews.</p>\n<p>But there is an added advantage to being visible that is a huge win for everyone.  By letting the customer see the progress you are making, he is able to make tweaks along the way.  I’ve learned over the years that no one really knows what they want until they see it.  But letting them see it often and make tweaks along the way saves me from having to do a complete rewrite when I am “done.” And agile adds predictability that isn’t available using older methods.  It doesn’t let you say up front how long a project will take.  Estimates are still rather futile.  You’ll never know less about a project than the first day you try to provide an estimate.  But, as you progress, you will know roughly how much effort the remaining project will take and how much time that much effort will take on average.  The project becomes predictable using statistics generated by the project.</p>\n<h2 id=\"You-Aren’t-Fully-Committed\"><a href=\"#You-Aren’t-Fully-Committed\" class=\"headerlink\" title=\"You Aren’t Fully Committed\"></a>You Aren’t Fully Committed</h2><p>In my last interview, I was asked if I had any experience with “Agile.”  I really need to learn to qualify that question.  I answered, “<a href=\"//www.scrumalliance.org/community/profile/dbush2\">I have my Scrum Master certification</a>, but I’ve yet to work in a truly Agile environment.”  And yet, I have worked in environments that call themselves “Agile”  But these are all environments that Carl and Richard over at <a href=\"//dotnetrocks.com/\">DotNetRocks</a> call “Scrum But…”.  “Agile But…”?  And at another place, we called it “Scrummerfall”.  The idea is the same, rather than doing either Scrum or Kanban, they take the parts they’ve heard about that they like and merge them into what they are currently doing.</p>\n<p>Of course, they weren’t fully committed to the process they were using either, so it shouldn’t work any worse.  But it often does.</p>\n<p>One of the most obvious points of failure is with project management.  I’ve seen it all.  Scrum masters who are still trying to function as project managers and organizations that have skipped the scrum master role and left the project managers.  Stand ups that last an hour.</p>\n<p>Or how about this one.  Teams trying to estimate stories instead of task.</p>\n<p>I went on one interview that had the following bullets in the job request I was sent:</p>\n<ul>\n<li>Must be able to work in an Agile environment</li>\n</ul>\n<p>followed three points later by</p>\n<ul>\n<li>Must be able to work under tight deadlines.</li>\n</ul>\n<p>Talk about an oxymoron! When I asked what “Agile” meant to him (the owner of the company) he said, “Oh, that just means we do iterative development.” Here’s the deal.  If you are going to say you are going to implement Agile, at least learn enough about it to know what the word means!  You might decide it isn’t for you.  That’s fine.  Doing something simply because it is the “In” thing to do is never a good reason to do something.</p>\n<h2 id=\"Management-Has-No-Clue\"><a href=\"#Management-Has-No-Clue\" class=\"headerlink\" title=\"Management Has No Clue\"></a>Management Has No Clue</h2><p>In my current job, I was told that some boss several levels up who I’ve still not met has declared our project to be a “Waterfall project” because “we already know what this is supposed to do.” As soon as I heard that, I said, “Someone doesn’t know what Agile is.” Here is why this sounds right.  The project I am working on is a rewrite from a very old platform to a web application.  In principle, from that definition, it sounds like a known entity.  However, simply because the GUI has changed there are things that were done on the old platform that make no sense on the new platform.</p>\n<p>But it gets worse.  The application is being expanded to include other business units with additional requirements.  So, we only partially know all this is supposed to do.</p>\n<p>If we were using true Waterfall, we would have to design the whole thing up front.  This project is due in a little less than a year.  Tell me what on the web doesn’t change in a year?</p>\n<h2 id=\"Agile-Will-Not-Succeed\"><a href=\"#Agile-Will-Not-Succeed\" class=\"headerlink\" title=\"Agile Will Not Succeed\"></a>Agile Will Not Succeed</h2><p>So, what’s the point?  People love their perceptions.  Not reality.  What Agile set out to do was nobel, and for the most part, right.  But people are lazy.  They get a snippet of the truth here, a snippet of the truth there, ignore a snippet, paste in a snippet (here a snippet, there a snippet, everywhere a snip of snippet).  And that becomes their truth, while not being THE truth.  We do it with everything we believe.  Agile has reached that point of group think that it can now be classified as “religion.”  It now has so much group think weight that I’m not sure even those who started the movement can clearly articulate what it IS anymore.</p>\n",
            "tags": [
                "agile",
                "failure",
                "kanban",
                "scrum"
            ]
        },
        {
            "id": "http://davembush.github.com/increase-your-excellence-capacity/",
            "url": "http://davembush.github.com/increase-your-excellence-capacity/",
            "title": "Increase Your Excellence Capacity",
            "date_published": "2016-01-07T08:30:00.000Z",
            "content_html": "<p>Today I saw a GREEN traffic light for the first time.</p>\n<p>OK, that’s not entirely true.  What I mean to say is that I saw that it was green.</p>\n<p>You see, I was born color blind.  This never really bothered me because, like most people who are handicapped from birth, I didn’t know what I was missing.</p>\n<p>But then, I found out that there is this company that sells glasses that help color blind people see color.  They are pretty expensive, at least they seem pretty expensive when you believe you don’t really have a big problem.  But then I took the standard color blind test on their site and found out</p>\n<ol>\n<li>I’m color blind (duh!)</li>\n<li>there is an 80% chance that the glasses would help and</li>\n<li>I only see 2% of the available color spectrum.</li>\n</ol>\n<p>Wow! Only 2%?  I knew I had issues.  But I’ve been able to function.  But only 2%.  What am I missing?</p>\n<p>Well, my wife got me a pair of glasses for Christmas.  Unfortunately, I ordered indoor&#x2F;computer glasses and what they sent are sunglasses.  I’m still trying to get that resolved. <img src=\"/uploads/2016/01/wlEmoticon-sadsmile.png\" alt=\"Sad smile\">  But just for kicks, I wore the sunglasses out while I was running errands today.  This is the first sunny day that I haven’t been stuck inside since Christmas.  The reds are redder, the yellows are yellower and, hey! Guess what?!  The green light is actually green!</p>\n<p>So, what’s this got to do with programming?  You did know this was going to eventually relate to programming right?</p>\n<p><img src=\"/uploads/2016/01/image.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<p>Most of us program with only 2% of what’s available.  And like those of us who are color blind, we don’t think it is an issue because, somehow, we manage to get the job done.</p>\n<p>Just off the top of my head, here are some ways this applies.</p>\n<h2 id=\"Know-What-You-Know\"><a href=\"#Know-What-You-Know\" class=\"headerlink\" title=\"Know What You Know!\"></a>Know What You Know!</h2><p>This is most evident with JavaScript, but I think most of us program this way with every language we use.  Since this is primarily a .NET blog, let’s just focus on JavaScript and C#.</p>\n<p>JavaScript has some pretty amazing features once you get your head around them.  For example, how does “inheritance” really work in JavaScript?  Do you know, can you explain it?  Or do you just use JavaScript as an “object based” language, much like we used VB6?  Do you understand how JavaScript shims work or why they work?  Do you know what a closure is and how they can cause trouble if you aren’t careful?  Do you know when variables get declared?  All difficult questions to answer, because in some cases, you probably think you do but really don’t.  Just like I thought I was seeing fine.</p>\n<p>Or if you’ve been using C#.  Do you know what the yield keyword does?  How about var?  Ever seen nameof()? Did you bother to learn LINQ? The problem I see with so many of my peers is that once they’ve learned enough to get the job done, they stop learning.  New version of the language comes out?  Do they learn it?  Nope.</p>\n<p>Instead, the programmers who excel are the ones who are always learning.  It isn’t enough that they can get the job done.  They have to understand the tools they are using to the fullest extent possible.</p>\n<h2 id=\"Ask-Why\"><a href=\"#Ask-Why\" class=\"headerlink\" title=\"Ask Why\"></a>Ask Why</h2><p>Here’s another place this shows up.</p>\n<p>I’ve had this similar discussion twice now, now that single page applications are the hot new thing on the web.  Where do our business rules go?  I had one manager assert, “Let’s all agree on one thing.  Business rules belong on the server!” Well, maybe.</p>\n<p>What do you mean by “business rule”? Why do you think this is true? In a closed corporate system, does it really make sense to make multiple calls back to the server when it can be done faster on the client? I’m not saying they belong on the client side.  I’m just saying they don’t necessarily belong on the server either. But here’s the real problem.  If you’ve stopped asking “why?” and just assert that something is true because someone convinced you this was true 5 years ago (or longer), you’re making decisions like I’ve been seeing color.  If you ask me what color the grass is, I’ll tell you “green” with our without my fancy new glasses because, just like the traffic like, I’ve been told “green” is the correct answer.</p>\n<h2 id=\"Ask-How\"><a href=\"#Ask-How\" class=\"headerlink\" title=\"Ask How\"></a>Ask How</h2><p>I’ve run into this, hard core, twice in my career and I’m always shocked when I do.</p>\n<p>I once knew a guy who, whenever I told him HOW to do something, he would do it HIS way until he finally stumbled on MY way.  What gave me the right to tell him how to do it?  I’d used the product before.  I knew what it could and couldn’t do.  He hadn’t.</p>\n<p>More recently, I was talking to a programmer who actually told me, “I just want to be left alone.  I’ll figure it out.  I don’t need any help.” What?  Really? I can understand getting into a situation where you don’t know who you could ask for help.  Or being so focused on the problem that you don’t know you need help.  But flat out stating that you don’t need help?  The only time I’ve ever run into people who won’t ask for help are kids that just graduated from college.  And even that is changing with colleges focused on teaching students to collaborate instead of “doing their own work.”  But to hear this from a seasoned programmer?  That’s just ridiculous.</p>\n<p>If you aren’t asking for help, you are definitely not working at full capacity.</p>\n<h2 id=\"Stay-Young\"><a href=\"#Stay-Young\" class=\"headerlink\" title=\"Stay Young\"></a>Stay Young</h2><p>I’m not saying this doesn’t exist in other sectors.  But every time I hear someone say they can’t get a programming job because they are over 50, I think to myself, “really?!”  Because I’ve been in multiple situations where I know of hiring managers who would hire martins if they knew they could do more than spell “programming”.</p>\n<p>I would submit to you that most people who can’t get a programming job either 1) never really were “programmers” in the strictest sense of the word.  Oh, yeah, they might have gotten some work done.  But can they solve problems?  Or 2) they were able to program once in a language that no one ever uses but they never kept their skills up to date.  They are still programming VB6 in a VB.NET world.  Or HTML3.2 in an HTML5 world.  Never learned to use external stylesheets.  Using JavaScript as though it is still a toy.</p>\n<p>Maybe this is harsh.  But since I’m over 50 and got a job as recently as three months ago, it isn’t like I don’t have any experience with this. Maybe you aren’t 50 yet.  Here’s my advice to you.  Always be learning.  Listen to podcast.  Subscribe to blogs and read the articles.  Read programming books.  Learn new languages.  Get a PluralSight subscription. Tons of ways for you to learn and make yourself better. Best of all, you won’t need a new pair of glasses to “see” more than 2% of your programming career.</p>\n",
            "tags": [
                "programming",
                "self improvement"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-be-personally-agile/",
            "url": "http://davembush.github.com/how-to-be-personally-agile/",
            "title": "How to be (Personally) Agile",
            "date_published": "2015-11-19T13:30:00.000Z",
            "content_html": "<p>When I first wrote down the idea for this post, I was originally thinking about how we might use agile development practices in a work place that practices Water Fall or worse.  But since then, I’ve expanded my thinking to include the concept of using agile everywhere, including where it “isn’t allowed.” Here’s what I’m talking about.  What does your work environment look like?  Many of the places I end up working either are using no formal process at all, or weakly attempt some form of Scrum or Water Fall.  In fact, my current major gig has a “project manager” (I use the term loosely) that manages our project with MS Project.  There is not even a formal issue tracking system.  And this is at a very LARGE organization that SHOULD know better.</p>\n<p><img src=\"/uploads/2015/11/image1.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Agile-in-an-Anti-Agile-Environment\"><a href=\"#Agile-in-an-Anti-Agile-Environment\" class=\"headerlink\" title=\"Agile in an Anti-Agile Environment\"></a>Agile in an Anti-Agile Environment</h2><h3 id=\"Kanban-Board\"><a href=\"#Kanban-Board\" class=\"headerlink\" title=\"Kanban Board\"></a>Kanban Board</h3><p>Now, I’m not saying I’m the most organized guy on the planet.  In fact, in an environment like this, it would be easy to just go with the flow.  But I know me well enough to know that if I don’t have a place to keep track of the task I need to accomplish, something will fall through the cracks.  So, I got permission to use <a href=\"/trello\">Trello</a> along with the <a href=\"/plusForTrello\">Plus for Trello</a> plugin on Chrome so that I can at least track the task that have been assigned to me.</p>\n<p>Trello, for those who don’t know, allows you to setup a basic Kanban board and configure it any way you would like.  From the basic, “To do”, “In Progress”, “Done” format to something more in line with your actual work flow.  For this project, I have “Back Log”, “On Hold”, “Up Next”, “In Progress”, “Done This Week” and “Done”.  Yeah, that’s a lot of columns.  But I want to be able to keep track of where my task are at that level.  The beauty of Trello is that you can configure it however you want.</p>\n<p>Plus For Trello builds on that and allows you to add estimates to each of your Trello Cards.  While they refer to the estimate as “hours” I just translate that to “Effort Points” and track how much effort I think I’ve completed rather than how many hours I’ve actually worked.</p>\n<p>Between the two, I can track how far along in the project I am, how many effort points I tend to complete each week, and I’m the only one on the team who can give a reasonable guess as to when I will be done with this project I am working on.  And when I need to change the estimates, I can show when they changed and why.</p>\n<h3 id=\"Productivity-Hacks\"><a href=\"#Productivity-Hacks\" class=\"headerlink\" title=\"Productivity Hacks\"></a>Productivity Hacks</h3><p>But agile isn’t just about Kanban boards and accurate estimates.  Agile is about becoming better.  So, what are some ways you can become better at work without being any more disruptive than you have to be?  Here are some ways that have been effective for me:</p>\n<ul>\n<li><p><strong>Use the Pomodoro technique</strong></p>\n<p>The <a href=\"/pomodoro\">Pomodoro</a> technique is a technique that has you highly focused on the task at hand for 25 minutes at a time.  No interruptions for email, social media, coffee.  That’s for the breaks or their own Pomodoro.  After 25 minutes of work, you get a 5 minute break.  Sometimes I just sit in my chair and close my eyes.  Kind of a mini nap.  The routine has you do 4 Pomodoros and then rest for 15 minutes instead of 5.  If you take a lunch, you should take your lunch break during one of the longer Pomodoros.</p>\n</li>\n<li><p><strong>Avoid Distractions</strong></p>\n<p>I don’t know about you, but the last time I had the luxury of an office was 2.5 years ago when I was working from home.  I miss those days.  But now I close my virtual door by putting on headphones and listening to <a href=\"//t.co/EgPhHCQqLE\">this Pandora station that I created</a>.</p>\n</li>\n<li><p><strong>Batch E-mail</strong></p>\n<p>As I said before, don’t check email while you are working.  I check mine during the Pomodoro breaks.  If you get more than what you can handle during the breaks you should create a Pomodoro for them.</p>\n</li>\n<li><p><strong>Schedule Your Day!</strong></p>\n<p>OK, this may or may not work for you depending on your environment.  But, it is worth a try.  Personally, I know that my best hours are in the morning and that I start losing my concentration around 1:30.  I start my day at around 7am.  Ideally, if you want me to be productive, you won’t schedule meetings prior to 1:30.  So, I went into outlook and scheduled myself as “Busy” from 7am to 1:30pm.  Now when someone looks to see when I am available, they will see that I am available from 1:30 to 3:30.</p>\n<p>You might object that this is not being honest.  But I would argue that it is if you honestly believe that keeping appointments with yourself is as important as keeping appointments with other people.  It is just a matter of perspective.</p>\n</li>\n<li><p><strong>Turn Off Your Phone</strong>!</p>\n<p>OK, I’m assuming you are all programmers and not sales people.  But, I would go so far as to say that the only time you should answer your phone is when you have an appointment.  I stopped answering my phone YEARS ago.  Most of the calls that I got were either sales calls or recruiters.  Then I finally got smart and created a silent ring tone for my phone.  That is my default ring tone.  And my default vibrate pattern is no vibration at all.  I don’t even know that my phone rang until I look at my phone and it says I have a missed call.</p>\n<p>But, I can hear you say, I might miss something important.  Well, yes, there are calls that I don’t want to miss.  For those, I assign real ring tones.  Everyone in my family and some VERY close friends, all get a real ring tone that makes a sound.</p>\n<p>What about potential clients?  Well, first I schedule the call via email, if I even determine it is necessary, and second I ask for the number they will be calling from so that I can assign a ring tone to that number.</p>\n<p>I wish I could do something similar with my desk phone at work.  I answered it yesterday only to have it be a sales call.  I should have known better!</p>\n</li>\n</ul>\n<p> </p>\n<h2 id=\"Agile-Home\"><a href=\"#Agile-Home\" class=\"headerlink\" title=\"Agile Home\"></a>Agile Home</h2><p>There is a whole course on PluralSight about being an Agile Family.  I’m not talking about that.  I’m talking about being personally Agile at home just like I am suggesting that you can be personally Agile at work, regardless of the environment.</p>\n<h3 id=\"Kanban-Again\"><a href=\"#Kanban-Again\" class=\"headerlink\" title=\"Kanban Again\"></a>Kanban Again</h3><p>Yep, I use Trello at home too.  But not the Plus for Trello plugin.  At least not yet.  I have a list that keeps track of my exercise rotation.  I have a list for Saturday.  I have a list of chores I need to do.  I have others, but those are the ones that I use regularly.</p>\n<h3 id=\"Schedules\"><a href=\"#Schedules\" class=\"headerlink\" title=\"Schedules\"></a>Schedules</h3><p>I schedule my whole day.  This probably sounds more extreme than it is.  I was finding that not having a schedule, especially after work, was actually preventing me from getting stuff done that I really wanted to get done.</p>\n<p>Here are tips for scheduling:</p>\n<ul>\n<li><strong>If you really want something to get done, schedule it.</strong></li>\n<li><strong>Don’t schedule every last minute</strong>. For example, I know it generally takes me 45 minutes to get home.  But I also know bad traffic could make that longer.  So I don’t plan the next activity after work until 4:45.</li>\n<li><strong>Schedule your Kanban list</strong>. I’m assuming your Kanban list are projects that you want to get done.  Well, if you really want them to get done, when are you going to work on them?</li>\n<li><strong>Don’t try to do too much</strong>. Once I started scheduling, I realized I was trying to accomplish way more than was physically possible.</li>\n</ul>\n<p>Schedules are a great way for you to determine, ahead of time, what is most important to you.  Once that decision has been made, it is just a matter of execution.  If there are other things you’d like to be able to do, put them on the back log.</p>\n<h2 id=\"The-Point\"><a href=\"#The-Point\" class=\"headerlink\" title=\"The Point\"></a>The Point</h2><p>So what’s the point of all of this?  Don’t wait on someone else.  You can be agile even if&#x2F;when others aren’t.</p>\n",
            "tags": [
                "agile",
                "productivity"
            ]
        },
        {
            "id": "http://davembush.github.com/being-agile-is-about-the-journey%E2%80%A6/",
            "url": "http://davembush.github.com/being-agile-is-about-the-journey%E2%80%A6/",
            "title": "Being Agile Is About The Journey…",
            "date_published": "2015-02-12T12:00:00.000Z",
            "content_html": "<h1 id=\"…-Not-The-Destination\"><a href=\"#…-Not-The-Destination\" class=\"headerlink\" title=\"… Not The Destination\"></a>… Not The Destination</h1><p><img src=\"/uploads/2015/02/BeingAgile.png\" alt=\"BeingAgile\" title=\"BeingAgile\"></p>\n<p>This post first started as I was discussing my post “<a href=\"/you-arent-doing-scrum-if/\">You Aren’t Doing Scrum If …</a>” with a friend who had read the post and was worried that I might not fit in an organization that wasn’t doing all of Scrum.  I’ve since had other conversations and as I’ve reflected on the topic, I still stand by my original post, because there are some fundamental properties of Scrum that you have to implement in order to follow that methodology.  This is why I called the post “You Aren’t Doing <strong>Scrum</strong> If …” and not “You Aren’t Doing Agile If …”</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Agile-isn’t-Scrum\"><a href=\"#Agile-isn’t-Scrum\" class=\"headerlink\" title=\"Agile isn’t Scrum\"></a>Agile isn’t Scrum</h2><p>But Agile is different.  Agile isn’t a process. Agile is a mindset. So you can call yourself “Agile” without necessarily implementing any particular methodology because “Agile” isn’t about process.  Agile is about the collective state of mind of the team.  The organization as a whole.  Being Agile means that you are open to change.  That you embrace change.  Agile is about being flexible.  About knowing that you don’t know and that you don’t know what you don’t know.  Agile is about adapting.  Ultimately, it is about finding ways of being more productive. In fact, you could implement scrum precisely, which I doubt anyone really does, and not be Agile.</p>\n<h2 id=\"Sacred-Cows\"><a href=\"#Sacred-Cows\" class=\"headerlink\" title=\"Sacred Cows\"></a>Sacred Cows</h2><p>In fact, my experience has been that as I try to move an organization along the sliding scale of being more productive, I will, eventually, find a point of resistance.  The sacred cow of their process.  You can change whatever else you want, and yes, everything else you’ve suggested that we change has proven itself to be a better, more productive, less error prone way of doing what we do.  But, you can’t change our sacred cow. And so far every organization I’ve been in has some sacred cow that we either have to kill or we don’t progress further into being agile. And so we end up hearing comments from people in the industry like, “I don’t think I’ve been in any organization that has been TOTALLY ‘Agile.’” because every organization eventually runs up against some sacred cow on their road toward being agile.</p>\n<h2 id=\"Leadership-Needs-To-Be-Agile\"><a href=\"#Leadership-Needs-To-Be-Agile\" class=\"headerlink\" title=\"Leadership Needs To Be Agile\"></a>Leadership Needs To Be Agile</h2><p>I know of another guy in the industry that postulates that the reason organizations fail as they try to implement agile is because agile is being forced on the organization.  That we need to create an environment where people have opted in to agile.  And to a certain extent, I think he’s right.  But, and I think this is a HUGE but, I think the larger problem is that the leadership has not embraced being agile and so you end up with developers trying to BE agile while the leadership is trying to be predictive.  Funny thing I’ve noticed about most employees, they’ll pretty much do whatever they think will keep the paychecks flowing.  So I don’t think we need opt-in at the worker bee level so much as we need opt-in at the leadership level.  Although I have seen resistance at both levels.</p>\n<h2 id=\"Individuals-Need-To-Be-Agile\"><a href=\"#Individuals-Need-To-Be-Agile\" class=\"headerlink\" title=\"Individuals Need To Be Agile\"></a>Individuals Need To Be Agile</h2><p>Finally, while your organization may not be agile at all. It may not do Scrum, or Kanban.  It may resist all attempts to move in that direction.  This is not excuse for you to not be agile. You should ask yourself periodically, “What can I do that might be more productive than what I am currently doing?”  Because an organization can only be as agile as the people working in that organization and sometimes, all it really takes to move an organization closer to being agile is one individual who is willing to do what he or she does just a little more toward agile than they currently are. What sacred cows have you run into?  What are you doing to be more agile as an individual?  Leave a comment below.</p>\n",
            "tags": [
                "agile",
                "scrum"
            ]
        }
    ]
}