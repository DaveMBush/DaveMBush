---
title: smart-ngrx
date: 2023-01-21 13:36:27
tags:
  - ngrx
  - angular
  - redux
---

I have a dream.

What if:

- We only retrieved the data we needed from the server when we needed it?
- We could cache the data we retrieved from the server so we didn't have to retrieve it again?
- Unused data was automatically removed from the store?
- We could tell when data was no longer visible on the screen.
- Virtual scrolling also meant we had virtual arrays of data in the store?
- You never had to dispatch an action to load data into the store but the framework just did that for you?
- Creating all the Actions and Reducers you need for this was two function calls that took less than 5 lines on the screen?
- Effects were inherited from an abstract class that you just had to implement a few methods on?
- You could use the same code to eager-load, lazy-load the data you need?
- All updates and deletes used optimistic update logic?

Would you be interested?

<!-- more -->

## So far, so good

I've been working on this project on the side and so far I have the lazy loading part working. It is all based on NgRX Entities and the JavaScript Proxy object.

It does everything I mentioned above except for the ability to encapsulate the updates and deletes so that the only exposure to the API would be via selectors.

But, I'm interested. Does anyone else think this is a good idea?
