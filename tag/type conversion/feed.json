{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"type conversion\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/",
            "url": "http://davembush.github.com/javascript-alchemy-with-strings-numbers-and-booleans/",
            "title": "JavaScript Alchemy with Strings, Numbers, and Booleans.",
            "date_published": "2016-01-01T18:30:00.000Z",
            "content_html": "<p>Those who are relatively new to JavaScript might have the impression that JavaScript has no variable types.  After all, we declare everything using var and we can treat</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"string\">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>The same as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&quot;1&quot;</span> == <span class=\"string\">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>But the reality is that JavaScript includes a very rich typing system with some well-known, and some little know methods of detecting types and converting from one type to another.</p>\n<p><img src=\"/uploads/2015/12/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Strings-and-String-Conversion\"><a href=\"#Strings-and-String-Conversion\" class=\"headerlink\" title=\"Strings and String Conversion\"></a>Strings and String Conversion</h2><p>The three most familiar types included in JavaScript are the String, Number, and Boolean types.  And one of the oldest tricks in JavaScript is the ability to convert a number to a string simply by concatenating a number on to a string.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = someString + someNumber;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;abc2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>In fact, anytime we “add” anything to a string, it turns it into a string</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someTruth = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString = someString + someTruth;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;abctrue&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>And it doesn’t matter where we put the string.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someTruth = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someTruth + someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;trueabc&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Numbers-and-Number-Conversion\"><a href=\"#Numbers-and-Number-Conversion\" class=\"headerlink\" title=\"Numbers and Number Conversion\"></a>Numbers and Number Conversion</h2><p>But what happens if the string contains a number and we add that to a number?  Well, it depends.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someString + someNumber;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;39&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// &#x27;93&#x27;;</span></span><br></pre></td></tr></table></figure>\n\n<p>but</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + +someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// 12;</span></span><br></pre></td></tr></table></figure>\n\n<p>Why? Well, prefixing the string variable with + converts that string to a number.  Under the hood, it is the same as if we had used the Number function to convert the string to a number.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + <span class=\"title class_\">Number</span>(someString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// 12;</span></span><br></pre></td></tr></table></figure>\n\n<p>But what if someString can’t be converted to a number?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + <span class=\"title class_\">Number</span>(someString);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// NaN;</span></span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someNumber = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newString =  someNumber + +someString;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newString); <span class=\"comment\">// NaN;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Boolean-and-Boolean-Conversion\"><a href=\"#Boolean-and-Boolean-Conversion\" class=\"headerlink\" title=\"Boolean and Boolean Conversion\"></a>Boolean and Boolean Conversion</h2><p>Last week, I discussed <a href=\"/javascript-truthy-and-falsy-pain-and-pleasure/\">Truthiness and Falsiness in JavaScript</a>, but this week, I want to step back and discuss Booleans in the context of type information.</p>\n<p>You can convert any type to a Boolean value simply by putting a bang in front of it</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!anyVariable)</span><br></pre></td></tr></table></figure>\n\n<p>It doesn’t just invert the truthiness or falsiness of anyVariable, it actually converts it to a Boolean first and then inverts the Boolean value. In some code, you may see</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!!anyVariable)</span><br></pre></td></tr></table></figure>\n\n<p>because the person who wrote the code wants to test a Boolean value for true or false and not the truthiness of a non-Boolean value.  In my opinion, you don’t really gain anything by using this syntax.  But since you are likely to see it used by people who don’t really understand what JavaScript does under the hood without it, and think they are being more explicit and therefore making JavaScript faster (which they aren’t on both points) I include the syntax for completeness.</p>\n",
            "tags": [
                "javascript",
                "type conversion"
            ]
        }
    ]
}