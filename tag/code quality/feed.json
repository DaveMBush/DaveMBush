{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"code quality\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/raking-leaves-and-writing-code/",
            "url": "http://davembush.github.com/raking-leaves-and-writing-code/",
            "title": "Raking Leaves and Writing Code",
            "date_published": "2014-11-20T12:00:00.000Z",
            "content_html": "<p>So, today I had the task of removing the leaves from my yard, which gave me a lot of time to think because it is a pretty solitary job, even if you have people helping you, because much of the time I was using a leaf blower.  It is pretty hard to hold any kind of conversation when you are using a leaf blower.</p>\n<p>And  as I was running the leaf blower, I was thinking about what I was going to talk about today.  And then it struck me, why not just talk about cleaning up the leaves?  I mean if John Sonmez and Scott Hanselman can talk about stuff that isn’t necessarily programming related, why can’t I?</p>\n<p>But then I realized, I could talk about cleaning up the leaves in my yard AND talk about programming at the same time.</p>\n<p>Think about it.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Rake-Leaves\"><a href=\"#Why-Rake-Leaves\" class=\"headerlink\" title=\"Why Rake Leaves?\"></a>Why Rake Leaves?</h2><p>Why did I clean up the leaves in my yard?  It wasn’t to make my yard look better.  No one can see my yard from the road.  No one would care but my family, and they do care.  But even if they didn’t, we ultimately clean the leaves off our yards because doing that means our grass will grow better next summer by allowing it to see the sun now.  We do it because nasty critters live in leaves.  We remove the leaves from our drive ways and sidewalks so that snow removal will be easier in the winter.  In short, as hard as the work is to take care of our leaves in the fall, the work is worth it because it makes the rest of the fall and winter easier for us  in the long run.</p>\n<p>What’s interesting about the first reason, allowing the grass to get more sun during the fall months, would mean that it would actually be better to clean up the leaves frequently during the fall rather than waiting for them to all fall and then rake them.  By the time I get to them, it is probably too late to do any real good because I wait for them to all fall before I remove them.  By that time, the sun shines less during the day and the frost has already kicked in.</p>\n<h2 id=\"How-Is-This-Related-to-Code\"><a href=\"#How-Is-This-Related-to-Code\" class=\"headerlink\" title=\"How Is This Related to Code?\"></a>How Is This Related to Code?</h2><p>And that brings me to our code.  We all have code that needs “raking”.  You know you have code that is duplicated all over the place, but have you taken any time to collect all of that code into one place as a function?</p>\n<p>How many code smells do you have.  Are your functions long?  Do you have conditional blocks nested more than one deep?  Do you have classes that do more than one thing?  Have you written code that isn’t being used because “we might need it some day”?</p>\n<p>As I work with inexperienced programmers, the one thing I notice is that looking for places to simplify code is a skill that needs to be practiced.  It doesn’t come naturally.  Very few programmers assume that as long as the code does what it should, they are done.</p>\n<p>And yet, leaving these code smells in place means that the next time you go in to work on the system, you will not be able to understand the code as well as you should.  Because you haven’t let the sun shine on your code, when you get to it to maintain it, you’ll be working in mud instead of nice green grass.</p>\n<h2 id=\"The-Challenge\"><a href=\"#The-Challenge\" class=\"headerlink\" title=\"The Challenge\"></a>The Challenge</h2><p>So today, your job is to find one place in your code that could be made better.  Make it less complicated.  Make it fewer lines of code (without making it hard to read).  Find two places that are doing essentially the same thing and turn that code into a function.  Find two classes that are tightly coupled (highly dependent on each other) and remove the dependencies.  Do this once a day for the next thirty days and see if you don’t find your code easier to work with than it  is today.</p>\n",
            "tags": [
                "programming",
                "best practices",
                "code quality"
            ]
        },
        {
            "id": "http://davembush.github.com/avoiding-code-complexity/",
            "url": "http://davembush.github.com/avoiding-code-complexity/",
            "title": "Avoiding Code Complexity",
            "date_published": "2014-06-19T17:27:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/06/clip_image001.png\" alt=\"clip_image001\" title=\"clip_image001\">A couple of weeks ago, I talked a bit about how we name things.  Specifically, I talked about the <a href=\"/i-j-and-k-should-die/\">very bad habit of using the variables i, j, and k as variables in our for&#x2F;next loops</a>. A few weeks before that, I talked about <a href=\"/dry-programming/\">DRY Programming</a> and the fact that not repeating ourselves extends much farther than most of us normally think when we are thinking about our code. Today I want to continue on the general theme of code quality by discussing code complexity.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it?\"></a>What is it?</h2><p>Generally, code complexity is anything you introduce into your code that makes it hard to follow.  But here are a few areas you might look for code complexity.</p>\n<h2 id=\"Do-you-have-REALLY-long-methods\"><a href=\"#Do-you-have-REALLY-long-methods\" class=\"headerlink\" title=\"Do you have REALLY long methods?\"></a>Do you have REALLY long methods?</h2><p>Here’s the deal.  The longer your method is, the more work it will be to keep track of the overall point of the method.  So, you want to keep the number of lines in your method low.  If you are doing too much, when you come back to your code, even you will be confused. I remember when I first started programming.  We only had 25 lines for a full screen, and the rule was, you should be able to see the full function or method on one screen full of code in your editor.  The problem with that metric now is that our screens have gotten capable of showing a lot more code.  It’s a lot like telling a new driver, he should be able to still see the license plates of the car in front of him when he stops behind a car.  Some cars exist where my tiny little Civic would be IN the other car and I’d still be able to see the plates. A better metric would be to use the 7 +&#x2F;- 2 rule.  Ideally no more than 7 lines of functional code per method.  If you have to, you can fudge it to up to 9, but no more.  This is because the human brain can only deal with about 7 items at a time. I can think of a few times when you might want to break this rule, like when you have a set of conditions that really need to all be in the same place for them to make sense, but it wouldn’t hurt to try to keep to the rule as often as possible.</p>\n<h2 id=\"Do-you-have-a-lot-of-conditions-within-one-method\"><a href=\"#Do-you-have-a-lot-of-conditions-within-one-method\" class=\"headerlink\" title=\"Do you have a lot of conditions within one method?\"></a><strong>Do you have a lot of conditions within one method?</strong></h2><p>When I was discussing the problem with using i, j, and k as variables, I kind of mentioned this, but I didn’t dwell on the subject a lot. You see, the story I told when I was telling you all about the i, j, and k problem violated all of the readability rules.  First, it was using the wrong variable names.  Second, the method was MUCH too long.  And third it had too many conditions. You might think that only if&#x2F;else statements are conditions.  But so are for&#x2F;next, while, do&#x2F;while, and switch statements.  As much as you can, your code should be setup so that you only have one condition per method.  Three at the most.  Again, switch statements might loose their context, but here, I would have one method that handles the switch statement and only one line per case statement.  Each case statement should call a function that does the real work. There is a tool in Visual Studio 2013 that will help you determine how bad your methods are.  You can calculate metrics for a project or the entire solution and it will generate a table of the Cyclomatic complexity of your code.  Look for methods that have a Cyclomatic complexity of over 10 and try to bring them down.  The closer to  zero you get, the better.  Many people suggest that we keep this number below 10 or 11, but this is just an opinion.  I would rather just say look at what you’ve currently got and strive for better. If you have Visual Studio, this option is under the Analyze menu option.</p>\n<h2 id=\"Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls\"><a href=\"#Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls\" class=\"headerlink\" title=\"Do you have a lot of operations, function calls, parameters to those calls?\"></a>Do you have a lot of operations, function calls, parameters to those calls?</h2><p>What I’m basically talking about here is what’s called Halstead Volume or Halstead Metrics.  What this computes is how complex the code is. For example, if you have five lines of code and a Cyclomatic complexity of ten as everyone suggest, your code may still be in trouble because each line of code is so complex that no one on earth could possibly understand it. We call this self obfuscating code. You probably have some superstar on your team that thinks he’s so hot that he codes an entire function on one line.  The problem with this is that six months from now, neither he nor you will be able to figure out what the code does.  Any fix that will be needed will require an entire rewrite of the code.  That’s exactly what we are trying to prevent. If you are using Visual Studio 2013 Ultimate, you can get the <a href=\"//visualstudiogallery.msdn.microsoft.com/f85a7ab9-b4c2-436c-a6e5-0f06e0bac16d\">Microsoft Codelens Code Health Indicator</a> which adds the ability to check for all three of the above problems for each of your methods.  If you pay attention to it, it will help you make code that is easier to understand.</p>\n<h2 id=\"Can-You-Easily-Find-Code-You-Need-To-Maintain\"><a href=\"#Can-You-Easily-Find-Code-You-Need-To-Maintain\" class=\"headerlink\" title=\"Can You Easily Find Code You Need To Maintain?\"></a>Can You Easily Find Code You Need To Maintain?</h2><p>This is one that is harder to detect, but I thought I’d mention it here because it is a real issue. In an ideal world, we shouldn’t need to use a debugger to track down where the code is that we need to modify.  There are cases where this may be the only solution.  But you should know, for example, that all of your validation code is in this one location.  If you have validation code in multiple locations, you are probably thinking about your code incorrectly. But also cut yourself some slack because this kind of code complexity is not something you are going to notice until late in your project.  You may never see it, but you will certainly recognize it when you run into it in someone else’s code.</p>\n<h2 id=\"Which-reminds-me-of-a-story\"><a href=\"#Which-reminds-me-of-a-story\" class=\"headerlink\" title=\"Which reminds me of a story.\"></a>Which reminds me of a story.</h2><p>There was this guy that was working in a cube and he suddenly starts ranting.  “Who wrote this code?!  This is the dumbest code I’ve ever seen.  etc…”  Suddenly he got real quiet and the guy in the next cube asked him, “hey, Joe, what’s wrong?”  Joe replies, “It’s my code.” So even if you don’t pay attention to these issues for your coworker’s sake.  Do it for yourself.</p>\n",
            "tags": [
                "programming",
                "best practices",
                "code quality",
                "cyclomatic",
                "halstead"
            ]
        }
    ]
}