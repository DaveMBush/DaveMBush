{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"events\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "url": "http://davembush.github.com/javascript-bind-for-cleaner-code/",
            "title": "JavaScript bind() for cleaner code",
            "date_published": "2016-07-06T10:30:00.000Z",
            "content_html": "<p>Several weeks ago, I wrote about <a href=\"/why-does-javascript-loop-only-use-last-value/\">how closures impact calling asynchronous functions</a> in a loop and several ways of dealing with that problem.</p>\n<p>In my recent coding, I’ve discovered an even more simple way of dealing with this problem.</p>\n<p>In the process, it removes the anonymous function and eliminates the linting error, ‘Don’t make functions within a loop’ You see, I’ve been experimenting with JavaScript <code>bind()</code>.</p>\n<p>And as it turns out, we can use bind in multiple situations, including dealing with the closure issue I mentioned a couple of weeks ago.</p>\n<figure>![](/uploads/2016/07/image.png \"JavaScript bind() for cleaner code\")<figcaption>Photo credit: [Connor Tarter](//www.flickr.com/photos/connortarter/4754231502/) via [VisualHunt](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-bind\"><a href=\"#What-Is-bind\" class=\"headerlink\" title=\"What Is bind()?\"></a>What Is bind()?</h2><p>The bind function is a recent addition to the JavaScript spec. So, this will only work on recent browsers. You can <a href=\"//kangax.github.io/compat-table/es5/\">check the compatibility table</a> (for all things JavaScript) to see which browser implement <code>bind()</code> as well as other JavaScript features. I looked over the list and there aren’t any browsers that don’t support <code>bind()</code> that I care to support, so I’m good. Your mileage may vary.</p>\n<p>What bind does is that it automatically wraps your function in its own closure so that we can bind the context (the this keyword) and a list of parameters to the original function. What you end up with is another function pointer.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>Notice that we not only bound this to the <code>foo()</code> function, but we also bound the two parameters. So, when we call <code>newFoo()</code> the return value will be 7.</p>\n<p>But what happens if we change the parameters before calling newFoo?</p>\n<h2 id=\"Changing-bind-parameters\"><a href=\"#Changing-bind-parameters\" class=\"headerlink\" title=\"Changing bind parameters\"></a>Changing bind parameters</h2><p>If we bind parameters to <code>foo()</code> using variables and then change the variables prior to calling <code>newFoo()</code>, what do you expect the value to be?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newFoo = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,a, b);</span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\">b = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">newFoo</span>());</span><br></pre></td></tr></table></figure>\n\n<p>The return value is still going to be 7 because <code>bind()</code> binds the value of the parameters, not the actual variables. This is good news and, like I said, we can use this to great advantage in our code.</p>\n<p>But where I think it will display the most usefulness to me is in my call backs</p>\n<h2 id=\"Bind-and-callbacks\"><a href=\"#Bind-and-callbacks\" class=\"headerlink\" title=\"Bind and callbacks\"></a>Bind and callbacks</h2><p>You should remember from that article that one of our solutions to dealing with callbacks in loops was to create an anonymous function around the function we wanted to call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">ii</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ii);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But we can greatly simplify this code by using bind instead.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">consoleLog</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(consoleLog.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>,i),<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We can do this because each call to bind gives us a new function pointer and the original function remains unchanged.</p>\n<p>Meanwhile, we also remove the linting error ‘Don’t make functions within a loop’ because we aren’t creating the function in a loop, we are just pointing to a function that was created outside of the loop.</p>\n<h2 id=\"Bind-for-Event-Handlers\"><a href=\"#Bind-for-Event-Handlers\" class=\"headerlink\" title=\"Bind for Event Handlers\"></a>Bind for Event Handlers</h2><p>Another place where <code>bind()</code> will clean up your code is with event handlers.  Everyone knows, or should know, that when an event handler is called, the context it is called on is the thing that generated the event and not the object that the event handler was created in.  But, by using bind, you can be sure that the function is being called on the correct context.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">eventHandler</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Not that you would write your code exactly like that, but that is just to get the point across.</p>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p>What?! OK. The best explaination of Currying I can give you is that it allows you to pass parameters to function in multiple steps by making the function return other functions that take the remaining parameters. Many functional languages, like F#, do this for you automatically.</p>\n<p>Using binding, we achieve Currying by writing code that looks something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a,b,c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b+c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> addAgain = add.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">addAgain</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript",
                "bind",
                "callbacks",
                "currying",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/jquery-events/",
            "url": "http://davembush.github.com/jquery-events/",
            "title": "jQuery - Events",
            "date_published": "2013-11-06T20:45:24.000Z",
            "content_html": "<p>As well as being able to change the class associated with an element or a set of elements on a screen, jQuery also allows you to fire events.  You might want to do this, for example, if you want to simulate the clicking of a button. Of course, if you are going to fire an event, you’ll probably need some sort of event listener setup to handle that. We will address firing events first since it has the least amount of code needed. All you need to do is select the element or elements using the selectors we’ve already discussed and then call the method trigger(‘eventname’). So, to click a button, your code might look something like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#main&quot;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Since the click method is so common, jQuery has a shortcut method, click(), that does the same thing, so we can rewrite our code as:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#main&quot;</span>).<span class=\"title function_\">click</span>();</span><br></pre></td></tr></table></figure>\n\n<p>But if we click a button, we probably want some JavaScript to execute because of it.  This is where jQuery makes life much easier for the JavaScript programmer. If you are familiar with JavaScript you are probably most familiar with attaching code to your HTML elements by using the on____ attributes.  To attach a method to the click event of the anchor tag you might write something like:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;method();&quot;</span> &gt;</span>text<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you were particularly clever, you might do some sort of event binding using code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;anchorId&#x27;</span>).<span class=\"property\">onclick</span> = functionName;</span><br></pre></td></tr></table></figure>\n\n<p>But even doing that we are left with the ugly potential of having already assigned a function to the element, in which case this code would overwrite it. In fact, if you’ve been coding JavaScript for a while, you are probably quite familiar with the problem of needing to add an event handler to the onload event of the document only to find out that doing so wiped out some critical JavaScript code that was already assigned to that event. You’ll be happy to know that assigning code to an event in jQuery is both simple and non-destructive.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#anchorId&#x27;</span>).<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123; <span class=\"comment\">//code goes here &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>This code would normally be placed inside the ready handler that you’ve seen in previous posts so that your code would ultimately look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#anchorId&#x27;</span>).<span class=\"title function_\">bind</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123; <span class=\"comment\">//code goes here &#125;)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And since the click event is so common, we can replace <code>bind(&#39;click&#39;,function...)</code> with <code>click(function()....)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#anchorId&#x27;</span>).<span class=\"title function_\">click</span>( <span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123; <span class=\"comment\">//code goes here &#125;)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And if someone decides to attach another method to the same click event, both methods will run.</p>\n",
            "tags": [
                "javascript",
                "events",
                "jQuery"
            ]
        },
        {
            "id": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "url": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "title": "Manually Adding Event Handlers in VB.NET",
            "date_published": "2009-07-15T10:43:09.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/office019.jpg\" alt=\"office-019\" title=\"office-019\"></p>\n<p>Typically when we write our code, the event handlers get wired up for us using the handles clause.  So we never have to worry about wiring up our event handlers manually.</p>\n<p>But what about the case where we want to dynamically add a control to our Windows Form or our ASP.NET page?  For example, add a button.  How would you respond to the button click event?</p>\n<p>In CSharp, there is no handles clause, so figuring out how to manually wire up the event handler is simply a matter of inspecting the dotNet code and doing a copy&#x2F;paste&#x2F;modify operation in the editor.</p>\n<p>The syntax for adding event handlers manually is not that difficult.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddHandler m_button.Click, AddressOf buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>If you’ve written any threading code, you’ll notice that this looks similar to the code you might have written for that.</p>\n<p>The AddHandler statement takes two parameters.  The first is the event we are going to handle–in this case, the click event from the object that m_button is pointing to.</p>\n<p>The second parameter is a pointer to a function that will handle the event.  What is unique about this is that it can be a method that is part of the current class, which is what the code above is referencing, or it can be a method in another object, or even a method that is shared in another class.</p>\n<p>To reference a method in another object</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeOtherObject.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>To reference a shared method</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeClass.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>Which gives us quite a bit of flexibility when we dynamically wire up our events.</p>\n",
            "tags": [
                "vb.net",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/response-redirect-executes-too-soon-on-the-server/",
            "url": "http://davembush.github.com/response-redirect-executes-too-soon-on-the-server/",
            "title": "Response.Redirect() executes too soon on the Server.",
            "date_published": "2009-01-27T10:43:45.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/tp-vol4-017.jpg\" alt=\"tp_vol4_017\"> I’ve seen this question a couple of times in various situations. The first involves Javascript and the second involves server side code. Both are caused by a misunderstanding of what this function does and how web pages work. Let’s start with the easy one: server side code.  You might have code that looks something like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem with this code, which is probably obvious to most of you, is that the “do some more code here” section will never fire because we’ve done a redirect right before it. But is this as obvious?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem here is that Page_Load is the first event to fire. Button1_Click() will never execute because we’ve done the redirect during our page load. Aside from the fact that you should not perform form processing code during Page_Load(), the other issue is that events can fire in any order. So maybe you were smart and processed your form in a Button.Click event handler, but have you accounted for the fact that your databinding code may need to put data in the database AFTER you run Response.Redirect()? There is a way around this. Response.Redirect() has two overloads. The first, which we are all very used to, is the one I’ve shown above. But all it does is call the second which has two parameters, the URL and a boolean value, to indicate if we should stop processing right away and return to the browser. The default that gets sent in with the first overload is TRUE. Go ahead and quit. By modifying our code to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>we can be sure that our Button1_Click method, or databinding code, will be executed. Tomorrow we’ll look at the issues involved with Javascript.</p>\n",
            "tags": [
                "asp.net",
                "events",
                "redirect",
                "response"
            ]
        }
    ]
}