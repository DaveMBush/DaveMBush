{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"fonts\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-writing-the-pdf/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-writing-the-pdf/",
            "title": "iTextSharp – HTML to PDF – Writing the PDF",
            "date_published": "2009-08-04T10:24:18.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/B03B0085.jpg\" alt=\"B03B0085\" title=\"B03B0085\"></p>\n<p>Last week we parsed the HTML and created code that keeps track of the various attributes we are going to need when we create the PDF.  Today we will finish the code and create the Elements that we can include in our PDF document.</p>\n<p>One consideration we will need to keep in mind as we write out the PDF is that we have pushed various font characteristics that may overlap onto our stack.</p>\n<p>To get the current font, we will need to combine the attributes.  For example, HTML that looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>this should be bold<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Should render as bold, italics, underlined text.  But we only pushed one element at a time, so if all we look at is the last element we pushed onto the stack, all we will get is a bold font.</p>\n<p>To help with this, I created a helper method that does all the work of determining the correct current font and returning that to the caller.</p>\n<p>The first part of the method does the bulk of the work.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] fontArray = fontCharacteristicStack.ToArray();</span><br><span class=\"line\"><span class=\"built_in\">int</span> fontIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">fontNormalBoldItalic nbi = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; fontIndex &lt; fontArray.Length; fontIndex++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (fontArray[fontIndex].ToLower())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Bold;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italic&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Italic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bolditalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicbold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.BoldItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underline&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Underline;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;boldunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlinebold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineBold;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlineitalic&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlinebolditalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlineitalicbold&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;boldunderlineitalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bolditalicunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicunderlinebold&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicboldunderline&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineBoldItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The fontNormalBoldItalic thing is an enumeration that I used to allow me to merge the font characteristics.</p>\n<p>The second half gets the remainder of the font information which can be determined from the current element and applies the characteristics we determined above into the font.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Font font = FontFactory.getFont(currentFontName);</span><br><span class=\"line\"><span class=\"built_in\">string</span> s = FontFactory.TIMES;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (nbi)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Bold:</span><br><span class=\"line\">        font.setStyle(Font.BOLD);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Italic:</span><br><span class=\"line\">        font.setStyle(Font.ITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.BoldItalic:</span><br><span class=\"line\">        font.setStyle(Font.BOLDITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Underline:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineBold:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.BOLD);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineItalic:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.ITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineBoldItalic:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.BOLDITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">font.setSize(currentFontSize);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentFontColor.StartsWith(<span class=\"string\">&quot;#&quot;</span>))</span><br><span class=\"line\">    font.setColor(System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>),</span><br><span class=\"line\">        System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">3</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>),</span><br><span class=\"line\">        System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">5</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>));</span><br><span class=\"line\"><span class=\"keyword\">else</span> font.setColor(System.Drawing.Color.FromName(currentFontColor));</span><br><span class=\"line\"><span class=\"keyword\">return</span> font;</span><br></pre></td></tr></table></figure>\n\n<p>This is all called from our case statement when the element is text.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> XmlNodeType.Text:</span><br><span class=\"line\">    et = stack.Peek();</span><br><span class=\"line\">    Font font = getCurrentFont();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (et <span class=\"keyword\">is</span> Phrase)</span><br><span class=\"line\">        ((Phrase)(et)).<span class=\"keyword\">add</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Chunk(reader.Value.</span><br><span class=\"line\">                Replace(<span class=\"string\">&quot; &amp;amp; &quot;</span>, <span class=\"string\">&quot; &amp; &quot;</span>).</span><br><span class=\"line\">                Replace(<span class=\"string\">&quot;&amp;nbsp;&quot;</span>,<span class=\"string\">&quot; &quot;</span>), font));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that I’ve also added code at this point that translates the ampersand and the none breaking space so they render correctly in the PDF document.</p>\n<p>Next time we address this topic we will try to close this all up with popping the attributes off the stack and dealing with the gaps between block elements that should (or should not) appear.</p>\n",
            "tags": [
                "c#",
                "html",
                "iTextSharp",
                "PDF",
                "fonts",
                "stack"
            ]
        }
    ]
}