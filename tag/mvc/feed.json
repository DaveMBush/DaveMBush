{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"mvc\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/thinking-in-javascript/",
            "url": "http://davembush.github.com/thinking-in-javascript/",
            "title": "Thinking in JavaScript",
            "date_published": "2017-09-05T10:30:54.000Z",
            "content_html": "<p>Over the last week I’ve gradually come to the realization that the fundamental reason why most people have trouble with JavaScript is because it doesn’t fit their mental model of how programming should be done.  This isn’t to say that most programmers don’t manage to achieve their end goal.  But if you sit back and take an objective look at the code we end up writing, you have to admit, the code ends up being quite ugly. </p>\n<p>Now, this isn’t a dig at the way we’ve been doing things.  We’ve all been doing the best we can with what we have.  But, the JavaScript world has progressed and there is a better mental model that has developed and should even be expanded which will allow us to develop more complex and feature rich applications now and well into the future. <figure><img src=\"/uploads/2017/09/2017-09-05.jpg\" title=\"Thinking in JavaScript\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/froderik/8283727226/\">freddie boy</a> via <a href=\"//visualhunt.com/re/fb4c57\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Where-We’ve-Been\"><a href=\"#Where-We’ve-Been\" class=\"headerlink\" title=\"Where We’ve Been\"></a>Where We’ve Been</h2><p>I’ve been saying for years that the thing that holds most programmers back is that they always want to treat whatever new thing they are using like the last thing they were using.  And nowhere has this displayed itself more apparently than with JavaScript. </p>\n<p>Take the most obvious of examples.  Everyone knows, or should know by now, that JavaScript is not really object-oriented.  And yet, we’ve been trying to force JavaScript to BE object-oriented pretty much from the beginning.  This hasn’t been such a big problem, although one could argue that by trying to make JavaScript object-oriented, we’ve prevented it from being able to do some of the things it does best. </p>\n<p>Where we really run into trouble is with the event based, and often asynchronous nature of JavaScript. Think about this.  For years, we’ve been trying to synchronize something that is inherently asynchronous.  And this is where the real trouble begins. </p>\n<p>First, we had call back. Then promises. Now Observables. Soon async and await. And while callbacks are how the asynchronous nature of JavaScript is handle under the hood, the others are attempts to tame the asynchronous beast.  Especially async and await.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Now, this is where we are. Constantly trying to make JavaScript be something it isn’t. But, why is this? </p>\n<p>I believe it is because we are trying to impose models onto JavaScript that were useful in our desktop and server-side applications.  MVC, MVVM, Object-Oriented, and others all grew up in a world that was both synchronous, multi-threaded, and lent themselves well to an object-oriented model.  As various frameworks have evolved, the attempt has been to take these familiar models and apply them to an asynchronous, single threaded and not really object-oriented.  From where I sit, I am amazed any of this worked at all.  It seems to me it should have failed long ago.</p>\n<h2 id=\"A-Light-in-The-Darkness\"><a href=\"#A-Light-in-The-Darkness\" class=\"headerlink\" title=\"A Light in The Darkness\"></a>A Light in The Darkness</h2><p>Hey, I’ve been stuck in the old school model too.  But, I’m starting to think there may be a better way.  I’ve written about Redux and NgRX a lot on this blog.  I’ve fielded a lot of questions on the Angular slack channel.  Most of the questions revolve around the basic question of handling multiple asynchronous calls for data as part of one action.  All of the questions presuppose you would need to make each of the calls for data and then use some method of waiting for everything to return and assemble the data before moving on.  In each case, I recommend an alternative.  What if, each call was a unique action.  When each returns, another action is fired that places the return data in the appropriate store, or sub store.  In this model, we don’t care when the data comes back.  When it comes back, we deal with it appropriately.</p>\n<h2 id=\"An-Example\"><a href=\"#An-Example\" class=\"headerlink\" title=\"An Example\"></a>An Example</h2><p>Let’s go with one of the more common examples I see. </p>\n<p>I need to make a request for a set of records.  Once I have the results, for each record in the result, I need to go get a set of child records.  Here is how I would deal with this at a very high level using NgRX.  I’m sure this would work for multiple Redux patterns but they may call things by different names.</p>\n<ul>\n<li>Fire an Action that request the main set of records.</li>\n<li>The appropriate Effect responds to the action by making an AJAX call for the data.</li>\n<li>When the AJAX call returns,<ul>\n<li>fire an Action that puts the main records in the store.</li>\n<li>for each record in the result fire an Action asking for the child record(s).</li>\n</ul>\n</li>\n<li>The appropriate Effect(s) responds to the request for child records by making AJAX calls.</li>\n<li>When the data returns fire an Action that places the data in the store.</li>\n</ul>\n<p>Since your view is listening for changes on the entities in your store, it will update as the data comes in. Even better if you setup a debounce on your listener, the screen will update only when all of the data has been retrieved.</p>\n<h2 id=\"The-Key-Concept\"><a href=\"#The-Key-Concept\" class=\"headerlink\" title=\"The Key Concept\"></a>The Key Concept</h2><p>The key concept here is that we no longer care WHEN something happens.  We only care THAT it happens.  And rather than trying to setup forkJoins() or some other mechanism to flatten this all out, our code ends up being quite simple.  Discrete bits of functionality.  And now, all our asynchronous code becomes Reactive code.  We no longer need to flatten anything out.</p>\n<h2 id=\"Server-Side\"><a href=\"#Server-Side\" class=\"headerlink\" title=\"Server Side\"></a>Server Side</h2><p>Sadly, on the server side, things aren’t quite so easy.  At best we are tied to an implementation Observables and the various methods of combining Observables.  But I could also see some kind of client&#x2F;server implementation that used a framework like SignalR or Socket.io so that as the various Observables complete, the data on the client would get updated.  An interesting way to make all of the AJAXy calls rather transparent to the user.</p>\n<h2 id=\"Taking-it-To-the-Next-Level\"><a href=\"#Taking-it-To-the-Next-Level\" class=\"headerlink\" title=\"Taking it To the Next Level\"></a>Taking it To the Next Level</h2><p>You may call me a dreamer, but what if we made a JavaScript framework that was all message driven and reactive like I’ve described above?  We’ve done it before. </p>\n<p>When Windows was first created in ran on single core CPUs.  It was essentially single threaded.  The way it worked was primarily by putting “events” on a que and then sending the events to the appropriate application that needed to know about them. </p>\n<p>If you applied this model to JavaScript and folded in what I’ve described above, you could easily have a system that appeared to be multi-threaded even though it was single threaded at its core.</p>\n<h2 id=\"Don’t-Throw-the-Baby-Out-…\"><a href=\"#Don’t-Throw-the-Baby-Out-…\" class=\"headerlink\" title=\"Don’t Throw the Baby Out …\"></a>Don’t Throw the Baby Out …</h2><p>Now, you may think I’m endorsing throwing out object-oriented JavaScript.  Actually, I think most of the View stuff we do lends itself well to object-oriented programming.  But, most of our business rules lend themselves better to the model I’ve described above.  Functional and Reactive.</p>\n",
            "tags": [
                "javascript",
                "mvvm",
                "redux",
                "MVC",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "url": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "title": "Software Architecture without Test Driven Development is DANGEROUS!",
            "date_published": "2015-01-29T12:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/01/TddImpactsSoftwareArchitecture.png\" alt=\"TDD Impacts Software Architecture\" title=\"TddImpactsSoftwareArchitecture\"></p>\n<p>I’ve had two incidents recently that have shown me how TDD impacts Software Architecture.  Both of these are with code I’m working on.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Software-Architecture-Might-Do\"><a href=\"#What-Software-Architecture-Might-Do\" class=\"headerlink\" title=\"What Software Architecture Might Do\"></a>What Software Architecture Might Do</h2><p>Software architecture might specify how it is put together at a very high level.  For example, software architecture might specify that we use a three tiered approach or an n-tiered approach.  This approach places our view code is at one level, our business rules are at another level, and our data access at yet a third level.</p>\n<p>Software architecture might specify that we use MVC where our business rules are in the model, and a controller communicates between the view and the model to get data between the two.</p>\n<p>It might specify MVVM. This would have the view model take the place of the controller and manage the state information for the view.</p>\n<p>Software architecture might also tell us we should use MVP, giving the presenter the role of the controller and managing state information for the view and communicating with the business rules.</p>\n<p>But none of these patterns tell us how to write maintainable code.  They only tell us about the general software architecture.  This is like having a sketch of a house without a wiring or plumbing plan.</p>\n<h2 id=\"When-the-view-gets-in-the-way\"><a href=\"#When-the-view-gets-in-the-way\" class=\"headerlink\" title=\"When the view gets in the way\"></a>When the view gets in the way</h2><p>So, if you’ve been following this blog for a while, you may remember that I’m working with EXTjs.  Specifically, I’m working with EXTjs 4.2.  This has what Sencha calls an MVC architecture.  The problem is, what they refer to as the “Model” we would all recognize as a “Record” in a table, and their Controller is tightly coupled to their View.  That is, they call this MVC, but no one who understands what MVC is supposed to look like as a design pattern would recognize Sencha’s MVC as the real MVC design pattern.</p>\n<p>This makes the code incredibly hard to test.  The tendency is to write code that is highly dependent on the view.  The view is dependent on the DOM.  Rendering the view takes quite a bit of time.  So any test of your business rules end up taking an incredibly long time to test because they ultimately cause DOM manipulation to occur.</p>\n<p>It isn’t until you decide to borrow a bit of architecture from Angular that you realize that your business rules should be separate classes.  Angular has “Service Classes.” My Service classes are built specifically so they do not rely on anything else.</p>\n<p>By doing this, I was able to get two thirds of my code under test that run in about a second.  Prior to this, they took a half an hour.</p>\n<p>My next task was to get the view and my logic for enabling and disabling controls on the view more loosely coupled.  This was a bit more difficult because enabling and disabling controls is, naturally, a view thing.</p>\n<p>But again, taking a page from another framework, this time Knockout and Angular, I created a ViewModel.  My ViewModel holds the state of my view separate from the actual view.  When the state changes, it fires an event that actually changes the view, but this will allow me to test my enable&#x2F;disable logic, along with other code in my system, without ever instantiating the view.  Under test, the events will fire and nothing will happen.</p>\n<h2 id=\"Avoiding-Dependencies\"><a href=\"#Avoiding-Dependencies\" class=\"headerlink\" title=\"Avoiding Dependencies\"></a>Avoiding Dependencies</h2><p>Now the structure  of my code looks something like the following: View – ViewModel – EnableDisableController – EnableDisableService I could have put the EnableDisableService code in the EnableDisableController, and many people would, but what I’ve found is that if I do that, it would be nearly impossible to UNIT test my Enable&#x2F;Disable logic.  Why?  Because I would be creating all of the objects I needed for the logic in the same class the logic is in.</p>\n<p>By breaking the logic code into it’s own class that takes the ViewModel as a construction parameter, I can create my own ViewModel that looks exactly like what I need it to look like so that I can test the logic with entirely known values.</p>\n<p>These are just two of the ways that code architecture is impacted by Test Driven Development.  I’m sure there are others.</p>\n",
            "tags": [
                "tdd",
                "mvvm",
                "mvp",
                "MVC",
                "dependency injection",
                "software architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "url": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "title": "ASP.NET MVC - Controller to View",
            "date_published": "2013-10-30T19:04:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/ka-vol1-100.jpg\" alt=\"ka_vol1_100\"> A couple of weeks ago we looked at ASP.NET MVC routing in the MVC framework.  The routing controls which method in which controller gets called.</p>\n<p>The obvious next question is, how do we get from the controller to the view?</p>\n<p>First, we need to look at the general layout of our Views.</p>\n<p>If you open up the sample project that we created, you’ll see that there are a few directories that have been created.  The one we want to take a look at today is the View directory.</p>\n<p>You’ll see that under each View directory is a directory that has the same name as each of the controllers in the Controller directory as well as a directory named ‘Shared’ that has nothing to do with MVC directly.  Don’t worry about figuring that one out right now.</p>\n<p>Under each of the directories that map to the controller, you’ll see that there is an ASPX file that maps to each of the methods in the controllers, or is otherwise called from those controllers.</p>\n<p>The easiest way to get from the Controller action to the View it corresponds to is to return View() from that action, as in:</p>\n<p>public ActionResult About()<br>{<br>    return View();<br>}</p>\n<p>This would then call ~&#x2F;Home&#x2F;About</p>\n<p>But what if the new page needs to have data sent along to it?</p>\n<p>In this case, you can assign the data to the ViewData property.  The ViewData property works a lot like a Session object in that it is keyed.</p>\n<p>So, to pass data you would use</p>\n<p>ViewData[“Key”] &#x3D; objectData;</p>\n<p>You can see that the sample project does this in the HomeController.Index method.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ViewData[<span class=\"string\">&quot;Message&quot;</span>] = <span class=\"string\">&quot;Welcome to ASP.NET MVC!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And you can see that the Index.aspx file picks it up later:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;%= Html.Encode(ViewData[&quot;Message&quot;])%&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> To learn more about ASP.NET MVC visit</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://asp.net/mvc&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;ASP.NET MVC Website&quot;</span>&gt;</span></span><br><span class=\"line\">      http://asp.net/mvc<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Returning View() is not the only way of specifying the View we want to display from the Controller.  You can also return Redirect(), RedirectAction(), RedirectToRoute().</p>\n",
            "tags": [
                "asp.net",
                "controller",
                "MVC",
                "view"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "url": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "title": "ASP.NET MVC - Model != BLL or DAL",
            "date_published": "2009-02-11T10:36:37.000Z",
            "content_html": "<p>Last week I introduced the ASP.NET MVC framework by talking a bit about what the model, view and controller are. In the comments, John Meyer said,</p>\n<blockquote>\n<p>I respectfully disagree with your claim that the model is your BLL. MVC is a UI layer pattern, and as such all models, views, and controllers are strictly in the UI level.</p>\n</blockquote>\n<p>While historically, MVC has been described in the way I stated–while the ASP.NET MVC guys have also portrayed the Model as BLL or below–I have to agree with John.  Here’s why: At least as far as ASP.NET is concerned, the model is inherited from a specific class.  This means that any implementation code you place in the class will be forever tied to the class it inherits from.</p>\n<span id=\"more\"></span>\n\n<p>So if in some point in the future you decide that a WebForms implementation would work out better for you, or you wanted to put a Windows Forms implementation on top of it, you’d have to do quite a bit of refactoring of your code just so you could.</p>\n<p>If instead you treat the Model as a “View Model” as John suggests, and have the View Model call the Business Logic Layer, you end up with two major benefits.</p>\n<p>First, your Business Logic Layer is completely decoupled from the View implementation.  You are no longer forever tied to MVC as an architecture or ASP.NET MVC as the primary architecture.  You can use whatever view implementation you want.</p>\n<p>Second, you are not forced to put View specific data code in your Business Logic Layer.  Doing so would cloud the actual implementation of your BLL and actually further couple your view layer to your BLL, something that third tier is specifically designed to avoid.</p>\n<p>Based on the feedback from John and my own thinking on the subject, I recommend a three-tiered approach that places the MVC as the view entity calling the BLL from the Model of the MVC set, which would in turn call the Data Access layer.</p>\n",
            "tags": [
                "MVC",
                "view",
                "archietcture",
                "bll",
                "dal",
                "Three Tiered"
            ]
        }
    ]
}