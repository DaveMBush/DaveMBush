{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"pdf\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/itextsharp-tables/",
            "url": "http://davembush.github.com/itextsharp-tables/",
            "title": "iTextSharp Tables",
            "date_published": "2009-09-17T10:43:14.000Z",
            "content_html": "<p><img src=\"/uploads/2009/09/foodml04.jpg\" alt=\"food-ml-04\" title=\"food-ml-04\"> PDF Tables in iTextSharp work enough like HTML tables that the slight differences between the two make programming tables for a PDF a bit confusing the first time you try.</p>\n<p>I hope to describe some of those differences here so that your experience might be a bit smoother than mine was as you start to use tables in your PDF code.</p>\n<p>One of the first decisions you’ll need to make as you start working on your iTextSharp table is how many columns the table should have.  Keep in mind that the cells can be spanned, just like they can in HTML, so it is better to have too many columns than the bare minimum.  You can always adjust later.</p>\n<p>Once you’ve decided how many columns, you’ll need to decide how big you want each column to be.  Unlike HTML, the columns will not stretch if they are too small.</p>\n<p>Here is your initial code:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PdfPTable table= <span class=\"keyword\">new</span> PdfPTable(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">float</span>[] colWidths = &#123;<span class=\"number\">70</span>, <span class=\"number\">70</span>, <span class=\"number\">200</span>, <span class=\"number\">70</span>, <span class=\"number\">70</span>&#125;;</span><br><span class=\"line\">table.SetWidths(colWidths);</span><br></pre></td></tr></table></figure>\n\n<p>Keep in mind that the column widths are more of a weighting than an absolute unit. You’ll also need to determine how wide the iTextSharp table should be.  So far I’ve only needed to set this to 100%.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.WidthPercentage = (<span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Next you’ll want to set the default cell information.  This took me a while to decipher, and I’m still not exactly sure I completely understand it.  But here is an example from some code  I’ve created that sets the borders to white and sets the padding to 10 points.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.DefaultCell.Border = (PdfPCell.BOTTOM_BORDER);</span><br><span class=\"line\">table.DefaultCell.BorderColor = New iTextSharp.text.Color(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">table.DefaultCell.BorderColorBottom = New iTextSharp.text.Color(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">table.DefaultCell.Padding = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Next it is just a matter of adding the cells in left to right, top to bottom order.  While there is a way to specify the row and column you want to place the content into using another API, the default API expects the information in order.</p>\n<p>You can do this using the AddCell() method.  Again, this method will take a string, so you can add the content directly.  But if you are going to need control over the font size, I recommend that you first create a PdfPCell() object that has the content, passing its constructor a Phrase() object.  This will allow much more control.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.AddCell(<span class=\"function\">New <span class=\"title\">PdfPCell</span>(<span class=\"params\">New Phrase(<span class=\"string\">&quot;Last Name&quot;</span></span>)))</span>;</span><br></pre></td></tr></table></figure>\n\n<p>If you need to you can adjust the fonts for an entire row using a loop.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"function\">PdfPCell c <span class=\"title\">in</span> (<span class=\"params\">PdfPRow</span>)(<span class=\"params\">table.Rows(<span class=\"number\">1</span></span>)).Cells)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    c.Border = PdfPCell.BOTTOM_BORDER;</span><br><span class=\"line\">    c.BorderWidthBottom = <span class=\"number\">2</span>;</span><br><span class=\"line\">    c.PaddingBottom = <span class=\"number\">4</span>;</span><br><span class=\"line\">    c.PaddingTop = <span class=\"number\">2</span>;</span><br><span class=\"line\">    (Chunk)(c.Phrase(<span class=\"number\">0</span>)).Font = headerFont;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Finally, it might be useful to include a header row and a footer row.  This way, as your table spans pages, the header and footer rows print on each page. The code for this is really rather simple, even though it wasn’t clear the first time I looked. You place your header row as the first rows in your table and your footer row right after the header rows, prior to the real content.  Then you specify your header rows in your code as.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table.HeaderRows = <span class=\"number\">2</span>;</span><br><span class=\"line\">table.FooterRows = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Which would make the first two rows a header that displays on each page and the third row a footer that displays on each page.</p>\n<p>If you need to place your table at a specific location, you can use the column API to include the table in a column.</p>\n",
            "tags": [
                "iTextSharp",
                "PDF",
                "tables"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-finishing-up/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-finishing-up/",
            "title": "iTextSharp – HTML to PDF – Finishing Up",
            "date_published": "2009-08-12T10:19:24.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/tiger.jpg\" alt=\"tiger\" title=\"tiger\"> In the last post I mentioned there were a few topics we need to close up today.  The two topics we’ve left undone are popping the attribute information off the stack when we hit a closing element and dealing with the paragraph gap that normally appears between paragraph elements.</p>\n<p>The first thing you’ll want to do when you hit a closing element is to retrieve its name again.  Just like we did at the beginning element.  Once you have that you can pop the attribute information off the stack(s).</p>\n<p>You’ll also want to undo any indentation that you applied during the opening element.</p>\n<p>To handle the paragraph break, I defined a _crlfAtEnd attribute in my resource file.  If it was defined as true, I added an extra line feed at the end to account for the gap.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isBlock = Resources.html2pdf</span><br><span class=\"line\">  .ResourceManager</span><br><span class=\"line\">  .GetString(tagName + <span class=\"string\">&quot;_isBlock&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isBlock != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">  isBlock.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  isBlock = Resources.html2pdf</span><br><span class=\"line\">    .ResourceManager</span><br><span class=\"line\">    .GetString(tagName + <span class=\"string\">&quot;_crlfAtEnd&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isBlock != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">    isBlock.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    et = stack.Peek();</span><br><span class=\"line\">    Font f = getCurrentFont();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (et <span class=\"keyword\">is</span> Phrase)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ((Phrase)(et)).Add(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Chunk(<span class=\"string\">&quot;\\n&quot;</span>, f));</span><br><span class=\"line\">      stack.Pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p = <span class=\"keyword\">new</span> Paragraph();</span><br><span class=\"line\">  ((Paragraph)p).Add(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  ((Paragraph)p).SetLeading(m_leading, <span class=\"number\">1</span>);</span><br><span class=\"line\">  list.Add(p);</span><br><span class=\"line\">  stack.Push(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>One problem I’ve had with this in the past is that this cr&#x2F;lf gets added at the end even if the block is the last block.  I really need to find some way to detect that this is the last place this occurs either nested or in the outermost block.  But I’ll leave that enhancement for you.</p>\n",
            "tags": [
                "c#",
                ".net",
                "html",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-writing-the-pdf/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-writing-the-pdf/",
            "title": "iTextSharp – HTML to PDF – Writing the PDF",
            "date_published": "2009-08-04T10:24:18.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/B03B0085.jpg\" alt=\"B03B0085\" title=\"B03B0085\"></p>\n<p>Last week we parsed the HTML and created code that keeps track of the various attributes we are going to need when we create the PDF.  Today we will finish the code and create the Elements that we can include in our PDF document.</p>\n<p>One consideration we will need to keep in mind as we write out the PDF is that we have pushed various font characteristics that may overlap onto our stack.</p>\n<p>To get the current font, we will need to combine the attributes.  For example, HTML that looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>this should be bold<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Should render as bold, italics, underlined text.  But we only pushed one element at a time, so if all we look at is the last element we pushed onto the stack, all we will get is a bold font.</p>\n<p>To help with this, I created a helper method that does all the work of determining the correct current font and returning that to the caller.</p>\n<p>The first part of the method does the bulk of the work.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] fontArray = fontCharacteristicStack.ToArray();</span><br><span class=\"line\"><span class=\"built_in\">int</span> fontIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">fontNormalBoldItalic nbi = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; fontIndex &lt; fontArray.Length; fontIndex++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (fontArray[fontIndex].ToLower())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Bold;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italic&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Italic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bolditalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicbold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.BoldItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underline&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.Underline;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;boldunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlinebold&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineBold;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlineitalic&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlinebolditalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;underlineitalicbold&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;boldunderlineitalic&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;bolditalicunderline&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicunderlinebold&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;italicboldunderline&quot;</span>:</span><br><span class=\"line\">            nbi |= fontNormalBoldItalic.UnderlineBoldItalic;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The fontNormalBoldItalic thing is an enumeration that I used to allow me to merge the font characteristics.</p>\n<p>The second half gets the remainder of the font information which can be determined from the current element and applies the characteristics we determined above into the font.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Font font = FontFactory.getFont(currentFontName);</span><br><span class=\"line\"><span class=\"built_in\">string</span> s = FontFactory.TIMES;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (nbi)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Bold:</span><br><span class=\"line\">        font.setStyle(Font.BOLD);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Italic:</span><br><span class=\"line\">        font.setStyle(Font.ITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.BoldItalic:</span><br><span class=\"line\">        font.setStyle(Font.BOLDITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.Underline:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineBold:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.BOLD);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineItalic:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.ITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fontNormalBoldItalic.UnderlineBoldItalic:</span><br><span class=\"line\">        font.setStyle(Font.UNDERLINE | Font.BOLDITALIC);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">font.setSize(currentFontSize);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentFontColor.StartsWith(<span class=\"string\">&quot;#&quot;</span>))</span><br><span class=\"line\">    font.setColor(System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>),</span><br><span class=\"line\">        System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">3</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>),</span><br><span class=\"line\">        System.Convert.ToInt32(currentFontColor.Substring(<span class=\"number\">5</span>, <span class=\"number\">2</span>), <span class=\"number\">16</span>));</span><br><span class=\"line\"><span class=\"keyword\">else</span> font.setColor(System.Drawing.Color.FromName(currentFontColor));</span><br><span class=\"line\"><span class=\"keyword\">return</span> font;</span><br></pre></td></tr></table></figure>\n\n<p>This is all called from our case statement when the element is text.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> XmlNodeType.Text:</span><br><span class=\"line\">    et = stack.Peek();</span><br><span class=\"line\">    Font font = getCurrentFont();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (et <span class=\"keyword\">is</span> Phrase)</span><br><span class=\"line\">        ((Phrase)(et)).<span class=\"keyword\">add</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Chunk(reader.Value.</span><br><span class=\"line\">                Replace(<span class=\"string\">&quot; &amp;amp; &quot;</span>, <span class=\"string\">&quot; &amp; &quot;</span>).</span><br><span class=\"line\">                Replace(<span class=\"string\">&quot;&amp;nbsp;&quot;</span>,<span class=\"string\">&quot; &quot;</span>), font));</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that I’ve also added code at this point that translates the ampersand and the none breaking space so they render correctly in the PDF document.</p>\n<p>Next time we address this topic we will try to close this all up with popping the attributes off the stack and dealing with the gaps between block elements that should (or should not) appear.</p>\n",
            "tags": [
                "c#",
                "html",
                "iTextSharp",
                "PDF",
                "fonts",
                "stack"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-parsing-html/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-parsing-html/",
            "title": "iTextSharp – HTML to PDF – Parsing HTML",
            "date_published": "2009-07-28T11:03:54.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/iStock_000004663193Medium.jpg\" alt=\"iStock_000004663193Medium\" title=\"iStock_000004663193Medium\"></p>\n<p>Now that we have the HTML cleaned up, the next thing we will want to do is to parse the HTML.</p>\n<p>In my actual code for this, I parse the HTML and create the PDF at the same time, but for the purposes of these posts, I’m going to deal primarily with parsing the HTML here and then deal with the PDF creation code later.</p>\n<p>The key to parsing the HTML is that it is in XHTML form.  This allows us to use the XML APIs that are built into .NET.  For the purposes of parsing the HTML so that we can convert it to PDF code, we need to use the XMLTextReader.</p>\n<p>Every time you Read() an XMLTextReader object, you will either be on a beginning tag, an ending tag, or text.  So the core of our loop looks something like this</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XmlTextReader reader =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> XmlTextReader(xhtmlString,</span><br><span class=\"line\">        XmlNodeType.Element, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (reader.Read())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (reader.NodeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Element:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.EndElement:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Text:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Whitespace:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where xhtmlString is the cleaned up HTML code from last week.</p>\n<p>The core part of the translation is dependent on the fact that we have matching open and closing tags and that each time we hit an open tag, we can determine what the characteristics of that tag are.  Bold, underline, font, font size, etc.</p>\n<p>So each time we hit the open tag, we will look up the characteristics.  For simplicity, I put this information in a resource file so that I could just look it up using code that looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontName = Resources.html2pdf .ResourceManager</span><br><span class=\"line\">    .GetString(tagName + <span class=\"string\">&quot;_fontName&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>rather than having another long case statement in my code.</p>\n<p>Once we have the information we want from the resource file, we place the current characteristics on a stack.  I created a different stack for each element, but in hindsight, it might have been better to create a structure with the information and use one stack of type in that structure.</p>\n<p>Here’s the code that does that</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!reader.IsEmptyElement)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    fontName = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontName&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontName != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontName = fontName;</span><br><span class=\"line\">    fontSize = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontSize&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontSize != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontSize = System.</span><br><span class=\"line\">            Convert.ToSingle(fontSize);</span><br><span class=\"line\">    fontColor = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontColor&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontColor != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontColor = fontColor;</span><br><span class=\"line\">    fontCharacteristics = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontCharacteristics&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontCharacteristics != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontCharacteristics =</span><br><span class=\"line\">            fontCharacteristics;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note that we only push the attributes of the element onto the stack if there is no content in the element.  This is because the closing node type will never be triggered on an element that has no content inside of it (BR and IMG tags, for example).</p>\n<p>The final thing you’ll need to keep track of is if the element is a block element (P, DIV, etc) an inline tag (SPAN, A, etc) a list (OL,UL,LI), or even how much indentation is needed (primarily for list).</p>\n<p>Frankly, the code for this was not fun to write.  Keep in mind too that there is nothing in here to handle special font characteristic attributes.  So your DIV tags can’t specify what font they should use or even how wide the font should be.  Not because it can’t be done, but because I have not had the need.</p>\n<p>Here’s that code</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strIndent = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_indent&quot;</span>);</span><br><span class=\"line\">isBlock = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_isBlock&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">string</span> isList = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_isList&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isBlock != <span class=\"literal\">null</span> &amp;&amp; isBlock.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> strIsList =</span><br><span class=\"line\">        Resources.html2pdf .ResourceManager</span><br><span class=\"line\">        .GetString(tagName + <span class=\"string\">&quot;_isULList&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIsList != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        strIsList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> List(<span class=\"literal\">false</span>,</span><br><span class=\"line\">            System.Convert .ToSingle(strIndent));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        strIsList = Resources</span><br><span class=\"line\">            .html2pdf.ResourceManager</span><br><span class=\"line\">            .GetString(tagName + <span class=\"string\">&quot;isOLList&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strIsList != <span class=\"literal\">null</span> &amp;&amp; strIsList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = <span class=\"keyword\">new</span> List(<span class=\"literal\">true</span>,</span><br><span class=\"line\">                System.Convert.ToSingle(strIndent));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isList != <span class=\"literal\">null</span> &amp;&amp; isList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> iTextSharp.text.ListItem();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> Paragraph();</span><br><span class=\"line\">                ((Paragraph)p)</span><br><span class=\"line\">                    .SetLeading(m_leading, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack.Count != <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    IElement e = stack.Pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isList != <span class=\"literal\">null</span> &amp;&amp; isList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        ((iTextSharp.text.List)</span><br><span class=\"line\">            (list[list.Count - <span class=\"number\">1</span>])).Add(p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> list.Add(p);</span><br><span class=\"line\">    stack.Push(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that there is a bit of code in here that deals with a p variable.  This code is needed so that if we are dealing with a block tag, we have a paragraph or list item to put the other content inside of the block when we hit it.  If we are dealing with an inline tag, we deal with that when we add the text.</p>\n<p>Next week, we will show how to handle text and closing tags.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "html",
                "iTextSharp",
                "PDF",
                "parsing",
                "xhtml"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-cleaning-html/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-cleaning-html/",
            "title": "iTextSharp – HTML to PDF – Cleaning HTML",
            "date_published": "2009-07-20T10:23:07.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/H05K0013.jpg\" alt=\"H05K0013\" title=\"H05K0013\"> The last prerequisite step prior to actually converting our HTML into PDF code is to clean up the HTML. The method I use takes advantage of the XML parser in .NET but in order to use that we have to have XHTML compliant XML. For this exercise, what I am most concerned about is that the HTML tags all have matching closing tags, that the tags are nested in a hierarchical structure, and that the tags all are lower case. Some of this we will have to rely on the user to provide, like properly nesting the tags.  But some of this we can attempt to clean up in our code.  If you know you will have complete control over your HTML, you might be able to skip this step.  But I think the code is simple enough that you’ll want to add it anyhow.  In my code, I have a function that accepts the HTML string and returns a collection of IElements that my main code will insert into the PDF.  The first thing I do in that function is make sure the code starts and ends with an open and close paragraph tag.  This is to ensure that I have at least one element that I can work with when I do the translation.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!xhtmlString.ToLower().StartsWith(<span class=\"string\">&quot;&lt;p&gt;&quot;</span>))</span><br><span class=\"line\">    xhtmlString = <span class=\"string\">&quot;&lt;p&gt;&quot;</span> + xhtmlString + <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The next thing I do is make sure that all of the white space that isn’t the space character is removed from the code.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhtmlString = xhtmlString</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;\\</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>, <span class=\"built_in\">string</span>.Empty)</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"built_in\">string</span>.Empty)</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"built_in\">string</span>.Empty);</span><br></pre></td></tr></table></figure>\n\n<p>Then we want to change our BR tags to auto close.  Since I don’t deal with IMG tags in this code I don’t bother auto closing those tags.  If you decide to embellish this code to use the IMG tag, you’ll want to add code to fix that as well.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhtmlString = xhtmlString</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;&lt;BR&gt;&quot;</span>, <span class=\"string\">&quot;&lt;br /&gt;&quot;</span>)</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;&lt;br&gt;&quot;</span>, <span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Since my code currently ignores any attributes in the SPAN tag, I then remove the span tag’s attributes.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Text.RegularExpressions.Regex re = <span class=\"literal\">null</span>;</span><br><span class=\"line\">System.Text.RegularExpressions.Match match = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">re = <span class=\"keyword\">new</span> System.Text.RegularExpressions.Regex(<span class=\"string\">&quot;&lt;span.*?&gt;&quot;</span>);</span><br><span class=\"line\">match = re.Match(xhtmlString);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (match.Success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (System.Text.RegularExpressions.Capture c <span class=\"keyword\">in</span> match.Captures)</span><br><span class=\"line\">        xhtmlString = xhtmlString.Replace(c.Value, <span class=\"built_in\">string</span>.Empty);</span><br><span class=\"line\">    match = match.NextMatch();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then I force all my tags to lower case</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re = <span class=\"keyword\">new</span> System.Text.RegularExpressions.Regex(<span class=\"string\">&quot;&lt;\\\\\\w+?&quot;</span>);</span><br><span class=\"line\">match = re.Match(xhtmlString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (match.Success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (System.Text.RegularExpressions.Capture c <span class=\"keyword\">in</span> match.Captures)</span><br><span class=\"line\">        xhtmlString = xhtmlString.Replace(c.Value, c.Value.ToLower());</span><br><span class=\"line\">    match = match.NextMatch();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">re = <span class=\"keyword\">new</span> System.Text.RegularExpressions.Regex(<span class=\"string\">&quot;&lt;/\\\\w+?&gt;&quot;</span>);</span><br><span class=\"line\">match = re.Match(xhtmlString);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (match.Success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (System.Text.RegularExpressions.Capture c <span class=\"keyword\">in</span> match.Captures)</span><br><span class=\"line\">        xhtmlString = xhtmlString.Replace(c.Value, c.Value.ToLower());</span><br><span class=\"line\">    match = match.NextMatch();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Because the PDF code will treat each white space character as a character and HTML treats a string of white space characters as one space, I strip out any extra white space characters.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (xhtmlString.Contains(<span class=\"string\">&quot;&gt; &quot;</span>))</span><br><span class=\"line\">    xhtmlString = xhtmlString.Replace(<span class=\"string\">&quot;&gt; &quot;</span>, <span class=\"string\">&quot;&gt;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (xhtmlString.Contains(<span class=\"string\">&quot;  &quot;</span>))</span><br><span class=\"line\">    xhtmlString = xhtmlString.Replace(<span class=\"string\">&quot;  &quot;</span>, <span class=\"string\">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>And then I convert any special HTML strings to their text equivalent.  Right now, I only have to deal with the ampersand character.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhtmlString = xhtmlString.Replace(<span class=\"string\">&quot; &amp; &quot;</span>, <span class=\"string\">&quot; &amp;amp; &quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Lastly, in order to ensure that my html string gets parsed correctly, I attempt to quote all my attributes</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (length != xhtmlString.Length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    length = xhtmlString.Length;</span><br><span class=\"line\">    xhtmlString = System.Text</span><br><span class=\"line\">        .RegularExpressions.Regex .Replace(xhtmlString,</span><br><span class=\"line\">        <span class=\"string\">&quot;(&lt;.+?\\\\s+\\\\w+=)(\\[^\\&quot;&#x27;\\]\\\\S*?)(\\[\\\\s&gt;\\])&quot;</span>, <span class=\"string\">&quot;$1\\&quot;$2\\&quot;$3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the exception of some features I’ve already noted that you might want to add, we’ve done all we can to clear up the code.  Any other problems are user input errors that will need to be corrected manually. Next, we can parse this HTML and convert it into PDF IElements. This process of cleaning up the HTML would all be a lot easier if HTML Tidy were converted to a managed code library.  (Yes, I know you can run it from .NET, but so far it is an external EXE, not managed code.)</p>\n",
            "tags": [
                "c#",
                "html",
                "iTextSharp",
                "PDF",
                "htmltidy"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-prerequisites/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-prerequisites/",
            "title": "iTextSharp – HTML to PDF - Prerequisites",
            "date_published": "2009-07-14T10:40:39.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/animal015.jpg\" alt=\"animal-015\" title=\"animal-015\"></p>\n<p>Before we get into the nitty gritty of parsing the HTML so that we can create PDF code from it, it is important that we develop the concept of how text layout works in iTextSharp.  So today we will cover those basics.</p>\n<p>The first type of element we want to deal with when we parse our HTML into a PDF is the Paragraph element.</p>\n<p>When we get to actually parsing our HTML to PDF code we will use the Paragraph object for all of our block elements.  This allows us to add other Paragraphs and Chunks into it which we can format.</p>\n<p>A Chunk is our second object that we will be using.  The Chunk is the main object that will allow us to format the font.  In fact, even if our block element specifies some sort of specific font, the font doesn’t actually get applied in the code until we add the text.</p>\n<p>Typical code to place text into a PDF document would look something like this</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"keyword\">new</span> Paragraph(<span class=\"keyword\">new</span> Chunk(<span class=\"string\">&quot;text that needs a font&quot;</span>,</span><br><span class=\"line\">    FontFactory.GetFont(<span class=\"string\">&quot;Arial&quot;</span>, <span class=\"number\">10</span>, Font.NORMAL, Color.BLACK)));</span><br><span class=\"line\">p.Alignment = (Element.ALIGN_CENTER);</span><br><span class=\"line\">ct.AddElement(p);</span><br></pre></td></tr></table></figure>\n\n<p>where “ct” is an object of type ColumnText that we discussed last week.</p>\n<p>The only other two classes we need to discuss are the list classes.  We use the List to create an item that will handle both the OL and UL tags.  The ListItem class will handle the individual items within the list.  The List constructor handles which of the two types of list we are dealing with by specifying true or false in the first parameter, numbered.</p>\n<p>I have not yet added the ability to handle tables to my HTML parser mainly because I have not had the need.  I think once I show you how to create tables and how to parse HTML you should be able to handle adding table parsing code yourself.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "html",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-positioning-text/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-positioning-text/",
            "title": "iTextSharp – HTML to PDF – Positioning Text",
            "date_published": "2009-07-08T10:50:15.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/misc_vol1_012.jpg\"></p>\n<p>The next series of things I’m going to introduce about using iTextSharp are all going to lead toward taking HTML text and placing it on the PDF document.</p>\n<p>There are several items we need to cover before we even get to the part about converting the text from HTML to PDF text.  The first is placing the text on the document where it is supposed to be.</p>\n<p><em>Once again, we are building on previous articles about using iTextSharp.  So if you are just jumping in, you might want to go take a look at the other articles.  You can find a list at the bottom of this post.</em></p>\n<p>To place a block of text on the screen that is going to have multiple formats in it (bold, underline, etc) I use the ColumnText class.  This allows me to specify the rectangle or, if I want, some irregular shape, to place the text in.  I handle determining where this rectangle is on the page in the same way that I determine where an image should go.  I have the designer place a form field on the screen and then I use that to get my coordinates.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span>[] fieldPosition = <span class=\"literal\">null</span>;</span><br><span class=\"line\">fieldPosition =</span><br><span class=\"line\">    fields.GetFieldPositions(<span class=\"string\">&quot;fieldNameInThePDF&quot;</span>);</span><br><span class=\"line\">left = fieldPosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">right = fieldPosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">top = fieldPosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">bottom = fieldPosition[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rotation == <span class=\"number\">90</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    left = fieldPosition[<span class=\"number\">2</span>];</span><br><span class=\"line\">    right = fieldPosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">    top = pageSize.Right - fieldPosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">    bottom = pageSize.Right - fieldPosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Once I have the position, the next thing I need to do is to create my ColumnText object.  This requires the same ContentByte object that we used for the images.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PdfContentByte over = stamp.GetOverContent(<span class=\"number\">1</span>);</span><br><span class=\"line\">ColumnText ct = <span class=\"keyword\">new</span> ColumnText(over);</span><br></pre></td></tr></table></figure>\n\n<p>And now I can set the rectangle to print into.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ct.SetSimpleColumn(left, bottom, right, top,</span><br><span class=\"line\">    <span class=\"number\">15</span>, Element.ALIGN_LEFT);</span><br></pre></td></tr></table></figure>\n\n<p>The 15 represents the leading you want (space between characters vertically). You may need to adjust that number.</p>\n<p>Once you have your rectangle, you can add paragraphs to it.  Paragraphs are composed of smaller units called chunks that can be formatted.  If you want a paragraph that is all formatted the same you can make a call that looks like this.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Paragraph p = <span class=\"keyword\">new</span> Paragraph(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Chunk(<span class=\"string\">&quot;Some Text here&quot;</span>,</span><br><span class=\"line\">        FontFactory.GetFont(</span><br><span class=\"line\">          <span class=\"string\">&quot;Arial&quot;</span>, <span class=\"number\">14</span>, Font.BOLD, Color.RED)));</span><br></pre></td></tr></table></figure>\n\n<p>and then add the paragraph to your rectangle</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ct.AddElement(p);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "asp.net",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-adding-images/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-adding-images/",
            "title": "iTextSharp – Adding Images",
            "date_published": "2009-06-30T11:33:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/AutumnLeaves.jpg\" alt=\"Maple leaves in Autumn.\" title=\"Maple leaves in Autumn.\"></p>\n<p>Last week I showed how to use form fields to control placement of dynamic data.</p>\n<p>But what if you want to dynamically place images in your PDF?  You can stuff them into a form field like you can with text.</p>\n<span id=\"more\"></span>\n\n<p>However, one of the items you can retrieve from the form field is its location on the screen.  Using this, a little math, and some iTextSharp image code, we can place images in our PDF where the form field was located.  Here’s how I do it.</p>\n<p>First, this code builds on the previous code I’ve already demonstrated in previous articles.  If this is your first time here, you’ll want to scroll to the bottom of this post where it says, “Other Posts in iTextSharp” and read them first.</p>\n<p>To retrieve the position of the form field, you’ll need to call the field’s GetFieldPositions() method.  It is plural because it is going to get the position of every field in the document with the name you specify.  For our purposes, we will assume that the field only exists once and is on the first page.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span>[] topImagePosition = <span class=\"literal\">null</span>;</span><br><span class=\"line\">topImagePosition =</span><br><span class=\"line\">    fields.GetFieldPositions(<span class=\"string\">&quot;m_topPicture&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>The float array that is returned has five elements:</p>\n<ul>\n<li>Page Number (starting at 1)</li>\n<li>Left</li>\n<li>Bottom</li>\n<li>Right</li>\n<li>Top</li>\n</ul>\n<p>If the page rotation is 90 degrees, you’ll want to rotate the position information.  You can check the rotation using</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation = pdfReader.GetPageRotation(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Where <code>GetPageRotation()</code> takes a parameter representing the page number, starting at 1.</p>\n<p>You can rotate the positions using this code.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left = topImagePosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">right = topImagePosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">top = topImagePosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">bottom = topImagePosition[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rotation == <span class=\"number\">90</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    left = topImagePosition[<span class=\"number\">2</span>];</span><br><span class=\"line\">    right = topImagePosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">    top = pageSize.Right - topImagePosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">    bottom = pageSize.Right - topImagePosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next, you’ll want to retrieve the image you want to display on the PDF.  There are APIs for retrieving the image from a web site, but most of the time you’ll be retrieving the image from your hard drive.  Here is the code to do that.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iTextSharp.text.Image topImage =</span><br><span class=\"line\">    iTextSharp.text.Image.GetInstance(</span><br><span class=\"line\">    Server.MapPath(imagelocation +</span><br><span class=\"line\">    productRow.imagefilename));</span><br></pre></td></tr></table></figure>\n\n<p>Before we place the image on the page, the next thing you’ll want to do is scale the image so that it fits in the rectangle</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topImage.ScaleToFit(right - left, top - bottom);</span><br></pre></td></tr></table></figure>\n\n<p>And then we position it</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topImage.SetAbsolutePosition(</span><br><span class=\"line\">    left + ((right - left) - topImage.ScaledWidth) /</span><br><span class=\"line\">    <span class=\"number\">2</span>, top - topImage.ScaledHeight);</span><br></pre></td></tr></table></figure>\n\n<p>and then we put it into the PDF</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PdfContentByte contentByte = stamp.GetOverContent(<span class=\"number\">1</span>);</span><br><span class=\"line\">contentByte.AddImage(topImage);</span><br></pre></td></tr></table></figure>\n\n<p>Notice the contextByte thing.  That’s the critical part of how we get the images into the PDF.</p>\n<p>Finally, you’ll want to remove the field from the form so that it doesn’t show up.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fields.RemoveField(<span class=\"string\">&quot;m_topPicture&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>I’m not sure this is really needed, but it doesn’t hurt to clean up things you no longer need.</p>\n",
            "tags": [
                "c#",
                "images",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-the-easy-way/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-the-easy-way/",
            "title": "iTextSharp – The easy way",
            "date_published": "2009-06-24T11:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/ka_vol1_038Copy.jpg\" alt=\"iTextSharp The Easy Way\" title=\"iTextSharp The Easy Way\"> When I first started generating PDFs dynamically, I was overwhelmed by the complexity of the API.  Not just with iTextSharp, but it seemed that all of the APIs were complex. In looking through the API and comparing it to what I was actually trying to accomplish, I found there was a very small subset of classes and methods that I needed to use to accomplish the task at hand.  Now that I’ve learned more, I still use this same subset of commands for 90% of what I need to do in iTextSharp.  The reason we produce PDFs programmatically at all is because we need to dynamically generate some information on the page.  Most of the time, this information comes out of a database and gets placed on the same location of the page each time the page is generated.  The rest of the information is static. So what I normally do is have my designer or project manager create a PDF for me with form fields located where he wants the information to go.  Using the form fields, he can define the font, size, color, and position he wants to display the text with.  All I have to worry about is getting the text into the field. This works out nicely because once I’ve filled in the forms, he can move them around until he’s happy with them without asking for my help. We’ve already covered <a href=\"/2009/06/17/pdfs-using-itextsharp/\">setting the MIME type information</a> in our first post, so the rest of this discussion will assume you’ve already done that. The next thing you’ll want to do is load the PDF document that has the form fields in it and create a stamper object.  The stamper is what we use to grab the form fields object which we will use to set the form field values.</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PdfReader pdfReader = <span class=\"keyword\">new</span> PdfReader(fileSpecifier);</span><br><span class=\"line\">PdfStamper stamp =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> PdfStamper(pdfReader, Response.OutputStream);</span><br><span class=\"line\">AcroFields fields = stamp.AcroFields;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that the PdfStamper constructor takes two parameters.  The first is the PdfReader object we created above it.  The second is the Response.OutputStream.  This is how we can stream binary data back to the browser.  Make sure you use OutputStream and not Output.  Otherwise you’ll get a compiler error. Now, filling the form fields is just a matter of calling SetField().  The first parameter is the name of the field we want to set and the second parameter is the content we want to set it to.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fields.SetField(<span class=\"string\">&quot;fieldName&quot;</span>, <span class=\"string\">&quot;Field Content Goes Here&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>The cool thing about this is that you can have multiple fields in your PDF with the same name and one SetField() call will set them both. Once you’ve filled all your fields, you “flatten” the form and send the information back to the browser.  If you choose to not flatten the form, you’ll end up with the form fields showing in the results.  Most of the time this is not what we had in mind.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stamp.FormFlattening = (<span class=\"literal\">true</span>);</span><br><span class=\"line\">stamp.Close();</span><br><span class=\"line\">Response.End();</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "iTextSharp",
                "PDF",
                "acrofields",
                "form fields",
                "outputstream",
                "pdfreader",
                "pdfstamper"
            ]
        },
        {
            "id": "http://davembush.github.com/pdfs-using-itextsharp/",
            "url": "http://davembush.github.com/pdfs-using-itextsharp/",
            "title": "PDFs Using iTextSharp",
            "date_published": "2009-06-17T12:06:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/iStock_000002747386Medium.jpg\" alt=\"iStock_000002747386Medium\" title=\"iStock_000002747386Medium\"> There are several libraries on the market now that allow you to create PDF documents from your .NET applications.  The one I’ve chosen to use is <a href=\"//sourceforge.net/projects/itextsharp/\">extSharp</a>, an open source library that is a port of the open source library for Java,  <a href=\"//www.lowagie.com/iText/\">iText</a>.</p>\n<p>While there are several sites on the Internet that provide examples of how to use iText, I’ve found that the documentation for iTextSharp is a little harder to come by.  So I thought it might be helpful if I provided some posts on how I use iTextSharp along with some of the gotchas I’ve encountered along the way.</p>\n<span id=\"more\"></span>\n\n<p>To use iTextSharp, you will need to add a reference to the library in your code, or simply drop the code into your bin directory of your ASP.NET application.</p>\n<p>The main trick in translating the iText samples and documentation to iTextSharp is that iTextSharp makes the Java properties in iText (get_PropertyName_()&#x2F;set_PropertyName_()) .NET properties, (PropertyName).</p>\n<p>You’ll also need to know that the namespace for iTextSharp is different from iText.  Be sure to include the following line at the top of any code you write that uses iTextSharp</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> iTextSharp.text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> iTextSharp.text.pdf;</span><br></pre></td></tr></table></figure>\n\n<p>To get your ASP.NET page to return a PDF file, you’ll want to add the following code at the top of your Page_Load event handler:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response.Clear();</span><br><span class=\"line\">Response.ContentType = <span class=\"string\">&quot;application/pdf&quot;</span>;</span><br><span class=\"line\">Response.AddHeader(<span class=\"string\">&quot;ContentType&quot;</span>, <span class=\"string\">&quot;application/pdf&quot;</span>);</span><br><span class=\"line\">Response.AddHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;inline;filename=\\&quot;FileName.pdf\\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>The <code>Response.Clear()</code> line clears out any input that has already been sent back to the browser.</p>\n<p>The next line tells the browser that what is coming back is a PDF, not HTML.</p>\n<p>The “Content-Disposition” line allows the browser to know that we want the file IN the browser window rather than downloading the file.</p>\n<p>Finally, yes, I know there are two ContentType lines.  But I took this from working code and while I can’t remember why I wrote it like that, it works.  If you can get it working with only one line, go for it.</p>\n<p>Now that we have the basics out of the way, we can concentrate on actually generating PDFs in future posts.</p>\n",
            "tags": [
                "asp.net",
                "iTextSharp",
                "PDF",
                "iText"
            ]
        }
    ]
}