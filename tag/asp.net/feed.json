{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"asp.net\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/",
            "url": "http://davembush.github.com/what%E2%80%99s-the-truth-about-running-asp-net-webapi-asynchronously/",
            "title": "What’s the Truth about Running ASP.NET WEBAPI Asynchronously?",
            "date_published": "2016-11-15T12:30:00.000Z",
            "content_html": "<p>When Node.JS started getting popular, one of the major benefits people were proclaiming about it is that the web servers running under Node.JS were all processing the request asynchronously. This is how a single threaded environment was able to handle a significant load without falling over. Cool! So, you might wonder how does ASP.NET process request? It processes code synchronously. So, one might assume that if there were a way of running code asynchronously, we might be able to improve the performance of our applications. But can we? And if we can, is it worth it?</p>\n<figure>![](/uploads/2016/11/image-2.png \"What’s the Truth about Running ASP.NET WEBAPI Asynchronously?\") Photo via [VisualHunt](//visualhunt.com/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>The general idea of an asynchronous request is that a thread handles the incoming requests and immediately fires up another thread to handle the request. When the processing thread is done, it calls a callback function to notify the request thread that it is ready to send data back to the client. Meanwhile, the request thread has been able to handle additional request from additional clients. In contrast, a synchronous request processes the request itself so it is unable to handle any additional request.</p>\n<p>In Node.JS, this is important because there is only one thread. It handles all of the request. If we had blocked, there would be no way of processing additional incoming request.</p>\n<p>In ASP.NET, we are running in a system that can run multiple thread per process. So, we are able to handle multiple request because each thread is handled by a different thread. The problem, however, is that there are a limited number of threads that we can spawn per process and eventually we are handling so much traffic that we can’t handle any more. The longer our request take to respond, the more likely we are to experience this problem.</p>\n<p>Imagine the kind of through put we could get on an ASP.NET application if we could make it run asynchronously, more like how Node.JS does.</p>\n<h2 id=\"So-What’s-the-Problem\"><a href=\"#So-What’s-the-Problem\" class=\"headerlink\" title=\"So What’s the Problem?\"></a>So What’s the Problem?</h2><p>So, all of this sounds really good. But then when I went to try to find out how it works, I stumbled on a Stack Overflow question that basically indicated that it shouldn’t work. This, along with a project I was working on, lead me down the road of testing it for myself. Lesson: “Just because someone says something is true, doesn’t mean it is!”</p>\n<h2 id=\"The-Test\"><a href=\"#The-Test\" class=\"headerlink\" title=\"The Test\"></a>The Test</h2><h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p><strong>WestWind Web Surge (WWWS)</strong> <a href=\"//websurge.west-wind.com/\">http://websurge.west-wind.com/</a> Simple load testing tool.</p>\n<p>Add a URL, set number of threads to run concurrently, run, check report.</p>\n<p>There is a command line version you can use as well.</p>\n<p><strong>Strathweb.CacheOutput</strong> There is a version for WEB API v1 and v2.</p>\n<p>This allows us to add server and client side caching information to REST end points.</p>\n<p><strong>Web Server</strong> I’m using the web server built into Visual Studio 2015. I’m assuming IIS performs similarly.</p>\n<p>All the tests were run on an 8 core computer with 16 gig of RAM. The numbers are for relative comparison. Your tests may show slightly different results.</p>\n<h3 id=\"Baseline\"><a href=\"#Baseline\" class=\"headerlink\" title=\"Baseline\"></a>Baseline</h3><p>For a baseline, I ran WWWS against this end point:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Get</span>()</span> &#123;</span><br><span class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice that while I am returning static information, I am simulating processing time with the Sleep() method. This makes it look like it took a minute to process the information prior to returning the information from the server.</p>\n<p>I was able to run WWWS against the end-point for 20 seconds at a rate of 100 threads at a time without any errors. However, I was only able to achieve 28 request per second with an average response time of 4 seconds. Pretty slow once you see the optimizations.</p>\n<h3 id=\"Asynchronous-Optimization\"><a href=\"#Asynchronous-Optimization\" class=\"headerlink\" title=\"Asynchronous Optimization\"></a>Asynchronous Optimization</h3><p>The next test was to see what performance improvements I could get by running the end-point asynchronously.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt; Get()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note: you cannot just add the <code>async</code> keyword to the method, you must also have code you are <code>await</code>-ing inside your method. Otherwise the code will fall back to the baseline code. This is why I replaced Sleep() with Task.Delay(). It gives me something to await, while still waiting for a second prior to returning from the request.</p>\n<p>Keeping all the parameters the same and running this code, request per second improved to 97. Average response time was just over 1 second.</p>\n<p>I wasn’t able to get any failures within 20 seconds until I set simultaneous threads to 2000. At 1900 simultaneous threads the average response time was 9 seconds and the request processed per second was 444.</p>\n<p>So while the response time was longer, more items were able to be processed by simply making the call asynchronous. So, that seems to prove that making the request asynchronous improves the performance.</p>\n<h2 id=\"Even-Better-Performance\"><a href=\"#Even-Better-Performance\" class=\"headerlink\" title=\"Even Better Performance\"></a>Even Better Performance</h2><p>But wait! There’s more.</p>\n<p>What would it be like if we added caching onto this? By using the <code>CacheOutput</code> mechanism, we gain further benefit. While it might be difficult to add this in every situation, at least for static output this is something to be considered. I used the Strathweb implementation because it most closely implemented what had previously been available for WebForms and it now available in .NET Core The code</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">CacheOutput(ClientTimeSpan = 50000,ServerTimeSpan = 50000)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;<span class=\"built_in\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[] &#123; <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;value2&quot;</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>While WWWS doesn’t allow us to test client caching, it does allow us to test server caching.</p>\n<p>In the code above I set the cache time to 50 seconds. Using the same 1900 threads as before, the average response time was 6 seconds with an average request processed per second of 347. I gave up maxing out the system at 3200 threads. This was returning results on average after 10 seconds of the request with request processed per second of 344.</p>\n<p>If you were able to implement smart caching so new data was returned from the server only when something had actually changed, I’m sure you could achieve similar results with data that changed more frequently than your basic lookup tables.</p>\n",
            "tags": [
                "asp.net",
                "async",
                "await",
                "webapi"
            ]
        },
        {
            "id": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "url": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "title": "Using Node.js and Gulp with ASP.NET in Visual Studio 2015",
            "date_published": "2016-01-21T13:30:00.000Z",
            "content_html": "<p>As I’ve written before, <a href=\"/tags/angular-js/\">I’m using AngularJS a lot</a> recently to write the client side of my web applications.  As I’ve gotten to the end of my current project, I found myself needing to implement cache busting and while I am at it compression.  But because I’m <a href=\"/asp-net-angular-js-html5mode/\">using a regular HTML page to serve up the shell for my single page application</a>, using the regular ASP.NET on the fly compression wasn’t going to work for this application.</p>\n<p>But there are a lot of tools in the Node.js space that will work.  Would it be possible to wire node.js and Gulp with ASP.NET in my existing web project? It turns out you can.</p>\n<p>Although, at this point, it isn’t as straightforward as most other things in Visual Studio.</p>\n<p><img src=\"/uploads/2016/01/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Installing-Node-js\"><a href=\"#Installing-Node-js\" class=\"headerlink\" title=\"Installing Node.js\"></a>Installing Node.js</h2><p>I’m assuming that you’ve already installed Visual Studio 2015.  If you did that, you already have Node.js installed.  The problem is, it isn’t the most recent version.  So, what you want to do is to install the most recent of version from the <a href=\"//nodejs.org\">Node.js site</a> manually.</p>\n<p>Once you have Node.js installed, the next thing you will need to do is that you’ll need to configure Visual Studio to use the version you installed instead of the version it installed.  To do this, navigate to “Tools” &gt; “Options”.  In the resulting dialog, find the “Projects and Solutions” &gt; “External Web Tools” leaf in the tree control and then add the directory to your newly installed Node.js installation to the top of the list of paths to external tools. <a href=\"/uploads/2016/01/image-3.png\"><img src=\"/uploads/2016/01/image_thumb.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>To use Gulp, you will need to install Gulp using the Node Package Manager (npm).  There are several places where I got stuck.</p>\n<p>First, I tried to install gulp using the Node Interactive Window (CTRL-K,N).  This works fine when you want to install something globally, but when you want to install something with the –save or –save-dev option, you will get the error message: <code>Please specify a valid Node.js project or project directory.</code> It took me several tries before it finally dawned on me that it wasn’t just asking “What project do you want to install this in?”  It was asking “What Node project do you want to install this in?” We don’t have a node project, so this will never work.  What you will need to do instead is that you’ll need to shell out to the command prompt, change to the project directory, and then type your npm commands.</p>\n<h2 id=\"Productivity-Power-Tools\"><a href=\"#Productivity-Power-Tools\" class=\"headerlink\" title=\"Productivity Power Tools\"></a>Productivity Power Tools</h2><p>You can shell out to the command prompt much easier if you install the <a href=\"//visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d?SRC=VSIDE\">Visual Studio Productivity Power Tools</a>  Once these are installed, you can right click on the project you want to install npm packages into and select “Power Commands” &gt; “Open Command Prompt…” from the menu.</p>\n<h2 id=\"NPM-init\"><a href=\"#NPM-init\" class=\"headerlink\" title=\"NPM init\"></a>NPM init</h2><p>Much like NuGet’s packages.config file, NPM uses a json file to keep track of what should be installed.  To create this file, run the command <code>npm init</code> and answer the questions.</p>\n<p>Next, in Visual Studio, click the “Show all files” icon in Solution Explorer, find the package.json file that you just created with the <code>npm init</code> command, and include the package.json file in your project.  This will cause it to be part of your commit so that anyone who pulls your code down from version control will have the packages installed automatically.</p>\n<h2 id=\"Install-Gulp\"><a href=\"#Install-Gulp\" class=\"headerlink\" title=\"Install Gulp\"></a>Install Gulp</h2><p>Once you’ve shelled out to the command prompt, you’ll need to type in the following two commands.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>If you open your package.json file now, you will see an entry for gulp.</p>\n<h2 id=\"Create-a-Gulp-task\"><a href=\"#Create-a-Gulp-task\" class=\"headerlink\" title=\"Create a Gulp task\"></a>Create a Gulp task</h2><p>The final step in this process is to create the actual Gulp job.  To do that, all you need to do is create a gulpfile.js file in the root of the project.</p>\n<p>Inside the gulpfile.js file, add the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And now you have a default task for gulp installed.</p>\n<h2 id=\"Make-Gulp-Part-of-the-Build\"><a href=\"#Make-Gulp-Part-of-the-Build\" class=\"headerlink\" title=\"Make Gulp Part of the Build\"></a>Make Gulp Part of the Build</h2><p>The final step here is that we want to make gulp part of the build.  Otherwise, what’s the point? In Visual Studio 2015, this is really rather simple.</p>\n<p>From the main menu, go to “View” &gt; “Other Windows” &gt; “Task Runner Explorer”.  You should end up looking a a sub windows in Visual Studio that looks like this: <img src=\"/uploads/2016/01/image-4.png\" alt=\"image\" title=\"image\"> In gulp, you might have multiple tasks in a gulp file. We only have one right now, “default”.  If you right click on that, you will see that you can bind that task to one of the four bindings on the right.</p>\n<p>That’s all you have to do.  Now the gulp task “default” is bound to a specific build step.  You can do all kinds of file processing with this which we may cover in a later post.  But for now, you can at least get it all wired in.</p>\n",
            "tags": [
                "javascript",
                "visual studio",
                "asp.net",
                "gulp",
                "node.js"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "url": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "title": "ASP.NET, Angular.js & html5mode",
            "date_published": "2015-09-24T11:30:00.000Z",
            "content_html": "<p>I’ve been looking at Angular.js recently.  I’ve already got enough of a project done in <a href=\"//www.mongodb.org/\">MongoDB</a> (with <a href=\"//mongoosejs.com/\">Mongoose</a>), <a href=\"//expressjs.com/\">Express</a>, <a href=\"//angularjs.org/\">Angular</a> and <a href=\"//nodejs.org/\">Node.js</a> (MEAN) to be comfortable with how Angular works.  But I wanted to give it a try using ASP.NET as the back end.  I’m always learning.  Always improving.</p>\n<p>To start out, I just setup an index.html page to hold my basic form as I got the basic look and feel going.  But as I progressed, I wanted to make sure I progressed, I wanted to add in the capability of using Angular’s html5mode for the client side routing.</p>\n<span id=\"more\"></span>\n\n<p>For those of you who are new to Angular, Angular is a client side JavaScript framework that will allow you to create web applications where much of the processing happens on the client side instead of the server side.  That’s cool enough.  But it also adds the ability to handle client side routing, just like ASP.NET’s MVC handles server side routing.  This allows you to have a client side “master page” that can suck in the differences from the server as it needs them based on the url that is in the address bar.  In fact, there is an extension that will let you have sub routes as far down as you need.</p>\n<p>Out of the box, Angular, and most other frameworks that implement client side routing, using the hash symbol to specify the route.  For example</p>\n<p>http:&#x2F;index.html#&#x2F;pathToRoute</p>\n<p>This allows the routing to work on older browsers.</p>\n<p>ASP.NET, Angular.js &amp; html5mode <img src=\"/uploads/2015/09/image3.png\" alt=\"image\" title=\"image\"> ASP.NET, Angular.js &amp; html5modeBut if you are working with newer browsers that support HTML5, you can avoid the hash tag and just create a route that looks like this:</p>\n<p>http:&#x2F;pathToRoute</p>\n<p>Which you have to admit, looks a whole lot nicer.</p>\n<p>But here is where the problems start.</p>\n<p>As soon as you implement html5mode on a site that is hosted in IIS or IIS express, you will get a 404 error because your initial request to the server is going to ask the server for a path that doesn’t exist.</p>\n<p>There are a few ways that you can take care of this.</p>\n<h2 id=\"Return-a-default-view-for-every-undefined-server-route\"><a href=\"#Return-a-default-view-for-every-undefined-server-route\" class=\"headerlink\" title=\"Return a default view for every undefined server route.\"></a>Return a default view for every undefined server route.</h2><p>One of the first suggestions you are likely to find suggest creating a default view for all routes that start with “&#x2F;angular&#x2F;”.</p>\n<p>This is a great start.  But here are my issues with it.  If I really want to use Angular the way it was intended to be used, I would prefer to not have to use MVC on the server side at all.  While not a huge hit, writing a razor page just to get my initial angular page up seems to be a bit of overkill.  There must be a way to do this without creating a *.chshtml file.  I also don’t want to have a sub directory for my page.  Why can’t I just go to <a href=\"//blog.dmbcllc.com\">http://blog.dmbcllc.com</a> as my default route?  And why can’t I just return a plain old html file?! Well, it turns out you can.  A slight modification of the “Return a default view” method is to have your controller return your html page.</p>\n<h2 id=\"Return-an-HTML-page-direct-from-the-controller\"><a href=\"#Return-an-HTML-page-direct-from-the-controller\" class=\"headerlink\" title=\"Return an HTML page direct from the controller.\"></a>Return an HTML page direct from the controller.</h2><p>If you dig a bit further, you’ll find that someone else has realized that you can just return your HTML directly from the controller.  The magic to this trick is all similar to what the guy in the original article did except for in the controller, instead of returning the view, he returns the html file that contains the main html.</p>\n<p>public ActionResult Index()<br>{<br>    return File(“~&#x2F;yourstartpage.html”, “text&#x2F;html”);<br>}</p>\n<p>And his main MVC route looks like this:</p>\n<p>routes.MapRoute(<br>      name: “Default”,<br>      url: “{*.}”,<br>      defaults: new<br>      {<br>        controller &#x3D; “Home”,<br>        action &#x3D; “Index”,<br>      }<br>  );</p>\n<p>This implementation has the added benefit that I’m not tied to a specific sub directory because it just says, “Any URL that doesn’t have a real file behind it should resolve to this default route.” Of course, you may be thinking, but what about the WEB API route, or any other routes I want in my system.  Well, just make sure this route comes first and you have other routes to cover the real routes you want to be able to support.</p>\n<p>Now, this gets past the objection I had with the first solution.  I no longer have to have a route.  But, why should I need to call the controller?  This is just a static HTML file we are talking about.  I should be able to by pass ASP.NET handling this file and just have IIS serve it up directly to me.</p>\n<h2 id=\"Use-the-URL-Rewrite-Module\"><a href=\"#Use-the-URL-Rewrite-Module\" class=\"headerlink\" title=\"Use the URL Rewrite Module\"></a>Use the URL Rewrite Module</h2><p>A little deeper digging on the search engines reminded me that  I could just setup the <a href=\"//www.iis.net/downloads/microsoft/url-rewrite\">URL Rewrite module</a> to return my main HTML page when no real page is available.  BTW, URL Rewrite is built into IIS Express, so it should work in your development environment if you are using IIS Express as well as under IIS with the module installed. The main step to getting this working is to add the following XML to your Web.config file:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;angularjs routes&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">stopProcessing</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;.*&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">conditions</span> <span class=\"attr\">logicalGrouping</span>=<span class=\"string\">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsFile&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsDirectory&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_URI&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;^/(api)&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Rewrite&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;/&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You should already have a system.webServer section in your web.config file, so you just need the rewrite rule inside of it.</p>\n<p>Basically what this rule does is that it says, “If you can’t find the file, and the path you are looking for is not a subdirectory of the “api” directory, return the default file at the root.”  The part about the API directory allows your WEB API stuff to continue working.</p>\n<p>The only other thing you will need to do, which isn’t unique to ASP.NET or MVC, is that you will need to remember to add the base tag to the HEAD section of your HTML file.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And all of your client side routing with HTML5 issues should be solved. Notice that no ASP.NET code has to run to get this working.  In fact, the only time you’ll need to run ASP.NET is to call the server for data.</p>\n",
            "tags": [
                "routing",
                "asp.net",
                "angular.js",
                "iis"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-server-performance-testing/",
            "url": "http://davembush.github.com/asp-net-server-performance-testing/",
            "title": "ASP.NET Server Performance Testing",
            "date_published": "2014-11-06T11:00:00.000Z",
            "content_html": "<p>This happened a couple of years ago, but it is still relevant because I know of at least one place where it is still happening even though Microsoft has fixed the issue that initially caused this hack to be put in place in the first place.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Problem-In-Production-–-Oh-NO\"><a href=\"#Problem-In-Production-–-Oh-NO\" class=\"headerlink\" title=\"Problem In Production – Oh NO!\"></a>Problem In Production – Oh NO!</h2><p>Here’s the problem we were seeing.  We had several large PDF files that the client wanted to put up on the site so that their customers could download them.  The problem that we were seeing is that even though the site worked fine under development and QA, the site seemed to consume a lot of memory under load.</p>\n<p>Another symptoms we saw was that the file download took a lot of time to start, or timed out completely.  But the main issue was the memory because when the memory was consumed, the site would restart, and because it was a worker process crash that caused it, the restart took the site down.  This is not something you want to see happen when you are working with a client with world wide exposure.  A client who, if I told you the name, I’m sure you would recognize.</p>\n<p>In fact, it was the site not responding, or crashing, that first alerted us to the problem.  So, as soon as we knew the site wasn’t responding, I’d log onto the server and fire up task manager to see what was going on.</p>\n<h2 id=\"Server-Management-Tip\"><a href=\"#Server-Management-Tip\" class=\"headerlink\" title=\"Server Management Tip\"></a>Server Management Tip</h2><p>One of the things I did early on managing the servers, is that I set up an entirely separate app pool for each of the web sites we are hosting.  This way, we can monitor the memory and CPU activity of each one independently.  For those of you who are interested, the way to make the pool name show up in task manager is to run the pool in ApplicationPoolIdentity, a setting you can get to through “Advanced Settings…”  If you are only hosting one site, you shouldn’t need to do this, but in my case, with multiple sites, this told me a lot about what was going on with the sites and ultimately helped me track down what the problem was.</p>\n<p>By the way, you should always run each of your sites under a separate application pool so that when one site is having trouble, every site on your server doesn’t have trouble.  Imagine having an issue and not even knowing for sure which site was causing the trouble.  It’s bad enough not knowing what page is causing the problem.</p>\n<h2 id=\"It-Is-a-Memory-Issue-Now-What\"><a href=\"#It-Is-a-Memory-Issue-Now-What\" class=\"headerlink\" title=\"It Is a Memory Issue.  Now What?\"></a>It Is a Memory Issue.  Now What?</h2><p>OK.  So, I could see the memory increasing as soon as the site came back up.  So, now to try to track down what was causing memory issues.</p>\n<p>I tried various things along the way, none of them shed any light at all on the problem.  I even got dotMemory from JetBrains to see if I could find anything.  A memory leak maybe?  No, none of my code had even a small leak.</p>\n<h2 id=\"The-Fix-Discovered\"><a href=\"#The-Fix-Discovered\" class=\"headerlink\" title=\"The Fix Discovered\"></a>The Fix Discovered</h2><p>And then I finally stumbled on the issue.  I can’t remember what it was that we installed that needed this, but what it did was change our web.config file so that it had a section in it that looks like this:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">... lots of other configuration stuff ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span> **<span class=\"attr\">runAllManagedModulesForAllRequests</span>=<span class=\"string\">&quot;true&quot;</span>**&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>What that causes IIS to do is to run ALL of your web request through ALL of your .NET modules.  Why is this a problem you ask?  Because it even runs all of your images, css, javascript and other static content.  This isn’t normally a huge problem because most of that stuff is relatively small. But, when you try to run a be PDF through that pipeline, you’ll run out of memory because, and this is the major issue here, because the whole file has to be loaded into memory on the server before it can be sent on to the web browser to download.</p>\n<p>Make sure that runAllManagedModulesForAllRequest is either set to false, or doesn’t exist in your web.config file.  If you need it to be turned on for some valid reason that I am not thinking of, at least put your static files on another site where this can be turned off.</p>\n<h2 id=\"Moral-Of-The-Story\"><a href=\"#Moral-Of-The-Story\" class=\"headerlink\" title=\"Moral Of The Story\"></a>Moral Of The Story</h2><p>Now, the question that we should be asking now that we’ve figured it all out is, why wasn’t this caught earlier?  When a site goes up, isn’t all of the functionality, including all of the links to all of the images, files to download, and other pages on the site and off the site supposed to be tested?</p>\n<p>Yes, of course they are, but if you haven’t at least written down where all of this is, if you don’t have a systematic way of testing EVERYTHING, you WILL end up with these kind of errors once you put the site live.  This is to say nothing of load testing along the way.  This can all be prevented.</p>\n",
            "tags": [
                "performance",
                "testing",
                "asp.net",
                "memory"
            ]
        },
        {
            "id": "http://davembush.github.com/converting-a-datalist-to-a-listview/",
            "url": "http://davembush.github.com/converting-a-datalist-to-a-listview/",
            "title": "Converting a DataList to a ListView",
            "date_published": "2013-12-26T01:15:26.000Z",
            "content_html": "<p>Yesterday, I spent the bulk of the day converting a DataList to a ListView.  I thought I’d spend a little time relating the process for those of you who might be interested in doing the same.</p>\n<span id=\"more\"></span>\n\n<p>For the most part, the transition went smoothly.</p>\n<p>The first thing I looked at was the structure of the two sets of tags.  It was pretty quickly apparent that I was not going to be able to just change the tag name.  Not that I expected I could, but it would have been a nice bonus. </p>\n<p>What I did notice as I inspected the structure was that both sets have an ItemTemplate tag.  So I create a new ListView control pointing at the data I want it to display, and then I moved the itemTemplate tag from the DataList into the new ListView.</p>\n<p>Bad move.  But, since I’ve already suffered the pain, it won’t be so bad for you.  The basic problem stems from the fact that the ListView itemTemplate expects to start and end with a pair of TD tags.  In the DataList’s itemTemplate tag, you can put anything you want.  So, what you should do is copy the contents of the itemTemplate tag in the DataList into the the ListView’s itemTemplate tag and then put the TD tags around the content you just pasted, and inside the itemTemplate tags.</p>\n<p>Not so bad once you figure it out, but if you start this process after a full day of programming, this can be just a bit frustrating.</p>\n",
            "tags": [
                "asp.net",
                "datalist",
                "listview"
            ]
        },
        {
            "id": "http://davembush.github.com/jquery-retrieving-html-fragments/",
            "url": "http://davembush.github.com/jquery-retrieving-html-fragments/",
            "title": "jQuery - Retrieving HTML Fragments",
            "date_published": "2013-11-20T21:54:21.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/sunset-bird.jpg\" alt=\"sunset-bird\"> A couple of weeks ago I mentioned that I had built a <a href=\"/2009/01/06/jquery-positioning-elements/\">tooltip using jQuery</a>.  We focused mostly on the positioning of the tooltip at the time because, historically, that’s where most of the work has been. But there are other time-saving features that also make the tooltip code I wrote a lot more flexible.  For example, in the past, the javascript code we wrote for tooltips often required us to place the HTML for the tooltip in the HTML page we wanted the tooltip on.  This has two drawbacks. First, if you need the tooltip on multiple pages, you need to include the HTML on multiple pages.  You could, of course, use master pages in ASP.NET or includes of some sort in other web development languages to get around this, but the fact remains that you still need to do this. Second, the HTML is not as modular as it might be.  This isn’t as big of an issue, since we could argue that most of our HTML is not as modular as it might be, but when I show you how you can overcome this with jQuery, I think you will recognize the improvement. When I sat down to develop this tooltip, I created an HTML page that has the HTML for the tooltip, and nothing else, in it.  This allowed me to concentrate on the HTML and forget about all the javascript issues.  Once I had the tooltip looking the way I wanted, I copied out the HTML fragment that represented the tooltip, leaving out the HTML that had the head tag, body tag, and other code I needed to make the HTML page an HTML page.  I pasted this code into another HTML file, but this time the HTML file ONLY has the fragment. The other thing you’ll want to do is to dynamically create the positional DIV that you will use to hold the tooltip.  This is another place where we typically had to put the content in our HTML page.  Instead we will put this information in the jQuery script.  While I could have included this in the fragment, doing it this way actually makes coding the tooltip easier:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;&lt;div id=&quot;tooltip&quot;&gt;&lt;/div&gt;&#x27;</span>).<span class=\"title function_\">appendTo</span>(<span class=\"string\">&#x27;body&#x27;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#tooltip&#x27;</span>).<span class=\"title function_\">hide</span>().<span class=\"title function_\">load</span>(<span class=\"string\">&#x27;js/ToolTip.htm&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Two lines of code to get our shell of a tooltip in the page. The first line creates the HTML fragment and appends it to the end of the elements inside the body tag. The second line retrieves the DIV element we just inserted, hides it, and then loads the HTML fragment that represents our tooltip. Finally, to get content into the tooltip, we use the HTML property.  I created a class called toolTipCenter that is the location where the tooltip content will go.  To insert content for the tooltip, all you need to do is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#tooltip .toolTipCenter&#x27;</span>).<span class=\"title function_\">html</span>(<span class=\"string\">&#x27;Tooltip Content Here.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "asp.net",
                "jQuery",
                "tooltip"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "url": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "title": "ASP.NET MVC - Controller to View",
            "date_published": "2013-10-30T19:04:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/ka-vol1-100.jpg\" alt=\"ka_vol1_100\"> A couple of weeks ago we looked at ASP.NET MVC routing in the MVC framework.  The routing controls which method in which controller gets called.</p>\n<p>The obvious next question is, how do we get from the controller to the view?</p>\n<p>First, we need to look at the general layout of our Views.</p>\n<p>If you open up the sample project that we created, you’ll see that there are a few directories that have been created.  The one we want to take a look at today is the View directory.</p>\n<p>You’ll see that under each View directory is a directory that has the same name as each of the controllers in the Controller directory as well as a directory named ‘Shared’ that has nothing to do with MVC directly.  Don’t worry about figuring that one out right now.</p>\n<p>Under each of the directories that map to the controller, you’ll see that there is an ASPX file that maps to each of the methods in the controllers, or is otherwise called from those controllers.</p>\n<p>The easiest way to get from the Controller action to the View it corresponds to is to return View() from that action, as in:</p>\n<p>public ActionResult About()<br>{<br>    return View();<br>}</p>\n<p>This would then call ~&#x2F;Home&#x2F;About</p>\n<p>But what if the new page needs to have data sent along to it?</p>\n<p>In this case, you can assign the data to the ViewData property.  The ViewData property works a lot like a Session object in that it is keyed.</p>\n<p>So, to pass data you would use</p>\n<p>ViewData[“Key”] &#x3D; objectData;</p>\n<p>You can see that the sample project does this in the HomeController.Index method.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ViewData[<span class=\"string\">&quot;Message&quot;</span>] = <span class=\"string\">&quot;Welcome to ASP.NET MVC!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And you can see that the Index.aspx file picks it up later:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;%= Html.Encode(ViewData[&quot;Message&quot;])%&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> To learn more about ASP.NET MVC visit</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://asp.net/mvc&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;ASP.NET MVC Website&quot;</span>&gt;</span></span><br><span class=\"line\">      http://asp.net/mvc<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Returning View() is not the only way of specifying the View we want to display from the Controller.  You can also return Redirect(), RedirectAction(), RedirectToRoute().</p>\n",
            "tags": [
                "asp.net",
                "controller",
                "MVC",
                "view"
            ]
        },
        {
            "id": "http://davembush.github.com/jquery-json-and-asp-net/",
            "url": "http://davembush.github.com/jquery-json-and-asp-net/",
            "title": "jQuery, JSON, and ASP.NET",
            "date_published": "2013-09-04T14:42:49.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/g03a0003.jpg\" alt=\"G03A0003\"> A few months ago, I demonstrated <a href=\"/2008/08/04/aspnet-ajax-using-json-heres-how/\">how to use ASP.NET’s JSON capabilities</a>.  Lately, I’ve been demonstrating how to use jQuery.  Both use a considerable amount of JavaScript so if there is some way we could eliminate or reduce the amount of code we had to load, performance would naturally increase.</p>\n<p>Fortunately, there is.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-stays-the-same\"><a href=\"#What-stays-the-same\" class=\"headerlink\" title=\"What stays the same\"></a>What stays the same</h2><p>You are still going to create a JSON enabled web service just like you did in the earlier article by giving the web service class the attribute, “ScriptService.”  You remember, this is what enables the web service to return JSON.</p>\n<h2 id=\"What-is-different\"><a href=\"#What-is-different\" class=\"headerlink\" title=\"What is different\"></a>What is different</h2><p>You will not, however, be including this block in your ASPX file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:ScriptManager</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;ScriptManager1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:ServiceReference</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;~/WebService.asmx&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:ScriptManager</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You might still need the ScriptManager if you are using MS-AJAX on your page, but if you don’t have any other MS-AJAX on your page, you can remove the entire block of code.</p>\n<p>In the jQuery for your page, your code will look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;WebService.asmx/Add&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"string\">&quot;&#123;a:1,b:4&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">contentType</span>: <span class=\"string\">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(result.<span class=\"property\">d</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You can get the full documentation for the $.ajax() global method here: <a href=\"//docs.jquery.com/Ajax/jQuery.ajax\" title=\"http://docs.jquery.com/Ajax/jQuery.ajax\">http://docs.jquery.com/Ajax/jQuery.ajax</a> A few things that need to be pointed out here:</p>\n<ol>\n<li><p>For this to work, type must be “POST.”</p>\n</li>\n<li><p>url: is the name of the asmx file followed by a slash followed by the name of the web service method you want to call.</p>\n</li>\n<li><p>data: is a JSON name&#x2F;value pair list of all the parameters in the form of {parametername: parameterValue[,…]} if there are no parameter just use “{}”.  Don’t use “” or your code will not work.</p>\n</li>\n<li><p>contentType and dataType tell jQuery we are working with JSON.</p>\n</li>\n<li><p>The function pointed to by success will be called when the request has finished successfully, it will pass in a variable of type json.  The d property holds the return value.</p>\n</li>\n<li><p>If the return value is a structure or class d will have properties hanging off of it specifying</p>\n</li>\n<li><p>type information of the structure or class</p>\n</li>\n<li><p>property for each property&#x2F;variable in the structure or class.</p>\n</li>\n</ol>\n<p>You could take most of that AJAX call and turn it into some sort of helper function, but even if you don’t the amount of code you will end up loading using this method is significantly less than what you would load using both together.</p>\n",
            "tags": [
                "asp.net",
                "json",
                "jQuery"
            ]
        },
        {
            "id": "http://davembush.github.com/cms-vs-code-it-yourself/",
            "url": "http://davembush.github.com/cms-vs-code-it-yourself/",
            "title": "CMS vs Code It Yourself",
            "date_published": "2013-08-14T12:42:39.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/trav064.jpg\" alt=\"trav-064\" title=\"trav-064\"> This post has been percolating in my brain for several weeks now and I think it’s finally at the point where it’s “done.”  Well, see…</p>\n<p>The problem area is this.  At what point and under what conditions would you write the code yourself vs. using a content management system?  And if you were to use a content management system, which one should you use and why?</p>\n<p>Along the way I’ll tell you what my current choices are, but more importantly, I’ll tell you what my thought process is.  So even if you decide to use different tools than I do, you can ask the same questions to select the tools you have decided to use.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"My-Primary-Tools\"><a href=\"#My-Primary-Tools\" class=\"headerlink\" title=\"My Primary Tools\"></a>My Primary Tools</h2><p>I think in order to give the rest of this post some context, it makes the most sense to tell you what my current tools are.</p>\n<ol>\n<li>WordPress<ol>\n<li>Linux&#x2F;Apache</li>\n<li>Windows&#x2F;Apache</li>\n<li>Windows&#x2F;IIS</li>\n</ol>\n</li>\n<li>DotNetNuke</li>\n<li>Write it myself.</li>\n</ol>\n<h2 id=\"Advantages-of-WordPress\"><a href=\"#Advantages-of-WordPress\" class=\"headerlink\" title=\"Advantages of WordPress\"></a>Advantages of WordPress</h2><p>I’ve actually had people ask me why I use WordPress for my .NET blog instead of some .NET blog engine.  The primary reason is, it has been around longer so it has more plug-ins and more themes available than anything I can find for .NET.</p>\n<p>What this means to me is that I can achieve a lot of goals by simply searching for an appropriate plug-in.</p>\n<p>Just by way of example, here are some plug-ins I’ve used.</p>\n<ul>\n<li>Plug-in to allow me to change the Title tag for each page from the “standard” title.</li>\n<li>Plug-in to create a forum on my site</li>\n<li>Plug-in to allow pages to redirect to other pages.</li>\n<li>Plug-in to automatically cross-link my post</li>\n<li>Plug-in to automatically cross-link my site with other sites (not using that here… yet)</li>\n<li>Plug-in to run a slide show</li>\n<li>Plug-in to keep out spam</li>\n<li>Plug-in for forms creation.</li>\n<li>Plug-in for podcasting.</li>\n<li>Plug-in for increased role-based access to just about every imaginable module in WordPress.</li>\n</ul>\n<p>So you have the ability to easily create anything from a blog to a brochure site to e-commerce (yes, there are e-commerce-related plugins) without having to write any code.</p>\n<p>While there are several themes that you can pay for, there are so many themes that are free that I’ve never had to buy one of the “premium” themes for any of my sites.  It does help that I can tweak the themes.  But they generally work out of the box.</p>\n<p>Finally, I find that my clients find WordPress sites easier to manage than DotNetNuke.</p>\n<h2 id=\"Disadvantages-of-WordPress\"><a href=\"#Disadvantages-of-WordPress\" class=\"headerlink\" title=\"Disadvantages of WordPress\"></a>Disadvantages of WordPress</h2><p>You are limited in how flexible your UI is compared to my other two options.  But I rarely find this to be a problem.</p>\n<p>I don’t consider myself a PHP programmer, so I can’t create any new plug-ins I might need.  I can hack the PHP, and anyone who’s familiar with ASP.NET probably could at least hack PHP as well, so don’t let the fact that you don’t know PHP keep you from a PHP solution.</p>\n<p>It also doesn’t run as well under Windows as it does under Linux.  If all you know is Windows, this might be an issue for you.</p>\n<h2 id=\"Advantages-of-DotNetNuke\"><a href=\"#Advantages-of-DotNetNuke\" class=\"headerlink\" title=\"Advantages of DotNetNuke\"></a>Advantages of DotNetNuke</h2><p>There are two main advantages of DotNetNuke over WordPress that would make me choose it over WordPress in most situations.  First, I know .NET, so if I need to write my own module, I can do that.  Second, it allows much greater freedom in HOW things are presented on the page.</p>\n<p>There are also quite a few skins available for DotNetNuke, however most of them you have to pay for and I’ve never put up a site yet that I didn’t buy a theme for.</p>\n<h2 id=\"Disadvantages-of-DotNetNuke\"><a href=\"#Disadvantages-of-DotNetNuke\" class=\"headerlink\" title=\"Disadvantages of DotNetNuke\"></a>Disadvantages of DotNetNuke</h2><p>There are two huge disadvantages to DotNetNuke as well.  The first is that it is harder for my clients to manage.  In fact, while managing a DotNetNuke site is easier than having to change code, I would suggest that you not even tell the end user that they can manage the site.  You might expose specific pages to them, but leave the overall administration to people who understand DNN.</p>\n<p>Second, the level of granularity of role based permissions is less than the plug-in for WordPress gives me, and I’ve yet to find a module for DotNetNuke that gives me the same level of granularity.</p>\n<p>Finally, because you can mix and match skins and containers in such a way that it is difficult for the skin designers to test every possible mix, I find that every skin I’ve used has needed to be tweaked.  Unlike the WordPress themes that just work.</p>\n<h2 id=\"Write-it-Yourself\"><a href=\"#Write-it-Yourself\" class=\"headerlink\" title=\"Write it Yourself\"></a>Write it Yourself</h2><p>Of course, the advantage to writing all the code yourself is that you have complete control.  The disadvantage is that you have to write everything yourself, including the skin.</p>\n<h2 id=\"A-Word-about-Skins-and-Themes\"><a href=\"#A-Word-about-Skins-and-Themes\" class=\"headerlink\" title=\"A Word about Skins and Themes\"></a>A Word about Skins and Themes</h2><p>As recent as 3 years ago, I used to have the presentation layer designed for me by a designer.  This process typically cost between $5,000 and $10,000 depending on how many iterations we went through.</p>\n<p>However, I’ve come to the realization that design matters very little.  Yes, the site has to look good.  Yes, it has to be usable.  But it doesn’t have to be unique from every other design.  In fact, with the number of sites available today, I doubt that even a unique design is really that unique.</p>\n<p>So save yourself a lot of time and money and just go grab a design from one of the many sites that specialize in skins or themes for sites.  Even if you have to modify it a bit, you’ll be much further ahead of the game.</p>\n<p>The flexibility that DotNetNuke gives you comes at a pretty high cost both in terms of finding Skins that work reliably right out of the box and in terms of training users to use the site.  So just because DNN is more flexible does not necessarily mean it is “better.”</p>\n<h2 id=\"The-Questions-I-Ask\"><a href=\"#The-Questions-I-Ask\" class=\"headerlink\" title=\"The Questions I Ask\"></a>The Questions I Ask</h2><p>What are the requirements of the site?</p>\n<p>If I have a requirement that can only be met by one of the platforms, that pretty much ends the list of questions.  If I can meet all the requirements with WordPress, that will probably be my choice of platform unless a future question indicates other wise.  My second choice would be DotNetNuke.</p>\n<p>Is there any possibility of a future requirement that would lead me to another platform?</p>\n<p>We want to try our best not to lock ourselves out of expansion.  At the same time we don’t want to provide more room for growth than will ever be needed.</p>\n<p>Will the requirements for this project require me to write special code?</p>\n<p>If I can’t find a plug-in or module that does what I need it to do, then I’m going to automatically be left with two choices.  Write it myself or use DotNetNuke and write a module.</p>\n<p>Does the client want to be able to maintain the site himself?</p>\n<p>If the answer to this is “yes” I’m going to lean very heavily toward WordPress as my first choice and DotNetNuke as my second.</p>\n<p>What servers are available to install this on?</p>\n<p>If you don’t have a Linux server, you are kind of stuck.  This isn’t true in my case, but for some of my clients, it is a factor.  It doesn’t completely rule out using WordPress but it does discourage from going in that direction.</p>\n<p>Is Search Engine Optimization a Factor?</p>\n<p>For most people it is.  Again, this favors WordPress.</p>\n<h2 id=\"When-Would-You-Just-Write-It-Yourself\"><a href=\"#When-Would-You-Just-Write-It-Yourself\" class=\"headerlink\" title=\"When Would You Just Write It Yourself?\"></a>When Would You Just Write It Yourself?</h2><p>At this point, hardly ever.  Sometimes the choice is made for you. “I want you to write this from scratch using ASP.NET.”  Well, OK, if you’re willing to pay for it…</p>\n<p>But it really seems silly to have to write code I know I can get for next to nothing.</p>\n<p>You may not have the same selection of tools that I do.  I wish I had some time to look at a few others.  But you should be asking similar questions about the project at hand as you decide how you are going to achieve the goals of the project.  “If all you have is a hammer, everything looks like a nail.”</p>\n",
            "tags": [
                "asp.net",
                "cms",
                "dotnetnuke",
                "WordPress"
            ]
        },
        {
            "id": "http://davembush.github.com/tracking-down-performance-issues-in-asp-net/",
            "url": "http://davembush.github.com/tracking-down-performance-issues-in-asp-net/",
            "title": "Tracking Down Performance Issues in ASP.NET",
            "date_published": "2013-07-24T10:36:13.000Z",
            "content_html": "<p>Last night, one of my clients assigned me a problem that I thought was going to require one solution, and in the end it was just poor programming. But the process reminded me of the need for good debugging skills. Just how do you know where the performance problem is? Too many programmers I know approach performance issues from the front end. “I know there is going to be a performance problem if I do it this way, so I’m going to do it that way instead.” But unless your theory was correct, you are very likely to spend extra time doing something you may not need to do. While solving problems is what makes programming fun for a lot of us, solving problems that don’t exist is a waste of time for the organizations we work for. My motto is:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>Get the app working</li>\n<li>Get the app working right</li>\n<li>Get the app working fast</li>\n</ul>\n<p>By following these steps, in this order, I very rarely even need to address step three. So, what happens when there is a performance problem? How do you track it down? Well, hopefully, you are addressing a visible performance problem. Something is taking more than a second to run. There are cases where you need to address performance problems that are less than a second and&#x2F;or can’t really be measured with a stop watch. But the biggest hits are the easiest to solve. So all you need to do is set some break points in your app and count how long it takes to get from one to the other. This is where a good layered architecture helps a lot. Very rarely is the performance issue in the display code. So you can set a break point in the code that gets the data out of the database. When I did this this morning, I found that there was a foreach loop in the BLL that was retrieving data that could just as easily be placed in the store procedure that we were calling right above the foreach loop. That seemed to solve the problem until we put the code on stage. And, this is where the fun began. While the code was definitely faster, it was still too slow. What was perplexing was that the data seemed to be the same in our test database as it was on staging. Worse, we no longer had access to our debugger. So, how do you track a problem like this down? This is where the tracing feature of .NET is of great value. If you’ve never used this feature, you can read some other articles about it elsewhere (I’ll place links at the end) but for our purposes, we want to set up tracing a specific way.</p>\n<ol>\n<li>Place the following line in web.config</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trace</span> <span class=\"attr\">enabled</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">requestLimit</span>=<span class=\"string\">&quot;10&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">pageOutput</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">traceMode</span>=<span class=\"string\">&quot;SortByTime&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">localOnly</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>This will enable tracing for your application but will not display the tracing information at the bottom of the page. Set localOnly to true if you can access the information from localhost–otherwise, you’ll need to set it to false.</p>\n<ol start=\"2\">\n<li>Put tracing statements in your code that you are trying to get timing information for.</li>\n</ol>\n<p>Now, here’s the part many people don’t know. While it is pretty simple to send trace statements out from the codebehind file using:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trace.Write(<span class=\"string\">&quot;message&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>You can also access the Trace object and emit trace statements from your BLL and DAL code using:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpContext.Current.Trace</span><br><span class=\"line\">  .Write(<span class=\"string\">&quot;message&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>To access the trace output, run <a href=\"http://domaainstuff/applicationdirectory/trace.axd\">http://domaainstuff/applicationdirectory/trace.axd</a> and select the round trip you want to examine.</p>\n",
            "tags": [
                "asp.net",
                "httpcontext",
                "trace"
            ]
        },
        {
            "id": "http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/",
            "url": "http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/",
            "title": "Test Sending Email without a Server in ASP.NET",
            "date_published": "2013-06-05T07:36:19.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/back041.jpg\" alt=\"back-041\" title=\"back-041\"> By now, most people are familiar with the fact that ASP.NET will send mail from the codebehind by simply adding a few lines to your web.config file and adding another few lines of code in the codebehind file.</p>\n<p>But it wasn’t until recently that I found that you don’t need to have access to an SMTP server to test your code.</p>\n<span id=\"more\"></span>\n\n<p>In fact, this little trick will allow you to read the email without clogging up your email client with email you only wanted for testing purposes.</p>\n<p>Instead of the normal entry of</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mailSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtp</span> <span class=\"attr\">from</span>=<span class=\"string\">&quot;you@domain.com&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">network</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;maiServerl&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">userName</span>=<span class=\"string\">&quot;loginName&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;25&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">smtp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mailSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You can use</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mailSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtp</span> <span class=\"attr\">from</span>=<span class=\"string\">&quot;you@domain.com&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">deliveryMethod</span>=<span class=\"string\">&quot;SpecifiedPickupDirectory&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">specifiedPickupDirectory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">pickupDirectoryLocation</span>=<span class=\"string\">&quot;c:\\\\mail&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">smtp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mailSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>This will drop your email message in the c:\\mail directory as an *.eml file which you can open with Outlook Express.</p>\n<p>The code you would write to send the mail is still the same:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmtpClient smtp = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">MailAddress <span class=\"keyword\">from</span> = <span class=\"keyword\">new</span> MailAddress(fromEmail, fromEmail);</span><br><span class=\"line\">MailAddress to = <span class=\"keyword\">new</span> MailAddress(emailAddress, emailAddress);</span><br><span class=\"line\">MailMessage message = <span class=\"keyword\">new</span> MailMessage(<span class=\"keyword\">from</span>, to);</span><br><span class=\"line\">message.Subject = SubjectLine;</span><br><span class=\"line\">message.Body = htmlString;</span><br><span class=\"line\">message.From = <span class=\"keyword\">from</span>;</span><br><span class=\"line\">message.To.Add(to);</span><br><span class=\"line\">message.IsBodyHtml = <span class=\"literal\">true</span>;</span><br><span class=\"line\">smtp.Send(message);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "testing",
                "vb.net",
                "asp.net",
                "email",
                "mailaddress",
                "mailmessage",
                "smtpclient"
            ]
        },
        {
            "id": "http://davembush.github.com/multi-step-processing-in-asp-net/",
            "url": "http://davembush.github.com/multi-step-processing-in-asp-net/",
            "title": "Multi-Step Processing in ASP.NET",
            "date_published": "2013-05-08T05:32:51.000Z",
            "content_html": "<p><img src=\"/uploads/2010/04/B01I0045.jpg\" alt=\"B01I0045\" title=\"B01I0045\"></p>\n<p>I received the following question a few days ago but I’ve been so busy with billable work that I just haven’t had a chance to answer it until now.  Actually, I’m still busy, but I hate letting these questions go for too long.</p>\n<p>“Right now I am working on a project where I have to screen a user.  This is a multi-step process.  At the end of the process I store the data back to the system.</p>\n<p>Currently, I am storing all the options a user will select in a session variable and then finally using them at the last step.</p>\n<p>Can you please suggest a better way to store this temporary data that does not require using a session? This type of situation comes up a lot.  We’ve used multiview to get it working.</p>\n<span id=\"more\"></span>\n\n<p>But this does not seem to be viable in all situations.”</p>\n<p>If I had a multi-step process that I needed to complete, I’d probably use the ASP.NET Wizard Control, which is a lot like the MultiView control you mention.  The main difference is that it handles the navigation between the views for you.</p>\n<p>If your process requires you to navigate between separate ASPX pages, then you’ll probably want to do something with cross-page posting.</p>\n<p>Frankly, I don’t find session variables to be all that evil.  Your trade-offs are to either store all of the data on the page using hidden form variables or ASP.NET view state (using MultiView or Wizard controls), which makes the page heavier than it might otherwise be, or you need to store the information in session variables, which takes up memory on the server.</p>\n<p>For most web sites the extra memory used on the server is not an issue because the site just doesn’t get that much traffic.</p>\n<p>Unless we are talking about a 50-step process, storing the information in the page isn’t much of an issue either.</p>\n<p>Since you never state what it is about the MultiView control that makes it not viable in all situations, I’m left puzzled.  Seems like its cousin, the Wizard control, is exactly what you need.  I’m guessing there is something you don’t understand about how these controls should be used.</p>\n",
            "tags": [
                "asp.net",
                "session",
                "multiview",
                "wizard"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-json-and-viewstate/",
            "url": "http://davembush.github.com/asp-net-json-and-viewstate/",
            "title": "ASP.NET JSON  and ViewState",
            "date_published": "2012-09-25T09:44:20.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/image5.png\" alt=\"image\">I received the following question recently about my article “<a href=\"/2008/08/04/aspnet-ajax-using-json-heres-how/\">ASP.NET AJAX using JSON - Here’s how.</a>“</p>\n<blockquote>\n<p>If we update the value of a textbox or label via a JSON web service call - will the value of that textbox&#x2F;label be written to the viewstate or whatever so that the server side code can see the new values that came from the JSON request?</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>The short answer is, “no, it will not update viewstate.”  But I think it would be helpful to understand when this is important rather than just giving you a blanket answer.</p>\n<p>First, let’s take a look at exactly how view state is handled in ASP.NET.</p>\n<p><img src=\"/uploads/2009/01/image5.png\" alt=\"image\"></p>\n<h2 id=\"Normal-Processing-of-an-ASP-NET-page\"><a href=\"#Normal-Processing-of-an-ASP-NET-page\" class=\"headerlink\" title=\"Normal Processing of an ASP.NET page\"></a>Normal Processing of an ASP.NET page</h2><p> When the browser first requests the ASPX page, the page is instantiated.  Since this is the first time it is being requested, there is no viewstate, so the deserialize step is skipped and the form elements step is skipped, and our page creation code is run.</p>\n<p> The magic happens right before the page is rendered and sent back to the client.  At this point, the state of all the <code>runat=&quot;server&quot;</code> elements we have on the page are serialized (stored) into the viewstate object which typically is stored in the hidden field on the form.  There are providers, however, that allow you to store this same information on the server someplace.  Then the HTML for the page is rendered and sent back to the browser.</p>\n<p> The next request from the browser using the same page is a POST form request.  The first thing that happens after the page is instantiated and all  the <code>runat=&quot;server&quot;</code> objects are instantiated, is that the viewstate is deserialized (retrieved from the viewstate object) so that by the time we get to the parsing of the form elements, all of our objects are back to exactly the same state that they were when we first sent the page back to the browser.</p>\n<p> Once the elements have been restored, the form elements are parsed and the appropriate properties on our form elements are set (Textbox.Text for example) and any events where we might need the change event fired are determined based on the difference between the view state and the current state of the form element.</p>\n<p> In the case of JSON calls, either using ASP.NET or jQuery, all we are updating is the element.  The question really becomes, “Does it matter?”</p>\n<h2 id=\"Does-it-matter\"><a href=\"#Does-it-matter\" class=\"headerlink\" title=\"Does it matter?\"></a>Does it matter?</h2><p> By default, all elements on the page are serialized and deserialized into and out of viewstate.  But in the case of things like a Textbox, most of the time we don’t care.  The fact of the matter is that most of our applications would work perfectly fine with viewstate turned off.</p>\n<p> Let’s take a look at what happens with a text box.</p>\n<p> When the text box is initially rendered on the page, it may have the current content from the database.  The person at the browser may change the form element and then submit the page.  Assuming we don’t need to fire the changed event on the server, the page is instantiated, the text box object is created, the text box object is restored to its original state and then immediately set to the content that was in the text box when the page was submitted.</p>\n<p> By the time we get to our event handling code, we don’t care, nor do we know, what the content of the field was the last time the page was sent back to the browser.  The code would work just as well with the viewstate for that element turned off.  This is mostly true of all the elements on the screen and since not all elements use viewstate to determine what events get fired it is more a matter of experimenting by turning viewstate off and seeing if the code still works than any hard and fast rule that determines if we need viewstate turned on for the element.</p>\n<p> The case of a label is different.  Since it is not a form element, but is rendered as a div, it’s content will not be sent back to the server with the post.  The only way of avoiding having to compute the value of the label is either by storing it in viewstate, or by storing it in viewstate or someplace on the server.</p>\n<h2 id=\"So-why-is-viewstate-turned-on-for-everything-by-default\"><a href=\"#So-why-is-viewstate-turned-on-for-everything-by-default\" class=\"headerlink\" title=\"So why is viewstate turned on for everything by default?\"></a>So why is viewstate turned on for everything by default?</h2><p>  Microsoft has a tendency to make the default behavior idiot proof.  They know that no one will read the documentation on how viewstate works or when it should be used.  So they set it up so that it will work for everyone out of the box.</p>\n<p>  I’ve seen enough “wrong” code and heard enough complaints about how this new model works to know that had Microsoft set it up so that turning viewstate on was an option and not the default, most programmers would still be using ASP at this point and ASP.NET would have been a dismal failure… and for those of you who think it is, it would have been an even bigger disaster.</p>\n<p>  In the case of using JSON with your ASP.NET code, your best bet would be to turn viewstate off for the page and assume that it isn’t going to do anything for you.  The point of JSON is to make your page more lightweight.  Turning viewstate on adds extra baggage to your HTML that you probably won’t need anyhow.</p>\n",
            "tags": [
                "asp.net",
                "json",
                "viewstate"
            ]
        },
        {
            "id": "http://davembush.github.com/determine-the-role-of-a-user-in-asp-net/",
            "url": "http://davembush.github.com/determine-the-role-of-a-user-in-asp-net/",
            "title": "Determine The Role of a User in ASP.NET",
            "date_published": "2009-10-13T10:46:21.000Z",
            "content_html": "<p><img src=\"/uploads/2009/10/winter016.jpg\" alt=\"winter-016\" title=\"winter-016\"></p>\n<p>There are several controls that allow you to display content based on the role a user is in, including:</p>\n<ul>\n<li>LoginView</li>\n<li>LoginStatus</li>\n</ul>\n<p>And the web.config file allows us to control which pages can be viewed based on which role a user is in.</p>\n<p>But what if you need to determine the role a user is in using the APIs? How do you do that?</p>\n<span id=\"more\"></span>\n\n<p>It turns out that the API for this is really rather straightforward.</p>\n<p>If you are in an ASPX or ASCX file, you can use</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(User.IsInRole(<span class=\"string\">&quot;roleNameHere&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you are in other code where the User property is not available, you’ll need to use the HttpContext class like we’ve used previously this week to get access to the current context.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(HttpContext.Current.User.IsInRole(<span class=\"string\">&quot;roleName&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "asp.net",
                "authentication",
                "isinrole",
                "roles",
                "user"
            ]
        },
        {
            "id": "http://davembush.github.com/dynamically-change-class-attribute-from-asp-net/",
            "url": "http://davembush.github.com/dynamically-change-class-attribute-from-asp-net/",
            "title": "Dynamically Change class Attribute From ASP.NET",
            "date_published": "2009-09-29T09:25:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/09/B03B0015.jpg\" alt=\"B03B0015\" title=\"B03B0015\"> I recently received a question from another programmer I know who’s been using PHP prior to ASP.NET that made me think harder about a problem we’ve all had in ASP.NET.  The basic problem is this:</p>\n<span id=\"more\"></span>\n\n<p>How do you dynamically change the class of a hyperlink based on the page name so that the hyperlink that represents the current page is styled differently than all the other hyperlinks on our screen?  If you want you can substitute any other HTML element you want, but the problem remains the same.</p>\n<p>The first, most obvious answer would be to create a case statement of some sort.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> fileName = AppRelativeVirtualPath</span><br><span class=\"line\">    .ToLower().Replace(<span class=\"string\">&quot;~/&quot;</span>,<span class=\"string\">&quot;&quot;</span>).Replace(<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;_&quot;</span>)</span><br><span class=\"line\">    .Replace(<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(fileName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">case</span> <span class=\"string\">&quot;fileone&quot;</span>:</span><br><span class=\"line\">             m_hyperLinkFileOne.CssClass =</span><br><span class=\"line\">                <span class=\"string\">&quot;selectedClass&quot;</span>;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But we all know just how ugly that code will get once we start adding pages to our site.   Yuck!  Unfortunately, this is exactly the code I’ve been recommending up until today.</p>\n<p>What was I thinking?!</p>\n<p>If you are familiar with ASP.NET at all, you should already be familiar with the Page_Load event handler.  I bet that’s where you do 90% of your page initialization.  But did you know that there is a load event that fires for each control?</p>\n<p>Further, you can have all of your controls point to the same load event handler.  So if we take advantage of this, we can write very tight code that automatically sets the class based on the current page name.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This code assumes that the ID of the hyperLink</span></span><br><span class=\"line\"><span class=\"comment\">//  controls follow</span></span><br><span class=\"line\"><span class=\"comment\">// the form of m_hyperLinkDestinationPageName</span></span><br><span class=\"line\"><span class=\"comment\">// ie, a link to default.aspx would become</span></span><br><span class=\"line\"><span class=\"comment\">// m_hyperLinkDefault</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HyperLinkLoad</span>(<span class=\"params\">Object sender, EventArgs args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Only need to do this once if you have ViewState</span></span><br><span class=\"line\">    <span class=\"comment\">// enabled.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!IsPostBack)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> fileName = AppRelativeVirtualPath</span><br><span class=\"line\">            .ToLower().Replace(<span class=\"string\">&quot;~/&quot;</span>,<span class=\"string\">&quot;&quot;</span>).Replace(<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;_&quot;</span>)</span><br><span class=\"line\">            .Replace(<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// sender will always point to the control that</span></span><br><span class=\"line\">        <span class=\"comment\">// fired the event so, assuming that only</span></span><br><span class=\"line\">        <span class=\"comment\">// asp:hyperlink controls call HyperLinkLoad</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;m_hyperlink&quot;</span>+file ==</span><br><span class=\"line\">           ((HyperLinkControl)sender)</span><br><span class=\"line\">           .ID.ToLower())</span><br><span class=\"line\">           ((HyperLinkControl)sender).CssClass=</span><br><span class=\"line\">              <span class=\"string\">&quot;selectedClass&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "asp.net",
                "html",
                "class",
                "dynamic classing"
            ]
        },
        {
            "id": "http://davembush.github.com/setting-up-your-forms-based-authentication-database/",
            "url": "http://davembush.github.com/setting-up-your-forms-based-authentication-database/",
            "title": "Setting Up Your Forms Based Authentication Database",
            "date_published": "2009-09-14T09:41:24.000Z",
            "content_html": "<p><img src=\"/uploads/2009/09/B01I0003.jpg\" alt=\"B01I0003\" title=\"B01I0003\"></p>\n<p>I was recently asked if I would cover some topics related to Forms Based Authentication.  The person who requested this information has some specific issues that he wants covered that I won’t be covering for a while because I think there are some other issues that need to be covered first.</p>\n<p>One of those is setting up the database.</p>\n<span id=\"more\"></span>\n\n<p>When I owned my hosting companies, I saw more confusion in this area than just about any other topic that came up.</p>\n<p>So here’s the step-by-step process you need to go through to set up your database for Forms Based Authentication.</p>\n<p>In your hosting company’s control panel, create the SQL database.  You’ll want to create a database with a size of at least 10 meg with 5 meg allocated to the log file and 5 meg allocated to the database.  You’ll also want to make sure the user you attach to the database has DBO rights.  You may need to contact support to enable this.</p>\n<p>Next, you’ll want to run aspnet_regsql.exe which you can find under c:\\windows\\Microsoft.NET\\Framework\\v2.0.50727.  This will provide you a wizard interface and will ultimately create the appropriate tables for you. The wizard is self explanatory, so I won’t repeat it here except to say that you’ll want to enter your connection information to connect to the server you just created your database on, not one of your databases locally.</p>\n<p>Next you’ll need to add the connection information to your web.config file for the application you are setting up Forms Based Authentication for.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">connectionStrings</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LocalSqlServer&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LocalSqlServer&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">connectionString</span>=<span class=\"string\">&quot;Data Source=sqlserverGoesHere;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    Initial Catalog=YourDatabaseName;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    Persist Security Info=True;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    User ID=YourSqlUserID;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    password=YourSqlPassword&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">providerName</span>=<span class=\"string\">&quot;System.Data.SqlClient&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The “remove” element is needed because typically the machine.config file on the server has its own entry that you won’t be using.</p>\n<p>Unfortunately, you’ll need to create your own UI for adding users and assigning them to roles.  It isn’t that hard to do and once you’ve done it you can move the administration controls from project to project.  If I were you, I’d create the control set once in a special sub-directory so that I could move it from project to project.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "aspnet_regsql",
                "forms based authentication"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-parsing-html/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-parsing-html/",
            "title": "iTextSharp – HTML to PDF – Parsing HTML",
            "date_published": "2009-07-28T11:03:54.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/iStock_000004663193Medium.jpg\" alt=\"iStock_000004663193Medium\" title=\"iStock_000004663193Medium\"></p>\n<p>Now that we have the HTML cleaned up, the next thing we will want to do is to parse the HTML.</p>\n<p>In my actual code for this, I parse the HTML and create the PDF at the same time, but for the purposes of these posts, I’m going to deal primarily with parsing the HTML here and then deal with the PDF creation code later.</p>\n<p>The key to parsing the HTML is that it is in XHTML form.  This allows us to use the XML APIs that are built into .NET.  For the purposes of parsing the HTML so that we can convert it to PDF code, we need to use the XMLTextReader.</p>\n<p>Every time you Read() an XMLTextReader object, you will either be on a beginning tag, an ending tag, or text.  So the core of our loop looks something like this</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XmlTextReader reader =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> XmlTextReader(xhtmlString,</span><br><span class=\"line\">        XmlNodeType.Element, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (reader.Read())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (reader.NodeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Element:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.EndElement:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Text:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> XmlNodeType.Whitespace:</span><br><span class=\"line\">            <span class=\"comment\">// appropriate code break;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where xhtmlString is the cleaned up HTML code from last week.</p>\n<p>The core part of the translation is dependent on the fact that we have matching open and closing tags and that each time we hit an open tag, we can determine what the characteristics of that tag are.  Bold, underline, font, font size, etc.</p>\n<p>So each time we hit the open tag, we will look up the characteristics.  For simplicity, I put this information in a resource file so that I could just look it up using code that looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fontName = Resources.html2pdf .ResourceManager</span><br><span class=\"line\">    .GetString(tagName + <span class=\"string\">&quot;_fontName&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>rather than having another long case statement in my code.</p>\n<p>Once we have the information we want from the resource file, we place the current characteristics on a stack.  I created a different stack for each element, but in hindsight, it might have been better to create a structure with the information and use one stack of type in that structure.</p>\n<p>Here’s the code that does that</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!reader.IsEmptyElement)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    fontName = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontName&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontName != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontName = fontName;</span><br><span class=\"line\">    fontSize = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontSize&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontSize != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontSize = System.</span><br><span class=\"line\">            Convert.ToSingle(fontSize);</span><br><span class=\"line\">    fontColor = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontColor&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontColor != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontColor = fontColor;</span><br><span class=\"line\">    fontCharacteristics = Resources.html2pdf.</span><br><span class=\"line\">        ResourceManager.</span><br><span class=\"line\">        GetString(tagName + <span class=\"string\">&quot;_fontCharacteristics&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fontCharacteristics != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        currentFontCharacteristics =</span><br><span class=\"line\">            fontCharacteristics;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note that we only push the attributes of the element onto the stack if there is no content in the element.  This is because the closing node type will never be triggered on an element that has no content inside of it (BR and IMG tags, for example).</p>\n<p>The final thing you’ll need to keep track of is if the element is a block element (P, DIV, etc) an inline tag (SPAN, A, etc) a list (OL,UL,LI), or even how much indentation is needed (primarily for list).</p>\n<p>Frankly, the code for this was not fun to write.  Keep in mind too that there is nothing in here to handle special font characteristic attributes.  So your DIV tags can’t specify what font they should use or even how wide the font should be.  Not because it can’t be done, but because I have not had the need.</p>\n<p>Here’s that code</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strIndent = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_indent&quot;</span>);</span><br><span class=\"line\">isBlock = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_isBlock&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">string</span> isList = Resources.html2pdf.ResourceManager.GetString(tagName + <span class=\"string\">&quot;_isList&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isBlock != <span class=\"literal\">null</span> &amp;&amp; isBlock.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> strIsList =</span><br><span class=\"line\">        Resources.html2pdf .ResourceManager</span><br><span class=\"line\">        .GetString(tagName + <span class=\"string\">&quot;_isULList&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strIsList != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        strIsList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> List(<span class=\"literal\">false</span>,</span><br><span class=\"line\">            System.Convert .ToSingle(strIndent));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        strIsList = Resources</span><br><span class=\"line\">            .html2pdf.ResourceManager</span><br><span class=\"line\">            .GetString(tagName + <span class=\"string\">&quot;isOLList&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strIsList != <span class=\"literal\">null</span> &amp;&amp; strIsList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = <span class=\"keyword\">new</span> List(<span class=\"literal\">true</span>,</span><br><span class=\"line\">                System.Convert.ToSingle(strIndent));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isList != <span class=\"literal\">null</span> &amp;&amp; isList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> iTextSharp.text.ListItem();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> Paragraph();</span><br><span class=\"line\">                ((Paragraph)p)</span><br><span class=\"line\">                    .SetLeading(m_leading, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack.Count != <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    IElement e = stack.Pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isList != <span class=\"literal\">null</span> &amp;&amp; isList.ToLower() == <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        ((iTextSharp.text.List)</span><br><span class=\"line\">            (list[list.Count - <span class=\"number\">1</span>])).Add(p);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> list.Add(p);</span><br><span class=\"line\">    stack.Push(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that there is a bit of code in here that deals with a p variable.  This code is needed so that if we are dealing with a block tag, we have a paragraph or list item to put the other content inside of the block when we hit it.  If we are dealing with an inline tag, we deal with that when we add the text.</p>\n<p>Next week, we will show how to handle text and closing tags.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "html",
                "iTextSharp",
                "PDF",
                "parsing",
                "xhtml"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-prerequisites/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-prerequisites/",
            "title": "iTextSharp – HTML to PDF - Prerequisites",
            "date_published": "2009-07-14T10:40:39.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/animal015.jpg\" alt=\"animal-015\" title=\"animal-015\"></p>\n<p>Before we get into the nitty gritty of parsing the HTML so that we can create PDF code from it, it is important that we develop the concept of how text layout works in iTextSharp.  So today we will cover those basics.</p>\n<p>The first type of element we want to deal with when we parse our HTML into a PDF is the Paragraph element.</p>\n<p>When we get to actually parsing our HTML to PDF code we will use the Paragraph object for all of our block elements.  This allows us to add other Paragraphs and Chunks into it which we can format.</p>\n<p>A Chunk is our second object that we will be using.  The Chunk is the main object that will allow us to format the font.  In fact, even if our block element specifies some sort of specific font, the font doesn’t actually get applied in the code until we add the text.</p>\n<p>Typical code to place text into a PDF document would look something like this</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = <span class=\"keyword\">new</span> Paragraph(<span class=\"keyword\">new</span> Chunk(<span class=\"string\">&quot;text that needs a font&quot;</span>,</span><br><span class=\"line\">    FontFactory.GetFont(<span class=\"string\">&quot;Arial&quot;</span>, <span class=\"number\">10</span>, Font.NORMAL, Color.BLACK)));</span><br><span class=\"line\">p.Alignment = (Element.ALIGN_CENTER);</span><br><span class=\"line\">ct.AddElement(p);</span><br></pre></td></tr></table></figure>\n\n<p>where “ct” is an object of type ColumnText that we discussed last week.</p>\n<p>The only other two classes we need to discuss are the list classes.  We use the List to create an item that will handle both the OL and UL tags.  The ListItem class will handle the individual items within the list.  The List constructor handles which of the two types of list we are dealing with by specifying true or false in the first parameter, numbered.</p>\n<p>I have not yet added the ability to handle tables to my HTML parser mainly because I have not had the need.  I think once I show you how to create tables and how to parse HTML you should be able to handle adding table parsing code yourself.</p>\n",
            "tags": [
                "c#",
                "asp.net",
                "html",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-positioning-text/",
            "url": "http://davembush.github.com/itextsharp-%E2%80%93-html-to-pdf-%E2%80%93-positioning-text/",
            "title": "iTextSharp – HTML to PDF – Positioning Text",
            "date_published": "2009-07-08T10:50:15.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/misc_vol1_012.jpg\"></p>\n<p>The next series of things I’m going to introduce about using iTextSharp are all going to lead toward taking HTML text and placing it on the PDF document.</p>\n<p>There are several items we need to cover before we even get to the part about converting the text from HTML to PDF text.  The first is placing the text on the document where it is supposed to be.</p>\n<p><em>Once again, we are building on previous articles about using iTextSharp.  So if you are just jumping in, you might want to go take a look at the other articles.  You can find a list at the bottom of this post.</em></p>\n<p>To place a block of text on the screen that is going to have multiple formats in it (bold, underline, etc) I use the ColumnText class.  This allows me to specify the rectangle or, if I want, some irregular shape, to place the text in.  I handle determining where this rectangle is on the page in the same way that I determine where an image should go.  I have the designer place a form field on the screen and then I use that to get my coordinates.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span>[] fieldPosition = <span class=\"literal\">null</span>;</span><br><span class=\"line\">fieldPosition =</span><br><span class=\"line\">    fields.GetFieldPositions(<span class=\"string\">&quot;fieldNameInThePDF&quot;</span>);</span><br><span class=\"line\">left = fieldPosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">right = fieldPosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">top = fieldPosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">bottom = fieldPosition[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (rotation == <span class=\"number\">90</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    left = fieldPosition[<span class=\"number\">2</span>];</span><br><span class=\"line\">    right = fieldPosition[<span class=\"number\">4</span>];</span><br><span class=\"line\">    top = pageSize.Right - fieldPosition[<span class=\"number\">1</span>];</span><br><span class=\"line\">    bottom = pageSize.Right - fieldPosition[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Once I have the position, the next thing I need to do is to create my ColumnText object.  This requires the same ContentByte object that we used for the images.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PdfContentByte over = stamp.GetOverContent(<span class=\"number\">1</span>);</span><br><span class=\"line\">ColumnText ct = <span class=\"keyword\">new</span> ColumnText(over);</span><br></pre></td></tr></table></figure>\n\n<p>And now I can set the rectangle to print into.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ct.SetSimpleColumn(left, bottom, right, top,</span><br><span class=\"line\">    <span class=\"number\">15</span>, Element.ALIGN_LEFT);</span><br></pre></td></tr></table></figure>\n\n<p>The 15 represents the leading you want (space between characters vertically). You may need to adjust that number.</p>\n<p>Once you have your rectangle, you can add paragraphs to it.  Paragraphs are composed of smaller units called chunks that can be formatted.  If you want a paragraph that is all formatted the same you can make a call that looks like this.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Paragraph p = <span class=\"keyword\">new</span> Paragraph(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Chunk(<span class=\"string\">&quot;Some Text here&quot;</span>,</span><br><span class=\"line\">        FontFactory.GetFont(</span><br><span class=\"line\">          <span class=\"string\">&quot;Arial&quot;</span>, <span class=\"number\">14</span>, Font.BOLD, Color.RED)));</span><br></pre></td></tr></table></figure>\n\n<p>and then add the paragraph to your rectangle</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ct.AddElement(p);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "asp.net",
                "iTextSharp",
                "PDF"
            ]
        },
        {
            "id": "http://davembush.github.com/jquery-dialog-%E2%80%93-with-validation-controls/",
            "url": "http://davembush.github.com/jquery-dialog-%E2%80%93-with-validation-controls/",
            "title": "jQuery Dialog – With Validation Controls",
            "date_published": "2009-06-25T10:55:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/sahara.jpg\" alt=\"sahara\" title=\"sahara\"></p>\n<p>Chances are, you’ll eventually want to use a dialog box in combination with some form elements, and when you do, you’ll probably want to implement some validation.</p>\n<p>True, there are some great validation routines available in jQuery, but they only validate on the client side.  They are, after all, Javascript.</p>\n<span id=\"more\"></span>\n\n<p>As you are probably aware, the advantage of using validation controls with ASP.NET is that they validate on both the client side and the server side and even if we assume that everyone using our web page is using Javascript and has it turned on, there is still the possibility that someone will turn Javascript off so they can circumvent your validations.</p>\n<p>So how do we use validation controls AND allow the form to be a jQuery dialog?</p>\n<p>First, let’s set up a simple web form that we can turn into a dialog.  I suggest using a panel control to put all of our form elements in so that we can set the default button.  We will then wrap the panel in a DIV tag that will become our dialog.</p>\n<p>Here is our main HTML for the form</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dialog&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Enter your name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:Panel</span> <span class=\"attr\">DefaultButton</span>=<span class=\"string\">&quot;Button1&quot;</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;Panel1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:Label</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;Label1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span> <span class=\"attr\">Text</span>=<span class=\"string\">&quot;Name:&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">asp:Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:TextBox</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;TextBox1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span> <span class=\"attr\">ValidationGroup</span>=<span class=\"string\">&quot;Dialog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">asp:TextBox</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:RequiredFieldValidator</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;RequiredFieldValidator1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span> <span class=\"attr\">ControlToValidate</span>=<span class=\"string\">&quot;TextBox1&quot;</span> <span class=\"attr\">Display</span>=<span class=\"string\">&quot;Dynamic&quot;</span> <span class=\"attr\">ErrorMessage</span>=<span class=\"string\">&quot;Enter your name&quot;</span> <span class=\"attr\">ValidationGroup</span>=<span class=\"string\">&quot;Dialog&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">asp:RequiredFieldValidator</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:Button</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;Button1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span> <span class=\"attr\">Text</span>=<span class=\"string\">&quot;Button&quot;</span> <span class=\"attr\">ValidationGroup</span>=<span class=\"string\">&quot;Dialog&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:Panel</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>There are a couple of things to note:</p>\n<ol>\n<li>I’ve used the DefaultButton property to tell .NET that Button1 should fire if I’m in a control inside this dialog and I press the enter key.  You’ll need this if the page has other forms on it.</li>\n<li>I’ve also set the ValidationGroup for all of the appropriate controls on the page.  This is particularly important.  If you have other buttons that cause a postback that are not in the dialog, it will still try to run the validations because, as far as .NET is concerned the validation controls are visible and should be run.  By making them part of a validation group they will only fire when the Button1 control causes the post back.</li>\n</ol>\n<p>Next, we’ll want to turn this all into a dialog.  We do that in our Javascript file using the familiar syntax</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#dialog&quot;</span>).<span class=\"title function_\">dialog</span>(&#123; <span class=\"attr\">modal</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">bgiframe</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>As long as all of your validation controls use client side validation, this should be all you need.</p>\n",
            "tags": [
                "asp.net",
                "dialog",
                "jQuery",
                "validation controls"
            ]
        },
        {
            "id": "http://davembush.github.com/pdfs-using-itextsharp/",
            "url": "http://davembush.github.com/pdfs-using-itextsharp/",
            "title": "PDFs Using iTextSharp",
            "date_published": "2009-06-17T12:06:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/iStock_000002747386Medium.jpg\" alt=\"iStock_000002747386Medium\" title=\"iStock_000002747386Medium\"> There are several libraries on the market now that allow you to create PDF documents from your .NET applications.  The one I’ve chosen to use is <a href=\"//sourceforge.net/projects/itextsharp/\">extSharp</a>, an open source library that is a port of the open source library for Java,  <a href=\"//www.lowagie.com/iText/\">iText</a>.</p>\n<p>While there are several sites on the Internet that provide examples of how to use iText, I’ve found that the documentation for iTextSharp is a little harder to come by.  So I thought it might be helpful if I provided some posts on how I use iTextSharp along with some of the gotchas I’ve encountered along the way.</p>\n<span id=\"more\"></span>\n\n<p>To use iTextSharp, you will need to add a reference to the library in your code, or simply drop the code into your bin directory of your ASP.NET application.</p>\n<p>The main trick in translating the iText samples and documentation to iTextSharp is that iTextSharp makes the Java properties in iText (get_PropertyName_()&#x2F;set_PropertyName_()) .NET properties, (PropertyName).</p>\n<p>You’ll also need to know that the namespace for iTextSharp is different from iText.  Be sure to include the following line at the top of any code you write that uses iTextSharp</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> iTextSharp.text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> iTextSharp.text.pdf;</span><br></pre></td></tr></table></figure>\n\n<p>To get your ASP.NET page to return a PDF file, you’ll want to add the following code at the top of your Page_Load event handler:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response.Clear();</span><br><span class=\"line\">Response.ContentType = <span class=\"string\">&quot;application/pdf&quot;</span>;</span><br><span class=\"line\">Response.AddHeader(<span class=\"string\">&quot;ContentType&quot;</span>, <span class=\"string\">&quot;application/pdf&quot;</span>);</span><br><span class=\"line\">Response.AddHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;inline;filename=\\&quot;FileName.pdf\\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>The <code>Response.Clear()</code> line clears out any input that has already been sent back to the browser.</p>\n<p>The next line tells the browser that what is coming back is a PDF, not HTML.</p>\n<p>The “Content-Disposition” line allows the browser to know that we want the file IN the browser window rather than downloading the file.</p>\n<p>Finally, yes, I know there are two ContentType lines.  But I took this from working code and while I can’t remember why I wrote it like that, it works.  If you can get it working with only one line, go for it.</p>\n<p>Now that we have the basics out of the way, we can concentrate on actually generating PDFs in future posts.</p>\n",
            "tags": [
                "asp.net",
                "iTextSharp",
                "PDF",
                "iText"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-application-error-detecting-404-s/",
            "url": "http://davembush.github.com/asp-net-application-error-detecting-404-s/",
            "title": "ASP.NET Application_Error Detecting 404's",
            "date_published": "2009-03-02T10:56:18.000Z",
            "content_html": "<p><img src=\"/uploads/2009/02/misc-vol3-046.jpg\" alt=\"misc_vol3_046\"> For many of you, this is going to be a “Duh!” kind of post.  But while working on this today, I found so many people asking this question and so many others giving the wrong answer, I’m compelled to post anyhow. If you know the answer, then you are welcome to stop reading now.  I didn’t write this for you.  I wrote this for the hundreds of people who will search for this information and won’t be able to find the answer.  The fact of the matter is, that’s why I write most of what I write–so people searching for the information can find it.  So here’s the question: I’ve set up an Application_Error event handler in my Global.asax file and I have implemented a server transfer for errors.  Now I want to set up a specific page to handle 404 errors.  How do I detect a 404 error and call the 404-specific page? The main answer to this question involves retrieving the exception that triggered the event in the first place.  To do that, we call <code>Server.GetLastError()</code>:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception ex = Server.GetLastError();</span><br></pre></td></tr></table></figure>\n\n<p>What we need to do next is determine if the exception is an HttpException or something else.  Once we have determined that it is an HttpException we will have access to Http-specific properties and methods that will give us the rest of the information we are looking for.  In our case we want to call the GetHttpCode() method, which will return the Http status code and compare it to the number 404. Our resulting code looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Application_Error</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Exception ex = Server.GetLastError();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ex <span class=\"keyword\">is</span> HttpException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((HttpException)(ex)).GetHttpCode() == <span class=\"number\">404</span>)</span><br><span class=\"line\">            Server.Transfer(<span class=\"string\">&quot;~/Error404.aspx&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Code that runs when an unhandled error occurs</span></span><br><span class=\"line\">    Server.Transfer(<span class=\"string\">&quot;~/DefaultError.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s all there is to it.</p>\n",
            "tags": [
                "asp.net",
                "404",
                "application_error",
                "exceptions"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-response-redirect-and-javascript/",
            "url": "http://davembush.github.com/asp-net-response-redirect-and-javascript/",
            "title": "ASP.NET Response.Redirect() and JavaScript",
            "date_published": "2009-01-28T10:10:10.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/toco-toucan.jpg\" alt=\"A toucan perched on a branch in Brazil.\"> Yesterday we covered issues surrounding using ASP.NET’s Response.Redirect in server side code. We noted that not handing it correctly could prevent code from running on the server that we want to run. The other issue is emitting Javascript in the server side in association with Response.Redirect(). This also leads to unexpected problems if you aren’t thinking about what is actually happening with your code.  Take this code as an example:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> myscript = <span class=\"string\">@&quot;&lt;script language=&#x27;javascript&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">alert(&#x27;hello world&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">        ClientScript.RegisterClientScriptBlock</span><br><span class=\"line\">            (<span class=\"string\">&quot;&quot;</span>.GetType(), <span class=\"string\">&quot;s&quot;</span>, myscript);</span><br><span class=\"line\">        Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The question is, why does the javascript never display “hello world”? Actually, the javascript is typically a little more complicated than “hello world.” But the question is always, “Why didn’t my javascript execute? It works fine without the redirect.” Once again, we need to think more clearly about what we’ve actually written. What we’ve actually told the server to do is the following:</p>\n<ol>\n<li>Render the javascript to display “hello world” in an alert box on the client.</li>\n<li>Set the header (not the header element, but the header that tells the browser whether the code executed successfully or not) to “302 redirect.”</li>\n</ol>\n<p>When the browser finally gets the stream back from the server, it will actually see step 2 first because the header comes before the javascript code. The browser will look at that 302, ignore everything else on the page, and faithfully redirect to the page specified as part of the 302.</p>\n",
            "tags": [
                "javascript",
                "asp.net",
                "302",
                "redirect",
                "response"
            ]
        },
        {
            "id": "http://davembush.github.com/response-redirect-executes-too-soon-on-the-server/",
            "url": "http://davembush.github.com/response-redirect-executes-too-soon-on-the-server/",
            "title": "Response.Redirect() executes too soon on the Server.",
            "date_published": "2009-01-27T10:43:45.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/tp-vol4-017.jpg\" alt=\"tp_vol4_017\"> I’ve seen this question a couple of times in various situations. The first involves Javascript and the second involves server side code. Both are caused by a misunderstanding of what this function does and how web pages work. Let’s start with the easy one: server side code.  You might have code that looks something like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem with this code, which is probably obvious to most of you, is that the “do some more code here” section will never fire because we’ve done a redirect right before it. But is this as obvious?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem here is that Page_Load is the first event to fire. Button1_Click() will never execute because we’ve done the redirect during our page load. Aside from the fact that you should not perform form processing code during Page_Load(), the other issue is that events can fire in any order. So maybe you were smart and processed your form in a Button.Click event handler, but have you accounted for the fact that your databinding code may need to put data in the database AFTER you run Response.Redirect()? There is a way around this. Response.Redirect() has two overloads. The first, which we are all very used to, is the one I’ve shown above. But all it does is call the second which has two parameters, the URL and a boolean value, to indicate if we should stop processing right away and return to the browser. The default that gets sent in with the first overload is TRUE. Go ahead and quit. By modifying our code to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Do something here</span></span><br><span class=\"line\">    Response.Redirect(<span class=\"string\">&quot;~/newpage.aspx&quot;</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Button1_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some more code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>we can be sure that our Button1_Click method, or databinding code, will be executed. Tomorrow we’ll look at the issues involved with Javascript.</p>\n",
            "tags": [
                "asp.net",
                "events",
                "redirect",
                "response"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "url": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "title": "ASP.NET AJAX using JSON - Here's how.",
            "date_published": "2008-08-04T11:05:58.000Z",
            "content_html": "<p><img src=\"/uploads/2008/08/image.png\" alt=\"image\"> Last week I wrote a post about <a href=\"/2008/07/30/using-json-in-aspnet/\">how simple JSON is</a>.</p>\n<p>In it I explained the main differences between using JSON and using the update panel. I really started out thinking I’d get to how to write JSON code, but I ran out of space. Well, today, we get to the HOW.</p>\n<span id=\"more\"></span>\n\n<p>All JSON really is, is the ability to have JavaScript code call a WebService for our data, and write it into the HTML on the client side.</p>\n<p>If you know anything about how to write a WebService, this should be rather trivial because your web service is going to look just like any other web service with the exception of an added attribute.  To make a WebService accessible to JSON, add the following Attribute to your WebService class:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ScriptService</span>]</span><br></pre></td></tr></table></figure>\n\n<p>You will probably also need to add</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Script.Services;</span><br></pre></td></tr></table></figure>\n\n<p>to the top of your page.</p>\n<p>Now, any WebMethod in your WebService can be called by your JavaScript on the client side. As with any AJAX code in ASP.NET, you’ll need to add a ScriptManager to your page.</p>\n<p>But, in addition, you’ll also need to add a Services section in your ScriptManager to tell the ASP.NET page to pull in the javascript that the WebService code will now produce for you.</p>\n<p>You should have this code at the top of the FORM section of your HTML.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:ScriptManager</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;ScriptManager1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:ServiceReference</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;~/WebService.asmx&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:ScriptManager</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Where, <code>~/WebService.asmx</code> refers to the web service you want to be able to access. Now in the javascript event handler where you want to be able to call the WebService, you just call the WebService similar to how you would call any other function. In fact, if you write this code in the ASPX page, you will even get intellisense. So, assuming we have a class named <code>WebService</code> with a function called “HelloWorld” that returns a string, our calling code will look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebService.HelloWorld(Success,Fail,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Note that our call takes three parameters, even though our function in the WebService does not take any parameters.</p>\n<p>The first parameter is a pointer to a JavaScript function to call if the call to the WebService succeeds.</p>\n<p>The second is a pointer to the JavaScript function to call if the WebService call fails, and the third parameter is a JavaScript context object to pass to the Success function.</p>\n<p>Since I don’t have any data I need to pass along, I just pass in NULL in the code above. If the WebService method takes parameters, the parameters are listed before the success, fail, and context parameters. If the WebService call fails, the JavaScript function that we specified for fail will be called. It needs to accept one parameter which will have the error message in it. You can use this to display an error message in an alert box. When the WebService returns successfully, the Success function will be called. This function takes two parameters. The first is the return value. The second is the context object we passed when we originally called the WebMethod. You can then use standard JavaScript to find an HTML element on the page to put the new content into:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Success</span>(<span class=\"params\">result,context</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;fillMeAtLoadTime&quot;</span>).<span class=\"property\">innerHTML</span> = result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And that’s really all there is to JSON. The rest is really just a matter of imagination and JavaScript.</p>\n",
            "tags": [
                "asp.net",
                "ajax",
                "json"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-gridview-edit-all-rows-at-once/",
            "url": "http://davembush.github.com/asp-net-gridview-edit-all-rows-at-once/",
            "title": "ASP.NET GridView Edit All Rows At Once",
            "date_published": "2007-10-30T11:23:15.000Z",
            "content_html": "<p>I just saw a question about this yesterday and realized that while I know how to do this, not everyone does.  So, here we go…</p>\n<p>Here’s the problem.  You want to be able to edit all the rows in the gridview at once instead of having to switch to edit mode and save one row at the time.  Normally, you’d want to do this when only a couple of items need to be changed per row and not the entire row’s worth of data.</p>\n<p><img src=\"/uploads/2016/03/image-1.png\" alt=\"image\" title=\"image\"></p>\n<p>Photo credit: <a href=\"//www.flickr.com/photos/tico24/16673795/\">tico_24</a> via <a href=\"//visualhunt.com\">VisualHunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></p>\n<span id=\"more\"></span>\n\n<p>You can do this easily if you make the columns that need to be edited templated columns and place editable controls in them (checkbox, textbox, etc)  You can then either make these controls “AutoPostback” controls, or you can provide a control at the bottom of the screen that triggers the update.  In either case, the code you are going to write at the codebehind level is going to be the same.</p>\n<p>For this example, we are going to assume that you only have one column that needs to be updated and that the control is a checkbox control.</p>\n<p>One of the issues you are going to run into with this is that you’ll need to know which row is associated with the control when it is updated.  The easiest way I’ve found of dealing with this problem is by adding a HiddenField control and databinding the row Id to it.  Since we are dealing with a CheckBox control, you will need to create an event handler for the Checked event.  The first parameter that will be passed into this event handler will be the sender.  Sender represents the control that fired the event.  In this case, it will represent the CheckBox control.</p>\n<p>The other control you’ll need to retrieve is the HiddenField control that you placed next to the check box.  You can retrieve this control by using the FindControl() method that is hanging off the parent control of the check box.  Assuming your HiddenField control is named “_hiddenFieldId” you can get the ID by using:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> id = (HiddenField)(((CheckBox)(Sender)).Parent</span><br><span class=\"line\">    .FindControl(<span class=\"string\">&quot;_hiddenFieldId&quot;</span>)).Text;</span><br></pre></td></tr></table></figure>\n\n<p>Now that you have the value of the ID and the value of the checkbox, you can update your database.</p>\n",
            "tags": [
                "asp.net",
                "tutorial",
                "gridview"
            ]
        }
    ]
}