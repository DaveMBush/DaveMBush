{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"node.js\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/using-gulp-to-bundle-minify-and-cache-bust/",
            "url": "http://davembush.github.com/using-gulp-to-bundle-minify-and-cache-bust/",
            "title": "Using Gulp to Bundle, Minify, and Cache-bust",
            "date_published": "2016-01-28T13:30:00.000Z",
            "content_html": "<p>Last week I discussed <a href=\"/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/\">how to setup Node.js and Gulp in Visual Studio 2015</a>.  During that discussion, I mentioned that I’m using gulp to bundle, minify and cache-bust my HTML, CSS, and JavaScript files.</p>\n<p>This week, my intent is to walk you through exactly how I do that.</p>\n<p>So, if you don’t already have Node.js and Gulp installed, you may want to go back and read the article I wrote last week.</p>\n<p>Since most of the people who read this blog are ASP.NET developers, there may be a few .NET specific tips along the way.  But the Gulp file I am going to walk you through is technology agnostic.  So if you are using some other technology, you’ll still benefit from this article.</p>\n<p><img src=\"/uploads/2016/01/image-5.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h2><p>The first thing we want to do is that we want to combine all of our CSS files and JavaScript files into one file for CSS and one file for JavaScript.  There are several ways that you might do this, but what I wanted was some way that would allow me to work unbundled during development and bundled when I released the code.  Since I’m working with a single page application (SPA), this was a simple matter of configuring my default file to be index.debug.html for development and index.release.html and using web.config transforms to specify which should be used in which environment.  If you are working in some other environment, I’m sure you have some kind of similar way of specifying the default file based on an environment setting.</p>\n<p>So all of my development work will be done in index.debug.html.</p>\n<p>Like I said, there are many ways of bundling JavaScript and CSS code, but the way I’ve found that seems to have the least amount of work involved is by using the <a href=\"//www.npmjs.com/package/gulp-useref\">gulp-useref module</a>.  This module lets us put tokens in our html file that specify which files we want to compress and what the resulting file name should be.</p>\n<p>Your HTML file would look something like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- build:css css/combined.css --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/one.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/two.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endbuild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- other normal content goes here --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- build:js scripts/combined.js --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/one.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/two.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endbuild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>useref sees the build token and creates a css file named combined.css and a JavaScript file named combined.js and changes the output html so that it looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/combined.css&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;scripts/combined.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>To use this feature in your Gulp file, install it using NPM</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-useref --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>Make sure that you run NPM in the directory your gulpfile.js file is in.</p>\n<p>In your gulp file, you’ll add the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> useref = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-useref&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;useRef&#x27;</span>, [], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">useref</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The end result is that there will be a new index.debug.html file in a sub directory named index along with the new css&#x2F;combined.css and scripts&#x2F;combined.js file.</p>\n<h2 id=\"Conditional-Processing\"><a href=\"#Conditional-Processing\" class=\"headerlink\" title=\"Conditional Processing\"></a>Conditional Processing</h2><p>One of the many things I like about Gulp is that it is stream based.  That is, I don’t have to write files to a directory unless or until I want to.  Unlike Grunt (the other popular file processing Node.js based tool) where everything is entirely file based.</p>\n<p>However, because I have three different types of files coming out of the previous process, and I want to compress each of the files, I’ll need some way to conditionally process the files coming out of useref.</p>\n<p>For this, we need <a href=\"//github.com/robrich/gulp-if\">gulp-if</a>.</p>\n<p>You can install gulp-if using NPM using the following command:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-if --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>The basic using of gulp-if looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">gulpif</span>(<span class=\"comment\">/* file condition here */</span>, <span class=\"comment\">/* next stream process goes here*/</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Minify-JavaScript\"><a href=\"#Minify-JavaScript\" class=\"headerlink\" title=\"Minify JavaScript\"></a>Minify JavaScript</h2><p>The next thing we want to do is that we want to minify the resulting combined JavaScript file.  There are several that you could use.  The one I settled on is <a href=\"//www.npmjs.com/package/gulp-uglify\">gulp-uglify</a>. Install gulp-uglify using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-uglify --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>So, combining this with gulp-if, the usage would look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">... other code here</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.js&#x27;</span>, <span class=\"title function_\">uglify</span>()));</span><br></pre></td></tr></table></figure>\n\n<p>This is just the general gist.  We’ll put all of this together in a few more paragraphs.</p>\n<h2 id=\"Minify-CSS\"><a href=\"#Minify-CSS\" class=\"headerlink\" title=\"Minify CSS\"></a>Minify CSS</h2><p>To minify CSS, I decided to use <a href=\"//www.npmjs.com/package/gulp-cssnano\">gulp-cssnano</a> Install gulp-cssnano using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-cssnano --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And use it in our code like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cssnano = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cssnano&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">... code here ...</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.css&#x27;</span>, <span class=\"title function_\">uglify</span>()));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map-Files\"><a href=\"#Map-Files\" class=\"headerlink\" title=\"Map Files\"></a>Map Files</h2><p>Once we have all of our files minified, we’ll want some way of being able to see the original source code even though you have a minified file that the site is using.  I’m not going to go into a lot of detail about what a map file is or what it does here.  But if you have a problem on a production server, you are going to want to at least have map files available so you can track the issue down. To create a map file, you’ll want to use <a href=\"//www.npmjs.com/package/gulp-sourcemaps\">gulp-sourcemaps</a>. Install using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-sourcemaps --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>I’ll show you how this all plugs in soon.</p>\n<h2 id=\"One-More-Package\"><a href=\"#One-More-Package\" class=\"headerlink\" title=\"One More Package\"></a>One More Package</h2><p>Yes, believe it or not, there is one more package we need yet to make this all work. You see, to get the minify stuff to work with useref we need to install the <a href=\"//www.npmjs.com/package/lazypipe\">lazypipe</a> module. Which you can install using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lazypipe --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Putting-it-All-Together\"><a href=\"#Putting-it-All-Together\" class=\"headerlink\" title=\"Putting it All Together\"></a>Putting it All Together</h2><p>And so now, finally, we can put this all together in one big script.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> useref = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-useref&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cssnano = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cssnano&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lazypipe = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lazypipe&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sourcemaps = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sourcemaps&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-if&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compressTasks is a sub process used by useRef (below)</span></span><br><span class=\"line\"><span class=\"comment\">// that compresses (takes out white space etc) the</span></span><br><span class=\"line\"><span class=\"comment\">// javascript and css files</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compressTasks = <span class=\"title function_\">lazypipe</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"property\">init</span>, &#123; <span class=\"attr\">loadMaps</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.js&#x27;</span>, <span class=\"title function_\">uglify</span>()); &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">gulpif</span>(<span class=\"string\">&#x27;*.css&#x27;</span>, <span class=\"title function_\">cssnano</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">zindex</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// useRef looks at markers in index.debug.html and</span></span><br><span class=\"line\"><span class=\"comment\">// combines all of the files into one file.  once the</span></span><br><span class=\"line\"><span class=\"comment\">// files are combined the compressTasks process</span></span><br><span class=\"line\"><span class=\"comment\">// is called and then the files are all written out to</span></span><br><span class=\"line\"><span class=\"comment\">// the index directory.</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;useRef&#x27;</span>, [], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">useref</span>(&#123;&#125;,</span><br><span class=\"line\">            <span class=\"title function_\">lazypipe</span>()</span><br><span class=\"line\">            .<span class=\"title function_\">pipe</span>(compressTasks)</span><br><span class=\"line\"></span><br><span class=\"line\">            ))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(sourcemaps.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compressing-The-HTML-file\"><a href=\"#Compressing-The-HTML-file\" class=\"headerlink\" title=\"Compressing The HTML file\"></a>Compressing The HTML file</h2><p>So, as the comments say and as I’ve mentioned before, this places everything in the index directory.  What we want to do next is to compress the HTML file and move the index.debug.html back up to the root directory with the name index.release.html and place the css file and the javascript file in the appropriate directories hanging off the root. To compress the HTML file, you can use the NPM module <a href=\"//www.npmjs.com/package/gulp-htmlmin\">gulp-htmlmin</a>, which you can install using</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-htmlmin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// minIndex takes all of the whitespace out of the</span></span><br><span class=\"line\"><span class=\"comment\">// main index file</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minIndex&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">htmlmin</span>(&#123; <span class=\"attr\">collapseWhitespace</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">             <span class=\"attr\">removeComments</span>: <span class=\"literal\">true</span> &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;index&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rename-the-Index-File\"><a href=\"#Rename-the-Index-File\" class=\"headerlink\" title=\"Rename the Index File\"></a>Rename the Index File</h2><p>For renaming the file, we use <a href=\"//www.npmjs.com/package/gulp-rename\">gulp-rename</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-rename --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulpRename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// renameIndex renames the index file and puts it</span></span><br><span class=\"line\"><span class=\"comment\">// in the root directory</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;renameIndex&#x27;</span>, [<span class=\"string\">&#x27;minIndex&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.debug.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">gulpRename</span>(<span class=\"string\">&#x27;index/index.release.html&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This renames the file and puts it in the root directory.</p>\n<h2 id=\"Moving-Files\"><a href=\"#Moving-Files\" class=\"headerlink\" title=\"Moving Files\"></a>Moving Files</h2><p>Next we need to get the files that are in our index directory back out to the directories they belong in.  To do this, we use the built-in node command gulp.dest().</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;copyJs&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copy the js and map files generated from useref to</span></span><br><span class=\"line\">    <span class=\"comment\">// the real app directory</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/app/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;app&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;copyCss&#x27;</span>, [<span class=\"string\">&#x27;useRef&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// copy the css and map files generated from useref to</span></span><br><span class=\"line\">    <span class=\"comment\">// the real css directory</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/css/*.*&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;css&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cache-busting\"><a href=\"#Cache-busting\" class=\"headerlink\" title=\"Cache-busting\"></a>Cache-busting</h2><p>One of the age-old problems of using CSS and JavaScript pages on our site is that when we put new versions up, we have no way of telling the browser that we just put a new file up unless we change the file name.  The trick is to make the file look like a new file.  This is typically done by putting a query parameter at the end.</p>\n<p>Once again, there are several solutions to this problem available for Gulp, but the one I like the best reads the file and generates a hash string for it and appends that as the query string.  This make the file look unique but only causes the browser to download the file if it really is different.</p>\n<p>To implement cache-busting, you’ll want to install <a href=\"//www.npmjs.com/package/gulp-cache-bust\">gulp-cache-bust</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-cache-bust --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>And the final bit of code to make all of this work:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cacheBuster = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-cache-bust&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cacheBuster looks at the css and js files and appends a hash to the</span></span><br><span class=\"line\"><span class=\"comment\">// request to cause the file to get reloaded when the file changes.</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;cacheBuster&#x27;</span>, [<span class=\"string\">&#x27;copyCss&#x27;</span>, <span class=\"string\">&#x27;copyJs&#x27;</span>, <span class=\"string\">&#x27;renameIndex&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;index/index.release.html&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cacheBuster</span>())</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Enhancements\"><a href=\"#Enhancements\" class=\"headerlink\" title=\"Enhancements\"></a>Enhancements</h2><p>If you wanted to go to the trouble, you could create this as one great big script that never actually put the files in the index directory.  But I have found having the files written out to the intermediate directory to be valuable for debugging purposes.</p>\n<h2 id=\"The-Final-Code\"><a href=\"#The-Final-Code\" class=\"headerlink\" title=\"The Final Code\"></a>The Final Code</h2><p>You can get <a href=\"//github.com/DaveMBush/BundleMinifyAndCacheBustWithGulp\">the complete Gulp script from GitHub</a>.</p>\n",
            "tags": [
                "bundling",
                "gulp",
                "minification",
                "node.js"
            ]
        },
        {
            "id": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "url": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "title": "Using Node.js and Gulp with ASP.NET in Visual Studio 2015",
            "date_published": "2016-01-21T13:30:00.000Z",
            "content_html": "<p>As I’ve written before, <a href=\"/tags/angular-js/\">I’m using AngularJS a lot</a> recently to write the client side of my web applications.  As I’ve gotten to the end of my current project, I found myself needing to implement cache busting and while I am at it compression.  But because I’m <a href=\"/asp-net-angular-js-html5mode/\">using a regular HTML page to serve up the shell for my single page application</a>, using the regular ASP.NET on the fly compression wasn’t going to work for this application.</p>\n<p>But there are a lot of tools in the Node.js space that will work.  Would it be possible to wire node.js and Gulp with ASP.NET in my existing web project? It turns out you can.</p>\n<p>Although, at this point, it isn’t as straightforward as most other things in Visual Studio.</p>\n<p><img src=\"/uploads/2016/01/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Installing-Node-js\"><a href=\"#Installing-Node-js\" class=\"headerlink\" title=\"Installing Node.js\"></a>Installing Node.js</h2><p>I’m assuming that you’ve already installed Visual Studio 2015.  If you did that, you already have Node.js installed.  The problem is, it isn’t the most recent version.  So, what you want to do is to install the most recent of version from the <a href=\"//nodejs.org\">Node.js site</a> manually.</p>\n<p>Once you have Node.js installed, the next thing you will need to do is that you’ll need to configure Visual Studio to use the version you installed instead of the version it installed.  To do this, navigate to “Tools” &gt; “Options”.  In the resulting dialog, find the “Projects and Solutions” &gt; “External Web Tools” leaf in the tree control and then add the directory to your newly installed Node.js installation to the top of the list of paths to external tools. <a href=\"/uploads/2016/01/image-3.png\"><img src=\"/uploads/2016/01/image_thumb.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>To use Gulp, you will need to install Gulp using the Node Package Manager (npm).  There are several places where I got stuck.</p>\n<p>First, I tried to install gulp using the Node Interactive Window (CTRL-K,N).  This works fine when you want to install something globally, but when you want to install something with the –save or –save-dev option, you will get the error message: <code>Please specify a valid Node.js project or project directory.</code> It took me several tries before it finally dawned on me that it wasn’t just asking “What project do you want to install this in?”  It was asking “What Node project do you want to install this in?” We don’t have a node project, so this will never work.  What you will need to do instead is that you’ll need to shell out to the command prompt, change to the project directory, and then type your npm commands.</p>\n<h2 id=\"Productivity-Power-Tools\"><a href=\"#Productivity-Power-Tools\" class=\"headerlink\" title=\"Productivity Power Tools\"></a>Productivity Power Tools</h2><p>You can shell out to the command prompt much easier if you install the <a href=\"//visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d?SRC=VSIDE\">Visual Studio Productivity Power Tools</a>  Once these are installed, you can right click on the project you want to install npm packages into and select “Power Commands” &gt; “Open Command Prompt…” from the menu.</p>\n<h2 id=\"NPM-init\"><a href=\"#NPM-init\" class=\"headerlink\" title=\"NPM init\"></a>NPM init</h2><p>Much like NuGet’s packages.config file, NPM uses a json file to keep track of what should be installed.  To create this file, run the command <code>npm init</code> and answer the questions.</p>\n<p>Next, in Visual Studio, click the “Show all files” icon in Solution Explorer, find the package.json file that you just created with the <code>npm init</code> command, and include the package.json file in your project.  This will cause it to be part of your commit so that anyone who pulls your code down from version control will have the packages installed automatically.</p>\n<h2 id=\"Install-Gulp\"><a href=\"#Install-Gulp\" class=\"headerlink\" title=\"Install Gulp\"></a>Install Gulp</h2><p>Once you’ve shelled out to the command prompt, you’ll need to type in the following two commands.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>If you open your package.json file now, you will see an entry for gulp.</p>\n<h2 id=\"Create-a-Gulp-task\"><a href=\"#Create-a-Gulp-task\" class=\"headerlink\" title=\"Create a Gulp task\"></a>Create a Gulp task</h2><p>The final step in this process is to create the actual Gulp job.  To do that, all you need to do is create a gulpfile.js file in the root of the project.</p>\n<p>Inside the gulpfile.js file, add the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And now you have a default task for gulp installed.</p>\n<h2 id=\"Make-Gulp-Part-of-the-Build\"><a href=\"#Make-Gulp-Part-of-the-Build\" class=\"headerlink\" title=\"Make Gulp Part of the Build\"></a>Make Gulp Part of the Build</h2><p>The final step here is that we want to make gulp part of the build.  Otherwise, what’s the point? In Visual Studio 2015, this is really rather simple.</p>\n<p>From the main menu, go to “View” &gt; “Other Windows” &gt; “Task Runner Explorer”.  You should end up looking a a sub windows in Visual Studio that looks like this: <img src=\"/uploads/2016/01/image-4.png\" alt=\"image\" title=\"image\"> In gulp, you might have multiple tasks in a gulp file. We only have one right now, “default”.  If you right click on that, you will see that you can bind that task to one of the four bindings on the right.</p>\n<p>That’s all you have to do.  Now the gulp task “default” is bound to a specific build step.  You can do all kinds of file processing with this which we may cover in a later post.  But for now, you can at least get it all wired in.</p>\n",
            "tags": [
                "javascript",
                "visual studio",
                "asp.net",
                "gulp",
                "node.js"
            ]
        }
    ]
}