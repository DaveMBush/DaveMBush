{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"chromium\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "url": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "title": "CefSharp Offscreen [Why do I have so many instances of Chromium?]",
            "date_published": "2015-10-01T11:32:00.000Z",
            "content_html": "<p>I’ve been using the CefSharp.Offscreen library to drive the Chromium browser for a couple of months now.  While the code I’ve been working on has been working correctly, I could never figure out why so many instances of Chromium are left dangling in my task manager.  Oh, they’d all go away once I exited the application, but then it would take a very long time for my application to completely close because there were so many instances of Chromium hanging around.</p>\n<p>This past week, I finally figured out how to keep the number of Chromium instances in line with the number of off-screen browser windows I was actually creating.</p>\n<p><img src=\"/uploads/2015/09/image4.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<p>I’m using version 41 of CefSharp, any future problem may not have this problem.  This post is intended to walk through the discovery steps and is not meant as a ding on the CefSharp developers.  Hey!  For all I know, the problem is in Chromium.</p>\n<p>So, as I’ve already mentioned, I noticed many instances of Chromium in my task manager.  At first I thought this was normal.  I’ve seen many instances of the Chrome browser in my task manager even though I only had one browser window open.  And I’ve seen information on the web that says multiple windows are needed to make Chromium work.</p>\n<p>But the more I run my program, the more windows show up in task manager.  Certainly this isn’t right.</p>\n<p>And then I started thinking about my code.  Every instance of my browser is wrapped in a using statement because the browser windows is disposable.  Could it be possible that some resource isn’t being disposed correctly as we use the same browser window to navigate from one page to another? Here is some code to illustrate my point.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Multiple browser windows open here</span></span><br></pre></td></tr></table></figure>\n\n<p>So, obviously this isn’t right.  Well, at least it is obvious to me.</p>\n<p>But what if the use case for this never was intended for it to be used like a regular window.  In that case, putting the using statement inside of the foreach would solve my problem.  It isn’t quite as efficient as I would like, but at least it would work.  And the fact that I had so many instances of chromium running was eating up memory and slowing my whole computer down.  At least this would give me my computer back.</p>\n<p>So, I changed the code to look more like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// One browser window open here.</span></span><br></pre></td></tr></table></figure>\n\n<p>Fixed!</p>\n",
            "tags": [
                "c#",
                "Chromium",
                "debugging"
            ]
        },
        {
            "id": "http://davembush.github.com/browser-automation-in-net-w-chromium/",
            "url": "http://davembush.github.com/browser-automation-in-net-w-chromium/",
            "title": "Browser Automation in .NET w/ Chromium",
            "date_published": "2015-07-09T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/07/image.png\" alt=\"image\" title=\"image\"> Over the past ten years, I’ve successfully implemented various types of screen scraping in order to provide data to my clients.  Most of these implementations have involved accessing HTML and parsing out the data we needed for the web application.</p>\n<p>My latest implementation of this made use of the <a href=\"//htmlagilitypack.codeplex.com/\">HTML Agility Pack</a> and managed to incorporate the e-Labels For Education site into the Labels For Education site.  (No links, because the e-Labels program is being phased out.) Recently, I’ve been spending a lot of times on some site doing the same thing over and over again.  But most of the sites I visit now implement some kind of AJAX so that doing a simple web request to a page without also loading and parsing the JavaScript ends up giving me a page with no useful data at all.  Unlike the work I’ve done in the past where this was sufficient.</p>\n<p>This, combined with my recent work implementing Jasmine unit test for JavaScript and running them in the PhantomJS headless browser has had me thinking, wouldn’t it be great if I could do similar kinds of screen scraping, or even browser automation, but use something like an embedded version of PhantomJS to get the work done.</p>\n<span id=\"more\"></span>\n\n<p>Well, do a search for “embedded PhantomJS for .NET” or something similar and you’ll find that that isn’t possible.  At least not yet.</p>\n<p>But there is a viable alternative.  Actually there are a couple of viable alternative.  But they all end up using the Google Chromium browser API.  The implementation I ended up using is <a href=\"//github.com/cefsharp\">CefSharp</a>.  Mostly because this is what is available from NuGet.</p>\n<p>What follows are some of the tricks I learned along the way.</p>\n<h2 id=\"Installing-Chromium\"><a href=\"#Installing-Chromium\" class=\"headerlink\" title=\"Installing Chromium\"></a>Installing Chromium</h2><p>The first thing you’ll need to do once you have a project started, is that you’ll need to install the Chromium DLLs.  In the NuGet package manager, do a search for CefSharp.  This will bring up a list of plugins, you’ll want to install CefSharp.OffScreen and CefSharp.Common (I’m assuming you want to do off-screen automation here.)  The version I am working with is version 39.</p>\n<p>What I found difficult to figure out next was how to actually use the library.</p>\n<h2 id=\"Get-It-Initialized\"><a href=\"#Get-It-Initialized\" class=\"headerlink\" title=\"Get It Initialized\"></a>Get It Initialized</h2><p>You’ll want to initialize the library before you use it.  The following lines will do that.  I just put this as early in my code as possible.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"keyword\">new</span> CefSettings</span><br><span class=\"line\">    &#123;LogSeverity = LogSeverity.Verbose&#125;;</span><br><span class=\"line\">settings.CefCommandLineArgs.Add(<span class=\"string\">&quot;no-proxy-server&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Cef.OnContextInitialized = ()</span><br><span class=\"line\">    =&gt; Cef.SetCookiePath(<span class=\"string\">&quot;cookies&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!Cef.Initialize(settings, shutdownOnProcessExit: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    performDependencyCheck: <span class=\"literal\">true</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">&quot;Unable to Initialize Cef&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to use a proxy server, you’ll need to look up the documentation for how to set the proxy server.</p>\n<p>The Cef.SetCookiePath sets the location of your cookie file.</p>\n<h2 id=\"Creating-The-Browser-“Window”\"><a href=\"#Creating-The-Browser-“Window”\" class=\"headerlink\" title=\"Creating The Browser “Window”\"></a>Creating The Browser “Window”</h2><p>Now that you have this all set, you can use the ChromiumWebBrowser class to create a browser window.  Since the browser is disposable, you’ll want to either wrap the code in a using() statement or you’ll want to make sure you dispose of the browser object when you are done.</p>\n<p>You’ll want to set a few things on the browser object next.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .FileAccessFromFileUrlsAllowed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .UniversalAccessFromFileUrlsAllowed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">browser.BrowserSettings</span><br><span class=\"line\">    .WebSecurityDisabled = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And then you’ll want to wait for the browser to initialize.</p>\n<p>Now the code I was given for this looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForBrowserToInitialize</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;<span class=\"built_in\">bool</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    EventHandler handler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    handler = (sender, args) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        browser.BrowserInitialized -= handler;</span><br><span class=\"line\">        tcs.TrySetResult(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    browser.BrowserInitialized += handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll recognize this as an extension method.  What it is doing is waiting for the BrowserInitialized event to fire and then telling the task it can return.  This works great the first time you use it, but I found that when I created a new browser “window” the initialization happened so quickly that this was unreliable.  I’ve replaced this code with the more reliable version below.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForBrowserToInitialize</span></span></span><br><span class=\"line\"><span class=\"function\">    (<span class=\"params\"><span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Browser.IsBrowserInitialized)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It does the same thing.  It is just more reliable.</p>\n<h2 id=\"Load-a-Page\"><a href=\"#Load-a-Page\" class=\"headerlink\" title=\"Load a Page\"></a>Load a Page</h2><p>Everything else is pretty straight forward.  To load a web page:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">LoadUrl</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser, <span class=\"built_in\">string</span> url</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    browser.Load(url);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> browser.WaitForPage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That WaitForPage() method looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">WaitForPage</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">this</span> ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;<span class=\"built_in\">bool</span>&gt;();</span><br><span class=\"line\">    EventHandler&lt;NavStateChangedEventArgs&gt; handler = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    handler = (sender, args) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Wait for while page to finish loading not</span></span><br><span class=\"line\">        <span class=\"comment\">// just the first frame</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!args.IsLoading)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            browser.NavStateChanged -= handler;</span><br><span class=\"line\">            tcs.TrySetResult(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    browser.NavStateChanged += handler;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Get-Data-Out\"><a href=\"#Get-Data-Out\" class=\"headerlink\" title=\"Get Data Out\"></a>Get Data Out</h2><p>If you need to get data out of the page, you can use GetSourceAsync();</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> source = <span class=\"keyword\">await</span> browser.GetSourceAsync();</span><br></pre></td></tr></table></figure>\n\n<p>or you can use JavaScript to get at the DOM using</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> EvaluateScriptAsync(javaScriptCodeHere);</span><br></pre></td></tr></table></figure>\n\n<p>Note, you can also use <code>EvaluateScriptAsync</code> to do things like clicking buttons, scrolling the window and a lot of other useful things.</p>\n<h3 id=\"Other-Places-Talking-About-Chromium-for-NET\"><a href=\"#Other-Places-Talking-About-Chromium-for-NET\" class=\"headerlink\" title=\"Other Places Talking About Chromium for .NET\"></a>Other Places Talking About Chromium for .NET</h3><ul>\n<li><a href=\"//umaranis.com/2013/10/16/how-to-embed-chrome-browser-in-net-application/\">Embed Chromium Using CefGlue</a></li>\n<li><a href=\"//thechriskent.com/2014/08/18/embedded-chromium-in-winforms/\">Embedded Chromium in WinForms</a></li>\n</ul>\n",
            "tags": [
                "c#",
                "CefSharp",
                "Chromium"
            ]
        }
    ]
}