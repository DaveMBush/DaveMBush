{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"formgroup\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/angular-cross-field-validation/",
            "url": "http://davembush.github.com/angular-cross-field-validation/",
            "title": "Angular Cross Field Validation",
            "date_published": "2017-12-19T11:30:36.000Z",
            "content_html": "<p>This past week I had my first need to do use cross field validation in Angular.  While the general mechanics are pretty trivial, my particular implementation ran into some issues that you might be interested in. <figure><img src=\"/uploads/2017/12/2017-12-19.jpg\" title=\"Angular Cross Field Validation\"> Photo by <a href=\"//visualhunt.com/author/525a6d\">MSVG</a> on <a href=\"//visualhunt.com/re/2a53de\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>As I said, the mechanics of implementing cross field validation in Angular is rather trivial.  It all hinges on the concept of a FieldGroup which is a key concept of <a href=\"/tags/reactive-forms/\">Reactive Forms</a>. What we need to do to implement cross field validation is to attach a validation function to the form instead of the field. </p>\n<p>I’m going to use the AppComponent to host the FormBuilder for simplicity:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">form</span>:<span class=\"title class_\">FormGroup</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder: FormBuilder</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// form field definitions here</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"title class_\">AppComponent</span>.<span class=\"property\">formGroupValidationFunction</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that <code>formBuilder.group()</code> takes a second parameter which takes a <code>validator</code> function or function array.  This parameter can also the <code>asyncValidator</code> key or the <code>state</code> key. </p>\n<p>The function we are pointing to takes the <code>FormGroup</code> as a parameter.  So, within the function, we can access the controls that are part of the <code>FormGroup</code>.  Once we have the fields, we can access the values of the fields and perform whatever comparisons we need, which is pretty trivial.  Then, if there is an error, we call setError() on the control(s) that are impacted.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>):<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  constfield1=formGroup.<span class=\"property\">controls</span>[<span class=\"string\">&#x27;field1&#x27;</span>];</span><br><span class=\"line\">  constfield2=formGroup.<span class=\"property\">controls</span>[<span class=\"string\">&#x27;field2&#x27;</span>];</span><br><span class=\"line\">  <span class=\"comment\">// compare field1 to field2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">    field1.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    field2.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dealing-with-Field-Validations\"><a href=\"#Dealing-with-Field-Validations\" class=\"headerlink\" title=\"Dealing with Field Validations\"></a>Dealing with Field Validations</h2><p>One of the problems I ran into was that my fields also had individual validations on them.  Specifically, the two fields were numbers that I was validating to make sure they were positive and only displayed two decimal places.  By the time I entered the validation for the FormGroup, that validation had already run.  I also wanted to clear any pre-existing errors from my form validation.</p>\n<p>It turns out that the way Angular determines if there is an error is if the forms errors object exist.  If it is null, it is assumed there aren’t any errors. </p>\n<p>Now, to clear the pre-existing errors, the safest thing to do is to first delete the error I was adding from each field, and then check to see if there are any other errors in the errors object.  If there aren’t any errors, we then call <code>setError(null)</code> to clear out the error object.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(field1.<span class=\"property\">errors</span>&amp;&amp;field1.<span class=\"property\">errors</span>.<span class=\"property\">formGroupValidationFunction</span>) &#123;</span><br><span class=\"line\">  deletefield1.<span class=\"property\">errors</span>.<span class=\"property\">formGroupValidationFunction</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(field1.<span class=\"property\">errors</span>).<span class=\"property\">length</span>===<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    field1.<span class=\"title function_\">setErrors</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When adding the <code>FormGroup</code> error, we only call <code>setError()</code> if the errors object is null.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!field1.<span class=\"property\">errors</span>) &#123;</span><br><span class=\"line\">  field1.<span class=\"title function_\">setError</span>(&#123; <span class=\"attr\">formGroupValidationFunction</span>:<span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By doing this, we ensure that the field validation errors aren’t overwritten by the <code>FormGroup</code> validations.</p>\n<h2 id=\"Alternatives\"><a href=\"#Alternatives\" class=\"headerlink\" title=\"Alternatives\"></a>Alternatives</h2><p>The code I’ve shown works well enough if you only have a one-off validation.  But in my case, I needed to use the validation between multiple sets of fields.  To do this, I created a function that returns another function. </p>\n<p>The outer function takes two parameters.  Strings that are keys into the controls of the form group.  So, now instead of:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder:FormBuilder</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// form stuff here</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">validator</span>:formGroupValidationFunctionHere</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I have:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">formBuilder:FormBuilder</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>=formBuilder.<span class=\"title function_\">group</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// form stuff here</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"attr\">validator</span>:<span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"string\">&#x27;field1&#x27;</span>, <span class=\"string\">&#x27;field2&#x27;</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And my validation function looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">formGroupValidationFunction</span>(<span class=\"attr\">f1</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">f2</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"attr\">formGroup</span>: <span class=\"title class_\">FormGroup</span>): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">    constfield1=formGroup.<span class=\"property\">controls</span>[f1];</span><br><span class=\"line\">    constfield2=formGroup.<span class=\"property\">controls</span>[f2];</span><br><span class=\"line\">    <span class=\"comment\">// compare field1 to field2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">      field1.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">      field2.<span class=\"title function_\">setError</span>(&#123;<span class=\"attr\">formGroupValidationFunction</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that my <code>setError()</code> uses the name of the function as the error key.  I just do this for clarity.  You CAN name it whatever you want.  I name it the same to be consistent with how the Angular validations work. </p>\n<p>Finally, I like to put my custom validations in a separate Static Class rather than including them in the component code.  I’ve only placed them in the component code here for illustrative purposes.</p>\n",
            "tags": [
                "angular",
                "formgroup",
                "validation"
            ]
        }
    ]
}