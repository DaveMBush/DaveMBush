{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"visual studio\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "url": "http://davembush.github.com/using-node-js-and-gulp-with-asp-net-in-visual-studio-2015/",
            "title": "Using Node.js and Gulp with ASP.NET in Visual Studio 2015",
            "date_published": "2016-01-21T13:30:00.000Z",
            "content_html": "<p>As I’ve written before, <a href=\"/tags/angular-js/\">I’m using AngularJS a lot</a> recently to write the client side of my web applications.  As I’ve gotten to the end of my current project, I found myself needing to implement cache busting and while I am at it compression.  But because I’m <a href=\"/asp-net-angular-js-html5mode/\">using a regular HTML page to serve up the shell for my single page application</a>, using the regular ASP.NET on the fly compression wasn’t going to work for this application.</p>\n<p>But there are a lot of tools in the Node.js space that will work.  Would it be possible to wire node.js and Gulp with ASP.NET in my existing web project? It turns out you can.</p>\n<p>Although, at this point, it isn’t as straightforward as most other things in Visual Studio.</p>\n<p><img src=\"/uploads/2016/01/image-2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Installing-Node-js\"><a href=\"#Installing-Node-js\" class=\"headerlink\" title=\"Installing Node.js\"></a>Installing Node.js</h2><p>I’m assuming that you’ve already installed Visual Studio 2015.  If you did that, you already have Node.js installed.  The problem is, it isn’t the most recent version.  So, what you want to do is to install the most recent of version from the <a href=\"//nodejs.org\">Node.js site</a> manually.</p>\n<p>Once you have Node.js installed, the next thing you will need to do is that you’ll need to configure Visual Studio to use the version you installed instead of the version it installed.  To do this, navigate to “Tools” &gt; “Options”.  In the resulting dialog, find the “Projects and Solutions” &gt; “External Web Tools” leaf in the tree control and then add the directory to your newly installed Node.js installation to the top of the list of paths to external tools. <a href=\"/uploads/2016/01/image-3.png\"><img src=\"/uploads/2016/01/image_thumb.png\" alt=\"image\" title=\"image\"></a></p>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><p>To use Gulp, you will need to install Gulp using the Node Package Manager (npm).  There are several places where I got stuck.</p>\n<p>First, I tried to install gulp using the Node Interactive Window (CTRL-K,N).  This works fine when you want to install something globally, but when you want to install something with the –save or –save-dev option, you will get the error message: <code>Please specify a valid Node.js project or project directory.</code> It took me several tries before it finally dawned on me that it wasn’t just asking “What project do you want to install this in?”  It was asking “What Node project do you want to install this in?” We don’t have a node project, so this will never work.  What you will need to do instead is that you’ll need to shell out to the command prompt, change to the project directory, and then type your npm commands.</p>\n<h2 id=\"Productivity-Power-Tools\"><a href=\"#Productivity-Power-Tools\" class=\"headerlink\" title=\"Productivity Power Tools\"></a>Productivity Power Tools</h2><p>You can shell out to the command prompt much easier if you install the <a href=\"//visualstudiogallery.msdn.microsoft.com/34ebc6a2-2777-421d-8914-e29c1dfa7f5d?SRC=VSIDE\">Visual Studio Productivity Power Tools</a>  Once these are installed, you can right click on the project you want to install npm packages into and select “Power Commands” &gt; “Open Command Prompt…” from the menu.</p>\n<h2 id=\"NPM-init\"><a href=\"#NPM-init\" class=\"headerlink\" title=\"NPM init\"></a>NPM init</h2><p>Much like NuGet’s packages.config file, NPM uses a json file to keep track of what should be installed.  To create this file, run the command <code>npm init</code> and answer the questions.</p>\n<p>Next, in Visual Studio, click the “Show all files” icon in Solution Explorer, find the package.json file that you just created with the <code>npm init</code> command, and include the package.json file in your project.  This will cause it to be part of your commit so that anyone who pulls your code down from version control will have the packages installed automatically.</p>\n<h2 id=\"Install-Gulp\"><a href=\"#Install-Gulp\" class=\"headerlink\" title=\"Install Gulp\"></a>Install Gulp</h2><p>Once you’ve shelled out to the command prompt, you’ll need to type in the following two commands.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>If you open your package.json file now, you will see an entry for gulp.</p>\n<h2 id=\"Create-a-Gulp-task\"><a href=\"#Create-a-Gulp-task\" class=\"headerlink\" title=\"Create a Gulp task\"></a>Create a Gulp task</h2><p>The final step in this process is to create the actual Gulp job.  To do that, all you need to do is create a gulpfile.js file in the root of the project.</p>\n<p>Inside the gulpfile.js file, add the following:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// place code for your default task here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>And now you have a default task for gulp installed.</p>\n<h2 id=\"Make-Gulp-Part-of-the-Build\"><a href=\"#Make-Gulp-Part-of-the-Build\" class=\"headerlink\" title=\"Make Gulp Part of the Build\"></a>Make Gulp Part of the Build</h2><p>The final step here is that we want to make gulp part of the build.  Otherwise, what’s the point? In Visual Studio 2015, this is really rather simple.</p>\n<p>From the main menu, go to “View” &gt; “Other Windows” &gt; “Task Runner Explorer”.  You should end up looking a a sub windows in Visual Studio that looks like this: <img src=\"/uploads/2016/01/image-4.png\" alt=\"image\" title=\"image\"> In gulp, you might have multiple tasks in a gulp file. We only have one right now, “default”.  If you right click on that, you will see that you can bind that task to one of the four bindings on the right.</p>\n<p>That’s all you have to do.  Now the gulp task “default” is bound to a specific build step.  You can do all kinds of file processing with this which we may cover in a later post.  But for now, you can at least get it all wired in.</p>\n",
            "tags": [
                "javascript",
                "visual studio",
                "asp.net",
                "gulp",
                "node.js"
            ]
        },
        {
            "id": "http://davembush.github.com/nunit-visual-studio/",
            "url": "http://davembush.github.com/nunit-visual-studio/",
            "title": "NUnit & Visual Studio",
            "date_published": "2014-12-04T12:00:00.000Z",
            "content_html": "<p>Many people starting out with Unit testing get stuck when it comes to using their tools with the Visual Studio environment.  If it isn’t built in, how do we make it work with Visual Studio?  In this article I want to explore the basics of creating a unit test for NUnit and getting it running from Visual Studio.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Basic-Structure\"><a href=\"#Basic-Structure\" class=\"headerlink\" title=\"Basic Structure\"></a>Basic Structure</h2><p>To create a unit test, the first thing you will need to do is to create an assembly with a class file to hold the code.</p>\n<p>The type of assembly you will need to create for your test to be able to run is an assembly of type “Class Library.” I’m going to assume that you don’t need the details on how to create that type of project using whatever version of Visual Studio you happen to be using.</p>\n<p>Within your new Class Library project, you should find a file named Class1.cs. For the purposes of getting started, you can just leave that file. We’ll talk about how to name your class and test later on.</p>\n<p>For now, all we want to concentrate on is the basics of what is involved in getting a basic test going and what the components of a test class are that you will repeat over and over again as you create unit test for your applications.</p>\n<p>Before we add our first line of code, though, you will want to add references to NUnit in your code. The easiest way to do that is by using NuGet. Since I use Visual Studio 2013, all of the references for how to do things will be using Visual Studio (Premium) 2013. So, if you are using that version, you can just follow along. If not, you may need to do some translating.</p>\n<p>From the Visual Studio menu, select “Tools” &gt; “NuGet Package Manager” &gt; “Manage NuGet Packages for Solution…”. A window will pop up. Search for NUnit and install the package named “NUnit”. There are other packages available that we will discus later on.</p>\n<p>Alternatively, you could download NUnit directly from the NUnit site (<a href=\"//nunit.org\">http://nunit.org</a>) and add a reference directly to nunit.framework.dll.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now that you have the DLLs installed and referenced in your project, you’ll need to create a test class. For our purposes, we are going to stick with Class1.cs.</p>\n<p>There are several things that make a class a test class. First, the class has to be attributed with the [TestFixture] attribute. Second, the methods you want to have run the test have to be attributed with the [Test] attribute and must be public. So, your minimal test class will look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestFixture</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Class1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Test</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// test code here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Running-Tests\"><a href=\"#Running-Tests\" class=\"headerlink\" title=\"Running Tests\"></a>Running Tests</h2><p>Now that we have a basic test class, go ahead and compile it. We are going to try running the test next. For that we will need a test runner.</p>\n<p>There are several ways to run NUnit test. For out purposes, we are going to use the runner that comes with NUnit. But you might also be interested in one of the alternatives. You can get a 30 day trial of <a href=\"//www.jetbrains.com/resharper/\">ReSharper by JetBrains</a>.</p>\n<p>ReSharper has many features, but the one I want to talk about here is the test runner. Any test you create will be immediately runnable from within Visual Studio by right clicking on an icon to the left of your code. You are presented with a menu of options including debugging your test. Believe me, this is the easiest way to debug NUnit test that I know of.</p>\n<p>Another easy way to run NUnit test from within Visual Studio is by installing the MSTest adapter. You can get this from <a href=\"//www.nuget.org/packages/NUnitTestAdapter/\">NuGet</a>.</p>\n<p>For the purposes of this article, we are going to use the test runner that comes with NUnit.</p>\n<p>So the next thing you’ll need to do is go to <a href=\"//nunit.org\">NUnit.org</a> and download and install the latest version of NUnit if you didn’t do that already to get the NUnit DLLs installed. I would suggest using the MSI installer rather than the zip file. All we want to be able to do is to run the test.</p>\n<p>Once you’ve installed NUnit, there should be a menu option “NUnit” that you can click. This should bring up the GUI runner.</p>\n<p><img src=\"/uploads/2014/11/image.png\" alt=\"image\" title=\"image\"></p>\n<p>Use the “File” -&gt; “Open” to navigate to the “bin” directory of your NUnit test DLL project and open the DLL. You should see a screen that looks something like this:</p>\n<p><img src=\"/uploads/2014/11/image1.png\" alt=\"image\" title=\"image\"></p>\n<p>Click the “Run” button to run your test. You should get a green progress bar under the “Run” button and a check box over the icons in the tree on the left indicating that all of the test succeeded.</p>\n<p>“Wait?!”, you say, “I didn’t test anything, how did they succeed?”</p>\n<p>You are right. A test succeeds if it doesn’t fail. Later on this will impact how we structure our test. So keep this in mind.</p>\n<p>One of the nice things about the NUnit GUI runner is that you can keep this up while you work on your tests. By default, the system shadow copies the DLL so that you can compile the DLL in your project. When the NUnit GUI runner sees that the file has changed, it will reload it so that it is always running whatever version you recently compiled. You can change this behavior, if you really feel the need to, by navigating to “Tools” -&gt; “Settings…”</p>\n<h2 id=\"Debugging-Tests\"><a href=\"#Debugging-Tests\" class=\"headerlink\" title=\"Debugging Tests\"></a>Debugging Tests</h2><p>As with all things related to code, eventually you will need to debug your test. To do this using the the tools that come with NUnit, do the following.</p>\n<p>Right click on the project in Solution Explorer that represents your test project. From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.</p>\n<p><img src=\"/uploads/2014/11/image2.png\" alt=\"image\" title=\"image\"></p>\n<p>You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.</p>\n<p>Now, whenever you run this project, with or without the debugger, NUnit will start up. Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up. But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner. There are other parameters you can us. Check the documentation for the version of NUnit you are using for the specifics.</p>\n<p>If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file. Find the startup element (<startup> …. </startup>) and place this line in between the open and close startup tags:</p>\n<supportedRuntime version=\"4.0\" />\n\n<p>If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5.</p>\n<p>So, let’s give it a try.</p>\n<p>First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Inside MyFirstTestMethod&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next set a breakpoint on the Console.WriteLine method and then run your project with the debugger.</p>\n<p>Once NUnit loads the DLL, click the “Run” button in NUnit. If everything is setup correctly, you should stop on the breakpoint you set.</p>\n<h2 id=\"Console-WriteLine\"><a href=\"#Console-WriteLine\" class=\"headerlink\" title=\"Console.WriteLine()\"></a>Console.WriteLine()</h2><p>You may have noticed that we put several Console.WriteLines() in our code but they aren’t displaying anywhere. So, where did they go? How can we see them?</p>\n<p>By default the “Text Output” tab displays all of the Console.WriteLine() messages as well as all of the test results. If all you care to see is the test results, you should select the “Errors and Failures” tab. Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.</p>\n<h2 id=\"Not-The-Only-Way\"><a href=\"#Not-The-Only-Way\" class=\"headerlink\" title=\"Not The Only Way\"></a>Not The Only Way</h2><p>This isn’t the only way to get NUnit &amp; Visual Studio working together.  You could also purchase the ReSharper plugin which has many other features.  But one of the ones I use on a regular basis is the NUnit integration.</p>\n<p>You could also use the NUnit test Adapter to make NUnit work with the Visual Studio test engine.  But personally, I don’t like the way the test render using that and I’d much rather use the GUI viewer I’ve discussed in this article.  So, if you want to integrate NUnit &amp; Visual Studio for free, what I’ve outline above is the best way to do it.</p>\n",
            "tags": [
                "test driven development",
                "visual studio",
                "nunit"
            ]
        },
        {
            "id": "http://davembush.github.com/advantages-of-using-class-diagram/",
            "url": "http://davembush.github.com/advantages-of-using-class-diagram/",
            "title": "Advantages of Using Class Diagram",
            "date_published": "2008-11-20T13:02:47.000Z",
            "content_html": "<p><img src=\"/uploads/2008/11/misc-vol4-063.jpg\" alt=\"misc_vol4_063\"> One of the new tools that showed up in Visual Studio 2005 that I don’t see many people taking much advantage of is the Class Diagram.</p>\n<span id=\"more\"></span>\n\n<p>The class diagram displays the classes you drag onto it in a visual representation much like a UML class diagram does.  It also lets you see relationships between your classes.  But the greatest advantage of the Class Diagram is that it will write a lot of your code for you.  The Class Diagram is available in both CSharp and VB.NET and works similarly in both.  My description of the tool will be using CSharp in Visual Studio 2008.  There may be a few quirky differences if you are using VB.NET and&#x2F;or Visual Studio 2005. I was reminded of this tool a couple of days ago when I needed to override a method but I couldn’t remember its name.  I could have spend a few minutes looking in the parent class for the name of the method I needed to override, but instead I created a new Class Diagram file and did a drag and drop of the class I was working on onto the Class Diagram’s surface.  This then let me right-click on the class and select “Intellisense” &gt; “Override members…” from the context menu.</p>\n<p>This will bring up a dialog that will list ALL of the classes the class inherits from (so it helps to know what class the method you want to override is in).  You can then check off the members you want to override from the list supplied.  When you press OK, the methods will be stubbed out for you in the source code.  All you need to do is provide the functionality. You can use this same type of process to add new methods, add properties, and add member variables.</p>\n<p>If you haven’t broken out the class diagram recently, I suggest you give it a try.</p>\n",
            "tags": [
                "c#",
                "class diagram",
                "vb.net",
                "visual studio"
            ]
        },
        {
            "id": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "url": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "title": "The VB.NET Ternary Operator",
            "date_published": "2007-11-29T13:20:09.000Z",
            "content_html": "<p>I think the VB.NET Ternary Operator may be the last operator that I really miss in VB.NET from my curly brace language experience.  Although, I have to admit, I wouldn’t have missed it all that much if they never added it.  There just isn’t a whole lot of use for it.</p>\n<span id=\"more\"></span>\n\n<p>However, the Ternary operator is a REALLY nice feature to have available to you when you do need it.  It’s another one of those language features that falls under, “Just because it is there doesn’t mean you have to use it.”</p>\n<p>If you’ve ever run into a situation where you just need a simple evaluation and assign a variable based on it.  Like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">If</span> Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">    s = <span class=\"type\">String</span>.Empty</span><br><span class=\"line\"><span class=\"keyword\">Else</span></span><br><span class=\"line\">    s = Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString()</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br></pre></td></tr></table></figure>\n\n<p>you’ll appreciate the new Ternary operator which shrinks it to:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = <span class=\"keyword\">If</span>(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Note that this NOT the same as</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = IIf(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Here’s the difference between the two.</p>\n<p>IIf will always evaluate the second and third parameter regardless of if the first parameter evaluates to true or false.  This is because IIf is a function, not an operator.</p>\n<p>If is an operator, and therefore only evaluates the second OR third parameter when they are the value that will ultimately be returned.  So, If() will run my code above without any errors while IIf will throw a null pointer exception when Session(“mySessionVar”) evaluates to nothing because it will try to apply ToString() to the object that is null.</p>\n",
            "tags": [
                "vb.net",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "url": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "title": "Object Initialization in CSharp 3.0 and VB.NET 9",
            "date_published": "2007-11-28T14:24:13.000Z",
            "content_html": "<p>Yesterday we looked at the new var keyword in CSharp.  This makes CSharp variable declaration similar to VB.  After all, they’ve had the DIM keyword for years which essentially does the same thing.</p>\n<p>Today, we’re going to look at object initializers, which have been added to both CSharp and VB.</p>\n<span id=\"more\"></span>\n\n<p>Let’s say we have a class named, “Customer” with the properties: FirstName, LastName, Address, City, and State.  If you wanted to initialize those properties as part of the object creation process you basically had two choices.  You could create a constructor with each of the properties represented as a parameter, or you could use the default constructor and then initialize each property individually immediately after you instantiate the object.  Using CSharp, that process would look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">c.FirstName = <span class=\"string\">&quot;Dave&quot;</span>;</span><br><span class=\"line\">c.LastName = <span class=\"string\">&quot;Bush&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>in VB you could write code similar to the CSharp code above, with obvious syntax changes for VB, or you could use the WITH keyword to simplify it.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer()</span><br><span class=\"line\"><span class=\"keyword\">With</span> c</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span></span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">With</span></span><br></pre></td></tr></table></figure>\n\n<p>The new versions of these languages make the initialization process a bit easier.  Now, your CSharp code can look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FirstName = <span class=\"string\">&quot;Dave&quot;</span>,</span><br><span class=\"line\">    LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>and your VB code can look like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer() <span class=\"keyword\">With</span> &#123; _</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span>, _</span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span> _</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Keep in mind that the code that I just wrote compiles into the code I wrote using the old syntax.  This means that we can use this syntax in Visual Studio 2008 even if we are writing code for .NET 2.0.  Secondly, this means that it would still be faster to use the constructor with parameters if it is available.</p>\n<p>My fear is that some of the new features in the compilers will allow lazy programmers to write crappy code.  The point of the object initialization syntax is not to help you avoid creating parameterized constructors.  The point is to make your coding life easier when, and only when, the proper parameterized constructors do not exist.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                "visual studio",
                "tutorial",
                "object initializers",
                "video"
            ]
        },
        {
            "id": "http://davembush.github.com/csharp-adds-the-var-keyword/",
            "url": "http://davembush.github.com/csharp-adds-the-var-keyword/",
            "title": "CSharp adds the var keyword!",
            "date_published": "2007-11-27T12:56:11.000Z",
            "content_html": "<p>There have been several new features added to the CSharp language that will significantly reduce the amount of code that ends up in our source files.  It will not significantly reduce the amount of code that we have to write. One of those language features is the ability to create properties, <a href=\"/2007/11/22/simple-properties-in-c-35/\" title=\"Simple properties in CSharp\">which we looked at last week.</a> Another of those features is the new var keyword. So, instead of writing:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>  you can now write:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>Which isn’t a lot of code until you start qualifying the Class name with namespaces.</p>\n<p>During the beta cycle, I saw a demo that let you declare a variable, var c, and then several lines later initialize it with, new MyClass(), which gave the appearance that var was more like the var keyword in javascript, and therefore a variant than what it really is.</p>\n<p>In the release version of CSharp 3.0, if you use the var keyword to declare a variable, you MUST initialize it on the same line, or you will get a compiler error.  I suppose it makes writing the compiler a whole lot easier this way too.</p>\n<p>One other small thing to note, which should be obvious by now.  Since we have to initialize the variable to some object or value, and since we can’t initialize it anywhere other than on the line it is declared on, you can’t treat the variable as a variant.  A variable declared as var is as strongly typed as any other variable you would create.  So, if I did something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">c = <span class=\"string\">&quot;Some string here&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>I would get a compiler error because I’m trying to assign a string type to a MyClass variable.  <code>var</code> does not stand for “variant,” it stands for “variable.”  All the compiler does when it sees this is look at the type being assigned to the variable and replaces the var keyword with that type.</p>\n<p>So, when the compiler processes the code, it takes this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>and turns it into this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass c = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n\n<p>Finally, it may be helpful to point out here that this whole process happens at compile time.  This should be obvious by the fact that this works in both .NET 2.0 code compiled with the CSharp 3.0 compiler as well as .NET 3.x code.  But, sometimes the obvious isn’t obvious until someone states it explicitly.</p>\n",
            "tags": [
                "c#",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/simple-properties-in-c-3-5/",
            "url": "http://davembush.github.com/simple-properties-in-c-3-5/",
            "title": "Simple Properties in C# 3.5",
            "date_published": "2007-11-22T10:49:00.000Z",
            "content_html": "<p>It’s such a little thing.  But, how much of our CSharp code looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _propertyName;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PropertyName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _propertyName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> &#123; _propertyName = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>When I teach other programmers how to use CSharp (or VB) I always stress the importance of using properties instead of public member variables.  You never know when you’ll want your set to do some sort of validation and just about all of the databinding stuff requires us to use properties instead of member variables.  But, that’s a lot of code to write when all you want to do is wrap a member variable. Well, in CSharp 3.5, life just got a lot sweeter.  That code above just got replace with this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> PropertyName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can still use the code above if you want to.  But, why write all that code, even if you write it using a code snippet, when you can just write that one line?</p>\n",
            "tags": [
                "c#",
                "visual studio",
                "tutorial"
            ]
        }
    ]
}