{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"es6\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "url": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "title": "ES2015 Code Coverage and Jest (React JS Unit Testing)",
            "date_published": "2016-05-05T11:30:00.000Z",
            "content_html": "<p>As I’ve <a href=\"/react-js-and-associated-bits/\">mentioned before</a>, I’m in the middle of putting together a React reference app and I’m doing it using <a href=\"/test-driven-learning-an-experiment/\">Test Driven Development</a>.  The problem is, the standard tools for implementing ES2015 code coverage with Jest make it hard to see at a glance if you have 100% code coverage or not because of some issues with the way Jest tells Babel to do the transformations by default, the way Babel transforms the code and implements the auxiliaryCommentBefore option and the way that Istanbul parses the ignore next comments.</p>\n<p>I’ve been working on solving this problem for the last month and a half off and on.  I’ve even posted a question about this on <a href=\"//stackoverflow.com/questions/35986316/reactjs-0-9-code-coverage-with-es2015-class-keyword\">Stack Overflow</a>, so I’m pretty sure no one else has a solution for this yet.  I’m not going to say my solution is the best way to solve this problem, but it is a solution, which is better than what we have so far.</p>\n<p><img src=\"/uploads/2016/04/image-5.png\" alt=\"ES2015 Code Coverage and Jest\" title=\"ES2015 Code Coverage and Jest\"></p>\n<h2 id=\"Diagnostics\"><a href=\"#Diagnostics\" class=\"headerlink\" title=\"Diagnostics\"></a>Diagnostics</h2><p>By default, when Babel transforms your code, it inserts additional functions into the code that it can call to replace the code you wrote that does not yet conform to the syntax you’ve used.  This code gets inserted at the top of the file and shows up in your code coverage reports as several conditions that didn’t get fired.  Yes, it inserts code it never uses because the functions have to work under a variety of scenarios.</p>\n<p>For those who are interested in how I figured this out.  The transform results are located in node_modules&#x2F;jest-cli&#x2F;.haste_cache.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-One\"><a href=\"#ES2015-Code-Coverage-Fix-One\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix One\"></a>ES2015 Code Coverage Fix One</h2><p>OK, so the standard recommended fix for something like this is to place</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure>\n\n<p>Prior to those functions.  And it just so happens that both Jest and Babel provide a mechanism for adding this comment by using the auxiliaryCommentBefore option.</p>\n<p>Only there are two problems with this.</p>\n<h3 id=\"Problem-One\"><a href=\"#Problem-One\" class=\"headerlink\" title=\"Problem One\"></a>Problem One</h3><p>If you just set the property like this:</p>\n<p>auxiliaryCommentBefore: ‘istanbul ignore next’</p>\n<p>Your code will get transformed so that any functions added by Babel will end up looking like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*istanbul ignore next*/</span><span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>But in order for Istanbul to pickup this comment, the code needs to look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span> <span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>While getting the spaces on either side of ‘istanbul ignore next’ is a simple matter, we have no real control over the space that is necessary between the comment marker and the function keyword.</p>\n<h3 id=\"Problem-Two\"><a href=\"#Problem-Two\" class=\"headerlink\" title=\"Problem Two\"></a>Problem Two</h3><p>The second problem with this “fix” is that even if modify the Babel code so that the comment gets inserted correctly, it doesn’t get inserted before EVERY function that Babel inserts.  If it inserts a group of functions, which it does regularly in my code, it only inserts the comment before the first function.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-Two\"><a href=\"#ES2015-Code-Coverage-Fix-Two\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix Two\"></a>ES2015 Code Coverage Fix Two</h2><p>What if we didn’t insert the functions in our code?  Well, it just so happens that we can do that relatively easily.</p>\n<p>There is a plug-in for Babel called ‘<a href=\"//www.npmjs.com/package/babel-plugin-transform-runtime\">transform-runtime</a>’.  What this plug-in does is that it requires in the functions rather that pasting them into your code.  This way, the functions don’t exist in your code so Istanbul never sees the function block.  Pretty cool.</p>\n<p>You can add this to either your .babelrc file or the Babel section of your package.json file by adding a “plugins” section</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;transform-runtime&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>along with the “presets” section you should already have.</p>\n<h2 id=\"Remaining-Issue\"><a href=\"#Remaining-Issue\" class=\"headerlink\" title=\"Remaining Issue\"></a>Remaining Issue</h2><p>While using transform-runtime takes care of most of the issues, there are two functions that still don’t get covered.  In fact, when you look at the transform-runtime code, you find that they are explicitly excluded and if you include them, your code won’t transpile at all.</p>\n<p>The good news is, it is only two functions and they both show up as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> _interop...</span><br></pre></td></tr></table></figure>\n\n<p>If we can get a hold of the code as it is being transformed, we should be able to do a search and replace to get the correct ‘istanbul ignore next’ string in place prior to the functions.</p>\n<p>Well, it just so happens that Jest has the ability to do exactly that.</p>\n<h2 id=\"ES2015-Code-Coverage-Final-Fix\"><a href=\"#ES2015-Code-Coverage-Final-Fix\" class=\"headerlink\" title=\"ES2015 Code Coverage Final Fix\"></a>ES2015 Code Coverage Final Fix</h2><p>I’m assuming you’ve already installed <a href=\"//www.npmjs.com/package/babel-jest\">babel-jest</a>, but just in case, if you have not, install it now.  Install it using –save-dev because we are going to want to be able to modify the code.</p>\n<h3 id=\"Quick-fix\"><a href=\"#Quick-fix\" class=\"headerlink\" title=\"Quick fix:\"></a>Quick fix:</h3><p>The proper way to fix this would be to write your own version of babel-jest.  But we are going for a quick fix.  Maybe we can get Facebook to implement the changes from this post.  Meanwhile, here is what you want to do.</p>\n<p>Locate the src&#x2F;index.js file in the node_modules&#x2F;babel-jest directory.  At the time of this writing, the current version looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This source code is licensed under the BSD-style license found in the</span></span><br><span class=\"line\"><span class=\"comment\"> * LICENSE file in the root directory of this source tree. An additional grant</span></span><br><span class=\"line\"><span class=\"comment\"> * of patent rights can be found in the PATENTS file in the same directory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">        <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The first change that you want to make here is to comment out the auxiliaryCommentBefore line.  We no longer need that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\"><span class=\"comment\">//        auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that what gets returned is the resulting transform of the code.  We want to execute a search and replace on the transformed code.  So, instead of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">   <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">   filename,</span><br><span class=\"line\">   <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">   <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;).<span class=\"property\">code</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What we want want to do is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">  <span class=\"comment\">//auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">  filename,</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">  <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"property\">code</span></span><br><span class=\"line\">    .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/function\\s_interop/g</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27; /* istanbul ignore next */ function _interop&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES2015-Code-Coverage-With-Jest-Summary\"><a href=\"#ES2015-Code-Coverage-With-Jest-Summary\" class=\"headerlink\" title=\"ES2015 Code Coverage With Jest - Summary\"></a>ES2015 Code Coverage With Jest - Summary</h2><ol>\n<li>Download and install babel-plugin-transform-runtime.</li>\n<li>Add “plugins”: [“transform-runtime”] to either .babelrc or the babel section of your package.json file</li>\n<li>Download and install babel-jest</li>\n<li>Modify babel-jest&#x2F;src&#x2F;index.js as indicated above.</li>\n</ol>\n",
            "tags": [
                "unit test",
                "react.js",
                "babel",
                "es2015",
                "es6",
                "jest"
            ]
        }
    ]
}