{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"project management\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "url": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "title": "How to Establish Peace to the QA vs Dev Battle",
            "date_published": "2016-09-13T10:30:00.000Z",
            "content_html": "<p>Have you ever noticed how, when QA reports a “defect” developers tend to bristle?  I first noticed this in myself a few years ago.  Now that I’m functioning as a Scrum coach, I’m noticing it in others.</p>\n<p>Is there a way to have some kind of quality checking in our code that doesn’t make the whole process feel so adversarial?  I think so.</p>\n<p>I believe there are some adjustments that need to be made organizationally and personally that will bring these two groups together.</p>\n<p>But first, why does this problem exist in the first place? <figure><img src=\"/uploads/2016/09/image.png\" title=\"How to Establish Peace to the QA vs Dev Battle\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/39908901@N06/9129574323/\">m01229</a> via <a href=\"//visualhunt.com\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"How-The-Battle-Started\"><a href=\"#How-The-Battle-Started\" class=\"headerlink\" title=\"How The Battle Started\"></a>How The Battle Started</h2><h3 id=\"How-to-Insult-a-Programmer\"><a href=\"#How-to-Insult-a-Programmer\" class=\"headerlink\" title=\"How to Insult a Programmer\"></a>How to Insult a Programmer</h3><p>When I was growing up, my sister was very direct.  If she thought you were ugly, she’d tell you so.  OK.  Maybe it wasn’t quite that bad.  But one day, I remember she said something to the effect of, “I didn’t say anything that wasn’t true.”  And both my mom and I said, “Yes, but it isn’t what you said so much as how you said it.”  In fact, you can say the same words in two entirely different ways.  Two sets of inflections.  And what they mean can change drastically.  Sometimes just changing the words you use can change the meaning.</p>\n<p>But, to a programmer, no matter how you say, “Your code has a bug,” they will probably end up hearing.</p>\n<p>“Your code sucks!” You see.  Programmers really do care about their code.  At least the really good ones do.  And while it may seem very silly, most programmers get offended when you suggest they’ve written buggy code.</p>\n<p>This, you see, is the core of the problem.  Once you understand this, the fix becomes rather obvious.</p>\n<h3 id=\"Don’t-Call-It-a-Bug\"><a href=\"#Don’t-Call-It-a-Bug\" class=\"headerlink\" title=\"Don’t Call It a Bug\"></a>Don’t Call It a Bug</h3><p>I think nothing has done more damage in the field of programming that the fact that we call software problems “Bugs.”  It is such an ugly word.  When is the last time, other than a Pixar movie, when we’ve thought of bugs as something we would want to welcome?  We might as well say, “Hey, I found some shit in this program!” When I got my Scrum certification, our instructor asked a simple revealing question.  “How many of you think people are doing their best to do the right thing?”  That’s not exactly what he asked, but that’s what he meant.  If you believe that all evil in the world is intentional, you’ll come away believing that all programmer intentionally put bugs in their code.  And while I do know of a few cases where this has happened.  Most of us try our best to write perfect code.  When we don’t it is because we didn’t think of the situation and code for it.</p>\n<p>If on the other hand, you think everyone is trying to do their best, why treat defects in software as something evil? To paraphrase Scott Hanselman, “Most people are not nearly smart enough to be as evil as you act like they are.”</p>\n<h3 id=\"Most-Bugs-are-a-Specification-Problem\"><a href=\"#Most-Bugs-are-a-Specification-Problem\" class=\"headerlink\" title=\"Most Bugs are a Specification Problem\"></a>Most Bugs are a Specification Problem</h3><p>Weather you have a formal specification or an informal specification, my observation is that most “Bugs” that show up in code are a result of either 1) the specification being misunderstood or 2) the specification being incomplete.</p>\n<p>Yes, there are a few places where neither of those are true and the programmer clearly missed the mark.  But, even then, assuming they missed the mark rather than assuming the specification was unclear will go a long way in making the programmer more receptive to the fact that the code needs to be changed.  Just the fact that we call a defect in our programs a “Bug” reveals and colors what we think about who’s fault</p>\n<h2 id=\"What-Programmers-Can-Do\"><a href=\"#What-Programmers-Can-Do\" class=\"headerlink\" title=\"What Programmers Can Do\"></a>What Programmers Can Do</h2><h3 id=\"It’s-Not-Personal\"><a href=\"#It’s-Not-Personal\" class=\"headerlink\" title=\"It’s Not Personal\"></a>It’s Not Personal</h3><p>Listen gang.  Bugs are not a reflection of your personal character.  And even if someone thought it was, that doesn’t make it true.  At worse, it means you might have some stuff you still need to learn about how to program well.  OK.  We’ll never be perfect.  Think about this, while you are writing the code, your compiler, or runtime, tells you you’ve done something wrong quite frequently.  But as soon as a human tells you something similar, you take it personally?  That’s pretty wacked.</p>\n<p>Here are a few tips I’ve learned:</p>\n<ul>\n<li>Emotions are learned responses.  This means your negative response to bugs can be retrained.</li>\n<li>Just because someone says something about you, or disapproves of you personally, doesn’t mean they are right.</li>\n<li>Most criticism is only an opinion based on an expectation.</li>\n</ul>\n<p>If you can internalize these, you will be much more receptive to hearing that your code has a flaw.</p>\n<h3 id=\"Break-the-Spec-into-Tasks\"><a href=\"#Break-the-Spec-into-Tasks\" class=\"headerlink\" title=\"Break the Spec into Tasks\"></a>Break the Spec into Tasks</h3><p>One thing I’ve started doing recently that I’ve found to be a great help is that I’ve started breaking the specification I’ve been given down into the composite task that I’ll need to implement the specification.  How granular.  I aim for task that should take less than four hours.  By getting this granular, I’m able to accurately estimate how long it should take me to complete the specification, and I’m sure I’ve caught all of the tasks involved in completing the specification.</p>\n<p>You should track your time against your estimates so you can get a sense of how far off your gut is relative to reality.  This will improve your ability to estimate projects.</p>\n<p>By breaking down the project like this, you are more likely to see holes in the requirements before you even start coding.</p>\n<h3 id=\"Create-a-Test-Plan\"><a href=\"#Create-a-Test-Plan\" class=\"headerlink\" title=\"Create a Test Plan\"></a>Create a Test Plan</h3><p>The other thing I’ve started doing is that I’ve started writing out how I plan to test the specification once I’ve completed it.  I just write this out.  Once again, this helps me find holes in the requirement.  But this also forces me to start thinking of ways someone might use the code that would break it.  And that simple act of trying to break it in my mind prior to coding it, refines the spec, and makes my code more reliable.</p>\n<h3 id=\"Ask-for-a-Review\"><a href=\"#Ask-for-a-Review\" class=\"headerlink\" title=\"Ask for a Review\"></a>Ask for a Review</h3><p>Once you have your tasks and your test plan, ask the person who gave you the spec to review it.  “Does this look like it reflects what you’ve asked me to do?”  This does two things.  First, and most importantly, it ensures you understand what it is you are building.  But, it also enlists someone else in the responsibility of ensuring what you finally build is what should have been built.</p>\n<h2 id=\"What-QA-Can-Do\"><a href=\"#What-QA-Can-Do\" class=\"headerlink\" title=\"What QA Can Do\"></a>What QA Can Do</h2><h3 id=\"Don’t-Call-Them-Bugs\"><a href=\"#Don’t-Call-Them-Bugs\" class=\"headerlink\" title=\"Don’t Call Them Bugs\"></a>Don’t Call Them Bugs</h3><p>I remember reading a Louis L’amour book one where the basic plot was this wagon train going out west.  At the beginning of the trip they had all agreed that no “bad language” was allowed.  And then one day, someone used the word, “shit” to describe cow poop that was on the ground.  The group was in shock and he was reprimanded.  At that point I remember the line, “If a word makes it any different, why don’t we just call it pudding?” But you see, as I’ve already explained, a word DOES make a difference.</p>\n<p>The word I would prefer to use is “Specification Refinement” because, in the end, that is what they are.</p>\n<h3 id=\"Don’t-Write-Requirements\"><a href=\"#Don’t-Write-Requirements\" class=\"headerlink\" title=\"Don’t Write Requirements\"></a>Don’t Write Requirements</h3><p>One thing I’ve noticed happens quite frequently is that once QA has verified all of the items in the requirement, they start doing exploratory testing, as they should.  But, when they find something, they inadvertently start writing requirements.  It looks like this.</p>\n<p>“I did X, Y and Z.  I expected to get result 1 but instead got result 2.” Some of you are probably thinking, “What’s wrong with this?!” Well, why did you EXPECT to get result 1?  If the expectation was not listed in the requirement, you have no valid reason to expect anything.  Your expectation is just your opinion about what should happen based on previous experience.</p>\n<p>So, how to write up this problem instead? “I did X, Y and Z and 2 happened.  This doesn’t look right but I don’t see anything in the spec that says what should happen.”</p>\n<h3 id=\"Don’t-Assign-Bugs\"><a href=\"#Don’t-Assign-Bugs\" class=\"headerlink\" title=\"Don’t Assign Bugs\"></a>Don’t Assign Bugs</h3><p>This one is going to fly in the face of QA teams everywhere.  But remember, we are trying to find peace in what has become an antagonistic relationship.</p>\n<p>Remember how I said that programmers react emotionally to the fact that you found a bug?  Well, if you assign a bug to them and they get a notification about that bug in the middle of writing code for the current sprint, here is what is going to happen.  First, the email is going to interrupt them.  Second, they will have an emotional response to the bug report that could continue to derail them for the rest of the day.</p>\n<p>Instead, you should be assigning the bug to the project.  Assuming you are using Scrum and have a backlog, the issue should be put on the backlog for grooming.  Grooming would include figuring out who is responsible for the bug or who is responsible for finding out what the core issue is so we can assign the bug appropriately.</p>\n<p>One of the problems I’ve seen with assigning bugs to specific developers is that the bug is often assigned incorrectly.</p>\n<p>By assigning the bugs to the back log as specification refinements, they just become additional features and the sting associated with “Bugs” goes away.</p>\n<p>If you are using software that requires you to assign bugs to an individual, make that individual the Scrum Master, Product Owner, or Project Manager (if you aren’t doing Scrum).</p>\n<h2 id=\"Organizational-Changes\"><a href=\"#Organizational-Changes\" class=\"headerlink\" title=\"Organizational Changes\"></a>Organizational Changes</h2><p>Finally, I want to address organizational changes that you may need to make.  Hopefully, you are already doing this.  But my experience tells me otherwise.</p>\n<h3 id=\"Silos-Kill\"><a href=\"#Silos-Kill\" class=\"headerlink\" title=\"Silos Kill\"></a>Silos Kill</h3><p>Everywhere I go, QA is a separate department.  Why can’t QA be co-located with the developers?  Wouldn’t it make a lot more sense to have QA working with the developers to figure out a test plan so we can code for the plan rather than having the plan developed in isolation?  I get that exploratory testing might reveal additional issues, but certainly some of those issues can be revealed early by defining how the code is going to be explored.  Plus, making everyone part of the same team means they are all working toward the same goal.  No one gets offended that way.</p>\n<p>When one QA person found out I was writing unit tests, she asked, “What will be left for me to tests?”  Which I found to be an incredibly naïve way of thinking.  Wouldn’t you hope that you don’t find any problems with the code I am working on?  How is the fact that I’m testing a problem for QA?  Aren’t we all working on the same goal?</p>\n<h3 id=\"Central-Source-of-Truth\"><a href=\"#Central-Source-of-Truth\" class=\"headerlink\" title=\"Central Source of Truth\"></a>Central Source of Truth</h3><p>Another place that needs to be addressed related to silos – Another area that re-enforces and is a result of silos – is this habit of each group using their own project management software.</p>\n<p>In one organization I’ve worked at we used four different systems.  One system for version control (GitHub) another system for QA (HP Quality Center) a third system to manage requirements (which we only used minimally and instead had documents on a shared drive) and a forth system for managing our Kanban board (Jira).</p>\n<p>The frustrating thing is that 80% of what everyone needed to do could have been achieved by using GitHub.  But even if we needed to use separate systems for the actual artifacts, it seems to me that we could use one system for tracking the project instead of having it tracked three or four different ways.  That’s just craziness.</p>\n",
            "tags": [
                "project management",
                "best practices",
                "QA"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "url": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "title": "How to Estimate Software Projects Like a Pro",
            "date_published": "2016-08-30T10:30:00.000Z",
            "content_html": "<p>We’ve all been there.  Either at the micro level or at the macro level.  Business wants to know, “How much is this going to cost me?”  And as software developers, we all know the answer is, “more than you were expecting.”  We also know that whatever number we give will probably be wrong for a number of reasons.  Chief among them is that no one really knows what they want until they see it.</p>\n<p>And yet, there has to be some way of providing business what they need and still allowing for unknowns.</p>\n<p>So what follows are a few tips on estimating that help you estimate software projects like a pro.</p>\n<figure>![](/uploads/2016/08/image-2.png \"How to Estimate Software Projects Like a Pro\") Photo via [Visualhunt](//visualhunt.com/photos/business/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"You-Don’t-Know-What-You-Don’t-Know\"><a href=\"#You-Don’t-Know-What-You-Don’t-Know\" class=\"headerlink\" title=\"You Don’t Know What You Don’t Know\"></a>You Don’t Know What You Don’t Know</h2><p>This tends to be the most famous argument for not giving an estimate.  Or for giving an estimate that is all but meaningless.</p>\n<p>“My gut says this will take a month, so I’m going to say four months because I really have no idea.” Well, that might be a safe estimate, and you might be right.  But if the business is looking for a number to use for a budget, they are going to learn that you pad your estimates.  So, a better answer is, “Are you looking for a rough ballpark or are you basing your budget on this?” And if they say they need a somewhat accurate number, your answer should be, “I really don’t know enough about the project.  Could we break it down into its component parts?</p>\n<h2 id=\"Virtually-Walk-Through-the-Project\"><a href=\"#Virtually-Walk-Through-the-Project\" class=\"headerlink\" title=\"Virtually Walk Through the Project\"></a>Virtually Walk Through the Project</h2><p>This will work regardless of the project size and regardless of if it is just you or a team.</p>\n<p>Here’s what you need to do, once you’ve broken the project down into the component parts, ask yourself, “What is the next thing I would need to do to get this project moving?”  You write that down, come up with an estimate for how long that will take, and then ask yourself the question, “Assuming I’ve completed what I’ve listed so far, what is the next thing I need to do?”  And you just keep doing this until the project is (virtually) done.</p>\n<p>You want to be careful as you are doing this to:</p>\n<ol>\n<li><p>For estimating actual work at the programming level, make sure none of your tasks take more than 8 hours to complete.  I personally aim for 4 hours.  Even if you use story points instead of actual hours, I’m sure internally you have some idea of how many hours a story point represents for you.  Size the work accordingly.</p>\n</li>\n<li><p>For estimating at the more macro level, I recommend dividing the project into 2-man week chunks.  Basically a sprint.</p>\n</li>\n<li><p>Don’t forget the obvious</p>\n</li>\n<li><p>Setup time</p>\n</li>\n<li><p>Creating tests.</p>\n</li>\n<li><p>Bug fix time.</p>\n</li>\n<li><p>Broken dependencies</p>\n</li>\n</ol>\n<h2 id=\"Everything-takes-twice-as-long-as-you-think-it-will\"><a href=\"#Everything-takes-twice-as-long-as-you-think-it-will\" class=\"headerlink\" title=\"Everything takes twice as long as you think it will.\"></a>Everything takes twice as long as you think it will.</h2><p>This rule of thumb has served me well over the years.  But it isn’t a hard and fast rule.  It often depends on the client.  I switch clients frequently because I am a contract programmer.  If I’m new, I’ll provide estimates with the 2x multiple factored in.  But as I learn more about the people providing the requirements, I’ll tweak that factor appropriately.</p>\n<p>I had one product owner I worked with who I learned to provide a multiple of four to because I only heard half of what he was trying to communicate.  I’m not sure where the communication breakdown was, all I know is if I multiplied by four, I was much better at being able to manage his expectations.</p>\n<h2 id=\"Track-Everything\"><a href=\"#Track-Everything\" class=\"headerlink\" title=\"Track Everything\"></a>Track Everything</h2><p>Even if you implemented everything I’ve recommended, you are still likely to fail in the long term because you’ll never learn from your mistakes.</p>\n<p>So what might you track?  Well, at the personal level, you want to track how close your estimate was to reality.  Over time you’ll learn that you tend to be off by so much.  And as you learn to estimate and track, I would expect your estimates to account for more items so that your multiple gets closer to a factor of 1x than the 2x I recommended you to start with.</p>\n<p>At the more macro level, you want to track the team.  Please, don’t track individuals.  Let the individuals do that.  Provide training so they can get better.  But if you do the tracking for them, you’ll destroy moral.</p>\n<p>But you want to know, when the team says they can do X in a week, that probably means it is going to take a week and a half… or whatever it ends up taking.</p>\n<p>I’m working on a project now where, had I been the project manager, I would have doubled all the estimates I was given.  Oh well, they’ll find out soon enough.  Although I would have expected this particular PM to know better.</p>\n<p>You also want to track items you may have forgotten to put in your plan.  You’ll add this to your “estimation checklist” which I’ll discuss next.</p>\n<h2 id=\"Estimation-Checklist\"><a href=\"#Estimation-Checklist\" class=\"headerlink\" title=\"Estimation Checklist\"></a>Estimation Checklist</h2><p>You want to create a checklist that you can use to make sure you’ve covered everything that needs to be estimated.  Along with the items I included above, here are some others you might want to include:</p>\n<ol>\n<li>Database Refresh side effects – yes I know, each programmer SHOULD have their own copy of the database, but I’ve yet to work for an organization that does this.  Because we don’t have this on my current project, we’ve lost valuable morning time twice this week waiting for the database we are using to get updated.  At least we aren’t all working against the production database.</li>\n<li>Version Control Management – this includes branching, merging, pull request, and code reviews.</li>\n<li>Holidays and Vacations</li>\n<li>Any learning curves that must be mastered.</li>\n</ol>\n<h2 id=\"Management-Doesn’t-Like-the-Estimate\"><a href=\"#Management-Doesn’t-Like-the-Estimate\" class=\"headerlink\" title=\"Management Doesn’t Like the Estimate\"></a>Management Doesn’t Like the Estimate</h2><p>There have been a few times when the manager I’m working for doesn’t like the estimate I provide.  In my experience there are several reasons for this.</p>\n<p>First, and almost always, if I’m right, the project is going to take a lot longer than they expected, or longer than they’ve been told to do it in.</p>\n<p>Second, they are used to estimates that are half as long.  The problem isn’t that my estimates are wrong, but that their expectations have been set lower.</p>\n<p>What to do? Well, I take them to my list and show them where all the time is.  Because I can document where the time is going to be spent, I rarely have to do more than explain how I came to the estimate I did.</p>\n<p>If they still bulk, I simply have this conversation, me: “So, you think my estimates are high?” them: (yes).</p>\n<p>me: “Do your other programmers write tests for their code?”</p>\n<p>them: (no)</p>\n<p>me: “When you compare their time to the time I’ve said I’m going to take, do you account for bug fixes?”</p>\n<p>them: (no)</p>\n<p>me: “If you did account for the bug fixes, would their estimates be more or less accurate?”</p>\n<p>them: (less)</p>\n<p>me: “Do you believe the way I’ve proposed to complete this project will result in less bugs than you normally see?”</p>\n<p>Well, you get the point.  I’ve yet to have to have a conversation that went into that much detail.  And the more you track, the easier this conversation becomes because you can just say, “I’ve been tracking my estimates against reality now for N years and I’ve found that I normally am within X% of my estimate.</p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>There are a couple of tools I really like for estimating.  The first one is the Mind Map.  If you aren’t familiar with Mind Mapping, it is a way of just getting your ideas down on paper without having to worry about the structure or the order.  All you concentrate on is relationships.  This is a great way of breaking a project down into the smallest possible units of work.</p>\n<p>Once you have a mind map of your tasks, you can put the individual tasks into a Kanban Board.  You want a board that can provide the ability to attach estimates to the tasks and will show you a burn down&#x2F;up chart based on how much work you’ve completed.</p>\n<p>For Mind Mapping, I currently use <a href=\"//www.mindmup.com\">Mind Mup</a>.</p>\n<p>For Kanban, I use <a href=\"//trello.com/\">Trello</a> with <a href=\"//chrome.google.com/webstore/detail/plus-for-trello-time-trac/gjjpophepkbhejnglcmkdnncmaanojkf?hl=en\">Plus For Trello</a>.</p>\n<p>I wish there was a tool that married the two ideas.  That way I could use Mind Mapping for Epics, Stories, and defining tasks and I could use a Kanban board for tracking work.</p>\n",
            "tags": [
                "project management",
                "estimating"
            ]
        },
        {
            "id": "http://davembush.github.com/10-reasons-projects-succeed/",
            "url": "http://davembush.github.com/10-reasons-projects-succeed/",
            "title": "10 Reasons Projects Succeed",
            "date_published": "2016-08-09T22:30:00.000Z",
            "content_html": "<p>We’ll get to Reasons Projects Succeed soon, but I need to do some setup work first.</p>\n<p>I’ve been thinking about starting an Open Source project for a while.  The only issue was; I didn’t have an idea for a project that didn’t already exist.  Now I do.  So, I’ve begun the process.</p>\n<p>The issue with starting a project like this is that I would much rather just start coding.  In fact, I would much rather not even make this Open Source.  But making it Open Source has forced me to face project management issues head on.</p>\n<p>I’ve been listening to enough podcast recently to know that putting something up on GitHub isn’t going to make a project Open Source any more than it will make it successful.  Therefor, I’ve decided to start the project as though it had a team of people already working on it.  It is a team of one for now.  But, one thing I’ve learned in life is that having the structure in place to handle a larger team now will not just benefit me in the future, but it will actually help my small little team of me today.</p>\n<p>I’ve started looking at other successful Open Source projects to see what they are doing and to determine what components of what they are doing I want to include in my project.  As I’ve gone through this exercise, the thought occurred to me, “If the organizations I’ve worked for implemented half of what these projects implement, the projects would have been run so much more efficiently and the projects that were in trouble may have avoided the trouble.” <figure><img src=\"/uploads/2016/07/image-5.png\" title=\"10 Reasons Projects Succeed\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/vuhung/8576985602/\">Nguyen Vu Hung (vuhung)</a> via <a href=\"//visualhunt.com\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Clear-Mission-Statement\"><a href=\"#Clear-Mission-Statement\" class=\"headerlink\" title=\"Clear Mission Statement\"></a>Clear Mission Statement</h2><p>One of the most fundamental items that must exist in any project is a clear sense of what it is you are doing.  If you can’t explain what it is you are building in a couple of sentences, then how will you know when you are done?  How will you know you’ve succeeded? Once you’ve explained the summary, you might also want to go into some detail.  What makes this project different?  What problem does it solve?  What’s the short term vision?  Where might this project end up long term?  If there are other projects like this one, how is this one different? Why would anyone want to contribute to this tool?</p>\n<h2 id=\"Clear-Expectations\"><a href=\"#Clear-Expectations\" class=\"headerlink\" title=\"Clear Expectations\"></a>Clear Expectations</h2><p>The thing that strikes me most about well-run projects is that they set clear expectations for people who will contribute to the project.  Here’s just a few items that are typically covered:</p>\n<ul>\n<li>Where to go if you have questions.  This typically includes email addresses, web sites, and other communication channels.  In a corporate setting you might also include phone numbers.</li>\n<li>How to file a bug request.  Typically, you find this includes a line that says something about “steps to reproduce consistently”</li>\n<li>How to ask for and&#x2F;or add a new feature.  You’ll probably want to include something about making sure the feature gets accepted prior to working on it.</li>\n<li>What constitutes “done” for a pull request.  Tests, documentation, code quality, etc.</li>\n<li>Specific coding rules that need to be followed.  Even better if your style guide is automated in your build process and violations cause the build to fail.</li>\n</ul>\n<h2 id=\"Easy-Development-Environment\"><a href=\"#Easy-Development-Environment\" class=\"headerlink\" title=\"Easy Development Environment\"></a>Easy Development Environment</h2><p>This one drives me crazy.  In just about every organization I go to, setting up my development environment takes a day.  Some places it takes three days.  Simply because I don’t have rights, or the items I need are scatter here and there.</p>\n<p>Why not write the documentation for this, or better yet, take the time to write a script, that walks you through exactly how to get the development environment setup?  Life would be so much easier.</p>\n<p>And for places that already have this, when is the last time you verified that the instructions or script still worked?  Stuff changes and we barely notice until the new guy shows up.</p>\n<h2 id=\"Continuous-Integration-Server\"><a href=\"#Continuous-Integration-Server\" class=\"headerlink\" title=\"Continuous Integration Server\"></a>Continuous Integration Server</h2><p>It sounds crazy in this world, but how many places still don’t have a continuous integration server.  And yet the most successful OS projects do.  Correlation?</p>\n<h2 id=\"Unit-Tests\"><a href=\"#Unit-Tests\" class=\"headerlink\" title=\"Unit Tests\"></a>Unit Tests</h2><p>Testing.  We all hate it.  And here again, the best projects make sure there are test.  I’ve covered testing in multiple places before.  We’ll just leave this at, “You need tests!”</p>\n<h2 id=\"Application-Level-Tests\"><a href=\"#Application-Level-Tests\" class=\"headerlink\" title=\"Application Level Tests\"></a>Application Level Tests</h2><p>And if you are writing an application, you need application level tests.  At least a few to make sure everything works together.</p>\n<h2 id=\"Centralized-Communication\"><a href=\"#Centralized-Communication\" class=\"headerlink\" title=\"Centralized Communication\"></a>Centralized Communication</h2><p>It amazes me how many places still use email as the primary way of communicating.  What’s wrong with that?  Well, people get included who shouldn’t.  Don’t get included that should.  And finding the email when you need it is impossible.  Which version of the email has what you need anyhow? Most projects fail at the communication level.  There are tools for that.</p>\n<h2 id=\"Project-Management-Tools\"><a href=\"#Project-Management-Tools\" class=\"headerlink\" title=\"Project Management Tools\"></a>Project Management Tools</h2><p>Find a project management tool and use it.  Actually, find a project management tool that your team will use and use it.  There is a lot of crap out there.  Don’t let the sales literature pick your tool.  Try the tool.  I’ve finally been introduced to a VERY popular tool where I’m working now.  I can’t believe it is so popular because I’ve used tools that are SO much better.  Better yet, find a useable tool that doesn’t just integrate with other tools, but merges with other tools.  You shouldn’t have to leave GitHub to use your Kanban board, for example.</p>\n<h2 id=\"Swarms-vs-Silos\"><a href=\"#Swarms-vs-Silos\" class=\"headerlink\" title=\"Swarms vs Silos\"></a>Swarms vs Silos</h2><p>Here’s another places that drives me crazy.  Did you ever notice that in an Open Source project, the QA, Documentation and Coding all happen off of GitHub.  But in most organizations, those are all Silos?  What would happen if your QA, Documentation, and Coding people all worked out of the same space in your office.  In our situation, I have no idea if we even have documentation people.  We certainly don’t have QA people working WITH us daily.  And the programmers are even spread all over the place.  And we wonder why nothing gets done and we have communication problems.  We might as well work from home.  At least then there wouldn’t be an illusion that we were working together and we’d rely on collaboration tools more.</p>\n<h2 id=\"Opt-In\"><a href=\"#Opt-In\" class=\"headerlink\" title=\"Opt-In\"></a>Opt-In</h2><p>OK.  This one is going to scare the managers.  But what would happen if the team of programmers where you worked were able to choose what projects they worked on?  I know in some places this wouldn’t work because there is only one project.  But in larger organizations? In most places, you get hired for a gig and then you get assigned to some project.  In some cases, you get hired for one project and assigned to another.   So even the choice you thought you had, you don’t have.</p>\n<p>Here are some advantages to this:</p>\n<ol>\n<li>Poorly run projects would get abandoned.</li>\n<li>Projects with no viable reason would get abandoned.</li>\n<li>Programmers would work on things they enjoyed.</li>\n<li>Product owners would have to contribute.</li>\n</ol>\n",
            "tags": [
                "project management"
            ]
        }
    ]
}