{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"scope\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/javascript-variable-gotchas/",
            "url": "http://davembush.github.com/javascript-variable-gotchas/",
            "title": "JavaScript Variable Gotchas",
            "date_published": "2016-02-11T13:30:00.000Z",
            "content_html": "<p>If you’ve been programming using JavaScript for any length of time, you’ve probably run into several of the JavaScript variable scope gotchas.  You may have even been able to fix them.  But you could prevent these gotchas if you understood better why the gotchas exist in the first place.</p>\n<p>My goal, through a series of blog post on the topic, is to make us all better JavaScript programmers.  JavaScript is no longer a toy.  Those who survive in the new JavaScript eco system will be those who understand why JavaScript works the way it does.</p>\n<p>I’m going to approach this topic as a series of puzzles.  This will show the issue and then we can discuss why the issue exist and what to do about it.</p>\n<p><img src=\"/uploads/2016/02/image.png\" alt=\"JavaScript Variable Gotchas\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Puzzle-1\"><a href=\"#Puzzle-1\" class=\"headerlink\" title=\"Puzzle 1\"></a>Puzzle 1</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Given the code above, what is the value of <code>a</code> at line 5 and what is the value of <code>a</code> at line 8? (Play Jeopardy music here) OK.  Times up.  What do you think? If you said that line 5 has the value of ‘abc’, you would be wrong.  But I totally understand why you would think that.  I think everyone would agree that the value at line 8 is now ‘xyz’.  So, we will ignore that.</p>\n<p>Why isn’t the value at line 5 ‘abc’?</p>\n<h3 id=\"Hoisting\"><a href=\"#Hoisting\" class=\"headerlink\" title=\"Hoisting\"></a>Hoisting</h3><p>The first thing we need to understand about variables is that no matter where they are declared, the declaration is always ‘hoisted’ to the top of the scope block the variable is declared in.  The assignment happens where we wrote the code.</p>\n<p>So let’s rewrite our code so that it looks more like what is really happening.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Written this way, it is obvious that <code>a</code> is either undefined or null at line 6.  Which is it?</p>\n<h3 id=\"Undefined-or-Null\"><a href=\"#Undefined-or-Null\" class=\"headerlink\" title=\"Undefined or Null?\"></a>Undefined or Null?</h3><p>This one always confuses me too.  Mostly because in every other language I work with, if a variable is declared but not assigned, it is almost always null.  The only time it would be undefined is if I had not declared it.</p>\n<p>In JavaScript things are different.</p>\n<p>In a strongly typed language, we know more about our variable types when the variable is declared.  So, if we declare a variable as some object type, it is assigned null by default.  But value types are zero’d out.  Not really always null.</p>\n<p>In JavaScript, we don’t know the type of the variable until it is assigned.  So, all we know when we declare a variable with the var keyword is that there is a variable.  But the type of the variable is undefined.  Therefore, any variable that has not been assigned is going to be undefined.  Not null.</p>\n<h2 id=\"Puzzle-2\"><a href=\"#Puzzle-2\" class=\"headerlink\" title=\"Puzzle 2\"></a>Puzzle 2</h2><p>Let’s move some code around a bit.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>What is the value of <code>a</code> at line 9? I hope this is an easier puzzle to solve.  Notice that we call <code>foo()</code> at line 7, so when we return from <code>foo()</code> <code>a</code> now holds the value of ‘xyz’ because we didn’t redeclare the variable inside of <code>foo()</code>.  Because of variable scoping, <code>a</code> assigned the variable that was declared at line 1.</p>\n<h2 id=\"Puzzle-3\"><a href=\"#Puzzle-3\" class=\"headerlink\" title=\"Puzzle 3\"></a>Puzzle 3</h2><p>Once again, let’s move some code around.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  a = <span class=\"string\">&#x27;xyz&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>Notice that in this case, we have not declared the variable <code>a</code> at all.  We’ve just assigned ‘xyz’ to it inside of <code>foo()</code>.  So, what is the value of <code>a</code> at line 7? What are our options?</p>\n<ol>\n<li>The code won’t run.</li>\n<li>a &#x3D;&#x3D;&#x3D; ‘xyz’</li>\n<li><code>a</code> is undefined.</li>\n</ol>\n<p>If you were to think that the code won’t run, you would be wrong and you probably haven’t coded with JavaScript very long.  The code will run.</p>\n<p>So the next question you have to ask yourself is where will <code>a</code> be defined?  Since we haven’t declared it, it must automatically get declared some place.  Is that inside of <code>foo()</code> or someplace else? The answer is some place else.  The rule is this, if the variable has not been declared in the scope it is being used, the variable is declared as a global variable.  In a browser, this creates a property hanging off the window object.</p>\n<p>And so, the only valid answer is that <code>a === ‘xyz’</code> at line 7.</p>\n<h2 id=\"Don’t-shoot-yourself-in-the-foot\"><a href=\"#Don’t-shoot-yourself-in-the-foot\" class=\"headerlink\" title=\"Don’t shoot yourself in the foot\"></a>Don’t shoot yourself in the foot</h2><p>As you might imagine, if you aren’t careful, you can really get yourself into a lot of trouble.  Funny thing about computers, they do EXACTLY what they are told.  It really doesn’t matter what you think it should have done. But there is a way to prevent some of the problems above.</p>\n<p>By adding <code>&quot;use strict&quot;;</code> as a line in your code.  Many of the common errors that we make while programming in JavaScript will be thrown as exceptions.</p>\n<p>The other thing you should put in your arsenal is a tool like jsHint which you can get by using WebEssentials in visual studio.  This will tell you when you’ve done things that might not be right.</p>\n<p>BTW, use jsHint instead of jsLint.  jsLint is WAY too opinionated.  For example, I get Mr. Crawford’s point about forcing the use of a break statement in a switch&#x2F;case block.  But really!  I should be able to turn it off in the places where not having a break statement is EXACTLY what I want.  jsHint gives you this flexibility.</p>\n",
            "tags": [
                "javascript",
                "scope",
                "hoisting"
            ]
        },
        {
            "id": "http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/",
            "url": "http://davembush.github.com/adventures-working-with-angular%E2%80%99s-scope/",
            "title": "Adventures Working With Angular’s $scope",
            "date_published": "2015-11-26T13:30:00.000Z",
            "content_html": "<p>Every week when I write, I try to think back on the past week and think, “What have I learned that might be useful to others.”  Most weeks that is a pretty easy question to answer because I get most of my pleasure from learning new stuff.  But this week was different.</p>\n<p>When I sat down to write today, I couldn’t come up with a subject that couldn’t be covered with a sentence.  More of a tweet than a blog post.  It was so bad that I decided to go run the errands that are on my list and come back to it once I got home.</p>\n<p>Evidently, that was a good move because I think I have something that will be genuinely useful.  Although I will admit that if you’ve been working with AngularJS for very long at all, you may have already learned what I’m about to explain.</p>\n<p><img src=\"/uploads/2015/11/image2.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>To make sure we are all on the same page, I want to cover the basics first.  Every controller has a $scope variable associated with it.  $scopes can be nested within each other, which allows us to either have child scopes add information to parent scopes using prototypical inheritance, or the child $scope can be isolated so that it can’t see the parent $scope up the nesting chain.  In either case, you can gain access to the parent $scope by using the $parent variable.</p>\n<p>What is important to realize about $scope is that it is attached to the element’s this pointer.  Every controller you create is its own object and $scope is just one of many properties that is part of that object.</p>\n<p>Now, in normal Angular programming, you may only ever create one controller per element.  But if you’ve ever created a directive that gets used on multiple places, or you’ve done anything with repeaters, you know that controllers can be created “under the hood.”  So that the $scope for the repeater item isn’t the same as the $scope for the element that holds the main collection.</p>\n<h2 id=\"scope-and-ControllerAs\"><a href=\"#scope-and-ControllerAs\" class=\"headerlink\" title=\"$scope and ControllerAs\"></a>$scope and ControllerAs</h2><p>In version 1.2 of Angular, the ControllerAs syntax was added, this can be added in a number of different ways that I won’t describe here.  That’s old news and there are plenty of places to find that information, including the Angular documentation.  But what isn’t clear at first, is what this feature does for us under the hood. Many people, who haven’t dug in deep under the hood assume that somehow this replaces $scope.  But in fact what it does is that it adds a variable onto $scope.  If you were to use ControllerAs redMonkey, what actually happens under the hood is that you end up with a variable named “redMonkey” that is hanging off of the controller’s $scope variable.</p>\n<p>In fact, what you end up with is this holding a property “$scope” and $scope holding a property “redMonkey” which is actually pointing to the controller’s this pointer.  Further, it is possible to have elements in your view bind to other variables hanging off of $scope while in the same view, other things are bound to variables hanging off of redMonkeys.</p>\n<h2 id=\"scope-and-Singletons\"><a href=\"#scope-and-Singletons\" class=\"headerlink\" title=\"$scope and Singletons\"></a>$scope and Singletons</h2><p>I hope at this point you have a relatively clear picture of how $scope works because this is where things start to get interesting.  You see, just about everything else that you create in Angular is a singleton.  That is, only one instance of it exist in the entire application.  So, what happens if you pass $scope into one of these singletons and you use that singleton multiple times on the same page? Well, there’s no telling for sure.  You might get lucky and everything will seem to work, until one day it doesn’t.  In fact, you may never notice that there is a problem if you only ever call it from one controller or directive at a time.</p>\n<p>But to use singletons effectively, what you need to do is that you will need to pass the scope to each of the functions you need to have use it, unless you can be sure it will only be able to use one scope at a time.  As a general rule, you should never store state in anything that is a singleton.</p>\n<p>How do I know? Well, this week, I was working on some code that I thought was overriding the control’s controller.  But, when I finally got it all working I found that it only worked some of the time because what I had really overridden was a method in a directive.  Another time this week, I was doing something similar thinking I was overriding a function in the main control’s $scope only to find out that the function I was overloading was in a nested repeater item.</p>\n<h2 id=\"Finding-scope-for-an-element\"><a href=\"#Finding-scope-for-an-element\" class=\"headerlink\" title=\"Finding $scope for an element\"></a>Finding $scope for an element</h2><p>If you need help figuring out what $scope is bound to what element in your code, you can use the <a href=\"//chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en\">Batarang plugin</a>.  You can also use the following JavaScript code using any developer tool you might want to use.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title function_\">element</span>(elementSelector).<span class=\"title function_\">scope</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scope-and-Repeaters\"><a href=\"#scope-and-Repeaters\" class=\"headerlink\" title=\"$scope and Repeaters\"></a>$scope and Repeaters</h2><p>So, back to one of my issues this week.  What I was working with was a tree control.  The tree was a set of repeaters within repeaters.  The original function that was bound to the click event was bound to the item scope so that each item was bound to its own instance of the onClick method.</p>\n<p>What I was trying to do was to override the function with a function in a directive I had created that wrapped the tree control and added a search box.  Fortunately, the item template could be changed, but how to get it to call MY click handler instead of the one it called by default? To further complicate matters, the $scope in the directives were isolated so I couldn’t add a new function on the scope I had control over and have the child scope see it.</p>\n<p>Or could I? The directive I was creating does have access to the scope of the tree control.  So, all I really needed to do was to create a new variable hanging off the tree control’s scope that pointed to the scope I wanted it to see and then in my template I could point to that variable and the function hanging off of it as the thing that should get called on click.</p>\n<p>Sure enough, that worked.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "scope"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-scope/",
            "url": "http://davembush.github.com/javascript-scope/",
            "title": "JavaScript Scope",
            "date_published": "2015-06-18T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/06/ppl-men-060.jpg\" alt=\"ppl-men-060\" title=\"ppl-men-060\"></p>\n<p>If you’ve been programming in any other environment than JavaScript for a while, you may be making assumptions about JavaScript Scope that just aren’t true.  One of those assumptions is how variables get evaluated when you run the JavaScript code and what variables are visible and at what point in the code they are visible.</p>\n<p>Just as a test to see how well you know your JavaScript, let’s create a few tests scenarios.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quiz\"><a href=\"#Quiz\" class=\"headerlink\" title=\"Quiz\"></a>Quiz</h2><h3 id=\"1-Given-the-following-code\"><a href=\"#1-Given-the-following-code\" class=\"headerlink\" title=\"1) Given the following code:\"></a>1) Given the following code:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo = <span class=\"string\">&quot;xyz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    foo = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bar</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br></pre></td></tr></table></figure>\n\n<p>What is displayed in the console window when console.log(foo) is executed?</p>\n<p>Why?</p>\n<h3 id=\"2-Given-the-following-code\"><a href=\"#2-Given-the-following-code\" class=\"headerlink\" title=\"2) Given the following code:\"></a>2) Given the following code:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;final i: &#x27;</span> + i);</span><br></pre></td></tr></table></figure>\n\n<p>What is the value of i when <code>console.log(‘final i: ‘ + i)</code> is executed?</p>\n<p>Why?</p>\n<h3 id=\"3-What-is-wrong-with-the-following-code\"><a href=\"#3-What-is-wrong-with-the-following-code\" class=\"headerlink\" title=\"3) What is wrong with the following code?\"></a>3) What is wrong with the following code?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo was called&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code\"><a href=\"#4-Why-would-changing-the-previous-code-to-this-next-block-of-code-fix-the-issue-with-the-previous-code\" class=\"headerlink\" title=\"4) Why would changing the previous code to this next block of code fix the issue with the previous code?\"></a>4) Why would changing the previous code to this next block of code fix the issue with the previous code?</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;foo was called&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Answers\"><a href=\"#Answers\" class=\"headerlink\" title=\"Answers\"></a>Answers</h2><ol>\n<li><p>The value of foo when console.log(foo) is executed is “xyz”</p>\n</li>\n<li><p>The value of i when console.log(‘final i: ‘ + i) is executed is 10</p>\n</li>\n<li><p>foo is declared but undefined when we try to call it on the first line</p>\n</li>\n<li><p>because foo is both declared and defined when it is called on the first line</p>\n</li>\n</ol>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>How did you do?</p>\n<ol>\n<li>“Hoisting”</li>\n</ol>\n<hr>\n<p>The first thing you need to understand about how JavaScript processes code is that it goes through the block of code you are working with and processes the variable declarations first.  That is anything in the global scope (window for browsers, global for server) or anything within a function block.  From the JavaScript compiler’s perspective, the code in example 1 looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo = <span class=\"string\">&quot;xyz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">    foo = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bar</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);</span><br></pre></td></tr></table></figure>\n\n<p>So that the foo &#x3D; “abc” line assigns the string “abc” to the variable foo in the bar function’s local scope.  Not impacting the variable foo in global scope so that the result at the end of the code sample is that the foo variable still has the value “xyz”.</p>\n<ol start=\"2\">\n<li>Only functions and catch blocks create “block scope”</li>\n</ol>\n<hr>\n<p>In most languages that I use, if I wanted to create a variable that only had effect within a for, if, or while block, I could create a variable within the braces, or inline like in this example, and the code in the outer block would be left untouched.  But in JavaScript, this would only work if you were using the LET keyword which only appears in ECMA6 and above.</p>\n<p>In JavaScript, it is perfectly legal to declare a variable multiple time.  The compiler will not complain.  So, when we run the code in example 2, the declaration within the for() is ignored and it just reuses the declaration at the beginning of the code snippet.</p>\n<p>If you really wanted to declare a function within its own scope, you could create the scope with a try&#x2F;catch block, like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;<span class=\"keyword\">throw</span> i;&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(i)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;final i: &#x27;</span> + i);</span><br></pre></td></tr></table></figure>\n\n<p>Which would give you the behavior you were probably expecting.  The code above will print out ‘final i: 20’ like you were probably expecting above.</p>\n<ol start=\"3\">\n<li>“Hoisting” and function assignments</li>\n</ol>\n<hr>\n<p>Going back to our discussion about variable declarations being processed first, and then doing any assignments, it becomes obvious that we can’t call a function that we haven’t assigned to the variable yet.  I don’t think I need to discuss this any further than I already have.  This works like any other variable declaration as I’ve discussed above.</p>\n<ol start=\"4\">\n<li>“Hoisting” and function declarations</li>\n</ol>\n<hr>\n<p>Function declarations, on the other hand, behave differently than function assignments.  In the case of function declarations, the variable AND the function that is “assigned” to it get pulled to the top of our code.  So using function declarations over function assignments is preferred simply because it assures us that the function pointer is available whenever we need it.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>So, maybe you thought you knew JavaScript.  Maybe you did.  Maybe you discovered you didn’t know it as well as you thought. I would encourage you to really learn the language.</p>\n",
            "tags": [
                "javascript",
                "scope",
                "hoist"
            ]
        }
    ]
}