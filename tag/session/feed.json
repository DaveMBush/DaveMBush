{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"session\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/multi-step-processing-in-asp-net/",
            "url": "http://davembush.github.com/multi-step-processing-in-asp-net/",
            "title": "Multi-Step Processing in ASP.NET",
            "date_published": "2013-05-08T05:32:51.000Z",
            "content_html": "<p><img src=\"/uploads/2010/04/B01I0045.jpg\" alt=\"B01I0045\" title=\"B01I0045\"></p>\n<p>I received the following question a few days ago but I’ve been so busy with billable work that I just haven’t had a chance to answer it until now.  Actually, I’m still busy, but I hate letting these questions go for too long.</p>\n<p>“Right now I am working on a project where I have to screen a user.  This is a multi-step process.  At the end of the process I store the data back to the system.</p>\n<p>Currently, I am storing all the options a user will select in a session variable and then finally using them at the last step.</p>\n<p>Can you please suggest a better way to store this temporary data that does not require using a session? This type of situation comes up a lot.  We’ve used multiview to get it working.</p>\n<span id=\"more\"></span>\n\n<p>But this does not seem to be viable in all situations.”</p>\n<p>If I had a multi-step process that I needed to complete, I’d probably use the ASP.NET Wizard Control, which is a lot like the MultiView control you mention.  The main difference is that it handles the navigation between the views for you.</p>\n<p>If your process requires you to navigate between separate ASPX pages, then you’ll probably want to do something with cross-page posting.</p>\n<p>Frankly, I don’t find session variables to be all that evil.  Your trade-offs are to either store all of the data on the page using hidden form variables or ASP.NET view state (using MultiView or Wizard controls), which makes the page heavier than it might otherwise be, or you need to store the information in session variables, which takes up memory on the server.</p>\n<p>For most web sites the extra memory used on the server is not an issue because the site just doesn’t get that much traffic.</p>\n<p>Unless we are talking about a 50-step process, storing the information in the page isn’t much of an issue either.</p>\n<p>Since you never state what it is about the MultiView control that makes it not viable in all situations, I’m left puzzled.  Seems like its cousin, the Wizard control, is exactly what you need.  I’m guessing there is something you don’t understand about how these controls should be used.</p>\n",
            "tags": [
                "asp.net",
                "session",
                "multiview",
                "wizard"
            ]
        },
        {
            "id": "http://davembush.github.com/httpcontext-items-vs-session/",
            "url": "http://davembush.github.com/httpcontext-items-vs-session/",
            "title": "HttpContext.Items[] vs Session[]",
            "date_published": "2009-10-12T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/10/ETHN0171.png\" alt=\"ETHN0171\" title=\"ETHN0171\"></p>\n<p>Since .NET first became available, passing data around during a request has become a lot easier.  The ability to set a property has made that so.  Still, there are times when setting a property just won’t do the trick.</p>\n<span id=\"more\"></span>\n\n<p>One such time is getting data from the middle tier back up to the view separate from a DataBinding operation.  That is, you databind a control to the middle tier and that method needs to set a value that will be used elsewhere in the view, not in the item that is being bound.</p>\n<p>The natural, obvious tendency is to set a session variable.  But there is a better way.</p>\n<p>The problem with session variables is that they have to be cleaned up manually or they will hang around longer than we actually need them.  This will use up more session memory than is required and can potentially cause side effects that will be difficult to debug.</p>\n<p>Instead, you can use the Items[] collection that is part of the HttpContext class.  It works the same as a session variable, but it only hangs around for the duration of the request.  Once the information is sent back to the browser, the variables that were set in the Items[] collection go away.</p>\n<p>You might set your variable in the middle tier like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpContext.Current.Items[<span class=\"string\">&quot;myVar&quot;</span>] = <span class=\"string\">&quot;Some Data Here&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>And retrieve it later like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> myVar = (<span class=\"built_in\">string</span>)(HttpContext.Current.Items[<span class=\"string\">&quot;myVar&quot;</span>]);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "httpcontext",
                "items",
                "session"
            ]
        }
    ]
}