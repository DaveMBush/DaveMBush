{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"react.js\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/upgrade-to-angular-from/",
            "url": "http://davembush.github.com/upgrade-to-angular-from/",
            "title": "Upgrade to Angular from...",
            "date_published": "2017-09-26T10:30:23.000Z",
            "content_html": "<p>As I’ve been interviewing for a new contract, the question, “How do we Upgrade to Angular from …?” has come up several times.  And as I’ve thought about the question, several patterns have emerged. <figure><img src=\"/uploads/2017/09/2017-09-26.jpg\" title=\"Upgrade Angular from ...\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/archer10/12414442945/\">archer10 (Dennis) 102M Views</a> via <a href=\"//visualhunt.com/re/426124\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by-sa/2.0/\"> CC BY-SA</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"From-a-Portal\"><a href=\"#From-a-Portal\" class=\"headerlink\" title=\"From a Portal\"></a>From a Portal</h2><p>The first time I was asked this question, the team I was talking with had an existing Web 1.0 site setup using WebSphere Portal.  Not something that you can easily plug any Single Page Application (SPA) into. But all is not lost. </p>\n<p>One of the easiest ways to solve the problem is to create a reverse proxy.  One popular tool for this is mod_proxy for the Apache server.  If you are using IIS, you could use URL Rewrite rules to setup a reverse proxy. </p>\n<p>In either case, you will need to setup rules that ensure that anyone trying to access a URL that is still on the old portal site would still be able to access that directly.  Once that is in place, you would create one page, or maybe a set of related pages, at a time and stand them up on another server.  Then you would change your rules so that anyone trying to access the old URLs that are no longer being served by the old site get redirected to the new SPA application. </p>\n<p>Now, this sounds pretty simple.  But, I imagine keeping everything in sync as you go might be more of a pain that you might imagine.  If you have pages that link to each other, you’ll need to convert links to routes as you go.  Say you convert page one.  It still has links to the old site.  Not a big problem.  But as the pages it is linking to now become part of the SPA, you’ll want to convert those links to route directives.  One way you might mitigate this issue is to convert pages with the fewest links out first.  It might help to create a graph, or at least a spreadsheet, to help you manage the interdependent relationships. </p>\n<p>An added advantage of this setup is that any pages in the portal that have relatively static content, and any resources, can be cached, or even moved, to the proxy server where they will probably be served up faster than the original portal.</p>\n<h2 id=\"From-a-Web-1-0-Site\"><a href=\"#From-a-Web-1-0-Site\" class=\"headerlink\" title=\"From a Web 1.0 Site\"></a>From a Web 1.0 Site</h2><p>Switching from an existing Web 1.0 site might be a bit easier.  Although, using the proxy method there still might be the best choice.  Many of the same issues exist.  But in the case of an existing Web 1.0 site that doesn’t depend on a portal, you’ll probably have greater control over the server.  Again, you are probably running the site on Apache, nginx, or IIS.  In all of those cases, you can setup a rule that says, “if you can’t find the URL, load up this page over here instead.”  Where “this page over here” is your Angular site you are converting to.  You’ll need to implement something like this anyhow for your Angular SPA to work correctly, so this is probably the least amount of extra work to get you where you need to be. </p>\n<p>Then, you convert a page or a set of related pages at a time like I described in the Portal implementation.</p>\n<h2 id=\"From-Another-Framework\"><a href=\"#From-Another-Framework\" class=\"headerlink\" title=\"From Another Framework\"></a>From Another Framework</h2><p>Let’s say that you are moving from React, or some other framework to Angular.  I know of a company that is doing just this.  The wrinkle is, they have no plans on converting their existing pages to Angular.  This makes the transition relatively simple.  You setup rules on your server, similar to how you would setup a conversion from a Web 1.0 site.  “URLs that look like this, go to the old index.html page and URLs that look like that go to the new index.html page.” </p>\n<p>Once again, you’ll need to keep track of routes as you change from one to the other.  But it is manageable.</p>\n<h2 id=\"Converting-AngularJS-to-Angular\"><a href=\"#Converting-AngularJS-to-Angular\" class=\"headerlink\" title=\"Converting AngularJS to Angular\"></a>Converting AngularJS to Angular</h2><p>Yes, I know ngUpgrade exist.  But, if you don’t need to use it, why would you.  ngUpgrade exist so you can embed Angular in AngularJS or AngularJS in Angular.  But, it might make more sense to create a new SPA for Angular and have the two sites reference each other similar to how you would do this for a Web 1.0 site or if you were converting from an entirely different framework. </p>\n<p>The reason I recommend using the two-site method first is because Angular really is a different framework.  There are similarities between AngularJS and Angular.  But that is all they are.  What if you just pretended they weren’t at all related.  That the ngUpdate bridge didn’t exist.  Wouldn’t that make life just a bit easier in the long run?  I think it would.</p>\n",
            "tags": [
                "angular",
                "react.js",
                "portal",
                "web 1.0",
                "web 2.0"
            ]
        },
        {
            "id": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "url": "http://davembush.github.com/3-javascript-fallacies-you-might-believe/",
            "title": "3 JavaScript Fallacies You Might Believe",
            "date_published": "2017-03-14T11:30:00.000Z",
            "content_html": "<p>You know, you think the whole world knows something is true until you hear someone people respect say something really dumb.  The three JavaScript fallacies I have here are actual statements I’ve heard over the last week during a discussion about Angular2 and Rect.  What makes these fallacies particularly interesting is that they sound plausible.  In fact, there are time when they are even true.  But in the larger context of a JavaScript application they are nearly always false.</p>\n<p>So, here are 3 JavaScript Fallacies you may still believe that you may want to reevaluate.</p>\n<figure>![](/uploads/2017/03/image-2.png \"3 JavaScript Fallacies You Might Believe\")<figcaption>Photo credit: [bark](//www.flickr.com/photos/barkbud/4341791754/) via [VisualHunt](//visualhunt.com/re/8dc251) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\"><a href=\"#Direct-Access-to-the-DOM-is-Faster-than-using-a-Virtual-DOM\" class=\"headerlink\" title=\"Direct Access to the DOM is Faster than using a Virtual DOM\"></a>Direct Access to the DOM is Faster than using a Virtual DOM</h2><p>OK. I will grant that if you only ever want to change one thing on the screen at a time, yes accessing the DOM directly from JavaScript is probably going to be faster than going through some kind of Virtual DOM layer as is common in React, Angular2 and several other libraries and frameworks that are available today.</p>\n<p>But, the fact is, that’s not how most code works. If you are writing this kind of application and you are using a library or framework that uses a virtual DOM layer, something is wrong. I would argue you’ve probably chosen the wrong library for what you are trying to do.</p>\n<p>But, let’s assume that you are writing a typical SPA application that doesn’t just update one area of the screen. In this case, the fastest way to make this update is all at once. One call to the DOM from JavaScript. I’ve written before about how <a href=\"/javascript-performance-tweaks/\">slow accessing the DOM is</a>. And for all the performance enhancements since I wrote that article, accessing the DOM is still one of the slowest things you can do. So, a framework that lets you write your code in a way similar to how you would write to the DOM directly, but lets you do this in a way that doesn’t actually write to the DOM until the last minute is FASTER than writing to the DOM directly.</p>\n<h2 id=\"Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\"><a href=\"#Immutable-Objects-are-Necessarily-Slower-than-Mutable-Objects\" class=\"headerlink\" title=\"Immutable Objects are Necessarily Slower than Mutable Objects\"></a>Immutable Objects are Necessarily Slower than Mutable Objects</h2><p>Functional JavaScript programming has become the latest cool new buzzword in the JavaScript community, for a lot of good reasons, but one main concept that comes along for the ride is the idea of making all of our object immutable. This means, for example, that if I want to modify an array, instead of changing the current array, I would create a new array and copy the elements and the new element into it. No more push.</p>\n<p>Similarly, for a regular object that isn’t a list, we would create a new object and copy the existing elements into it and then overwrite the items that have changed.</p>\n<h3 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h3><p>Now, why would we want to go to all of this work? It does seem like it would be faster to just modify the existing object. Right?</p>\n<p>But you see, there is this little thing called “change detection” that more than makes up for all of this overhead I just described.</p>\n<p>In most of our applications, at some point we want to know if an object has changed, right? If we can’t rely on the fact that we have a new object, we have to do a deep comparison of the two objects until we’ve determined that there is a difference, or we’ve been through the whole list and verified that the nothing has changed.</p>\n<p>Once we can rely on objects being immutable, we can use the equals operator (&#x3D;&#x3D;, or &#x3D;&#x3D;&#x3D;) to see if the object has changed. I’m sure you can see that this takes much less time than evaluating an entire object tree, even if you object only has two properties in it that need to be compared.</p>\n<h3 id=\"Real-Problem\"><a href=\"#Real-Problem\" class=\"headerlink\" title=\"Real Problem?\"></a>Real Problem?</h3><p>But let’s step back and look at the bigger picture. In most of the code that I write, what we are really talking about is immutable arrays. Yes there are other non-array places where we would use immutable objects, but my guess is that immutable objects impacts 80% of my code. Get a list of records from the database for example.</p>\n<p>The fact of the matter is, every time I access the database, I get a new array back anyhow. Even in the case of retrieving a single record, I still get a new object back.</p>\n<p>If I need to delete an element from an array, here again, I’ll end up creating a new object.</p>\n<p>In fact, except modifying a row, or adding a record to the end of a list, just about everything I tend to do with an array ends up being an immutable operation anyhow. By making everything immutable, we are forcing the areas that we aren’t already implementing immutability to be immutable. The point is, in terms of performance the net is an obvious gain both in terms of performance and in terms of consistency.</p>\n<p>And, going back to the issue of rendering our data into the DOM, because the change detection is faster, we can determine that a particular component doesn’t need to have the DOM updated quicker rather than re-rendering the entire DOM.</p>\n<h2 id=\"Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\"><a href=\"#Backwards-Compatibility-means-I-can’t-upgrade-my-Development-Environment\" class=\"headerlink\" title=\"Backwards Compatibility means I can’t upgrade my Development Environment\"></a>Backwards Compatibility means I can’t upgrade my Development Environment</h2><p>Continuing on, remember the conversation I’m referencing was about React and Angular2. And the guy who was making these statements about performance was asserting that he couldn’t upgrade his React environment to use the latest and greatest tool chain because he had to support older browsers. He specifically stated IE6. Now, knowing the site he’s talking about, I doubt we make any money at all from people who run IE6. But, let’s just assume for a second that we do.</p>\n<h3 id=\"So-what-you’re-telling-me-is…\"><a href=\"#So-what-you’re-telling-me-is…\" class=\"headerlink\" title=\"So, what you’re telling me is…\"></a>So, what you’re telling me is…</h3><p>… that you are willing to let performance suffer for 99% of your very large customer based because you need to support the 1% (I’m being generous here) of the people who have refused to upgrade and probably aren’t producing any revenue for the company? Maybe I’m missing something, but this seems rather short-sighted. That, or maybe you just don’t know that the new features in the newer browsers allow you to not just write better JavaScript but also allow you to do things without JavaScript that perform better. If you are really interested in writing fast web sites, you should be moving to the latest and greatest tool chain as often as is humanly possible.</p>\n<h3 id=\"Bugs-and-Security-Risk\"><a href=\"#Bugs-and-Security-Risk\" class=\"headerlink\" title=\"Bugs and Security Risk\"></a>Bugs and Security Risk</h3><p>Just this last week I saw a study that said that over a third of the web sites on the Internet were running code that left them venerable to security risk. That is, the code they were running had known security risk. By not upgrading your tools for public facing sites, you are leaving your company at risk. When your site is compromised, do you want to be the one who has to explain to your boss that it is because you refused to upgrade your tools? I sure don’t.</p>\n<h3 id=\"But-what-about-the-old-browsers\"><a href=\"#But-what-about-the-old-browsers\" class=\"headerlink\" title=\"But what about the old browsers?\"></a>But what about the old browsers?</h3><p>Well, if you really need to support the old stuff, there are polyfills that you can apply that will let you run the newer stuff in the older browsers. Seems to me you get the best of both worlds. Your customers who are up to date benefit with a better performing, and less buggy website, and the customers using older browser still get to see something. Are there places where you might still have to make some compromises. Sure. There are a few places. But not enough that you shouldn’t upgrade.</p>\n<h2 id=\"What-is-the-Bigger-Problem\"><a href=\"#What-is-the-Bigger-Problem\" class=\"headerlink\" title=\"What is the Bigger Problem?\"></a>What is the Bigger Problem?</h2><p>So, how can this happen? How can really smart people make really bad choices like this?</p>\n<p>I don’t really know, but I have a few theories.</p>\n<p>One is just plain arrogance. Being so sure you are right that you never stop to think you might be wrong.</p>\n<p>I have to admit, when I first learned about immutability, I thought it sounded slow too. But, my thinking went along the lines of, “well, much smarter people than me are working on this, they must think it makes sense. I wonder why?” And then I started digging for answers.</p>\n<p>So, I would encourage those who are responsible for making decisions to make sure that the people they are listening to can actually back up what they are saying and not just assume they are right because they seem so confident.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "performance",
                "react.js"
            ]
        },
        {
            "id": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "url": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "title": "How Not to Choose a Framework",
            "date_published": "2016-06-02T10:30:00.000Z",
            "content_html": "<p>In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.</p>\n<p>Right now, of the frameworks I’ve looked at, my favorite framework is <a href=\"/tags/react-js/\">React JS</a>.  But if I were picking a corporate framework, at this point I’d probably land on <a href=\"/angular-2-first-impressions-compared-to-angular-1/\">Angular 2.0</a>.</p>\n<p>But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.</p>\n<p>But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…</p>\n<figure>![](/uploads/2016/05/image-3.png \"How Not to Choose a Framework\")<figcaption>Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"How-Not-to-Choose-a-Framework\"><a href=\"#How-Not-to-Choose-a-Framework\" class=\"headerlink\" title=\"How Not to Choose a Framework\"></a>How Not to Choose a Framework</h2><p>As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.</p>\n<p>In order, the frameworks I would prefer to use would be:</p>\n<ul>\n<li>React JS</li>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>Ext JS 4</li>\n</ul>\n<p>If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:</p>\n<ul>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>React</li>\n<li>Ext JS 4</li>\n</ul>\n<p>With this in mind, here’s what you should pay attention to.</p>\n<h2 id=\"Who-Will-Use-The-Framework\"><a href=\"#Who-Will-Use-The-Framework\" class=\"headerlink\" title=\"Who Will Use The Framework?\"></a>Who Will Use The Framework?</h2><p>At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.</p>\n<h2 id=\"How-Steep-is-The-Learning-Curve\"><a href=\"#How-Steep-is-The-Learning-Curve\" class=\"headerlink\" title=\"How Steep is The Learning Curve?\"></a>How Steep is The Learning Curve?</h2><p>Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:</p>\n<ul>\n<li>Can I buy support so I can get my questions answered?</li>\n<li>How clear is the documentation?</li>\n<li>How popular is the framework?</li>\n<li>Do I already have an expert on my team?</li>\n<li>Is there a public Slack channel for this framework?</li>\n<li>Do the people behind the framework care about the Enterprise?</li>\n</ul>\n<p>On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.</p>\n<h2 id=\"How-Opinionated-is-the-Framework\"><a href=\"#How-Opinionated-is-the-Framework\" class=\"headerlink\" title=\"How Opinionated is the Framework?\"></a>How Opinionated is the Framework?</h2><p>I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.</p>\n<p>When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.</p>\n<p>Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.</p>\n<h2 id=\"Industry-Standards\"><a href=\"#Industry-Standards\" class=\"headerlink\" title=\"Industry Standards\"></a>Industry Standards</h2><p>The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.</p>\n<p>In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.</p>\n<p>Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.</p>\n<p>Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.</p>\n<p>Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.</p>\n<h2 id=\"How-Testable-Is-It\"><a href=\"#How-Testable-Is-It\" class=\"headerlink\" title=\"How Testable Is It?\"></a>How Testable Is It?</h2><p>Anyone who is familiar with my history of posts, who know me personally, know <a href=\"/tags/tdd\">I am a huge proponent of TDD</a>. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.</p>\n<p>On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.</p>\n<h2 id=\"Doing-The-Research\"><a href=\"#Doing-The-Research\" class=\"headerlink\" title=\"Doing The Research\"></a>Doing The Research</h2><p>OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.</p>\n<p>One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.</p>\n<h2 id=\"How-Not-to-Pick-a-Framework\"><a href=\"#How-Not-to-Pick-a-Framework\" class=\"headerlink\" title=\"How Not to Pick a Framework\"></a>How Not to Pick a Framework</h2><p>If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.</p>\n<p>Ultimately regret your decision.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "ext js",
                "angular.js"
            ]
        },
        {
            "id": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "url": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "title": "ES2015 Code Coverage and Jest (React JS Unit Testing)",
            "date_published": "2016-05-05T11:30:00.000Z",
            "content_html": "<p>As I’ve <a href=\"/react-js-and-associated-bits/\">mentioned before</a>, I’m in the middle of putting together a React reference app and I’m doing it using <a href=\"/test-driven-learning-an-experiment/\">Test Driven Development</a>.  The problem is, the standard tools for implementing ES2015 code coverage with Jest make it hard to see at a glance if you have 100% code coverage or not because of some issues with the way Jest tells Babel to do the transformations by default, the way Babel transforms the code and implements the auxiliaryCommentBefore option and the way that Istanbul parses the ignore next comments.</p>\n<p>I’ve been working on solving this problem for the last month and a half off and on.  I’ve even posted a question about this on <a href=\"//stackoverflow.com/questions/35986316/reactjs-0-9-code-coverage-with-es2015-class-keyword\">Stack Overflow</a>, so I’m pretty sure no one else has a solution for this yet.  I’m not going to say my solution is the best way to solve this problem, but it is a solution, which is better than what we have so far.</p>\n<p><img src=\"/uploads/2016/04/image-5.png\" alt=\"ES2015 Code Coverage and Jest\" title=\"ES2015 Code Coverage and Jest\"></p>\n<h2 id=\"Diagnostics\"><a href=\"#Diagnostics\" class=\"headerlink\" title=\"Diagnostics\"></a>Diagnostics</h2><p>By default, when Babel transforms your code, it inserts additional functions into the code that it can call to replace the code you wrote that does not yet conform to the syntax you’ve used.  This code gets inserted at the top of the file and shows up in your code coverage reports as several conditions that didn’t get fired.  Yes, it inserts code it never uses because the functions have to work under a variety of scenarios.</p>\n<p>For those who are interested in how I figured this out.  The transform results are located in node_modules&#x2F;jest-cli&#x2F;.haste_cache.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-One\"><a href=\"#ES2015-Code-Coverage-Fix-One\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix One\"></a>ES2015 Code Coverage Fix One</h2><p>OK, so the standard recommended fix for something like this is to place</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure>\n\n<p>Prior to those functions.  And it just so happens that both Jest and Babel provide a mechanism for adding this comment by using the auxiliaryCommentBefore option.</p>\n<p>Only there are two problems with this.</p>\n<h3 id=\"Problem-One\"><a href=\"#Problem-One\" class=\"headerlink\" title=\"Problem One\"></a>Problem One</h3><p>If you just set the property like this:</p>\n<p>auxiliaryCommentBefore: ‘istanbul ignore next’</p>\n<p>Your code will get transformed so that any functions added by Babel will end up looking like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*istanbul ignore next*/</span><span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>But in order for Istanbul to pickup this comment, the code needs to look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span> <span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>While getting the spaces on either side of ‘istanbul ignore next’ is a simple matter, we have no real control over the space that is necessary between the comment marker and the function keyword.</p>\n<h3 id=\"Problem-Two\"><a href=\"#Problem-Two\" class=\"headerlink\" title=\"Problem Two\"></a>Problem Two</h3><p>The second problem with this “fix” is that even if modify the Babel code so that the comment gets inserted correctly, it doesn’t get inserted before EVERY function that Babel inserts.  If it inserts a group of functions, which it does regularly in my code, it only inserts the comment before the first function.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-Two\"><a href=\"#ES2015-Code-Coverage-Fix-Two\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix Two\"></a>ES2015 Code Coverage Fix Two</h2><p>What if we didn’t insert the functions in our code?  Well, it just so happens that we can do that relatively easily.</p>\n<p>There is a plug-in for Babel called ‘<a href=\"//www.npmjs.com/package/babel-plugin-transform-runtime\">transform-runtime</a>’.  What this plug-in does is that it requires in the functions rather that pasting them into your code.  This way, the functions don’t exist in your code so Istanbul never sees the function block.  Pretty cool.</p>\n<p>You can add this to either your .babelrc file or the Babel section of your package.json file by adding a “plugins” section</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;transform-runtime&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>along with the “presets” section you should already have.</p>\n<h2 id=\"Remaining-Issue\"><a href=\"#Remaining-Issue\" class=\"headerlink\" title=\"Remaining Issue\"></a>Remaining Issue</h2><p>While using transform-runtime takes care of most of the issues, there are two functions that still don’t get covered.  In fact, when you look at the transform-runtime code, you find that they are explicitly excluded and if you include them, your code won’t transpile at all.</p>\n<p>The good news is, it is only two functions and they both show up as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> _interop...</span><br></pre></td></tr></table></figure>\n\n<p>If we can get a hold of the code as it is being transformed, we should be able to do a search and replace to get the correct ‘istanbul ignore next’ string in place prior to the functions.</p>\n<p>Well, it just so happens that Jest has the ability to do exactly that.</p>\n<h2 id=\"ES2015-Code-Coverage-Final-Fix\"><a href=\"#ES2015-Code-Coverage-Final-Fix\" class=\"headerlink\" title=\"ES2015 Code Coverage Final Fix\"></a>ES2015 Code Coverage Final Fix</h2><p>I’m assuming you’ve already installed <a href=\"//www.npmjs.com/package/babel-jest\">babel-jest</a>, but just in case, if you have not, install it now.  Install it using –save-dev because we are going to want to be able to modify the code.</p>\n<h3 id=\"Quick-fix\"><a href=\"#Quick-fix\" class=\"headerlink\" title=\"Quick fix:\"></a>Quick fix:</h3><p>The proper way to fix this would be to write your own version of babel-jest.  But we are going for a quick fix.  Maybe we can get Facebook to implement the changes from this post.  Meanwhile, here is what you want to do.</p>\n<p>Locate the src&#x2F;index.js file in the node_modules&#x2F;babel-jest directory.  At the time of this writing, the current version looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This source code is licensed under the BSD-style license found in the</span></span><br><span class=\"line\"><span class=\"comment\"> * LICENSE file in the root directory of this source tree. An additional grant</span></span><br><span class=\"line\"><span class=\"comment\"> * of patent rights can be found in the PATENTS file in the same directory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">        <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The first change that you want to make here is to comment out the auxiliaryCommentBefore line.  We no longer need that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\"><span class=\"comment\">//        auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that what gets returned is the resulting transform of the code.  We want to execute a search and replace on the transformed code.  So, instead of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">   <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">   filename,</span><br><span class=\"line\">   <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">   <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;).<span class=\"property\">code</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What we want want to do is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">  <span class=\"comment\">//auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">  filename,</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">  <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"property\">code</span></span><br><span class=\"line\">    .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/function\\s_interop/g</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27; /* istanbul ignore next */ function _interop&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES2015-Code-Coverage-With-Jest-Summary\"><a href=\"#ES2015-Code-Coverage-With-Jest-Summary\" class=\"headerlink\" title=\"ES2015 Code Coverage With Jest - Summary\"></a>ES2015 Code Coverage With Jest - Summary</h2><ol>\n<li>Download and install babel-plugin-transform-runtime.</li>\n<li>Add “plugins”: [“transform-runtime”] to either .babelrc or the babel section of your package.json file</li>\n<li>Download and install babel-jest</li>\n<li>Modify babel-jest&#x2F;src&#x2F;index.js as indicated above.</li>\n</ol>\n",
            "tags": [
                "unit test",
                "react.js",
                "babel",
                "es2015",
                "es6",
                "jest"
            ]
        },
        {
            "id": "http://davembush.github.com/an-explanation-of-the-flux-pattern/",
            "url": "http://davembush.github.com/an-explanation-of-the-flux-pattern/",
            "title": "An Explanation of the Flux Pattern",
            "date_published": "2016-03-31T11:28:00.000Z",
            "content_html": "<p>Over the last couple of weeks, I’ve mentioned that I’ve been learning React JS.  First in the article “<a href=\"/react-js-and-associated-bits/\">Reaction to React JS and Associated Bits</a>” and then last week in my article “<a href=\"/test-driven-learning-an-experiment/\">Test Driven Learning</a>”. </p>\n<p>In the first article, I mentioned that if you use React JS, you’ll probably end up using the Flux design pattern and since there are multiple ways of implementing flux, getting a clear definition of what it is and how it should work can be confusing.  At least, I found it confusing.</p>\n<p>And now that I’ve figured it out, I thought it might be helpful both to myself and to the programming community at large if I offered my own Explanation of the Flux Pattern.  At the very least, it will give me one more way of solidifying the concept in my own brain.  Maybe it will be helpful to you as well.</p>\n<figure>![](/uploads/2016/03/image-5.png \"Flux\")<figcaption>Photo credit: [jeffreagan](//www.flickr.com/photos/jeffreagan/22033828931/) via [VisualHunt.com](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Flux-“One-Way-Data-Binding”\"><a href=\"#Flux-“One-Way-Data-Binding”\" class=\"headerlink\" title=\"Flux “One Way Data Binding”\"></a>Flux “One Way Data Binding”</h2><p>One of the first concepts you’ll hear when you start to learn Flux is that Flux implements “One Way Data Binding.”  This is unfortunate because if you start implementing Flux thinking it is any kind of data binding, you are already headed in the wrong direction.  Data binding holds with it this concept that things will happen automatically and declaratively.  Neither is true in the Flux world.  In fact, the reason Flux exist at all is because, in the Flux world, control over what happens when is the reason for its existence.  So, forget data binding.  Flux is “One Way Data Flow”.</p>\n<h2 id=\"Pub-x2F-Sub\"><a href=\"#Pub-x2F-Sub\" class=\"headerlink\" title=\"Pub&#x2F;Sub\"></a>Pub&#x2F;Sub</h2><p>Flux is heavily reliant on the pub&#x2F;sub model.  Pub&#x2F;sub is short for Publish&#x2F;Subscribe.  This comes from the real world.  You subscribe to a newspaper, or magazine, or… whatever.  Every time the thing you subscribe to is published, you get it.</p>\n<p>It is no different in Flux.  An object will subscribe to another object.  Anytime the second object does something worth publishing, the first object gets notified. </p>\n<p>The beauty of implementing a system in this way is that the publisher doesn’t need to know anything about the subscribers.  If there is a subscriber, the subscriber gets notified.  If there is no subscriber, nothing happens.  The subscriber does need to know something about the publisher so that he can say he wants to know when something is happening.  While you might thing this would create a tight coupling between the two, it doesn’t have to.</p>\n<h2 id=\"Singletons\"><a href=\"#Singletons\" class=\"headerlink\" title=\"Singletons\"></a>Singletons</h2><p>There is a pattern in object oriented programming called “Singletons.”  Just like the name implies, this means there is only one object of that type in the system.  Some people consider Singletons evil.  But the benefit, especially in the Flux world, is that finding an instance of the object is easy.  You just ask for it.</p>\n<h2 id=\"Flux-Dispatcher\"><a href=\"#Flux-Dispatcher\" class=\"headerlink\" title=\"Flux Dispatcher\"></a>Flux Dispatcher</h2><p>The Dispatcher is the central Flux object.  If you are using the Flux implementation from Facebook, your Dispatcher object will extend the Dispatcher class.  There really isn’t much too it, and you may be able to get away with just using the Dispatcher class directly.  But I create a new derived object so I can extend it if I need to.</p>\n<p>Everything in the system that needs to know when something interesting happens in the view layer of your code, subscribes to the dispatcher.  And anytime something happens in the view layer that other objects in your system might want to know about, the dispatcher is called with a message telling it what action we are looking to perform.</p>\n<p>So, in the demo app I am building, when the main view loads, the componentWillMount() method in my view sends the dispatcher a message telling it that it is looking for a list to display.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">AppDispatch</span>.<span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">actionType</span>:<span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  On the other end of this request, I have a store that has registered with the dispatcher.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">AppDispatcher</span>.<span class=\"title function_\">register</span>(<span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(action.<span class=\"property\">actionType</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>:</span><br><span class=\"line\">            store.<span class=\"title function_\">list</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that I am using “enumerations” to keep the code clean.  The reality is the ActionTypes are just strings.</p>\n<h2 id=\"Flux-EventEmitter\"><a href=\"#Flux-EventEmitter\" class=\"headerlink\" title=\"Flux EventEmitter\"></a>Flux EventEmitter</h2><p>We have notifications flowing down to our store to tell it we need some information or want it to do something, like save the data.  But once that is complete, how do we let the view know that the information it needs to display has changed? Well, it is actually very similar.  The view tells the store, “Hey, any time you do something interesting with the data, let me know.</p>\n<p>So, once again we setup a Pub&#x2F;Sub relationship.  This time, the store is the publisher and the view is the listener.  So, in our view, we’ll setup the listener by adding it to our componentWillMount() method</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentWillMount</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">CrudStore</span>.<span class=\"title function_\">addChangeListener</span>(self.<span class=\"property\">onChange</span>);</span><br><span class=\"line\">    <span class=\"title class_\">AppDispatc</span></span><br><span class=\"line\">    <span class=\"string\">``</span><span class=\"string\">`h.dispatch(&#123;actionType:ActionTypes.CRUD_LIST&#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">And in our store, our list() method (in this case) will send the message.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</span><br><span class=\"line\"><span class=\"title function_\">list</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    superAgent.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/contact&#x27;</span>).<span class=\"title function_\">end</span>(<span class=\"function\">(<span class=\"params\">error,response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!error)&#123;</span><br><span class=\"line\">            response.<span class=\"property\">body</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                item.<span class=\"property\">id</span> = item.<span class=\"property\">_id</span>;</span><br><span class=\"line\">                item.<span class=\"property\">dob</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(item.<span class=\"property\">dob</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">emitChange</span>(<span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’m using superAgent here to make an ajax call that will get me the list.  When it returns, I call emitChange which will eventually call the callback I passed in from the view to tell the view that something changed.</p>\n<h2 id=\"Push-vs-Pull\"><a href=\"#Push-vs-Pull\" class=\"headerlink\" title=\"Push vs Pull\"></a>Push vs Pull</h2><p>Now, there seems to be two minds about how this all should work.  Do you just notify the view that something happened and let the view go get the data it needs?  Or do you pass the data the view will need along with the notification? It would seem to me that while either one will work, if we think of Flux as “One Way” data flow, or even One Way data binding, it makes a lot more sense to push the data around.  And so, what you’ll see me do in the callbacks that live in my view code, is that they will receive the data and push it into the view state.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onChange</span>(<span class=\"params\">type,data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">CRUD_LIST</span>)&#123;</span><br><span class=\"line\">        self.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">data</span>: data.<span class=\"property\">body</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Visually\"><a href=\"#Visually\" class=\"headerlink\" title=\"Visually\"></a>Visually</h2><p><img src=\"/uploads/2016/03/image-6.png\" alt=\"image\" title=\"image\"> The arrows represent the direction of data flow.  You can assume that if the data is flowing to something, there was a corresponding listener setup.</p>\n<p>The top windows represent the view.  The cog represents the dispatcher (you can see that it sends the notification to everything) and the disks represent the data stores.  You should note that the dispatcher notifies all of the stores because there is only one dispatcher to listen to.  Finally, since not all of the views care about all of the stores, I send notifications to particular views that care.</p>\n<p>There may be cases where you would have something at the store level that isn’t, technically, a store.  That’s OK.  But I think 99% of the time, you’ll end up having stores be thing thing that the dispatchers send information to.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I have not given a lot of implementation details here because what I wanted to convey was the overarching concept behind Flux.  Once I’ve finished my reference app for this, I may go into more detail at the implementation level.  Don’t forget to sign up for the newsletter so you don’t miss anything.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "flux"
            ]
        },
        {
            "id": "http://davembush.github.com/reactions-to-react-js-and-associated-bits/",
            "url": "http://davembush.github.com/reactions-to-react-js-and-associated-bits/",
            "title": "Reactions to React JS and Associated Bits",
            "date_published": "2016-03-17T12:30:00.000Z",
            "content_html": "<p>I’ve been learning React JS over the last several weeks.  Currently, I now know 4 of the major JavaScript frameworks: Angular 1, Angular 2, EXTjs (4.2 – 6.0.1), and now React JS.  To be clear, I also know Knockout and JQuery.  But I don’t consider these frameworks so much as libraries.  They’ve helped me understand the principles used in the frameworks, but they are not frameworks.  What follows is a summary of what I consider React’s strengths and weaknesses.</p>\n<p><img src=\"/uploads/2016/03/image-3.png\" alt=\"React JS\" title=\"React JS\"> Photo credit: <a href=\"//www.flickr.com/photos/steffen-fam-pics/5472880836/\">kristin osier</a> via <a href=\"//visualhunt.com\">VisualHunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-React-JS\"><a href=\"#What-is-React-JS\" class=\"headerlink\" title=\"What is React JS?\"></a>What is React JS?</h2><p>To be fair, React JS is one of those frameworks that borders on being considered a library.  This is because React itself is only concerned with the presentation layer of your JavaScript code.  However, as I learned over the last several weeks, if you are going to use React JS properly, you’ll also end up using some kind of Flux pattern.  You’ll also need some way of making AJAX calls.  And while each of these are separate decisions you’ll need to make about which library you want to use for these parts of the stack, they are all part of the React coding philosophy.  So React, the philosophy, is more like a framework. React JS, the library, is more concerned with presentation.  And what most people will tell you about React JS is that any DOM changes it makes are all made to a Virtual DOM instead of writing directly to the DOM.  By doing this, screen updates can be bundled into one change and are only made when they are needed.  This is in contrast to most other libraries that allow you to write to the screen directly. As I’ve written before, <a href=\"/javascript-performance-tweaks/\">the fewer times you can update your DOM from your JavaScript, the better performance you will see</a>.</p>\n<h2 id=\"React-JS-Pros\"><a href=\"#React-JS-Pros\" class=\"headerlink\" title=\"React JS Pros\"></a>React JS Pros</h2><p>So the first main benefit to using React JS is that you gain better performance because you aren’t writing directly to the DOM when you make a change to the presentation layer.</p>\n<p>But, that isn’t what I would consider the best benefit of using React JS.</p>\n<h3 id=\"Turtles-All-The-Way-Down\"><a href=\"#Turtles-All-The-Way-Down\" class=\"headerlink\" title=\"Turtles All The Way Down *\"></a>Turtles All The Way Down <a href=\"//en.wikipedia.org/wiki/Turtles_all_the_way_down\">*</a></h3><p>You see, the reason that React JS can avoid writing to the screen directly is because it puts all of the presentation code in JavaScript using a syntax called ‘JSX’.  Now, as several places I was learning React JS from pointed out, this isn’t as ‘wrong’ as it sounds.</p>\n<p>In Angular, for example, we are accustom to putting JavaScript in our HTML.  Here, we are putting HTML in our JavaScript.  In both cases, the View layer is separate from our business logic or data access (or should be) so we have not violated the Single Responsibility Principle in any way using either approach.</p>\n<p>However, have you tried to unit test code you’ve placed in your HTML?  It is not easy, although I think I have a way that might make that easier now that I’ve done some work with React JS.  But, because everything is JavaScript, it is very easy to mock out a child component and actually Unit Test the presentation layer one component at a time.  In fact, if you concentrate on testing as you go, you will be forced to create very small components that you then compose into your pages.</p>\n<p>In fact, it is the testing story that makes React JS my preferred framework right now.</p>\n<h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><p>And while we are on the subject of testing, you might wonder how you test presentation layer stuff.</p>\n<p>The React JS guys have created a test framework based on Jasmine called Jest.  The extensions in Jest let you render a component into a “fake DOM” using JSDom.  From there you can test to make sure the HTML you were expecting got rendered correctly and fire events and test to make sure that what you expected would happen actually happened.</p>\n<p>What it doesn’t do is let you know that the component rendered in the way that you were expecting.  There are other, higher level tools, that are already available to do that.</p>\n<h3 id=\"Super-Loose-Coupling\"><a href=\"#Super-Loose-Coupling\" class=\"headerlink\" title=\"Super Loose Coupling\"></a>Super Loose Coupling</h3><p>The React JS community refers to this feature as “One Way Databinding” and of all the concepts I had to figure out while I was learning how to program using React JS, this was probably the hardest to get my head around.</p>\n<p>When you first hear, “One Way Databinding” you immediately start thinking, “How does that even work?  Eventually data has to get from the view down to the database and from the database back up to the view.  That’s two ways.”  But what they actually mean by “Two Way Databinding” would better be described as “Event Based Data Flow” or at least “Circular Data Flow” In very simple terms, the View fires an event to a “Dispatcher” which is a singleton.  Each repository, or data store, or model (just depends on what you want to call it) registers a listener with the “Dispatcher” that lets the dispatcher know that it wants to know whenever something significant happens.  These repositories are also singletons.  When the Dispatcher receives a notification from a View, it notifies all of the listeners in turn.  The listeners look at the message they receive from the dispatcher to see if it is something they care about.  If it is, they process the message accordingly.  Once they are done, they fire an event to each ControllerView that has registered a listener with them.  The ControllerView then updates the view based on the information it was passed in the event.</p>\n<p>I don’t want this to get too far down the road of “How” but to make the above paragraph just a bit clearer.  There is a top level View item that does no rendering.  It is only responsible for responding to event notifications and passing the data down into the child views.  You may hear this referred to as a ViewController, but it is more accurately a ControllerView.</p>\n<p>Because everything is basically an event (yeah, I know, not really an event in the strictest sense of the word) we can test each layer independent of the other.</p>\n<h3 id=\"More-Control\"><a href=\"#More-Control\" class=\"headerlink\" title=\"More Control\"></a>More Control</h3><p>The final major advantage that I can see with using the React coding philosophy is that you have a lot more control over when things happen.  No longer are you at the mercy of how and when the framework you are using decides to update values.  If you need to update a value or update the screen, you can do that when you want to, as you want to.</p>\n<p>And, because the only framework you are locked into when you are using React is the React JS framework, if you want to use some other implementation of Flux or AJAX, you can use whatever works for your situation.</p>\n<h2 id=\"React-JS-Cons\"><a href=\"#React-JS-Cons\" class=\"headerlink\" title=\"React JS Cons\"></a>React JS Cons</h2><p>With all of what I like about React, there are some things that almost made me give up.</p>\n<h3 id=\"Documentation\"><a href=\"#Documentation\" class=\"headerlink\" title=\"Documentation\"></a>Documentation</h3><p>The week prior to learning React, I learned Angular 2.  I got spoiled.  I have to say, the Angular world seems to have MUCH better documentation.  Maybe this is because they’ve kept things relatively the same between major releases.  So you know, “this documentation belongs to this version.”  As I was learning React, I was never sure if what I was reading or what I was learning was currently the way things worked today.  Even on the main site, the documentation doesn’t seem to be up to date.  I’m pretty sure I could have learned a lot faster if I hadn’t tried to write Unit test at the same time.  Jest is where the documentation seems to be the weakest.  But I had challenged myself to approach learning React in a way different from what I normally do.</p>\n<p>You see, normally, I use the excuse that “I don’t know the framework yet.” as a reason why I shouldn’t write Unit Tests as I go.  But this time, I decided that writing Unit Tests would be part of the learning.  So, before I could write my first view, I needed to be able to write my first test.  And that is when I realized this was going to take a little longer than I was used to.</p>\n<h3 id=\"Not-Highly-Opinionated\"><a href=\"#Not-Highly-Opinionated\" class=\"headerlink\" title=\"Not Highly Opinionated\"></a>Not Highly Opinionated</h3><p>OK, this one could go both ways.  Not being opinionated might be considered a good thing, and I addressed that above.  But, not having one right way to do something is going to be an issue for most large organizations.  In some organizations even Angular, which I would consider pretty opinionated, isn’t opinionated enough.</p>\n<p>But, because React isn’t opinionated, and there is no clear direction in the documentation on how to DO Flux, you can end up getting multiple opinions on how to code Flux as you learn from multiple people.  Which can be confusing.</p>\n<p>If you decide to go with React, just realize that you’ll need someone on your team who REALLY understands React and can make these decisions for your organization.  In my view, at the corporate level (vs the individual level) someone has to impose architecture OR you need to use a tool that has already imposed it.</p>\n<h3 id=\"Do-You-Know-React\"><a href=\"#Do-You-Know-React\" class=\"headerlink\" title=\"Do You Know React?\"></a>Do You Know React?</h3><p>Similar to the opinionated issue but different enough that we should break it out.</p>\n<p>If I put React on my resume.  What does that mean?  What will the hiring manager expect?  He’s been told that the application uses React.  So, he’s looking for a React guy.  But that isn’t all this guy is going to know.  And frankly, React is the easy part to learn.  Is he looking for a guy who knows the React philosophy?  What exactly is the React philosophy? For example, as I was learning, one of the guys was proposing that the store would notify the view that the data had changed, at which point the view would pull from the store.  But, why not just send the data to the view as part of the notification?  Wouldn’t that more loosely couple the architecture?  Both ways are using a React philosophy.  But, I would hope, that only one way is the way that is implemented at any one organization.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Unfortunately, it will be a while before I can actually use React on a real project.  But knowing React, especially the testing end of it, has already influenced the project I am currently working on.  I need a few more weeks yet to make sure there aren’t any snags in how I am doing things, but you can bet the influence will show up in future post.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "flux"
            ]
        }
    ]
}