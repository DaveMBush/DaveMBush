{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"dependency injection\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/",
            "url": "http://davembush.github.com/dependency-injection-frameworks-are-not-dependency-injection/",
            "title": "Dependency Injection Frameworks Are NOT Dependency Injection",
            "date_published": "2015-03-12T11:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/02/land-0148.jpg\" alt=\"land-0148\" title=\"land-0148\"></p>\n<p>As you start your journey down the road of Unit Testing you will discover that part of what makes code testable is this concept of <a href=\"//en.wikipedia.org/wiki/Dependency_injection\" title=\"Dependency injection\">Dependency Injection</a>.  As you explore further, you will see people mentioning various Dependency Injection frameworks.</p>\n<p>You may naturally assume that to implement Dependency Injection, you will need to select an use a Dependency Injection framework.</p>\n<p>But, Dependency Injection has nothing to do with using a Dependency Injection framework.  The frameworks are there because:</p>\n<ol>\n<li> much of our existing code is code that has too many dependencies and the framework helps us break those dependencies without having to refactor too much of our code and</li>\n<li>to give us a way to easily swap out one object for another when our code is structured in such a way as to not have dependencies at all.</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"So-what-then-is-Dependency-Injection\"><a href=\"#So-what-then-is-Dependency-Injection\" class=\"headerlink\" title=\"So, what then is Dependency Injection?\"></a>So, what then is Dependency Injection?</h2><p>I once heard this maxim that explains it best,</p>\n<blockquote>\n<p>Classes should either create stuff, or do stuff, but no one class should do both.</p>\n</blockquote>\n<p>Much of our code looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReceiveSAMLResponse</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">out</span> SAMLResponse samlResponse,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">out</span> String relayState</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Receive the [SAML](//en.wikipedia.org/wiki/Security_Assertion_Markup_Language &quot;Security Assertion Markup Language&quot;) response over the</span></span><br><span class=\"line\">    <span class=\"comment\">//specified binding.</span></span><br><span class=\"line\">    XmlElement samlResponseXml;</span><br><span class=\"line\"></span><br><span class=\"line\">    ServiceProvider.ReceiveSAMLResponseByHTTPPost(</span><br><span class=\"line\">        HttpContext.Current.Request,</span><br><span class=\"line\">        <span class=\"keyword\">out</span> samlResponseXml, <span class=\"keyword\">out</span> relayState);</span><br><span class=\"line\">    SAMLResponse resp = <span class=\"keyword\">new</span> SAMLResponse(samlResponseXml);</span><br><span class=\"line\">    XmlElement samlAssertionElement =</span><br><span class=\"line\">        resp.GetSignedAssertions()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Verify the response&#x27;s signature.</span></span><br><span class=\"line\">    XmlDocument doc = <span class=\"keyword\">new</span> XmlDocument();</span><br><span class=\"line\">    <span class=\"comment\">//metadata file path (holds the description key).</span></span><br><span class=\"line\">    doc.Load(HttpContext.Current.Server.MapPath(<span class=\"string\">&quot;~/SAML.xml&quot;</span>));</span><br><span class=\"line\">    XmlElement root = doc.DocumentElement;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SAMLAssertionSignature.Verify(</span><br><span class=\"line\">        samlAssertionElement, ReadMetadata(root)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        samlResponse = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        relayState = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Deserialize the XML.</span></span><br><span class=\"line\">    samlResponse = <span class=\"keyword\">new</span> SAMLResponse(samlResponseXml);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Yes, this is real code from a system I worked on.  The original code was written three or four years ago and this specific code is code I was given by another company.  I just used copy and paste inheritance to get it working in our code.</p>\n<p>That’s not to say I haven’t written code that has just as many problems.</p>\n<p>There are several things that are wrong with this code, but for now all I want to focus on is the Dependency Injection issue.</p>\n<p>All this code is trying to do is to deserialize the encrypted samlResponse object that was posted to the login form.  At least this code isn’t in the login form!  It has that much going for it.</p>\n<h2 id=\"But-here-are-places-where-it-is-dependent-on-too-much\"><a href=\"#But-here-are-places-where-it-is-dependent-on-too-much\" class=\"headerlink\" title=\"But here are places where it is dependent on too much:\"></a>But here are places where it is dependent on too much:</h2><ul>\n<li>ServiceProvider is a static class and called directly.</li>\n<li>ReceiveSAMLResponseByHTTPPost is dependent on the Request object that we retrieve from HttpContext.</li>\n<li>I create a new SAMLResponse object right before I call GetSignedAssertions()</li>\n<li>I create a new XmlDocument object so I can load the SAML.xml file</li>\n<li>SAMLAssertionSignature is static and called directly</li>\n</ul>\n<p>In fact, this method is one huge dependency mess.  And I’m very aware of the mess that it is in because the company we wrote this code for just recently switched providers.  As we tried to get this working, I had no way of testing this code in isolation without adding code directly into this method.  We got it working, but it didn’t have to be that hard.</p>\n<h2 id=\"So-here’s-what-I’d-do-to-this-code\"><a href=\"#So-here’s-what-I’d-do-to-this-code\" class=\"headerlink\" title=\"So, here’s what I’d do to this code.\"></a>So, here’s what I’d do to this code.</h2><ul>\n<li>Since ServiceProvider and SAMLAssertionSignature are calls to a third party API, I would wrap them in a none static class that I can instantiate.</li>\n<li>I would have the class that ultimately calls this method either pass in the dependent objects to the constructor, pass them in to the method that calls this, or set properties in the class.  This is what it means to inject dependencies.</li>\n<li>I would look for some way to avoid creating a new SAMLResponse object.  I’m not looking at the API documentation, but it would be great if I could new up the object and call a method, or set a property to give it the samlResponseXml variable.  If I had to, I’d probably wrap SAMLResponse in another class so that I could gain this functionality.</li>\n<li>Finally, I would make each of the dependent object based on an interface so that I could swap them out.  In the case of some of these classes, I may need to wrap them in another class that I have control over so that I can implement an interface.  For example, as things stand, I would not be able to create a fake request object because Request is a system class that does not implement an interface.</li>\n</ul>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>After making all of these changes, I would be able to create a test harness for this code, create fake versions of the objects, and verify that this method does what we intend for it do.</p>\n<p>Where this would have been particularly helpful is over this last week when we were trying to get this all working with the new provider.  In that case, I could have faked out the request object with what they were sending us and run it through a debugger to figure out what wasn’t quite right.</p>\n<h2 id=\"No-Dependency-Injection-Framework\"><a href=\"#No-Dependency-Injection-Framework\" class=\"headerlink\" title=\"No Dependency Injection Framework\"></a>No Dependency Injection Framework</h2><p>Finally, you’ll notice that no where in this code did I have to use a Dependency Injection framework to get this all working.</p>\n",
            "tags": [
                "tdd",
                "test driven development",
                "testing",
                "dependency injection"
            ]
        },
        {
            "id": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "url": "http://davembush.github.com/software-architecture-without-test-driven-development-is-dangerous/",
            "title": "Software Architecture without Test Driven Development is DANGEROUS!",
            "date_published": "2015-01-29T12:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/01/TddImpactsSoftwareArchitecture.png\" alt=\"TDD Impacts Software Architecture\" title=\"TddImpactsSoftwareArchitecture\"></p>\n<p>I’ve had two incidents recently that have shown me how TDD impacts Software Architecture.  Both of these are with code I’m working on.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Software-Architecture-Might-Do\"><a href=\"#What-Software-Architecture-Might-Do\" class=\"headerlink\" title=\"What Software Architecture Might Do\"></a>What Software Architecture Might Do</h2><p>Software architecture might specify how it is put together at a very high level.  For example, software architecture might specify that we use a three tiered approach or an n-tiered approach.  This approach places our view code is at one level, our business rules are at another level, and our data access at yet a third level.</p>\n<p>Software architecture might specify that we use MVC where our business rules are in the model, and a controller communicates between the view and the model to get data between the two.</p>\n<p>It might specify MVVM. This would have the view model take the place of the controller and manage the state information for the view.</p>\n<p>Software architecture might also tell us we should use MVP, giving the presenter the role of the controller and managing state information for the view and communicating with the business rules.</p>\n<p>But none of these patterns tell us how to write maintainable code.  They only tell us about the general software architecture.  This is like having a sketch of a house without a wiring or plumbing plan.</p>\n<h2 id=\"When-the-view-gets-in-the-way\"><a href=\"#When-the-view-gets-in-the-way\" class=\"headerlink\" title=\"When the view gets in the way\"></a>When the view gets in the way</h2><p>So, if you’ve been following this blog for a while, you may remember that I’m working with EXTjs.  Specifically, I’m working with EXTjs 4.2.  This has what Sencha calls an MVC architecture.  The problem is, what they refer to as the “Model” we would all recognize as a “Record” in a table, and their Controller is tightly coupled to their View.  That is, they call this MVC, but no one who understands what MVC is supposed to look like as a design pattern would recognize Sencha’s MVC as the real MVC design pattern.</p>\n<p>This makes the code incredibly hard to test.  The tendency is to write code that is highly dependent on the view.  The view is dependent on the DOM.  Rendering the view takes quite a bit of time.  So any test of your business rules end up taking an incredibly long time to test because they ultimately cause DOM manipulation to occur.</p>\n<p>It isn’t until you decide to borrow a bit of architecture from Angular that you realize that your business rules should be separate classes.  Angular has “Service Classes.” My Service classes are built specifically so they do not rely on anything else.</p>\n<p>By doing this, I was able to get two thirds of my code under test that run in about a second.  Prior to this, they took a half an hour.</p>\n<p>My next task was to get the view and my logic for enabling and disabling controls on the view more loosely coupled.  This was a bit more difficult because enabling and disabling controls is, naturally, a view thing.</p>\n<p>But again, taking a page from another framework, this time Knockout and Angular, I created a ViewModel.  My ViewModel holds the state of my view separate from the actual view.  When the state changes, it fires an event that actually changes the view, but this will allow me to test my enable&#x2F;disable logic, along with other code in my system, without ever instantiating the view.  Under test, the events will fire and nothing will happen.</p>\n<h2 id=\"Avoiding-Dependencies\"><a href=\"#Avoiding-Dependencies\" class=\"headerlink\" title=\"Avoiding Dependencies\"></a>Avoiding Dependencies</h2><p>Now the structure  of my code looks something like the following: View – ViewModel – EnableDisableController – EnableDisableService I could have put the EnableDisableService code in the EnableDisableController, and many people would, but what I’ve found is that if I do that, it would be nearly impossible to UNIT test my Enable&#x2F;Disable logic.  Why?  Because I would be creating all of the objects I needed for the logic in the same class the logic is in.</p>\n<p>By breaking the logic code into it’s own class that takes the ViewModel as a construction parameter, I can create my own ViewModel that looks exactly like what I need it to look like so that I can test the logic with entirely known values.</p>\n<p>These are just two of the ways that code architecture is impacted by Test Driven Development.  I’m sure there are others.</p>\n",
            "tags": [
                "tdd",
                "mvvm",
                "mvp",
                "MVC",
                "dependency injection",
                "software architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/nunit-unity-dependency-injection-moq-and-private-fields/",
            "url": "http://davembush.github.com/nunit-unity-dependency-injection-moq-and-private-fields/",
            "title": "NUnit, Unity Dependency Injection, MOQ and Private Fields",
            "date_published": "2014-10-23T10:00:00.000Z",
            "content_html": "<p>I had an interesting puzzle to solve this week that I thought I would share with you in case someone else is looking for a similar solution. There was some code that I needed to test that ultimately called into the database. Since this is a UNIT test and all I was interested in testing was one specific function and the state of one specific field in another  object, I had neither the need, nor the desire, to let that call to the database happen.  Since MOQ is  my mocking framework of choice, I wanted to mock out the database object the method was using so that it would return whatever was expected without actually calling down into the database. There were several problems.  The first was that the database object is a private field in the class I was testing and it got created by the constructor.  Second, the code that needed to use the database object is passing the object by reference (using the “ref” keyword) so that I could no setup my class that needed that object to just ignore it. There were some other items I needed to inject, but they were pretty straight forward.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>But first, I realize that some purist out there is going to leave me a comment that says you shouldn’t use a Dependency Injection container in your unit test.  My answer to that is, yes, ideally, one should not do this.  But, not everything is ideal.  Not every project is a “green field” project (and in fact about 95% of them aren’t).  And in some cases there is so much technical debt involved that the best we can do is a hack.  Read, <a href=\"//www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=davmbusnetapp-20&linkId=2ULNYA2XTSEGDPLA\">Working Effectively with Legacy Code</a><img src=\"//ir-na.amazon-adsystem.com/e/ir?t=davmbusnetapp-20&l=as2&o=1&a=0131177052\"> for other illustrations of “hacks” to get code under test. So, there’s the problem.  It may not make a lot of sense yet, especially if you are not familiar with the tools.  So let’s walk through some code.</p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><p>The main method I wanted to test was hanging off a POCO class.  It is using what we call a “visitor” pattern (though I’m pretty sure this is not what the pattern is supposed to look like).  So we have an Accept() method hanging off of it that knows how to store the poco into the database. That method has a method it calls that hangs off a crud object called Create() that takes the POCO and a reference to the database. I want to mock the Create() method so that it never actually gets called.  The method should return the POCO as part of a list of the POCO’s type. Mocking out the crud object is pretty straight forward:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud = <span class=\"keyword\">new</span> Mock&lt;ICrud&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>and then registering it with the Unity DI container:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container.RegisterInstance(_mockCrud);</span><br></pre></td></tr></table></figure>\n\n<p>The real issue, and the main point of this post, is that when I wanted to call Create() what I needed to do was:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud.Setup(</span><br><span class=\"line\">    x =&gt; x.Create(It.IsAny&lt;IPOCOType&gt;(),</span><br><span class=\"line\">        <span class=\"keyword\">ref</span> It.IsAny&lt;IDatabaseType&gt;())</span><br><span class=\"line\">    .Returns(pocoList);</span><br></pre></td></tr></table></figure>\n\n<p>Which you can’t do. What you have to do instead is:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud.Setup(</span><br><span class=\"line\">    x =&gt; x.Create(It.IsAny&lt;IPOCOType&gt;(),</span><br><span class=\"line\">        <span class=\"keyword\">ref</span> _database))</span><br><span class=\"line\">    .Returns(pocoList);</span><br></pre></td></tr></table></figure>\n\n<p>And the only way this will work is if the _database variable is pointing to the same object that will ultimately get called. So, here is the magic that I used to make all that work. Reflection. The database object I needed was created as part of the constructor in yet another object that I pass into the Accept() method.  So, I create that object and then use reflection to get the instance of the database from it.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> visitor = <span class=\"keyword\">new</span> DataVisitor();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fieldInfo = visitor.GetType()</span><br><span class=\"line\">    .GetField(<span class=\"string\">&quot;_database&quot;</span>,</span><br><span class=\"line\">        BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(fieldInfo != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _database = (Database)fieldInfo.GetValue(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And now I can use the Setup code I’ve already specified. Hope that helps someone else.</p>\n",
            "tags": [
                "dependency injection",
                "nunit",
                "reflection",
                "unity"
            ]
        },
        {
            "id": "http://davembush.github.com/automated-web-application-functional-testing/",
            "url": "http://davembush.github.com/automated-web-application-functional-testing/",
            "title": "Automated Web Application Functional Testing",
            "date_published": "2014-04-01T17:01:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/03/WebTestingCloud.png\" alt=\"WebTestingCloud\" title=\"WebTestingCloud\"></p>\n<p>One problem we often have when performing application test is that if we are testing  applications that modify the database in some way, we can’t test without modifying the database.</p>\n<p>In an ideal world, one way you could deal with this issue is to create a test database that has known data.  But even then, you have to go through the effort of setting up the data prior to each test.</p>\n<p>To be clear, I’m not talking about unit test.  You should have unit test for most of your code.  I’ll handle what not to test in some other post.  But, at some point you will want to put together a suite of test that ensures that the application, as a whole, does what you expect it to do.</p>\n<p>So, the stated problem is this, “How do  we test a web application in such a way that we are always working with known data and in such a way that we do not ever modify the data in the database?”</p>\n<p>So far, I’ve not found a way that test the whole web application from the user interface down to the database.  But, I think I’ve found the next best thing.  Split the application in half between the view and the database and perform two, overlapping, integration test.  If both work, we can reasonably assume that the whole application works.</p>\n<h2 id=\"So-how-would-we-go-about-doing-this\"><a href=\"#So-how-would-we-go-about-doing-this\" class=\"headerlink\" title=\"So how would we go about doing this?\"></a>So how would we go about doing this?</h2><p>If you’ve designed your application correctly, you should have a seam somewhere in the center.  In my code it tends to either be at the business logic layer or at the data access layer.  What we want to do is to create a separate class, or set of classes that look just like the classes at that layer and swap them in while testing the top half of our application and use the real classes when testing the bottom half of the application and when using the application in production.</p>\n<p>We do this using dependency injection using your favorite dependency injection framework.  I’m not going to go into the details of dependency injection here.  Maybe some other day.  But this is a place where you would use it.</p>\n<h2 id=\"Test-the-top-half\"><a href=\"#Test-the-top-half\" class=\"headerlink\" title=\"Test the top half\"></a>Test the top half</h2><p>In the fake DAL or BLL classes, what you are going to do is return what amounts to hard coded values.  In a recent implementation, I stored the JSON representation of the values in a resource (RESX) file  using the parameters that were passed into the method call as keys so that I could retrieve that data. If you need to do an update, you will need to store that some place so that your test code can verify that it got passed down to the function that should have saved it to the database.</p>\n<p>By doing this, you can verify that your code from the presentation layer down to this seam works as it should.  Now we need to test the bottom half of our code.</p>\n<h2 id=\"Test-the-bottom-half\"><a href=\"#Test-the-bottom-half\" class=\"headerlink\" title=\"Test the bottom half\"></a>Test the bottom half</h2><p>This will be a bit easier.  What we do here is we have our test code run the code directly.  But, unlike when we run the code in production, we will wrap the code in transaction tracking starting with our setup method.  We turn on transaction tracking, get the database into the state that we need for testing, run our test, and then rollback the changes.  Assuming the transaction tracking works correctly, and we have to assume that our third party tools do, this test everything without modifying the database.</p>\n<p>Because we’ve tested both the top half of the code and the bottom half of the code, we now have a reasonable assurance that the code as a whole works as it should.</p>\n",
            "tags": [
                "application testing",
                "dependency injection"
            ]
        }
    ]
}