{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"estimating\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "url": "http://davembush.github.com/how-to-estimate-software-projects-like-a-pro/",
            "title": "How to Estimate Software Projects Like a Pro",
            "date_published": "2016-08-30T10:30:00.000Z",
            "content_html": "<p>We’ve all been there.  Either at the micro level or at the macro level.  Business wants to know, “How much is this going to cost me?”  And as software developers, we all know the answer is, “more than you were expecting.”  We also know that whatever number we give will probably be wrong for a number of reasons.  Chief among them is that no one really knows what they want until they see it.</p>\n<p>And yet, there has to be some way of providing business what they need and still allowing for unknowns.</p>\n<p>So what follows are a few tips on estimating that help you estimate software projects like a pro.</p>\n<figure>![](/uploads/2016/08/image-2.png \"How to Estimate Software Projects Like a Pro\") Photo via [Visualhunt](//visualhunt.com/photos/business/)</figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"You-Don’t-Know-What-You-Don’t-Know\"><a href=\"#You-Don’t-Know-What-You-Don’t-Know\" class=\"headerlink\" title=\"You Don’t Know What You Don’t Know\"></a>You Don’t Know What You Don’t Know</h2><p>This tends to be the most famous argument for not giving an estimate.  Or for giving an estimate that is all but meaningless.</p>\n<p>“My gut says this will take a month, so I’m going to say four months because I really have no idea.” Well, that might be a safe estimate, and you might be right.  But if the business is looking for a number to use for a budget, they are going to learn that you pad your estimates.  So, a better answer is, “Are you looking for a rough ballpark or are you basing your budget on this?” And if they say they need a somewhat accurate number, your answer should be, “I really don’t know enough about the project.  Could we break it down into its component parts?</p>\n<h2 id=\"Virtually-Walk-Through-the-Project\"><a href=\"#Virtually-Walk-Through-the-Project\" class=\"headerlink\" title=\"Virtually Walk Through the Project\"></a>Virtually Walk Through the Project</h2><p>This will work regardless of the project size and regardless of if it is just you or a team.</p>\n<p>Here’s what you need to do, once you’ve broken the project down into the component parts, ask yourself, “What is the next thing I would need to do to get this project moving?”  You write that down, come up with an estimate for how long that will take, and then ask yourself the question, “Assuming I’ve completed what I’ve listed so far, what is the next thing I need to do?”  And you just keep doing this until the project is (virtually) done.</p>\n<p>You want to be careful as you are doing this to:</p>\n<ol>\n<li><p>For estimating actual work at the programming level, make sure none of your tasks take more than 8 hours to complete.  I personally aim for 4 hours.  Even if you use story points instead of actual hours, I’m sure internally you have some idea of how many hours a story point represents for you.  Size the work accordingly.</p>\n</li>\n<li><p>For estimating at the more macro level, I recommend dividing the project into 2-man week chunks.  Basically a sprint.</p>\n</li>\n<li><p>Don’t forget the obvious</p>\n</li>\n<li><p>Setup time</p>\n</li>\n<li><p>Creating tests.</p>\n</li>\n<li><p>Bug fix time.</p>\n</li>\n<li><p>Broken dependencies</p>\n</li>\n</ol>\n<h2 id=\"Everything-takes-twice-as-long-as-you-think-it-will\"><a href=\"#Everything-takes-twice-as-long-as-you-think-it-will\" class=\"headerlink\" title=\"Everything takes twice as long as you think it will.\"></a>Everything takes twice as long as you think it will.</h2><p>This rule of thumb has served me well over the years.  But it isn’t a hard and fast rule.  It often depends on the client.  I switch clients frequently because I am a contract programmer.  If I’m new, I’ll provide estimates with the 2x multiple factored in.  But as I learn more about the people providing the requirements, I’ll tweak that factor appropriately.</p>\n<p>I had one product owner I worked with who I learned to provide a multiple of four to because I only heard half of what he was trying to communicate.  I’m not sure where the communication breakdown was, all I know is if I multiplied by four, I was much better at being able to manage his expectations.</p>\n<h2 id=\"Track-Everything\"><a href=\"#Track-Everything\" class=\"headerlink\" title=\"Track Everything\"></a>Track Everything</h2><p>Even if you implemented everything I’ve recommended, you are still likely to fail in the long term because you’ll never learn from your mistakes.</p>\n<p>So what might you track?  Well, at the personal level, you want to track how close your estimate was to reality.  Over time you’ll learn that you tend to be off by so much.  And as you learn to estimate and track, I would expect your estimates to account for more items so that your multiple gets closer to a factor of 1x than the 2x I recommended you to start with.</p>\n<p>At the more macro level, you want to track the team.  Please, don’t track individuals.  Let the individuals do that.  Provide training so they can get better.  But if you do the tracking for them, you’ll destroy moral.</p>\n<p>But you want to know, when the team says they can do X in a week, that probably means it is going to take a week and a half… or whatever it ends up taking.</p>\n<p>I’m working on a project now where, had I been the project manager, I would have doubled all the estimates I was given.  Oh well, they’ll find out soon enough.  Although I would have expected this particular PM to know better.</p>\n<p>You also want to track items you may have forgotten to put in your plan.  You’ll add this to your “estimation checklist” which I’ll discuss next.</p>\n<h2 id=\"Estimation-Checklist\"><a href=\"#Estimation-Checklist\" class=\"headerlink\" title=\"Estimation Checklist\"></a>Estimation Checklist</h2><p>You want to create a checklist that you can use to make sure you’ve covered everything that needs to be estimated.  Along with the items I included above, here are some others you might want to include:</p>\n<ol>\n<li>Database Refresh side effects – yes I know, each programmer SHOULD have their own copy of the database, but I’ve yet to work for an organization that does this.  Because we don’t have this on my current project, we’ve lost valuable morning time twice this week waiting for the database we are using to get updated.  At least we aren’t all working against the production database.</li>\n<li>Version Control Management – this includes branching, merging, pull request, and code reviews.</li>\n<li>Holidays and Vacations</li>\n<li>Any learning curves that must be mastered.</li>\n</ol>\n<h2 id=\"Management-Doesn’t-Like-the-Estimate\"><a href=\"#Management-Doesn’t-Like-the-Estimate\" class=\"headerlink\" title=\"Management Doesn’t Like the Estimate\"></a>Management Doesn’t Like the Estimate</h2><p>There have been a few times when the manager I’m working for doesn’t like the estimate I provide.  In my experience there are several reasons for this.</p>\n<p>First, and almost always, if I’m right, the project is going to take a lot longer than they expected, or longer than they’ve been told to do it in.</p>\n<p>Second, they are used to estimates that are half as long.  The problem isn’t that my estimates are wrong, but that their expectations have been set lower.</p>\n<p>What to do? Well, I take them to my list and show them where all the time is.  Because I can document where the time is going to be spent, I rarely have to do more than explain how I came to the estimate I did.</p>\n<p>If they still bulk, I simply have this conversation, me: “So, you think my estimates are high?” them: (yes).</p>\n<p>me: “Do your other programmers write tests for their code?”</p>\n<p>them: (no)</p>\n<p>me: “When you compare their time to the time I’ve said I’m going to take, do you account for bug fixes?”</p>\n<p>them: (no)</p>\n<p>me: “If you did account for the bug fixes, would their estimates be more or less accurate?”</p>\n<p>them: (less)</p>\n<p>me: “Do you believe the way I’ve proposed to complete this project will result in less bugs than you normally see?”</p>\n<p>Well, you get the point.  I’ve yet to have to have a conversation that went into that much detail.  And the more you track, the easier this conversation becomes because you can just say, “I’ve been tracking my estimates against reality now for N years and I’ve found that I normally am within X% of my estimate.</p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>There are a couple of tools I really like for estimating.  The first one is the Mind Map.  If you aren’t familiar with Mind Mapping, it is a way of just getting your ideas down on paper without having to worry about the structure or the order.  All you concentrate on is relationships.  This is a great way of breaking a project down into the smallest possible units of work.</p>\n<p>Once you have a mind map of your tasks, you can put the individual tasks into a Kanban Board.  You want a board that can provide the ability to attach estimates to the tasks and will show you a burn down&#x2F;up chart based on how much work you’ve completed.</p>\n<p>For Mind Mapping, I currently use <a href=\"//www.mindmup.com\">Mind Mup</a>.</p>\n<p>For Kanban, I use <a href=\"//trello.com/\">Trello</a> with <a href=\"//chrome.google.com/webstore/detail/plus-for-trello-time-trac/gjjpophepkbhejnglcmkdnncmaanojkf?hl=en\">Plus For Trello</a>.</p>\n<p>I wish there was a tool that married the two ideas.  That way I could use Mind Mapping for Epics, Stories, and defining tasks and I could use a Kanban board for tracking work.</p>\n",
            "tags": [
                "project management",
                "estimating"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-sabotage-estimates/",
            "url": "http://davembush.github.com/how-to-sabotage-estimates/",
            "title": "How to Sabotage Estimates",
            "date_published": "2016-08-23T10:30:00.000Z",
            "content_html": "<p>Over the last week, I’ve been helping other programmers estimate the task they’ve been assigned and this has caused me to reflect on how I estimate software.  What works.  What doesn’t.  What mistakes I see people make.</p>\n<p>There has also been a move to avoid estimates entirely.  The argument goes something along the lines of, “we know the least about a project at the beginning of the project, so we can’t really give an accurate estimate.”  Which is mostly true.  And yet, there are people who need to know “how much is this going to cost?”  What do we do for them?  How do we balance the two realities? And then all of this lead me to think of all the ways we sabotage our estimates, or our estimates are sabotaged for us.</p>\n<p>You might think that estimating projects only applies to project managers.  But the truth is, most places I have worked rely on programmers to give them estimates, and frankly, most of us screw this up.</p>\n<figure>![](/uploads/2016/08/image-1.png \"How to Sabotage Estimates\")<figcaption>Photo credit: [Musée McCord Museum](//www.flickr.com/photos/museemccordmuseum/2918567169/) via [Visual hunt](//visualhunt.com/photos/people/) / [No known copyright restrictions](//flickr.com/commons/usage/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Working-Backwards-from-a-Date\"><a href=\"#Working-Backwards-from-a-Date\" class=\"headerlink\" title=\"Working Backwards from a Date\"></a>Working Backwards from a Date</h2><p>This is the most obvious, I think, so we’ll get it out of the way first.  But it has some permutations that aren’t quite so obvious that we need to examine as well.</p>\n<p>Now, I get it.  There are some cases where there is a specific end date.  Something that is out of your control is happening on a specific date.  If you don’t deliver the software by that time, then you might as well not create it.  But, in that case, you have to take the golden triangle into consideration.</p>\n<ul>\n<li>You can have it on a specific date.</li>\n<li>You can do it all.</li>\n<li>You can do it within budget.</li>\n</ul>\n<p>Unfortunately, even each of these have limitations.</p>\n<ul>\n<li>You might be able to release something on a specific date, but it may not be all that was intended.</li>\n<li>Even if you could buy all of the resources you needed, which is hardly ever possible, there will be limitations to using all of the resources.</li>\n<li>If you have a limited budget, doing it all will probably suffer.</li>\n</ul>\n<p>This is where using Scrum has a huge advantage.  Because at least using Scrum, you are constantly picking the next most valuable feature to implement and each feature is released in a potentially deliverable state.  This is quite unlike the project I’m working on where components are being worked on that we can’t even really test because they get called by something that has yet to be built.  Grant it, they’ll eventually be needed to have a viable product, but it is really hard to argue they are the NEXT most valuable feature when they can’t even be tested.</p>\n<p>Now, if you are working backward from a date, this could work if you add more resources, or you cut features.  I’ve worked in some organizations that were really good about figuring out what could be done and making sure the client was on board with the fact that we would only deliver that much.  But there have been other organizations where every time I suggested we not deliver a feature, I’ve been given a hundred reasons why that couldn’t be done.  Needless to say, those projects are doomed.</p>\n<p>Working backwards from a date is largely a management issue or a client issue.  But as they ask programmers for dates in light of the date, I find programmers are inclined to try to give numbers they think their managers want to hear rather than what they expect can really be done.</p>\n<h2 id=\"Going-with-Your-Gut\"><a href=\"#Going-with-Your-Gut\" class=\"headerlink\" title=\"Going with Your Gut\"></a>Going with Your Gut</h2><p>The next most dangerous way of providing an estimate is to just go with your gut feel.  Here’s the thing about your gut.  It’s pretty optimistic.</p>\n<p>I find that everything takes about twice as long as I think it will.  I’ve worked for some people who I quickly learned were only describing half of the project.  In those cases, I’d be off by a factor of four.</p>\n<p>So, I’ve learned to compensate.  Whenever I’m asked for a “rough estimate” I always double whatever my gut thinks.  In some cases, I’ll pad even more.</p>\n<p>But the right thing to do would be to spend a few hours and break the project down into task that take less than a day.  Ideally you want to break those tasks down into half day sized tasks.  Once you have all of the tasks spelled out, you can add up the hours and you’ll have a pretty good idea of just how long the project will take you.</p>\n<p>If you are working in an office, don’t forget to account for meetings, helping others, and other tasks that tend to happen over the course of a week when you provide the date you plan to be done.  Otherwise, you’ll find you’ll end up having gotten the hours right but still end up being late.</p>\n<p>How do you break the plan down?  What I do is I ask a very obvious questions.  What’s the next thing I would need to do? Let’s assume we are starting a new feature.  If you were to sit down and code that feature right now, what is the next thing you’d have to do to code that feature?  It might be, “setup the programming environment” or “setup version control” or “get a test harness in place” or “create a branch from version control” it doesn’t matter that it might take a half an hour to do.   That’s actually good.  Just don’t let it be so big of a task that it is going to take you several days to complete.</p>\n<p>Next, assuming you’ve done the tasks so far, what is the next thing you’ll need to do.</p>\n<p>You just keep doing this until you have a set of task that fit within the half day sized and all fully describe the steps you will take to get the project done.  While breaking task down this way will get you a much more accurate number, I’ve found that I still need to double the time I think it will take.  Especially if I know little or nothing about the project I’m getting in to.  The more you learn about the project, the less padding you should need to do.</p>\n<h2 id=\"Don’t-Plan-for-the-Unknown\"><a href=\"#Don’t-Plan-for-the-Unknown\" class=\"headerlink\" title=\"Don’t Plan for the Unknown\"></a>Don’t Plan for the Unknown</h2><p>But in every project, there will still be some unknowns.  In fact, this past week, I hit one of those.  When I put it on my task list, I put it in as 8 hours figuring there would probably be some refactoring I’d need to do.  But when I got to it, what I found was that the refactoring project was a lot bigger than I had expected.</p>\n<p>In this case, the best thing to do is to raise this new information to the team and adjust your estimate based on the new information.</p>\n<p>At the end of the day, I don’t expect this will actually impact my delivery date because some of my other task are going faster than I was expecting, but I’m still adjusting my estimates to document the fact that it had to be done.</p>\n<h2 id=\"Forget-Who-Is-Asking\"><a href=\"#Forget-Who-Is-Asking\" class=\"headerlink\" title=\"Forget Who Is Asking\"></a>Forget Who Is Asking</h2><p>Most people I work for give me pretty accurate descriptions of the problem I’m going to work on.  I can safely double the amount of time I think it will take and I generally hit my dates.</p>\n<p>But occasionally, there is that client who only tells you half of what he’s actually thinking.  You’ll learn who that is in your life soon enough.  You can either complain that you didn’t get complete enough requirements.  Or you can plan on the requirements being incomplete and pad your estimates accordingly.</p>\n<p>Telling your client or manager (who is your client in most cases) that they did it wrong, may not be the most prudent way of dealing with this issue.  I opt for padding the estimates.</p>\n<h2 id=\"Working-from-a-Summary\"><a href=\"#Working-from-a-Summary\" class=\"headerlink\" title=\"Working from a Summary\"></a>Working from a Summary</h2><p>This kind of gets back to the last two points, but it needs to be called out separately.</p>\n<p>You see, most of the time you’ll be asked for an estimate with enough information to make the call.  But there are other times all you’ll have is a working summary.  I find it best in this case to give the person asking for the estimate such a wide estimate (1 – 8 hours) that it is worthless for anything other than a rough ballpark idea of how much effort the project will take and explain that I would need more information to give a better estimate.</p>\n<p>Most people are pretty understanding when you explain this correctly.  Whatever you do, don’t give a fixed number that you can’t adjust up and down as you discover more information.  In fact, even when you have more information, you should always give your estimates in terms of ranges of time.</p>\n<h2 id=\"Assume-it-Will-Work\"><a href=\"#Assume-it-Will-Work\" class=\"headerlink\" title=\"Assume it Will Work\"></a>Assume it Will Work</h2><p>Even the seasoned programmers make this mistake.  I know one guy who brags about how quickly he can write the code.  But he completely ignores the fact that while he spent a month writing the code, he’s spent three months getting it past the QA department.  So, did he really get the project done it a month?  Oh and those bugs?  God help you if you suggest those bugs are HIS fault! But, I find we all tend to do this in some way or another.</p>\n<p>All I want to say about this here is this.  You can either plan to test your code using some sort of test framework or you need to plan to fix bugs.  Which you plan for is up to you, but those of you who have followed my blog know I’m going to tell you that you’ll save a lot of time if you plan to write and execute tests.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I’m sure many of you could have written a post like this.  So, I invite you to add to it in the comments below.</p>\n",
            "tags": [
                "programming",
                "estimating",
                "software"
            ]
        },
        {
            "id": "http://davembush.github.com/are-we-there-yet/",
            "url": "http://davembush.github.com/are-we-there-yet/",
            "title": "Are We There Yet?",
            "date_published": "2014-06-26T17:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/06/StoryPoints.png\" alt=\"StoryPoints\" title=\"StoryPoints\">When my kids were young, my wife introduced a concept for this question that she got from her family that is so brilliant in its simplicity that I wonder that this isn’t common knowledge with all parents.  Something they should tell you during Lamaze class. When the kids asked, “Are we there yet?” Which they did very infrequently, we would answer, “Just a few more units.” If you think about it, it is just about as helpful as any other answer we could have given them, “Just a few more hours.”, “Just a few more miles.”, “Sure, get out of the car.” (While continuing to drive the car down the road.) Or “Does it look like we are there yet?” What does the child want to know?  Nothing, they are just expressing their displeasure at still being in the car.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Story-Points\"><a href=\"#Story-Points\" class=\"headerlink\" title=\"Story Points\"></a>Story Points</h2><p>Story Points remind me of “Just a few more units.”  While “Just a few more units,” had no real meaning, Story Points do have meaning, but they don’t answer the question, “how long until we are done?”  Story Points don’t represent time, they represent difficulty.  Given two stories, a story with 2 story points should be twice as difficult as a story with 1 story point assuming that everything is as it should be.  It does not take into account that the code might have technical debt that we need to deal with prior to actually implementing the story.  It doesn’t take into account which programmer is going to do the work.  It just says, “This story is this much easier or harder than that story.” How long will it take to complete the story?  “Just a few more units.” “But wait!”  You say, “How can anyone plan a project if they don’t know how long something is going to take? Well, I have two answers to that question.</p>\n<h2 id=\"How-Accurately-Do-You-Estimate\"><a href=\"#How-Accurately-Do-You-Estimate\" class=\"headerlink\" title=\"How Accurately Do You Estimate?\"></a>How Accurately Do You Estimate?</h2><p>First, if you look at how well you estimate projects now.  How’s that working for you? If you are a programmer, you might say, “Yeah, we hit the estimate every time.”  But do you?  I would be willing to bet that when you estimated a project, you had in mind that you would do a certain number of things.</p>\n<ul>\n<li>Collect the requirements</li>\n<li>Write a nice user interface</li>\n<li>Write clean backend code</li>\n<li>Have the application tested completely.</li>\n</ul>\n<p>What I suspect really happened is that you:</p>\n<ul>\n<li>Collect enough requirements to get going and made up a significant number of the rest.</li>\n<li>Wrote an adequate user interface</li>\n<li>Clean code?  No, you were just glad to get it all working.</li>\n<li>Testing?  We don’t have time for testing.</li>\n</ul>\n<p>So you didn’t meet your estimate, you adjusted you scope so you could meet a target date.</p>\n<h2 id=\"Estimates-Are-More-Accurate-Over-Time\"><a href=\"#Estimates-Are-More-Accurate-Over-Time\" class=\"headerlink\" title=\"Estimates Are More Accurate Over Time\"></a>Estimates Are More Accurate Over Time</h2><p>Now, if you use story points AND you concentrate on a well-established definition of done for each story.  The programmers can concentrate on writing quality code, and over time, management will learn how long a story point is on average. No, you’ll never know how long a story point will take for any one story.  But you will know that if you look at all of the stories we’ve done so far, a story point equals X amount of time. By doing this we achieve two major milestones.  First, we move the decisions about what to do or not do up to the management level.  Management will be able to see quickly that if we continue at the rate we are going, we will have a releasable product by such and such a date.  Second, the programmers can concentrate on writing good code rather than writing code that is simply adequate for today but ends up slowing them down in the future because they were too busy concentrating on delivering “on time.”</p>\n",
            "tags": [
                "scrum",
                "estimating",
                "story points"
            ]
        }
    ]
}