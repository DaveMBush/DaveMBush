{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"iis\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "url": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "title": "ASP.NET, Angular.js & html5mode",
            "date_published": "2015-09-24T11:30:00.000Z",
            "content_html": "<p>I’ve been looking at Angular.js recently.  I’ve already got enough of a project done in <a href=\"//www.mongodb.org/\">MongoDB</a> (with <a href=\"//mongoosejs.com/\">Mongoose</a>), <a href=\"//expressjs.com/\">Express</a>, <a href=\"//angularjs.org/\">Angular</a> and <a href=\"//nodejs.org/\">Node.js</a> (MEAN) to be comfortable with how Angular works.  But I wanted to give it a try using ASP.NET as the back end.  I’m always learning.  Always improving.</p>\n<p>To start out, I just setup an index.html page to hold my basic form as I got the basic look and feel going.  But as I progressed, I wanted to make sure I progressed, I wanted to add in the capability of using Angular’s html5mode for the client side routing.</p>\n<span id=\"more\"></span>\n\n<p>For those of you who are new to Angular, Angular is a client side JavaScript framework that will allow you to create web applications where much of the processing happens on the client side instead of the server side.  That’s cool enough.  But it also adds the ability to handle client side routing, just like ASP.NET’s MVC handles server side routing.  This allows you to have a client side “master page” that can suck in the differences from the server as it needs them based on the url that is in the address bar.  In fact, there is an extension that will let you have sub routes as far down as you need.</p>\n<p>Out of the box, Angular, and most other frameworks that implement client side routing, using the hash symbol to specify the route.  For example</p>\n<p>http:&#x2F;index.html#&#x2F;pathToRoute</p>\n<p>This allows the routing to work on older browsers.</p>\n<p>ASP.NET, Angular.js &amp; html5mode <img src=\"/uploads/2015/09/image3.png\" alt=\"image\" title=\"image\"> ASP.NET, Angular.js &amp; html5modeBut if you are working with newer browsers that support HTML5, you can avoid the hash tag and just create a route that looks like this:</p>\n<p>http:&#x2F;pathToRoute</p>\n<p>Which you have to admit, looks a whole lot nicer.</p>\n<p>But here is where the problems start.</p>\n<p>As soon as you implement html5mode on a site that is hosted in IIS or IIS express, you will get a 404 error because your initial request to the server is going to ask the server for a path that doesn’t exist.</p>\n<p>There are a few ways that you can take care of this.</p>\n<h2 id=\"Return-a-default-view-for-every-undefined-server-route\"><a href=\"#Return-a-default-view-for-every-undefined-server-route\" class=\"headerlink\" title=\"Return a default view for every undefined server route.\"></a>Return a default view for every undefined server route.</h2><p>One of the first suggestions you are likely to find suggest creating a default view for all routes that start with “&#x2F;angular&#x2F;”.</p>\n<p>This is a great start.  But here are my issues with it.  If I really want to use Angular the way it was intended to be used, I would prefer to not have to use MVC on the server side at all.  While not a huge hit, writing a razor page just to get my initial angular page up seems to be a bit of overkill.  There must be a way to do this without creating a *.chshtml file.  I also don’t want to have a sub directory for my page.  Why can’t I just go to <a href=\"//blog.dmbcllc.com\">http://blog.dmbcllc.com</a> as my default route?  And why can’t I just return a plain old html file?! Well, it turns out you can.  A slight modification of the “Return a default view” method is to have your controller return your html page.</p>\n<h2 id=\"Return-an-HTML-page-direct-from-the-controller\"><a href=\"#Return-an-HTML-page-direct-from-the-controller\" class=\"headerlink\" title=\"Return an HTML page direct from the controller.\"></a>Return an HTML page direct from the controller.</h2><p>If you dig a bit further, you’ll find that someone else has realized that you can just return your HTML directly from the controller.  The magic to this trick is all similar to what the guy in the original article did except for in the controller, instead of returning the view, he returns the html file that contains the main html.</p>\n<p>public ActionResult Index()<br>{<br>    return File(“~&#x2F;yourstartpage.html”, “text&#x2F;html”);<br>}</p>\n<p>And his main MVC route looks like this:</p>\n<p>routes.MapRoute(<br>      name: “Default”,<br>      url: “{*.}”,<br>      defaults: new<br>      {<br>        controller &#x3D; “Home”,<br>        action &#x3D; “Index”,<br>      }<br>  );</p>\n<p>This implementation has the added benefit that I’m not tied to a specific sub directory because it just says, “Any URL that doesn’t have a real file behind it should resolve to this default route.” Of course, you may be thinking, but what about the WEB API route, or any other routes I want in my system.  Well, just make sure this route comes first and you have other routes to cover the real routes you want to be able to support.</p>\n<p>Now, this gets past the objection I had with the first solution.  I no longer have to have a route.  But, why should I need to call the controller?  This is just a static HTML file we are talking about.  I should be able to by pass ASP.NET handling this file and just have IIS serve it up directly to me.</p>\n<h2 id=\"Use-the-URL-Rewrite-Module\"><a href=\"#Use-the-URL-Rewrite-Module\" class=\"headerlink\" title=\"Use the URL Rewrite Module\"></a>Use the URL Rewrite Module</h2><p>A little deeper digging on the search engines reminded me that  I could just setup the <a href=\"//www.iis.net/downloads/microsoft/url-rewrite\">URL Rewrite module</a> to return my main HTML page when no real page is available.  BTW, URL Rewrite is built into IIS Express, so it should work in your development environment if you are using IIS Express as well as under IIS with the module installed. The main step to getting this working is to add the following XML to your Web.config file:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;angularjs routes&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">stopProcessing</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;.*&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">conditions</span> <span class=\"attr\">logicalGrouping</span>=<span class=\"string\">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsFile&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsDirectory&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_URI&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;^/(api)&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Rewrite&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;/&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You should already have a system.webServer section in your web.config file, so you just need the rewrite rule inside of it.</p>\n<p>Basically what this rule does is that it says, “If you can’t find the file, and the path you are looking for is not a subdirectory of the “api” directory, return the default file at the root.”  The part about the API directory allows your WEB API stuff to continue working.</p>\n<p>The only other thing you will need to do, which isn’t unique to ASP.NET or MVC, is that you will need to remember to add the base tag to the HEAD section of your HTML file.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And all of your client side routing with HTML5 issues should be solved. Notice that no ASP.NET code has to run to get this working.  In fact, the only time you’ll need to run ASP.NET is to call the server for data.</p>\n",
            "tags": [
                "routing",
                "asp.net",
                "angular.js",
                "iis"
            ]
        }
    ]
}