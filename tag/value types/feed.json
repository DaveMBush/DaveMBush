{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"value types\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/string-and-stringbuilder/",
            "url": "http://davembush.github.com/string-and-stringbuilder/",
            "title": "String and StringBuilder",
            "date_published": "2014-12-11T12:00:00.000Z",
            "content_html": "<p>A couple of weeks ago, we discussed <a href=\"/value-type-vs-reference-type/\">Value types and Reference types</a> where we said that a reference type points to the value it represents and a value type is the value it represents. This has implications when we work with the assignment operator because when you assign a reference type and change the content of what it is pointing to, both variables get changed because they are both pointing to the same location in memory.  If you do this with a value type, only the one you change sees the change because you are working with a copy.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Is-String-A-Value-or-Reference-Type\"><a href=\"#Is-String-A-Value-or-Reference-Type\" class=\"headerlink\" title=\"Is String A Value or Reference Type?\"></a>Is String A Value or Reference Type?</h2><p>So, if you’ve done any work with the String class, you might think it is a value type, because if you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(a);</span><br><span class=\"line\">Console.WriteLine(b);</span><br></pre></td></tr></table></figure>\n\n<p>You will quickly discover that the values that get written out are: abc def Which is not what you’d expect if String is a reference type. So, the question we need to ask is, why is String acting like a value type if it is really a reference type?</p>\n<h2 id=\"Strings-Are-Immutable\"><a href=\"#Strings-Are-Immutable\" class=\"headerlink\" title=\"Strings Are Immutable\"></a>Strings Are Immutable</h2><p>The answer is that Strings are immutable.  That is, a string never changes.  And if you are a thinking person I can already hear you saying, “Sure they change, just look at this code…”</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(a);</span><br></pre></td></tr></table></figure>\n<p>“See, I changed the string variable a from ‘abc’ to ‘def’” And yes, you did change the a variable.  But what did you change?  You didn’t change “abc” to “def” you change what a was pointing to.</p>\n<p>You see, “abc” is the object of type string and “def” is an object of type string.  All you managed to do was change what a was pointing to. In fact, if you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The result is exactly the same as if you’d written:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> a = b;</span><br></pre></td></tr></table></figure>\n\n<p>Because in .NET, there is only one instance of any given string in the system.  The duplicates get optimized out.</p>\n<h2 id=\"String-Concatenation\"><a href=\"#String-Concatenation\" class=\"headerlink\" title=\"String Concatenation\"></a>String Concatenation</h2><p>Now all of this has implications when it comes to concatenation. Let’s say you write this code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> c = a + b;</span><br></pre></td></tr></table></figure>\n\n<p>What’s happening here? First we create a string object that contains “abc” and point the a variable to it.  Then we create another string object that contains “def” and point the b variable to it.  And now this is where strings get interesting because the next thing that happens is that a NEW string object is created that contains “abcdef” and we point the c variable to that new value. Now, if you think about this for a minute, you’ll understand that this is incredibly inefficient.  Creating new objects is one of the most expensive operations that anyone can do is just about every object oriented language we have available.  In fact, I can’t think of one where this is not true.  I’m just assuming there must be an exception to the rule. It would be much more efficient if we were to make string so that it wasn’t immutable.  This would mean we could skip the create new object part of the assignment and our concatenation operations would work much faster.</p>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><p>Enter StringBuilder.  StringBuilder is, essentially, the mutable version of the String class.  Now you can write code that looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> b = <span class=\"string\">&quot;efg&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">string</span> c = <span class=\"string\">&quot;hij&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> StringBuilder(a);</span><br><span class=\"line\">d.Append(b);</span><br><span class=\"line\">d.Append(c);</span><br><span class=\"line\"><span class=\"built_in\">string</span> e = d.ToString();</span><br></pre></td></tr></table></figure>\n\n<p>Note, at the end, we still have to convert our StringBuilder object to a String object using ToString().  So, there is a new object creation penalty there.  What this means is that you probably don’t want to use a StringBuilder unless you are appending to a string more than three times. So, there you go.  That’s the difference between String and StringBuilder, why a String looks like a value type, and when you should use StringBuilder instead of String.</p>\n",
            "tags": [
                "string",
                "reference types",
                "stringbuilder",
                "value types"
            ]
        },
        {
            "id": "http://davembush.github.com/value-type-vs-reference-type/",
            "url": "http://davembush.github.com/value-type-vs-reference-type/",
            "title": "Value Type vs Reference Type",
            "date_published": "2014-11-27T12:00:00.000Z",
            "content_html": "<p>It is amazing to me how few programmers understand the fundamentals of how variables work.  Not just in .NET or C# specifically, but in every language they work in.  It amazes me for two reasons.  First, I don’t think I could program if I didn’t understand what was physically happening as a result of the code I was writing.  Not knowing how the variables relate to the memory that they use would be, to me, a major limitation.  But it also amazes me because I don’t think anyone can program intelligently until they do know what is happening. So, I’ll start from the outside and move in to what’s happening in memory.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-A-Value-Type\"><a href=\"#What-is-A-Value-Type\" class=\"headerlink\" title=\"What is A Value Type\"></a>What is A Value Type</h2><p>The first question we need to qualify is, “What types in .NET are referred to as Value types?  Common value types are int, double, float, decimal, and bool.  What we ypically refer to as “primitives”.  But, there are other types that are also value types.  Enums, structs, and DateTime(because it is a struct) are also value types.</p>\n<h2 id=\"What-is-a-Reference-Type\"><a href=\"#What-is-a-Reference-Type\" class=\"headerlink\" title=\"What is a Reference Type\"></a>What is a Reference Type</h2><p>Reference types are any types in .NET that derive from a Class and require the “new” keyword in order to have an instance of a variable of that type. Why didn’t I just say, “any type that derives from a Class?”  Well, the fact of the matter is that every type in .NET derives from a Class.  The top most class is “Object”.  All of the value types derive from the subclass of Object named, “System.ValueType”.</p>\n<h2 id=\"What-Happens-In-Memory\"><a href=\"#What-Happens-In-Memory\" class=\"headerlink\" title=\"What Happens In Memory\"></a>What Happens In Memory</h2><p>But it is what happens in memory when we use these variable types that is of interest to us. When you declare a variable that is a Value type and then assign a value to it, the memory that variable occupies holds the value you assigned to it.  The variable is just a representation of the actual value. Contrast this to a reference type.  When you new up (instantiate) a variable that is a reference type, the first thing that is happening is that memory is being allocated to hold the variables in the class and then memory is being set aside to hold a pointer to the memory we just allocated. So, with a reference type, we are only pointing to the memory we are actually using.  With a value type the variable IS the value we are using. This has implications to how the memory is used when we do assignments.</p>\n<h2 id=\"Value-Example\"><a href=\"#Value-Example\" class=\"headerlink\" title=\"Value Example\"></a>Value Example</h2><p>For example, look at the code below.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a = b;</span><br></pre></td></tr></table></figure>\n\n<p>When we assign b to a, we are copying the value occupied by b into the memory location occupied by a.</p>\n<h2 id=\"Reference-Example\"><a href=\"#Reference-Example\" class=\"headerlink\" title=\"Reference Example\"></a>Reference Example</h2><p>But what happens when we do the same thing with a reference type?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> Name;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> joe = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">joe.Name = <span class=\"string\">&quot;Joe&quot;</span>;</span><br><span class=\"line\">joe.age = <span class=\"number\">23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> alice = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">alice.Name = <span class=\"string\">&quot;alice&quot;</span>;</span><br><span class=\"line\">alice.age = <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">joe = alice;</span><br><span class=\"line\">joe.age = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What will be the value of alice.age? You should say 50 because once we assigned alice to joe, alice and joe point to the same Person object and the Person object that alice pointed to is no longer available.</p>\n<h2 id=\"How-About-Structs\"><a href=\"#How-About-Structs\" class=\"headerlink\" title=\"How About Structs?\"></a>How About Structs?</h2><p>But what happens if we make the Person class a struct instead?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> Name;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person joe;</span><br><span class=\"line\">joe.Name = <span class=\"string\">&quot;Joe&quot;</span>;</span><br><span class=\"line\">joe.age = <span class=\"number\">23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Person alice;</span><br><span class=\"line\">alice.Name = <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">alice.age = <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">joe = alice;</span><br><span class=\"line\">joe.age = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now, what is the value of alice.age? In this case, you should say that alice is still 33 because when we assigned alice to joe, joe got a copy of everything that alice had. So, joe’s name is “alice” and before we asign 50 to joe.age, joe.age holds the value of 33.  But the assignment has no impact on the value of alice.age.</p>\n<h2 id=\"Stacks-And-Heaps\"><a href=\"#Stacks-And-Heaps\" class=\"headerlink\" title=\"Stacks And Heaps\"></a>Stacks And Heaps</h2><p>Now, no description of value types and reference types would be complete without some discussion of stacks and heaps. The stack is the location in memory that holds value types and reference pointers (remember I said the variable points to the memory being occupied by the value?) in your method. So when you declare a variable inside of a method that memory gets “Pushed” onto the stack. When you pass a variable to another method, that variable gets copied into a temporary variable and placed on the stack. So, doing something like</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> i = <span class=\"number\">23</span>;</span><br><span class=\"line\">    Foo2(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\"><span class=\"built_in\">int</span> f</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// do something with f</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>will copy 23 so that the variable f in Foo2 will not be the variable i in Foo. So if we change the value of f in Foo2 to 32, what will be the value of i when Foo2 returns? Because it is a copy, it will still be 23. The heap, on the other hand, is a location in memory that is outside of the scope of the methods we create.  So the only thing being passed around in our functions that use reference variables is pointers.  But, because they are pointers, any thing we do do a reference object inside of a method will be reflected in the variable located inside of the method that called it.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    p.age = <span class=\"number\">24</span>;</span><br><span class=\"line\">    Foo2(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\">Person person</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    person.age = <span class=\"number\">44</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>So when Foo2 returns, p.age will be 44. However, if we change what person is pointing to…</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo2</span>(<span class=\"params\">Person person</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    person.age = <span class=\"number\">44</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p would remain unchanged and p.age would still be 24.</p>\n<h2 id=\"Values-Inside-of-a-Class\"><a href=\"#Values-Inside-of-a-Class\" class=\"headerlink\" title=\"Values Inside of a Class\"></a>Values Inside of a Class</h2><p>The final question that you should be asking at this point is when I declare a value type as a member variable of my class, as I’ve done with the age variable in Person above, where is the age variable located, on the stack or on the heap? The answer to that would be it is located in the heap because it is a member of a class that is located in the heap.  And if we created another person object inside of person, the pointer would also be located in the heap and it would point to another location of the heap.</p>\n",
            "tags": [
                "programming",
                "c#",
                "reference types",
                "value types",
                "objects"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-nullable-types/",
            "url": "http://davembush.github.com/vb-net-nullable-types/",
            "title": "VB.NET Nullable Types",
            "date_published": "2014-01-16T02:46:57.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/tp_vol4_001.jpg\" alt=\"tp_vol4_001\" title=\"tp_vol4_001\"> SQL has long had the ability to specify that a value is NULL even if it is a primitive type, but the only way you could have a NULL value in VB.NET is if you were dealing with an object. That is, until .NET 2.0</p>\n<span id=\"more\"></span>\n\n<p>Even though .NET 2.0 has been out for a while, I would bet that few VB.NET programmers know about this new feature because it is one of those things most of us have grown to assume is not possible. Values must have content–objects don’t.  That’s just the way it is.  If we were to create an integer for example and then tried to assign a nothing to it, we would most certainly get a compiler error.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>However, the Nullable generic was added so that we can create a VB.NET Nullable Integer</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> Nullable(<span class=\"keyword\">Of</span> <span class=\"type\">Integer</span>)</span><br><span class=\"line\">i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>And by simply putting a question mark at the end of our variable name, we can shorten the syntax to</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i? <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vb.net",
                "value types",
                "nothing",
                "nullable"
            ]
        }
    ]
}