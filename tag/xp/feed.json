{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"xp\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/yagni-you-aren%E2%80%99t-going-to-need-it/",
            "url": "http://davembush.github.com/yagni-you-aren%E2%80%99t-going-to-need-it/",
            "title": "YAGNI - You Aren’t Going To Need It",
            "date_published": "2014-08-14T17:00:00.000Z",
            "content_html": "<p>One of the design principles in software development is to only write what you need today.  This has taken on the moniker of YAGNI (You Aren’t Going To Need It).</p>\n<p>The question is, in what ways do we violate this principle?</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features:\"></a>Features:</h2><p>The most obvious situation where we tend to violate YAGNI is in feature creep.  We design in a new end user feature that seems really cool to us.  We may even try to sell the end user into believing they need the feature.  Maybe it is just eye candy.  “We can make this screen animate when it opens.”</p>\n<p>Yeah, but is that a requirement or a nice to have?  How much longer will it take to design that?  How many more bugs will it introduce?</p>\n<p>I think most of us get YAGNI at what I would call the “Visible Feature” level.  That is, what the end user will see immediately.</p>\n<p>Where I think most of us get this wrong is at the code design and architecture level.</p>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture:\"></a>Architecture:</h2><h4 id=\"Do-you-have-a-tendency-to-over-architect-your-code\"><a href=\"#Do-you-have-a-tendency-to-over-architect-your-code\" class=\"headerlink\" title=\"Do you have a tendency to over architect your code?\"></a>Do you have a tendency to over architect your code?</h4><p>This is an impossible question to answer because I think all of us think we architect to just the right level.  So what are some signs that you have gone too far?</p>\n<p>Well, one of them might be how you defend your decision to write your code in a particular way.  If your answer is anything remotely like, “We might need it to do…” you are probably over architecting.</p>\n<p>For example, when you write your code, are you thinking about all the ways it might be used in the future?  That business rule you are writing, it might be used as a web service, or need to be accessed by JSON.  You never know.</p>\n<p>But really, unless you need it to do all of that stuff today, you are probably spending more time on the code you are writing than you need to.  Why?  Because most of the time all of those, “we might need it to…” never happen.  And when they do happen, they happen in entirely unexpected ways that you can not foresee.</p>\n<h4 id=\"But-it-will-save-time\"><a href=\"#But-it-will-save-time\" class=\"headerlink\" title=\"But it will save time!\"></a>But it will save time!</h4><p>Will it?</p>\n<p>If your code is so complex that adding in the “it might need to…” in the future is going to take more time than adding it in now, you probably have a fundamental problem with your code.</p>\n<p>Worse, as mentioned above, you will probably never need it anyhow.  So, you’ve spent extra time now to save time you wouldn’t spend in the future if you were to just wait until you need it.</p>\n<p>Aren’t you busy enough with deadlines as it is?</p>\n<h2 id=\"Prevention\"><a href=\"#Prevention\" class=\"headerlink\" title=\"Prevention:\"></a>Prevention:</h2><p>So, then the next question is, “how do we prevent over architecting?”</p>\n<p>Simple, you write Unit Test for all the code you are writing.  If you are writing code so that it can be accessed in multiple ways, you’ll need to write test that prove it can be accessed in multiple ways.  Are you willing to do that?</p>\n<p>When the tests need to be updated to reflect new business requirements, are you going to want to update them all?</p>\n<p>So the next time you, or someone you know says, “It might need to…” maybe you should ask them what the chances of them needing that really are and is it worth spending the extra time on it now.</p>\n",
            "tags": [
                "tdd",
                "xp",
                "yagni"
            ]
        },
        {
            "id": "http://davembush.github.com/bypass-vpn-for-regular-traffic/",
            "url": "http://davembush.github.com/bypass-vpn-for-regular-traffic/",
            "title": "Bypass VPN for regular traffic",
            "date_published": "2008-08-26T08:08:24.000Z",
            "content_html": "<p><img src=\"/uploads/2008/08/img-1380.jpg\" alt=\"IMG_1380\"> For as many places as I’ve been where they use VPNs, I’ve yet to find one that is set up correctly.  I suppose there is a good reason for this, but I consider the problem to be mostly Microsoft’s fault. I mean, wouldn’t you assume that if it were possible to use your regular connection for all the network traffic EXCEPT for the traffic that needs to go through the VPN, that is what you would want?  But no.  Microsoft sets it up so that ALL of your traffic goes through the VPN connection.</p>\n<span id=\"more\"></span>\n\n<p>What this means is that getting a connection to a search engine in order to look for a solution to a problem will take about twice as long as it should since your traffic first has to go to the VPN server and then out to the search engine. Here’s how you fix it:</p>\n<h2 id=\"In-Vista\"><a href=\"#In-Vista\" class=\"headerlink\" title=\"In Vista:\"></a>In Vista:</h2><p>Go into the Control Panel and click the “Network and Sharing Center” icon. On the left panel of the resulting screen you should see a link, “Manage network connections.”  Click it.</p>\n<p>The next screen will have icons for all of your connections.  There should be one for your VPN.  Right-click it and select “Properties” from the menu.</p>\n<p>In the “Properties” screen, click the “Networking” tab and then select “Internet Protocol Version 4” and click the “Properties” button.</p>\n<p>Click the “Advanced” button.  This will bring up a new window where you can un-check “Use default gateway on remote network.” OK out to save everything.</p>\n<h2 id=\"In-XP\"><a href=\"#In-XP\" class=\"headerlink\" title=\"In XP:\"></a>In XP:</h2><p>Go into the Control Panel and  click “Network Connections” Right click the icon for the VPN and select “Properties” from the menu.</p>\n<p>In the “Properties” screen, click the “Networking” tab and select “Internet Protocol” from the list and click the “Properties” button.</p>\n<p>On the window that pops up, click the “Advanced” button. Un-check the “Use default gateway on remote network” check box.</p>\n<h2 id=\"What-this-does\"><a href=\"#What-this-does\" class=\"headerlink\" title=\"What this does:\"></a>What this does:</h2><p>Now the only traffic that will go to the VPN is traffic bound for the VPN on the same subnet as the subnet the VPN connection is on. If you need other traffic to also go through the VPN, you’ll need to play with the routing tables.  </p>\n",
            "tags": [
                "Vista",
                "VPN",
                "xp"
            ]
        }
    ]
}