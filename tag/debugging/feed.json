{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"debugging\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "url": "http://davembush.github.com/cefsharp-offscreen-why-do-i-have-so-many-instances-of-chromium/",
            "title": "CefSharp Offscreen [Why do I have so many instances of Chromium?]",
            "date_published": "2015-10-01T11:32:00.000Z",
            "content_html": "<p>I’ve been using the CefSharp.Offscreen library to drive the Chromium browser for a couple of months now.  While the code I’ve been working on has been working correctly, I could never figure out why so many instances of Chromium are left dangling in my task manager.  Oh, they’d all go away once I exited the application, but then it would take a very long time for my application to completely close because there were so many instances of Chromium hanging around.</p>\n<p>This past week, I finally figured out how to keep the number of Chromium instances in line with the number of off-screen browser windows I was actually creating.</p>\n<p><img src=\"/uploads/2015/09/image4.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<p>I’m using version 41 of CefSharp, any future problem may not have this problem.  This post is intended to walk through the discovery steps and is not meant as a ding on the CefSharp developers.  Hey!  For all I know, the problem is in Chromium.</p>\n<p>So, as I’ve already mentioned, I noticed many instances of Chromium in my task manager.  At first I thought this was normal.  I’ve seen many instances of the Chrome browser in my task manager even though I only had one browser window open.  And I’ve seen information on the web that says multiple windows are needed to make Chromium work.</p>\n<p>But the more I run my program, the more windows show up in task manager.  Certainly this isn’t right.</p>\n<p>And then I started thinking about my code.  Every instance of my browser is wrapped in a using statement because the browser windows is disposable.  Could it be possible that some resource isn’t being disposed correctly as we use the same browser window to navigate from one page to another? Here is some code to illustrate my point.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Multiple browser windows open here</span></span><br></pre></td></tr></table></figure>\n\n<p>So, obviously this isn’t right.  Well, at least it is obvious to me.</p>\n<p>But what if the use case for this never was intended for it to be used like a regular window.  In that case, putting the using statement inside of the foreach would solve my problem.  It isn’t quite as efficient as I would like, but at least it would work.  And the fact that I had so many instances of chromium running was eating up memory and slowing my whole computer down.  At least this would give me my computer back.</p>\n<p>So, I changed the code to look more like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One browser window open at this point</span></span><br><span class=\"line\"><span class=\"comment\">// because of init code that runs before.</span></span><br><span class=\"line\"><span class=\"title function_\">foreach</span>(<span class=\"params\"><span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listOfItems</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"title function_\">using</span>(<span class=\"params\"><span class=\"keyword\">var</span> browser = <span class=\"keyword\">new</span> BrowserObject()</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       browser.<span class=\"title class_\">LoadUrl</span>(someNewLocation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// One browser window open here.</span></span><br></pre></td></tr></table></figure>\n\n<p>Fixed!</p>\n",
            "tags": [
                "c#",
                "Chromium",
                "debugging"
            ]
        },
        {
            "id": "http://davembush.github.com/debugging-software/",
            "url": "http://davembush.github.com/debugging-software/",
            "title": "Debugging Software",
            "date_published": "2015-06-25T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/06/spider.jpg\" alt=\"spider\" title=\"spider\"> It amazes me how rare the skill of debugging software is.  It is even more amazing to me that after programming for over 27 years now, I still have trouble with this.  So, as a checklist for myself, and as a possible help to others along the way, I offer you “How to Debug Your Code”</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Is-It-Plugged-In-Is-It-Turned-On\"><a href=\"#Is-It-Plugged-In-Is-It-Turned-On\" class=\"headerlink\" title=\"Is It Plugged In?  Is It Turned On?\"></a>Is It Plugged In?  Is It Turned On?</h2><p>Another way of stating this is, “Validate your assumptions.”  I learned this phrase while I was traveling with a high school music group as a sound tech.  I was one of two guys who was responsible for making sure the sound equipment got from one site to the other and got setup at each site and was ready to go in time for the group to practice at least once before the performed. The thing with sound equipment is, there are lots of connections.  Lots of places to miss.  There were many times that we would set everything up and test it all out and there would be no sound, or partial sound.  I’m ashamed to tell you how many hours we wasted tracking the problem down only to find that something wasn’t connected.  An amp wasn’t turned on.  A plug had come out of the wall.  Cables had become disconnected. And the same sort of thing happens with our code.  You deploy code to the wrong directory and wonder why it isn’t showing up in the browser.  You deploy code to the right directory, but you forgot to get it from version control before you did.</p>\n<h2 id=\"Read-the-Error-Message\"><a href=\"#Read-the-Error-Message\" class=\"headerlink\" title=\"Read the Error Message\"></a>Read the Error Message</h2><p>This is especially true with .NET but even when all you have is an error code, the error message is useful. In .NET, when you get an error message, it all but tells you what line of code you need to fix.  And even if you don’t understand the error.  You can copy and paste the error into a search engine and you are likely to come up with multiple possible solutions.  Even if all you have is an error code.</p>\n<h2 id=\"Sometimes-the-Error-Message-Is-Hidden\"><a href=\"#Sometimes-the-Error-Message-Is-Hidden\" class=\"headerlink\" title=\"Sometimes the Error Message Is Hidden\"></a>Sometimes the Error Message Is Hidden</h2><p>I was just working on some code last night after putting in a very long day.  My code wasn’t working so I finally decided to pull up the debugger.  In this case, the code was JavaScript and I’m running it in Chrome because what I’m writing is a Chrome plugin.  When I finally loaded the plugin with the debugger active, it was then that I saw the console log message telling me that my variable wasn’t defined.  Talk about stupid mistakes.  My variable was code I meant to enter as a string, but because I didn’t put quotes around it, the JavaScript engine saw it as an undefined variable.</p>\n<h2 id=\"Run-the-Debugger\"><a href=\"#Run-the-Debugger\" class=\"headerlink\" title=\"Run the Debugger\"></a>Run the Debugger</h2><p>Once I’ve eliminated the obvious, the next thing is to pull out the debugger and set break points.  Now, this can be tedious.  How many times have you decided to step over when you should have stepped in?  Arrrgh.  Now I have to start over again. Well, here’s how I speed things up. At the top level function.  I initially step over until I find out what line is causing the problem.  If you have an exception that is being thrown, this is easy to do because you just have to wait for the exception.  If you are getting a wrong answer, it may be a bit more difficult because you’ll have to verify your expected results along the way.  But the point is, you need to find out what line is throwing things off or you will be there all day, stepping through code one line at a time. Once you know which line in that function is causing trouble, you step into that line on the next run and step over each line in the lower level function until you find out what line is causing a problem there. Rinse, lather, repeat, until you find the problem.</p>\n<h2 id=\"Step-In-To-Libraries\"><a href=\"#Step-In-To-Libraries\" class=\"headerlink\" title=\"Step In To Libraries\"></a>Step In To Libraries</h2><p>This goes back to validating your assumptions, but I call it out here separately because we never think that we’ve made an assumption about something that is supposed to be a “black box” when in fact, we have. Back in the day when I was doing a lot of Visual C++ coding, I learned a lot about how MFC worked by stepping into the MFC code.  So much so that I became the expert in my office regarding fixing C++&#x2F;MFC related bugs. Today I’m doing a lot of JavaScript coding.  For the last two years I’ve actually done more JavaScript than C#.  Specifically, I’m writing a lot of EXTjs code.  The thing about EXTjs is that the framework is pretty complex.  I would argue too complex.  But that’s another post.  What I want to point out here is that I’ve fixed a lot of issues with my EXTjs code by stepping into the EXTjs framework code, as painful as that was, to find out why my code was behaving the way it was.</p>\n<h2 id=\"The-Search-Engines-Are-Your-Friends\"><a href=\"#The-Search-Engines-Are-Your-Friends\" class=\"headerlink\" title=\"The Search Engines Are Your Friends\"></a>The Search Engines Are Your Friends</h2><p>This one should be obvious.  But, unfortunately it isn’t. The hardest part about searching is trying to figure out what other people may have used to describe the problem so that you can find the answer that is just sitting out there waiting for you.  I’m convinced that as intelligent as the search engines have become, using them is still a kind of art.</p>\n<h2 id=\"Explain-the-Problem-to-a-Co-Worker\"><a href=\"#Explain-the-Problem-to-a-Co-Worker\" class=\"headerlink\" title=\"Explain the Problem to a Co-Worker\"></a>Explain the Problem to a Co-Worker</h2><p>You would be amazed at how often the act of describing a problem to someone else brings the obvious solution to light.  If you’ve ever done this, you know that often, in the middle of describing the problem, you’ll says, “… oh, never mind.  I know what the problem is now.” Which leads to my alternative solutions…</p>\n<h2 id=\"Explain-the-Problem-to-Your-Coffee-Cup\"><a href=\"#Explain-the-Problem-to-Your-Coffee-Cup\" class=\"headerlink\" title=\"Explain the Problem to Your Coffee Cup\"></a>Explain the Problem to Your Coffee Cup</h2><p>Why?   Because it isn’t your co-worker who helped you solve the problem when you explained it to him.  It was the act of explaining it.  Once you’ve articulated the problem well enough to explain it to someone else, that act actually often hands you the solution.</p>\n<h2 id=\"Step-Away-For-a-While\"><a href=\"#Step-Away-For-a-While\" class=\"headerlink\" title=\"Step Away For a While\"></a>Step Away For a While</h2><p>I don’t know why it is, but for some reason, we seem to think that if we aren’t coding, we aren’t working.  But you can’t work non-stop as a programmer for 4 – 8 hours without taking a break.  And banging your head against a bug when you’ve already done that for 15 minutes probably isn’t going to produce any better results if you do it for another 4 hours. Yeah, you may try a bunch of stuff.  You may look busy.  But the fact of the matter is, you might be better off finding something else to do for an hour or so and then coming back to the problem once you’re brain has had a rest from it. Well, those are my tips for now.  What tips do you have?  Leave them in the comments.  </p>\n",
            "tags": [
                "debugging",
                "debug"
            ]
        },
        {
            "id": "http://davembush.github.com/run-nunit-from-visual-studio/",
            "url": "http://davembush.github.com/run-nunit-from-visual-studio/",
            "title": "Run NUnit from Visual Studio",
            "date_published": "2015-04-30T10:00:00.000Z",
            "content_html": "<p>For the purposes of this post, I’m going to assume that you already have the NUnit Test Runner installed.  The question you are looking to get answered is, “How do I run NUnit from Visual Studio” or even more importantly, “How do I DEBUG NUnit test from Visual Studio”.  The following step by step should help you.</p>\n<p>Right click on the project in Solution Explorer that represents your test project.</p>\n<p>From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.</p>\n<p><img src=\"/uploads/2015/04/Properties_Debug.png\" alt=\"Properties_Debug\" title=\"Properties_Debug\"></p>\n<p>You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.</p>\n<p>Now, whenever you run this project, with or without the debugger, NUnit will start up.</p>\n<p>Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up.</p>\n<p>But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner.</p>\n<p>There are other parameters you can use.</p>\n<span id=\"more\"></span>\n\n<p>Check the documentation for the version of NUnit you are using for the specifics.</p>\n<p>If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file.</p>\n<p>Find the startup element (<code>&lt;startup&gt; .... &lt;/startup&gt;</code>) and place this line in between the open and close startup tags:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supportedRuntime</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5. So, let’s give it a try. First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Inside MyFirstTestMethod&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next set a breakpoint on the <code>Console.WriteLine</code> method and then run your project with the debugger.</p>\n<p>Once NUnit loads the DLL, click the “Run” button in NUnit.</p>\n<p>If everything is setup correctly, you should stop on the breakpoint you set.</p>\n<p>You may have noticed that we put several <code>Console.WriteLines()</code> in our code but they aren’t displaying anywhere.  So, where did they go?  How can we see them? By default the “Text Output” tab displays all of the <code>Console.WriteLine()</code> messages as well as all of the test results.  If all you care to see is the test results, you should select the “Errors and Failures” tab.  Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.</p>\n<p>As an alternative to this, you can just pick up a copy of ReSharper, which has an NUnit Test Runner built into it.  All you need to do to debug a test is selection the test and choose debug from the context menu.  It will save you a ton of time.</p>\n<p>Another option would be to pick up the MS Test Adapter from nunit.org.  But, I’ve never liked the way MS Test renders the tests results.  So, I don’t recommend it.  Obviously, your mileage may vary.</p>\n",
            "tags": [
                "testing",
                "debugging",
                "nunit"
            ]
        }
    ]
}