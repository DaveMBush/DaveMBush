{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"exceptions\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/webservices-%E2%80%93-error-handling/",
            "url": "http://davembush.github.com/webservices-%E2%80%93-error-handling/",
            "title": "WebServices – Error Handling",
            "date_published": "2013-12-12T00:20:26.000Z",
            "content_html": "<p><img src=\"/uploads/2009/06/tp-vol2-004.jpg\" alt=\"tp_vol2_004\" title=\"tp_vol2_004\"> Several weeks ago I presented jQuery at the DotNet User’s Group in Connecticut.  As part of that presentation, I mentioned that I handle errors from my WebServices in a slightly different way than what most authors teach.</p>\n<span id=\"more\"></span>\n\n<p>As I mentioned in the presentation, I do not make use of the SoapException stuff that is part of the SOAP standard for WebServices.  This is because rolling my own SOAP Exception is a lot of work for not a whole lot of pay back and it doesn’t give me the information I’m really looking for when an exception occurs on the server side.  I also don’t let .NET wrap the exception for me because by the time the error gets back to the client, it has even less information than if I had rolled my own.</p>\n<p>This is not to say that you shouldn’t handle the SOAP Exception on the client side.  There are several reasons why a SOAP Exception might be thrown that have nothing to do with what happened inside the method, but once I’ve successfully made a call into my method, I’m going to handle the exceptions that happen inside the method with my own exception handlers and reporting.</p>\n<p>All I do is simply create a structure that has two elements in it.  The data I want to return from the web service and a variable I name “err” that is a string that holds the error message from the exception that was thrown.  So if my web service returned an Integer, my structure would look something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> RetValue &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>and then I would use it in my code like this</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">WebMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RetValue <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RetValue r;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        r.<span class=\"keyword\">value</span> =  a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        r.err = e.Message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Obviously, for a real production system, you’d do more with the error handling.  This is just a demo.</p>\n<p>You might also consider adding the callstack to the structure and returning that so that you can tell where the error came from.  You might do that only in debug mode and leave the err for release mode.</p>\n<p>I’ve been using this method for years.  It might not be the “sanctioned” way of handling errors, but I think it is a lot easier to deal with.</p>\n",
            "tags": [
                "exceptions",
                "asmx",
                "error handling",
                "webservice"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-application-error-detecting-404-s/",
            "url": "http://davembush.github.com/asp-net-application-error-detecting-404-s/",
            "title": "ASP.NET Application_Error Detecting 404's",
            "date_published": "2009-03-02T10:56:18.000Z",
            "content_html": "<p><img src=\"/uploads/2009/02/misc-vol3-046.jpg\" alt=\"misc_vol3_046\"> For many of you, this is going to be a “Duh!” kind of post.  But while working on this today, I found so many people asking this question and so many others giving the wrong answer, I’m compelled to post anyhow. If you know the answer, then you are welcome to stop reading now.  I didn’t write this for you.  I wrote this for the hundreds of people who will search for this information and won’t be able to find the answer.  The fact of the matter is, that’s why I write most of what I write–so people searching for the information can find it.  So here’s the question: I’ve set up an Application_Error event handler in my Global.asax file and I have implemented a server transfer for errors.  Now I want to set up a specific page to handle 404 errors.  How do I detect a 404 error and call the 404-specific page? The main answer to this question involves retrieving the exception that triggered the event in the first place.  To do that, we call <code>Server.GetLastError()</code>:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception ex = Server.GetLastError();</span><br></pre></td></tr></table></figure>\n\n<p>What we need to do next is determine if the exception is an HttpException or something else.  Once we have determined that it is an HttpException we will have access to Http-specific properties and methods that will give us the rest of the information we are looking for.  In our case we want to call the GetHttpCode() method, which will return the Http status code and compare it to the number 404. Our resulting code looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Application_Error</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Exception ex = Server.GetLastError();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ex <span class=\"keyword\">is</span> HttpException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((HttpException)(ex)).GetHttpCode() == <span class=\"number\">404</span>)</span><br><span class=\"line\">            Server.Transfer(<span class=\"string\">&quot;~/Error404.aspx&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Code that runs when an unhandled error occurs</span></span><br><span class=\"line\">    Server.Transfer(<span class=\"string\">&quot;~/DefaultError.aspx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>That’s all there is to it.</p>\n",
            "tags": [
                "asp.net",
                "404",
                "application_error",
                "exceptions"
            ]
        }
    ]
}