{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"design patterns\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "url": "http://davembush.github.com/humpty-dumpty-and-programming/",
            "title": "Humpty Dumpty and Programming",
            "date_published": "2017-12-05T11:30:32.000Z",
            "content_html": "<p>I’ve noticed a pattern in the programming world at large both with programmers and with managers.  We define things how we want them to be for our organization and not how they are.  We are like Humpty Dumpty who says, “When I use a word … it means just what I choose it to mean – neither more nor less.” </p>\n<p>There are two places where I see this pattern manifesting.  The Agile movement and Design Patterns. <figure><img src=\"/uploads/2017/12/2017-12-05.png\" title=\"Humpty Dumpty and Programming\"> Photo by <a href=\"//visualhunt.com/author/f31767\">aturkus</a> on <a href=\"//visualhunt.com/re/b4881b\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Agile\"><a href=\"#Agile\" class=\"headerlink\" title=\"Agile\"></a>Agile</h2><p>Longtime readers are familiar with my rants against the failure of Agile.  Ever job interview I go to eventually ends up asking the same question. </p>\n<p>“Have you ever worked in an Agile organization before?” </p>\n<p>I have a lot of issues with this question, but my answer is always the same.  “I’ve worked in several organizations that call themselves Agile, but I’ve yet to work in one that really is.”  And there is the problem.  Even if I say I’ve worked in an Agile organization, there is no possible way you can be sure I’ve worked in an Agile organization that defines Agile the way you describe Agile.  So, why even ask the question? </p>\n<p>It is like Humpty Dumpty trying to explain the meaning of the poem <a href=\"//www.jabberwocky.com/carroll/jabber/jabberwocky.html\">Jabberwocky</a>. We define Agile with the bits we like and ignore the bits we don’t like or don’t understand, like the 4 blind men “looking” at an elephant and then wonder why it doesn’t really work for our organization. </p>\n<p>Next time someone ask me that question, I may just answer the question with another question, “Why do you ask?” or “How do you define ‘Agile’?” </p>\n<p>Seriously! What’s the point of asking the question when it doesn’t tell you anything about the applicant you are interviewing?  Agile has become such a major buzzword that I doubt you’ll find any applicants that haven’t worked in an organization that calls itself “Agile.”</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>The more popular the design pattern, the more likely we are to see the exact same issues in our programming.  Currently, we can most clearly see this in the MV* design pattern.  Here again, people are using the design pattern based on what they imagine it to be. </p>\n<p>In an article I wrote several months ago, someone recently commented about MVVM, “Isn’t that the way MVVM works? views don’t have business login, only pure “view” logic, the ViewModel is the one having business logic.” </p>\n<p>This is a common misconception.  That the ViewModel, or the Controller, or the Presenter (MVP) are where our business logic go.  This completely ignores the fact that MV* is a View layer design pattern.  The View part of the MV* is the part within the larger View layer that is responsible for rendering state.</p>\n<h2 id=\"A-Community-of-Hacks\"><a href=\"#A-Community-of-Hacks\" class=\"headerlink\" title=\"A Community of Hacks?\"></a>A Community of Hacks?</h2><p>Are we just a community of hacks?  I think maybe we are. All we care about is that we’ve shipped some code. We, largely, don’t care about our craft.  If we were artist, we starve.  Not because artist starve (which is a myth by the way) but because the code we produce is so crappy, no one would consider it valuable. </p>\n<p>If we built houses, we’d never get past the building inspectors.  If we were architects, the houses would never get built because the plans are too confusing. </p>\n<p>The blessing and the curse of programming is that we can change things quickly.  Because we can change things quickly, this has us believing there is no need to be careful. </p>\n<p>Each year we need more and more programmers to work on code because the codebase becomes crappier each year.  No one cares.  In the 30 years I’ve been programming, I’ve only had my code reviewed as a practice in two organizations.  That alone should tell you something about the state of our code.  And for all the claims about being Agile, none have used any best practices that grew out of Extreme Programming!</p>\n<h2 id=\"What-If\"><a href=\"#What-If\" class=\"headerlink\" title=\"What If?\"></a>What If?</h2><p>In previous post I’ve explored both sides of the technical interview process.  Up until recently, the technical interviews focused on the language, the framework, the tools.  And we try to develop an interview process that assures us that the applicant can actually use those tools.  Then when we hire them, and they can’t actually code. We wonder why? </p>\n<p>What if we got beyond tools to how people think?</p>\n<h2 id=\"Code-Puzzles\"><a href=\"#Code-Puzzles\" class=\"headerlink\" title=\"Code Puzzles\"></a>Code Puzzles</h2><p>Recently, I’ve been challenging myself with coding puzzles that are typically used at places like Google, Facebook and Amazon.  Problems that get at issues such as BigO notation, Binary Trees,  Memoization and much more.  I’m doing this for several reasons.  First, working on problems like this reminds me that I’m really not all that smart.  Oh, I can get by, but I don’t challenge myself to produce the best code possible.  Maybe the rant above is more about me than the industry, but I don’t think so.  I think I’ve risen (or more accurately, sunk) to the level of the people I’m surrounded by who themselves are only as high as the people they’ve been working with. </p>\n<p>I’m also doing these problems because being able to do them will inform my code.  Maybe I’ll never actually need to know about depth first vs breath first searches of a binary tree, but if I can do those problems, I will have additional tools in my toolbox when I code the mundane things.  </p>\n<p>And finally, these kinds of problems almost always have edge cases I don’t see.  I really need to get better at discovering edge cases before my clients do. </p>\n<p>And now, here’s the big question.  If these are the kind of questions that Google, Facebook, Amazon and others are using, what do they know that other companies don’t?  Could it be that hiring programmers that can answer these kinds of questions not only ensures that the quality of the code is better, but is actually cheaper in the long run?  Why not hire programmers who are a dime a dozen and can get the job done, but produce crappy code in the process?  I mean, if code quality doesn’t matter like most of our industry thinks, why do these successful companies not just go hire warm bodies?</p>\n<h2 id=\"The-Advantage\"><a href=\"#The-Advantage\" class=\"headerlink\" title=\"The Advantage\"></a>The Advantage</h2><p>The advantage to hiring based on how people think rather than on what tools they know is that when the tools change, it won’t matter to the developer who can think through these tougher issues.  On the other hand, those who can’t won’t be able to grasp some of the newer concepts that show up in newer tools.  I’ve seen this first hand as I’ve tried to explain NgRX, RxJS and Functional Programming generally to some of my peers.  Are they difficult concepts.  Sure they are! Are they worth learning? Absolutely!</p>\n<h2 id=\"Be-Intentional\"><a href=\"#Be-Intentional\" class=\"headerlink\" title=\"Be Intentional\"></a>Be Intentional</h2><p>So, what’s the point of all of this?  Mostly, be intentional. Don’t coast. Learn everything you can about your craft. </p>\n<p>Do you really know what MVC, MVVM, MVP, etc are and how they work? Or, are you just working off of what someone else has told you? </p>\n<p>Do you really know what Agile is? </p>\n<p>How many design patterns do you know that aren’t the hot new trend? </p>\n<p>Could you code your way out of an interview with Google, Facebook or Amazon? </p>\n<p>Where do you want to be with your career next year?  In 5 years? </p>\n<p>Are you average or striving to be awesome? </p>\n<p>Join me on the journey!</p>\n",
            "tags": [
                "programming",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/",
            "url": "http://davembush.github.com/using-ngrx-to-cleanly-aggregate-data/",
            "title": "Using NgRX to Cleanly Aggregate Data",
            "date_published": "2017-10-03T10:30:50.000Z",
            "content_html": "<p>For the last 18 months, I’ve been working for an organization that has what some might consider a unique requirement.  Because of where our application’s data is sourced, we need to aggregate data on the client side rather than on the server.  What this means is that for any one screen, we may make multiple calls to the server to grab all the data we need.  Fortunately, because we adopted NgRX early in our adoption of Angular, we could avoid a lot of the headaches associated with client-side aggregation. <figure><img src=\"/uploads/2017/09/2017-10-03.png\" title=\"Using NgRX to Cleanly Aggregate Data\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/gsfc/14486243743/\">NASA Goddard Photo and Video</a> via <a href=\"//visualhunt.com/re/296da9\">Visualhunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>There are multiple ways this problem might manifest itself in an application.  But one of the most common is a basic search screen that displays a list of results.  Everything is simple when your data comes back with all the data you need.  But in our case, the data that is returned might contain all but one or two fields that we need.  Those fields exist in other end points.  To keep the basic problem small, let’s just assume that you search for a list of records.  That search returns 10 items.  For each of those records, you now need to make two more calls to retrieve the content of the two missing fields.  This means that to get a complete result set back, you need to make a total of 21 calls.  The problem becomes even worse if you have a total of 100 records, or you now have 3 fields that you need to retrieve for each row.</p>\n<h2 id=\"The-Old-Way\"><a href=\"#The-Old-Way\" class=\"headerlink\" title=\"The Old Way\"></a>The Old Way</h2><p>Prior to using NgRX, the main way we might solve this problem would be to introduce callback hell, or promise hell if you are that lucky.</p>\n<ul>\n<li>Make a call for the original list</li>\n<li>When the list gets returned<ul>\n<li>Iterate through the records and<ul>\n<li>Make a call for Child Record One<ul>\n<li>When callback returns, add the new value to the parent record</li>\n</ul>\n</li>\n<li>Make a call for Child Record Two<ul>\n<li>When the callback returns, add the new value to the parent record</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Once all the calls have returned, return the list so it can be displayed.</li>\n</ul>\n<p>As you can see, this not only becomes difficult to manage, but it also introduces a system that is going to be perceived as slow. </p>\n<p>But, now, we can do better.</p>\n<h2 id=\"Using-NgRX\"><a href=\"#Using-NgRX\" class=\"headerlink\" title=\"Using NgRX\"></a>Using NgRX</h2><p>By using NgRX, we use a series of Effects to retrieve our data, typically via a Service.  When the effect is done, it returns the results to a reducer which puts them in our store entity for us. </p>\n<p>The basic work flow looks like something like this:</p>\n<ul>\n<li>Dispatch an action to get the main results</li>\n<li>Effect hears the action and makes a call for the top-level list</li>\n<li>When the list returns,<ul>\n<li>Iterate through the records and<ul>\n<li>we dispatch an action to get Child Record One</li>\n<li>we dispatch an action to get Child Record Two</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Return an Action that will use a reducer to fill our list</li>\n<li>Child Record One Effect hears the actions for each of the rows</li>\n<li>When each of the values are retrieved the Effect returns an Action that uses a Reducer to put the value in the store</li>\n<li>Child Record Two Effect hears the actions for each of the rows</li>\n<li>When each of the values are retrieved, the Effect returns an Action that uses a Reducer to put the value in the store</li>\n</ul>\n<p>You’ll notice, we no longer have the nesting mess that we had using the old way and we can list our results as soon as the first set of data is returned.</p>\n<h2 id=\"Meanwhile-back-on-our-View\"><a href=\"#Meanwhile-back-on-our-View\" class=\"headerlink\" title=\"Meanwhile, back on our View\"></a>Meanwhile, back on our View</h2><p>Now, there are two ways you can deal with displaying this information in your view and it all depends on what you are doing. </p>\n<p>The easy way is to just let the View display the information as it comes back.  Most of the time this will work.  If you need to filter your data in the display once it comes back, you will need to decide if data that doesn’t have the child fields yet should, or should not be displayed. </p>\n<p>Another quirk I had to deal with was that we were displaying child rows with child rows.  Letting the data display as we got it back gave the screen a kind of exploding effect.  For this, I added a debounceTime(500) to the store observer so that the screen only updated once all the data had been retrieved.  Using the pattern above was still easier to reason about than the old way, we just didn’t get the added benefit of being able to see the data as it was being retrieved.</p>\n<h2 id=\"Watch-Out\"><a href=\"#Watch-Out\" class=\"headerlink\" title=\"Watch Out!\"></a>Watch Out!</h2><p>One of the wrong ways you might be tempted to use this pattern would be to chain all the child stuff in one effect and dispatch actions to your reducers from within the one Effect.  This would be a mistake.  Sure, it would work.  But now because your effect is doing more than one thing, your code becomes MUCH harder to reason about.  While each of your Effects may ultimately call the same reducer function, or not, you definitely want to have a separate set of Actions and Effects that retrieve the data from the server.</p>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/ngrx-store-coding-sanity-epiphany/",
            "url": "http://davembush.github.com/ngrx-store-coding-sanity-epiphany/",
            "title": "NgRX/Store Coding Sanity Epiphany",
            "date_published": "2017-06-06T10:30:44.000Z",
            "content_html": "<p>Maybe this is all obvious to you, but since I don’t see anyone talking about this when I search for “how to do NgRX” or the various variants, I thought I’d call it out in this weeks post.</p>\n<p>If you haven’t been following along, you’ll want to review <a href=\"/tags/ngrx/\">my previous posts on NgRX</a>.</p>\n<figure>![](/uploads/2017/06/2017-06-06.jpg \"NgRX/Store Coding Sanity Epiphany\")<figcaption>Photo credit: [spcbrass](//www.flickr.com/photos/spcbrass/394867154/) via [Visual Hunt](//visualhunt.com/re/cff786) / [ CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<p>If it isn’t clear yet, I’m still sorting out a lot of this Angular&#x2F;Redux&#x2F;NgRX stuff. But as I was working on my current project this week, I realized I have WAY too much code in my presentation layer.</p>\n<h2 id=\"The-Epiphany\"><a href=\"#The-Epiphany\" class=\"headerlink\" title=\"The Epiphany\"></a>The Epiphany</h2><p>I have two main screens I’m working on. As you read the articles on the Internet that explain how to use this pattern or the Redux pattern it was derived from, you’ll quickly learn that you want to work with a “Smart Component.” This component is kind of a traffic cop. It uses observables to listen to state change in your Store and it sends actions to, primarily, update the database and change the store’s state. From what I’ve been able to gather, the expectation is that a lot of the logic that would be needed to actually process the data is going to go in this smart component. The first screen I worked on, followed this basic pattern. This put a whole crap load of code in my smart component.</p>\n<p>On the second page, I kind of stumbled onto what I believe is a cleaner model. I realized that I was hanging onto data in my smart component that was also in my store. That seems kind of dumb. If all I need is in my store, why not just fire off an action to do whatever it is I want to do and have the @Effect grab the data from the store?</p>\n<p>This is why I ended up making my smart component listen to the observables and dispatch events to the store based on changes in my components. This includes things like button clicks. Any other processing that needs to take place takes place in either an @Effect or is called from an @Effect.</p>\n<p>I can’t describe for you how much cleaner my codebase is as a result! WOW!</p>\n<p>But, will it work on the first page the same as it works on the second page?</p>\n<h2 id=\"The-Test\"><a href=\"#The-Test\" class=\"headerlink\" title=\"The Test\"></a>The Test</h2><p>You see, there is a big difference between the first page and the second page. The first page is basically a search and list page. The second page is an edit page for an item. On the first page, I had multiple store entities for the various parts. I had an entity for the search fields. An entity for the search results. And others. Let’s just say my model isn’t very flat.</p>\n<p>The fact of the matter is, the second page that I created wasn’t really all that flat either. But because I started with the concept of not putting any logic in my smart component, it felt easier to manage.</p>\n<p>So, the first thing I wanted to do was to create a reducer for the page. All this reducer will do is distribute the action down into sub-reducers. This allowed me to keep all of my action code the same. The only thing that changes is that the directories for my sub-reducers and the @Effects, Actions and Interfaces that are associated with them go under my directory for my main Reducer and Model.</p>\n<p>I still have a bit of code that I’d like to clean up, but on the whole, I like this pattern much better than what I was doing before.</p>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>The main advantage to using this new architecture is that it simplifies and reduces testing considerations.</p>\n<p>For example, because all my presentation layer is now doing is either reflecting the state that is in my store or telling my store to do something, there really isn’t much, if anything, left to test in my presentation layer. If you’ve written your code correctly, none of the methods in your view should have a cyclomatic complexity of greater than two. You may still want to write some end-to-end tests to make sure that the NgRX&#x2F;Store loop is working correctly. But that is an entirely different subject.</p>\n<p>This does not mean that we don’t have to test anything. All of that code had to go some place, right?</p>\n<p>But, here’s the deal. Because the code is in an @Effect or a Service (generally) your tests become much more simple. You might have to dummy up a store or a service. But for the most part, your tests won’t really look much different that tests you would write for regular JavaScript code without a framework.</p>\n<p>The other HUGE advantage to using this architecture is that it allows you to distribute your code so that no file is too large and hard to reason about. It allows you to follow the “Single Responsibility Principle” in greater granularity than you might otherwise be able to do.</p>\n<p>And finally, this architecture allows you to treat all the component code: the html template, the CSS, and the TypeScript file, as all View code. And I think this is where many people are confused about Angular.</p>\n<h2 id=\"View-Confusion\"><a href=\"#View-Confusion\" class=\"headerlink\" title=\"View Confusion\"></a>View Confusion</h2><p>In a MVC or even an MVVM pattern, we’ve also considered the HTML template the “View” and the JavaScript (or in our case, TypeScript) code the controller. This is a common misconception that I believe the ASP.NET crowd still gets wrong. Code-behind code isn’t your controller. It is helper code for your View. And so, we end up putting processing code in our view, when it really belongs in an entirely different file. This is what the Model View Presenter pattern solves. If you aren’t going to use NgRX and Reactive Forms, you should check out MVP as a way of architecting your code using the older Template Driven Forms approach that was common in AngularJS.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>For the purposes of this article, I’m going to assume you’ve read my other articles which I’ve linked to at the beginning of this post.</p>\n<p>So first, the basic directory and file structure of this new method might look something like this:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\"> +-store/</span><br><span class=\"line\">   +-route1/</span><br><span class=\"line\">     +-sub-reducer1/</span><br><span class=\"line\">       --sub-reducer1.actions.ts</span><br><span class=\"line\">       --sub-reducer1.effects.ts</span><br><span class=\"line\">       --sub-reducer1.model.ts</span><br><span class=\"line\">       --sub-reducer1.reducer.ts</span><br><span class=\"line\">     +-sub-reducer2/</span><br><span class=\"line\">     --route1.actions.ts</span><br><span class=\"line\">     --route1.effects.ts</span><br><span class=\"line\">     --route1.model.ts</span><br><span class=\"line\">     --route1.reducer.ts</span><br><span class=\"line\">   +-route2/</span><br></pre></td></tr></table></figure>\n\n<p>Some things to note:</p>\n<ol>\n<li>Your Actions are defined in the target. You would seldom, if ever, define an action at the route level.</li>\n<li>Effects are optional, just like any other time you would use them.</li>\n<li>Effects are seldom, if ever, defined at the route level.</li>\n<li>I’m using “route1” etc and “sub-reducer1” etc as sample names. Use names that represent your route names and the data you are storing.</li>\n<li>The only reducers that gets defined in our app.store.ts file are the reducers in the route directories.</li>\n<li>You still need to register each of your effects in app.store.ts as you have been doing.</li>\n</ol>\n<p>The next thing that is probably not clear is that your top-level model, ie “route1.model.ts” should only hold the sub-reducers. I’ve also found it useful to make all of my top-level properties optional.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Route1Model</span> &#123;</span><br><span class=\"line\">  subItem1?: <span class=\"title class_\">SubModel1</span>;</span><br><span class=\"line\">   subItem2?: <span class=\"title class_\">SubModel2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And this is used in your route reducer as:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">route1Reducer</span>(<span class=\"params\">state: Route1Model =</span></span><br><span class=\"line\"><span class=\"params\">  &#123;</span></span><br><span class=\"line\"><span class=\"params\">    subReducer1: &#123;/* subReducer definition here */&#125;,</span></span><br><span class=\"line\"><span class=\"params\">    subReducer2: &#123;/* subReducer definition here */&#125;</span></span><br><span class=\"line\"><span class=\"params\">  &#125;, action: Action</span>) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// process action here</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Route1Reducer</span>: <span class=\"title class_\">ActionReducer</span>&lt;<span class=\"title class_\">Route1Model</span>&gt; = route1Reducer;</span><br></pre></td></tr></table></figure>\n\n<p>Now, the trick we need to implement is that we need to delegate the actions down to the appropriate reducers and we only want to change the state object to a new object if a child state has changed.</p>\n<p>In the top level reducer, you need to put code that looks something like this:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducerList = &#123;</span><br><span class=\"line\">  <span class=\"attr\">subReducer1</span>: subReducer1,</span><br><span class=\"line\">  <span class=\"attr\">subReducer2</span>: subReducer2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> returnState = state;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(reducerList).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newState = reducerList[item](state[item], action);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(newState !== state[item]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> newItem = &#123;&#125;;</span><br><span class=\"line\">      newItem[item] = newState;</span><br><span class=\"line\">      returnState = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, returnState, newItem);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">return</span> returnState;</span><br></pre></td></tr></table></figure>\n\n<p>The key here is that you want the property names in the reducerList to be the same name as what is in the Route1Model and you want the values assigned to them to be the function pointer (notice, no parenthesis) that should be called.</p>\n<p>The actual sub-reducers look like a regular reducer.  The only real difference is that you will be calling the function that returns the state, the second export statement we normally put in our reducers that returns the ActionReducer&lt;&gt; is not needed.</p>\n<p>So, our Object.keys().map() processes each reducer and updates the parent object if the child has changed.</p>\n<p>Now, by way of reminder. You can observe all the store, or part of the store. So, your smart component might observe just a sub entity or the whole entity depending on the need at the moment.</p>\n<p>Finally, lets say you want to have a “Save” button that causes the information in your store to be persisted to a database. You would place a method in your smart component that gets triggered by the button and fires a “Save” action to an @Effect.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">save</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"title class_\">Route1Actions</span>.<span class=\"title function_\">save</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Your @effect will respond, and since @Effects typically already have a store injected into them, you can use the store to retrieve the data.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Effect</span>(&#123;<span class=\"attr\">dispatch</span>: <span class=\"literal\">false</span>&#125;) _save$ = <span class=\"variable language_\">this</span>.<span class=\"property\">update$</span></span><br><span class=\"line\">  .<span class=\"title function_\">ofType</span>(<span class=\"title class_\">StagedEditActions</span>.<span class=\"property\">SAVE</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">switchMap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">select</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">route1</span>).<span class=\"title function_\">first</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">route1Data</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">save</span>(route1Data))</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(requestId$ =&gt; &#123;</span><br><span class=\"line\">    requestId$.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">dispatch</span>(route1Actions.<span class=\"title function_\">load</span>(id))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/using-real-world-ngrx/",
            "url": "http://davembush.github.com/using-real-world-ngrx/",
            "title": "Using Real World NgRX",
            "date_published": "2017-05-09T10:30:00.000Z",
            "content_html": "<p>This week, I want to demonstrate some ways you might use NgRX in your own code.</p>\n<h2 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h2><p>Last week we went into a lot of detail about how the NgRX system should be wired together. Here is all of that in picture form.</p>\n<p><img src=\"/uploads/2017/05/image.png\" alt=\"image\" title=\"image\"></p>\n<p>A component fires an event to either an effect or a reducer using an action. If an effect was called, it fires another action which is normally picked up by a reducer. The Reducer mutates the state which then gets placed in the store. “Magic happens here.” You don’t write any code to get it to the store other than that you create a reducer. Anything that is observing the table in the store that got changed will get notified via RxJS observables and the cycle is complete.</p>\n<p>Note that the action you dispatch can be handled by either an Effect, a Reducer or both.</p>\n<h2 id=\"Basic-CRUD\"><a href=\"#Basic-CRUD\" class=\"headerlink\" title=\"Basic CRUD\"></a>Basic CRUD</h2><p>Most of the time, we think of NgRX as a way of handling CRUD operations. We need to see the current record so we fire off a LOAD action that uses an effect to retrieve the data from the database. Once the data comes back, we return an action that tells the reducer to put that new data into the store. Since our component is observing the store, it updates the screen with the new values.</p>\n<p>If we need to add a record, we fire an ADD action. If we need to delete we fire a DELETE action. If we need to update, we fire an UPDATE action. Each of these are picked up by the Effect, which then fires an action that places new state information in the store via the Reducer.</p>\n<h2 id=\"Wait-State\"><a href=\"#Wait-State\" class=\"headerlink\" title=\"Wait State\"></a>Wait State</h2><p>When most people think of how to use NgRX or any similar pattern, they immediately think of the CRUD pattern I mentioned above. But, we don’t have to start the Action chain from a component. For that matter, we don’t have to listen to our Store data from a component either.</p>\n<p>One way I’ve implemented NgRX that solves a lot of common issues is that I’ve created a wait state component that shows when a count variable has been incremented and doesn’t show when the count is zero. Since Store is <code>Injectable</code>, I can increment and decrement the count from just about anywhere. Most often I increment it from an effect just before I make an AJAX call and decrement it in a finally() block of the Http observable. I have a start() action that increments the count and an end() action that decrements the count and ensures that I never go below zero. I can start off multiple asynchronous processes which will all increment the counter and decrement the counter appropriately. The wait state GUI displays until everything has finished.</p>\n<p>This is OH! So much easier than how we’ve had to handle this problem with other design patterns. I’m not saying it couldn’t be done, or that it was even particularly hard. But this way is easier.</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>Another place where you might want to present information but trigger the display from just about anywhere is with error handling. In the code I work on, I have a modal popup component that displays whenever my error collection has something in it. Anytime I need to display an error, I add the error to the collection via an Action and it magically displays. The great thing about this mechanism is that regardless of how many errors I send to the collection, they all display until I close the window, which clears out the collection.</p>\n<h2 id=\"Page-State\"><a href=\"#Page-State\" class=\"headerlink\" title=\"Page State\"></a>Page State</h2><p>Most page state is handled by the fact that we’ve stored the data into a database. But there are times when we want to come back to a page we had been working on previously and we want it to display with the data that was on it at the time we left.</p>\n<p>Or maybe you want to work on a series of pages prior to saving so that everything gets saved as a set.</p>\n<p>No matter. You can use NgRX to store everything into the store and a separate action can trigger an effect that pushes that data to the database.</p>\n<p>Or, as is the case in an application I’m working on, I’m using a form to search a database. When I come back, I want the same search fields and I want the search to reinitialized. In my particular case, I don’t have a search field. You change a field, a new search is automatically initiated. This case is just a little bit more complicated than what we’ve looked at so far.</p>\n<p><img src=\"/uploads/2017/05/image-1.png\" alt=\"image\" title=\"image\"></p>\n<p>In order to keep the state information available so that it is there when I come back to it, I need to store that information in the search table via the Search Reducer. So, every time something changes in the Search Form, I send off an action to the Search Reducer so that the change can be recorded.</p>\n<p>Meanwhile, the Search Form also is listening to the Search Table so that when it comes back it can put the changes in the form, and it can send an action to the Search Results Reducer telling it to search for the information. When it gets the results, the Search Results Table picks them up and since the Search Results Component is listening to the Search Results Table, they display.</p>\n<p>If I leave the page, the Search Form grabs the current search parameters from the Search Table and Fills the Form and sends the action to the Search Results Reducer and the page is back where we left it.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The point is, NgRX isn’t just about basic CRUD forms and because there are multiple ways you can mix and match the parts, even your basic CRUD implementation has a lot more flexibility than you might be used to.</p>\n",
            "tags": [
                "angular",
                "design patterns",
                "NgRX"
            ]
        },
        {
            "id": "http://davembush.github.com/the-myth-of-sloppy-code/",
            "url": "http://davembush.github.com/the-myth-of-sloppy-code/",
            "title": "The Myth of Sloppy Code",
            "date_published": "2016-10-18T10:30:00.000Z",
            "content_html": "<ul>\n<li>Tightly coupled code runs faster.</li>\n<li>Tightly coupled code is easier to write.</li>\n<li>Test Driven Development increases development time.</li>\n<li>Test Driven Development negatively impacts code design.</li>\n<li>Knowing the names of design patterns isn’t important as long as you can use them.</li>\n<li>All my customer cares about is how soon they can have the product, not how clean the code is.</li>\n</ul>\n<p>All of these statements, and others like them, are excuses for not writing code correctly. And you know what an excuse is, right?</p>\n<blockquote>\n<p>The skin of a reason stuffed with a lie.</p>\n</blockquote>\n<figure>![](/uploads/2016/10/image-1.png \"The Myth of Sloppy Code\")<figcaption>Photo credit: [dynamosquito](//www.flickr.com/photos/dynamosquito/5866244470/) via [Visualhunt.com](//visualhunt.com) / [CC BY-SA](//creativecommons.org/licenses/by-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>  \n\n<p>Now, I could go through and argue each of the points above. But today, I want to look more at the attitude behind these statements.</p>\n<h2 id=\"It’s-All-in-Your-Head\"><a href=\"#It’s-All-in-Your-Head\" class=\"headerlink\" title=\"It’s All in Your Head\"></a>It’s All in Your Head</h2><p>Man is a funny being. We make decisions with our hearts and justify the decisions with our brains. Once you know this, you can hack it to your favor. But how does this relate to what we’ve been talking about? It is really quite simple. All of the best practices I’ve mentioned above require work to learn. We would rather not invest the time to learn how to do these well, and so rather than just saying, “this is not where I choose to spend my time right now” we say things like, “my management won’t let me do that” or “my way is more efficient” or at times, we even resort to vilifying the practice.</p>\n<p>I have the same issue when I try to convince management that their process needs to change. It took seven years for me to get one company to move their project management system from email to project management software. Why? Because what they were doing “worked” and they couldn’t see that doing something different would work better in any way.</p>\n<h2 id=\"A-Skin-of-a-Reason\"><a href=\"#A-Skin-of-a-Reason\" class=\"headerlink\" title=\"A Skin of a Reason\"></a>A Skin of a Reason</h2><p>So, let’s look at the parts of these myths that are true.</p>\n<p>First, it is true that while you are learning how to use any one of these best practices, it will in fact, take you longer to write your code. Tightly coupled code is easier to reason about and one could argue is therefore easier to write. Test Driven Development is one of the most difficult things to learn. And just like the myth that Agile&#x2F;Scrum&#x2F;Kanban doesn’t work, the myth that Test Driven Development doesn’t work is largely based on misconceptions about what Test Driven Development is. Initially, it will impact the time it takes for you to write your code. But the more interesting argument to me is that testing negatively impacts design. If you mean that you can’t use the design you are used to using and that design involves writing tightly coupled code. Yeah, I guess it does.</p>\n<p>Implementing design patterns is better than not. It is true. But that doesn’t mean you shouldn’t learn the names.</p>\n<p>Yes, your customer cares about how fast you can get the project done. But, that isn’t all they care about.</p>\n<h2 id=\"The-Lies\"><a href=\"#The-Lies\" class=\"headerlink\" title=\"The Lies\"></a>The Lies</h2><p>Just because something takes longer while you are learning how to do it, doesn’t mean it will always take longer. It probably took you a while to learn how to program proficiently too. That didn’t stop you did it? Does it take you as long to program now as when you first started? Of course not! Let’s look at this from another angle. As you’ve learned multiple languages, would you say that it made you a better or worse programmer? Unless you have a very strange perspective, you will probably answer better. Was the new language hard to learn? Of course. Did it take you longer to code using the new language than one you knew previously? Of course. Would you say the result of being proficient in both has made it easier or harder to code in both? Easier, right? Tightly coupled code is easier to write, but as the application grows, tightly coupled code becomes harder to add to and harder to maintain. It lends itself to code duplication and is more likely to be the code base that needs to be rewritten first.</p>\n<p>Tightly coupled code is also the hardest to tests and is probably the reason you don’t want to write test for your code. Because you write tightly coupled code, testing is MUCH harder than it should be. This leads you to have a firm belief that writing tests is hard as well. A vicious cycle.</p>\n<p>And if you believe that tightly coupled code is a proper design, you will believe that tightly coupled code hinders design. But in fact, writing tests will force you to write loosely coupled code. So, instead of hindering design, it actually helps it.</p>\n<p>I used to think not learning the correct names for design patterns didn’t matter. But the advantage of knowing the proper name for things is that we can all talk about something using the name rather than trying to explain what that thing is with lots of words. It saves time. But, there is another much more subtle reason why you need to learn the proper name for things. You might be calling a design pattern you are using by an incorrect name and confusing the people you are communicating with. And, finally, learning the names for all of the design patterns will expose you to design patterns you aren’t aware of, broadening your horizons.</p>\n<p>This last one is, or should be the most obvious. Getting the project done quickly isn’t ALL your customer cares about. It might be a relatively high priority, but I can assure you, if you explain to them that getting the project done as fast as possible will mean you have to rewrite the code if they want any changes, you’ll quickly find out that redoing work they’ve already paid for doesn’t sit well with them either.</p>\n<h2 id=\"Benefits\"><a href=\"#Benefits\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h2><p>It is a sad, sad truth that by convincing yourself that not investing in these best practices really is best for you and the clients you work for, you’ve also limited yourself to the quality of client you can work for. The places that pay well expect you to know how to do this stuff. They believe in good design. They believe in testing. They know how to implement design patterns.</p>\n<p>And guess what, these places also pay better too. It raises you beyond the level of “commodity programmer” and into the level of “rare gem” How do I know? This past year I’ve been doing a lot of interviewing. For various reasons, I decided to interview for jobs that pay 25% better than what I currently make. In the beginning, I did this because I figured it would expose me to people more like myself who wanted to be better. In the process, I discovered that the interview process is a little harder, but not impossible. I figured out what I still need to learn. And, I managed to beat my goal. Time to notch it up a bit more.</p>\n<h2 id=\"Are-You-Dead\"><a href=\"#Are-You-Dead\" class=\"headerlink\" title=\"Are You Dead?\"></a>Are You Dead?</h2><p>You hear stories all the time about people who can’t find work in our industry. When you ask, you find out that all they know is something that was hot 10 years ago or longer. Well, of course you can’t find a job. And it is no wonder the last company got rid of you. You provide no value.</p>\n<p>This past week I heard someone tell me the equivalent of, “I’m not going to learn anything new. Every time I do, it ends up being hot for a few years and then it is gone.” I was stunned. I fear for this guy. You might as well say, “I’m planning to retire in 10 years or less.” because that is what will happen to you. Worse, if you stop learning completely, you could end up with dementia or worse.</p>\n<p>My plan is to program until I’m at least 75. Longer if I stay healthy enough. Even if I could retire, I won’t. What would I do? I love programming. I love mentoring other programmers. I love learning new stuff.</p>\n<h2 id=\"Do-hard-stuff\"><a href=\"#Do-hard-stuff\" class=\"headerlink\" title=\"Do hard stuff\"></a>Do hard stuff</h2><p>And so what’s the point of all this? Do hard stuff. It will make you a better programmer.</p>\n",
            "tags": [
                "tdd",
                "agile",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "url": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "title": "Are You Average or Awesome? 9 Ways to Improve.",
            "date_published": "2016-05-12T11:30:00.000Z",
            "content_html": "<p>The story goes that there were two men, Joe and Frank, who were camping out in the woods when a bear showed up in the camp.  Terrified, they decided the best they could do would be to stay perfectly still until the bear left.  Hopefully, the bear wouldn’t notice them.  As the bear was poking around, Joe says to Frank, “What are we going to do if this doesn’t work?”  Frank says, “Run!”  Joe says, “You really think we can out run a bear?”  Frank says, “I don’t need to out run the bear.  I only need to out run you.”</p>\n<figure>![](/uploads/2016/05/image.png \"9 Ways to Improve\")<figcaption>Photo credit: [Internet Archive Book Images](//www.flickr.com/photos/internetarchivebookimages/14767148885/) via [VisualHunt.com](//visualhunt.com) / [No known copyright restrictions](//flickr.com/commons/usage/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<p>For years I have used this story to encourage my kids to be better than their peers.  Right now, most people are so “out of shape” that “running faster” than the competition is easy.  By comparison, my kids look awesome when by any other measure, they are probably only doing the bare minimum necessary.  This is not to say they aren’t REALLY good at what they do but, there is always room for improvement.</p>\n<h2 id=\"Average-Programmers\"><a href=\"#Average-Programmers\" class=\"headerlink\" title=\"Average Programmers\"></a>Average Programmers</h2><p>And then there are conversations I have with other programmers.  So many think they are great when they are only slightly better than the people they are working with.  The lack of desire to learn more, to be any better than adequate, is appalling.  And this is to say nothing of the programmers who never make the cut.  The ones I never work with because the people I work with and for won’t hire them.  I’ve been a part of some of those interviews.</p>\n<p>People who can’t answer the most basic of <a href=\"/7-c-interview-questions-that-weed-out-the-losers/\">C#</a>, ASP.NET, or <a href=\"/7-javascript-interview-questions-to-weed-out-imposters/\">JavaScript questions</a>.  This is to say nothing of <a href=\"/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/\">people who believe knowing concepts trumps knowing the terms</a> that specify them.</p>\n<h2 id=\"Average-Organizations\"><a href=\"#Average-Organizations\" class=\"headerlink\" title=\"Average Organizations\"></a>Average Organizations</h2><p>And then there are the organizations who settle for frameworks that provide “Silver Bullet” answers to problems.  Not because this is technically, the best solutions, but because this is the solution the requires the least from the developers they have working for them.  The problem with this approach is that it doesn’t demand excellence from the programming team that works for them.  And don’t get me started on managers who think they are “doing Agile” who obviously don’t even recognize that “Agile” is not a noun.</p>\n<p>The problem with comparing ourselves to our peers is that you can always find someone worse than yourself.  Not only is this true because you will always find someone who just doesn’t care, but even if we all cared, there will always be someone, who for any number of reasons, can’t be as good as you are.</p>\n<h2 id=\"Be-Awesome\"><a href=\"#Be-Awesome\" class=\"headerlink\" title=\"Be Awesome\"></a>Be Awesome</h2><p>But we can all strive to be the best.</p>\n<p>As programmers, what if we all decided to make as our goal code so bug free that no one could find problems with the code we wrote?  Maybe there is some part of the language you program in, or the framework that you use, that you’ve never tried.  How about learning it?  Is there a tool you could start using that would help you program better?  Maybe you’ve exhausted everything there is to learn about the language or framework that you use.  Maybe it is time to learn some other language.</p>\n<p>Who do you want to be? What do you want to be known for? These are interesting questions because they cause us to focus.  Do you want to be known as mediocre?  Keep coasting.  Do you want to be the person who gets the challenging problems because you are the only person who is reliable enough to give the project to? The problem with out-running your peers is that eventually, the bear will be the only thing behind you.  Where will you be?</p>\n<h2 id=\"Action-Steps\"><a href=\"#Action-Steps\" class=\"headerlink\" title=\"Action Steps\"></a>Action Steps</h2><p>OK, fine.  How do we get from mediocre to awesome?</p>\n<h3 id=\"1-Decide-to-Master-a-Skill\"><a href=\"#1-Decide-to-Master-a-Skill\" class=\"headerlink\" title=\"1. Decide to Master a Skill\"></a>1. Decide to Master a Skill</h3><p>I don’t care who you are or how good you are, there is still something you don’t know.  The great thing about being a programmer is that there is always something to master.  Do some sort of self-evaluation on your skills and determine to master some skill.</p>\n<p>Just by way of example, here are some possible skills you might learn.</p>\n<ul>\n<li>Test Driven Development</li>\n<li>Deep Dive a Language you “Know”</li>\n<li>Learn a Language You Don’t Know</li>\n<li>Design Patterns</li>\n</ul>\n<h3 id=\"2-Teach\"><a href=\"#2-Teach\" class=\"headerlink\" title=\"2. Teach\"></a>2. Teach</h3><p>The best way to learn a topic is to teach the topic.  There are at least two reasons for this.  First, preparing to teach makes you organize all of those scattered bits of information in your brain in a way that someone else can grasp.  Second, it will raise questions you didn’t even know you should ask.  I can’t tell you how many times I’ve explained something and the person I am teaching ask a question I’ve never considered before.  If you don’t know the answer, find the answer.  You obviously don’t know your subject as well as you think you do.</p>\n<p>Here are some possible ways to teach.</p>\n<ul>\n<li>Host a “Lunch and Learn”</li>\n<li>Start a Blog</li>\n<li>Write a Book</li>\n<li>Mentor a Younger Programmer</li>\n<li>Present Something at a Users Group or Meet-up.</li>\n</ul>\n<h3 id=\"3-Track-Progress\"><a href=\"#3-Track-Progress\" class=\"headerlink\" title=\"3. Track Progress\"></a>3. Track Progress</h3><p>In the business world, they say, “what you measure, grows.”  So, measure:</p>\n<ul>\n<li>Decrease in bugs reported.</li>\n<li>Elapse time from start of project to bug free code.</li>\n<li>Cyclomatic complexity of your methods.</li>\n</ul>\n<h3 id=\"4-Interview-for-a-New-Job\"><a href=\"#4-Interview-for-a-New-Job\" class=\"headerlink\" title=\"4. Interview for a New Job\"></a>4. Interview for a New Job</h3><p>One of the things I’ve found that interviewing for new gigs does for me is that it reveals things I should know.  I find out quickly what I should know that I don’t.  And don’t be the guy who says, “If my 30 years of experience isn’t good enough for you, I don’t want your stinking job.”  Answer the questions, not matter how much experience you have.  You might just learn something.  If you don’t know the answer, after the interview, go find the answer.  Don’t be like, “why should I keep that in my brain?”  I mean, that might be true, but go find the answer too.</p>\n<p>I had one of those interviews.  I wrote a whole post about it that I deleted.  They had me doing something I was unable to do and that I felt the rest of my knowledge and skills more than compensated for.  But, after the interview, I went and found out how to do what they had asked.</p>\n<h3 id=\"5-Change-Jobs\"><a href=\"#5-Change-Jobs\" class=\"headerlink\" title=\"5. Change Jobs\"></a>5. Change Jobs</h3><p>This probably sounds like odd advice, but as a contract programmer, I’ve been on assignments that have lasted as long as 8 years and I’ve been on assignments that were as short as 4 months.  What I’ve learned is that the longer I stay on an assignment, the staler my skills become.  That 8-year gig nearly made me unmarketable.  Why?  Because I never had to learn something new.  The only reason I am still marketable is because I started learning newer stuff toward then end of that gig.  When the gig was changing every 2 years or so, I was a lot more capable of moving into a new position.  Now, I’m learning all the time.  Learning what I think will make me more marketable as well as what I would really like to be doing next.  Some of that makes its way into what I’m doing today.  Some of it will have to wait.  But it is all experience and it is all valuable.  The point is, don’t get stuck knowing what you know.  Switching jobs is the fast way to achieve that.</p>\n<h3 id=\"6-Ask-for-a-Code-Review\"><a href=\"#6-Ask-for-a-Code-Review\" class=\"headerlink\" title=\"6. Ask for a Code Review\"></a>6. Ask for a Code Review</h3><p>To be clear, what you are asking for is a review of your code, not how pretty it is.  Although, depending on how much experience you have, there may be some benefit in having your code reviewed for formatting as well as clarity.</p>\n<p>What I would hope you would get out of this exercise is several, “Have you considered doing it this way…” kind of comments.  If you can’t get someone to review your code, there are some great code cop kind of tools available for every language that you can have review your code for common mistakes.  But even better if you can get another human to look at your code.</p>\n<p>It is interesting, I’ve been coding for 28 years and I’ve lost track of how many companies I’ve worked for.  There was only one company that I’ve ever worked for that did code reviews.</p>\n<h3 id=\"7-Change-Your-Body-Language\"><a href=\"#7-Change-Your-Body-Language\" class=\"headerlink\" title=\"7. Change Your Body Language\"></a>7. Change Your Body Language</h3><p>This probably seems like really odd advice so let me explain.  Or maybe you’ve already seen the <a href=\"//www.ted.com/speakers/amy_cuddy\">Ted talk</a> by Amy Cuddy that says the research shows that if you assume a body position that says, “I’m awesome” you are more likely to feel awesome.  But you may wonder what feeling awesome has to do with BEING awesome.</p>\n<p>Well, in my experience, you end up being who you believe yourself to be.  One way of hacking yourself into being awesome is to convince yourself that you are.  The best way to do that is to assume body positions that communicate that you are.</p>\n<p>Don’t think this is possible?  I grew up walking toe out.  At some point in High School or College, I read that it was more efficient to walk with my feet parallel to each other.  I started concentrating on changing how I walk.  Now I no longer think about it.  I haven’t thought about it for years.</p>\n<p>I’ve done the same thing with my body position.  Not as hard a modification, but I’ve noticed that it DOES work.</p>\n<h3 id=\"8-Don’t-Brag\"><a href=\"#8-Don’t-Brag\" class=\"headerlink\" title=\"8. Don’t Brag\"></a>8. Don’t Brag</h3><p>The other thing that changing your body language will do is that it will communicate that you are confident and you’ll never have to say a word.  I believe I’m pretty good at what I do, but my general practice is to let what I know be discovered.  As I’ve observed my peers, I’ve found that the more they proclaim how great they are, the less confident they are that they really are, and generally, they aren’t.  You don’t want to be that person.  You want to portray confidence to be confident, but you want to be discovered.  “Even a fool, when he is silent, is considered wise.” and “Better to be silent and be thought a fool than to open your mouth and remove all doubt.”</p>\n<h3 id=\"9-Focus-On-One-Thing\"><a href=\"#9-Focus-On-One-Thing\" class=\"headerlink\" title=\"9. Focus On One Thing\"></a>9. Focus On One Thing</h3><p>The temptation, if you are motivated at all, is to try to improve in every area all at once.  That is a recipe for disaster.  Focus on one thing.  I didn’t change how I walked and how I talked and how I ran and how I sat and… you get the picture.  I focused on how I walked.  Sometime later I focused on how I sat.  I learned how to code well and then how to do Test Driven Development.  I’m often asked how I learned all I know.  It is easy, I learned one thing at a time.</p>\n",
            "tags": [
                "tdd",
                "interview",
                "best practices",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/why-is-it-called-%E2%80%9Cinversion-of-control%E2%80%9D/",
            "url": "http://davembush.github.com/why-is-it-called-%E2%80%9Cinversion-of-control%E2%80%9D/",
            "title": "Why Is It Called “Inversion of Control”?",
            "date_published": "2015-06-11T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/05/CHIL0007.png\" alt=\"CHIL0007\" title=\"CHIL0007\"></p>\n<p>There is a guy I’m working with who is trying to wrap his head around design principles.  He’s been watching a lot of <a href=\"/pluralsight\">PluralSight videos</a>.  As he was processing information about <a href=\"/pluralsightIoC\">Inversion of Control</a>, he asked the natural question I’ve never actually considered before.  “Why is it called Inversion of Control?  Normally, when you talk about ‘Inversion’ you are talking about reversing something or negating something.  That isn’t what we are doing here.”</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-Is-Inversion-of-Control\"><a href=\"#What-Is-Inversion-of-Control\" class=\"headerlink\" title=\"What Is Inversion of Control?\"></a>What Is Inversion of Control?</h2><p>So, let’s start with a definition of what Inversion of Control is.  And let’s start the definition by explaining what it isn’t. In the old days, back when I started programming.  We had this thing called “Procedural Programming.” Control of your application flowed from beginning to end with looping to take care of any kind of waiting that needed to take place.  <a href=\"//martinfowler.com/bliki/InversionOfControl.html\">Martin Fowler describes this</a> using an illustration that is version similar to a basic “How to program in C#” console application that is in the beginning of most beginner programming books.</p>\n<blockquote>\n<p>Let’s consider a simple example. Imagine I’m writing a program to get some information from a user and I’m using a command line enquiry. I might do it something like this</p>\n<p>  #ruby<br>  puts ‘What is your name?’<br>  name &#x3D; gets<br>  process_name(name)<br>  puts ‘What is your quest?’<br>  quest &#x3D; gets<br>  process_quest(quest)</p>\n<p>In this interaction, my code is in control: it decides when to ask questions, when to read responses, and when to process those results.</p>\n</blockquote>\n<p>What Inversion of Control does is that it puts something other than the main code in charge of doing critical parts of the program so that those other parts of the program can be swapped out by the person implementing the code.</p>\n<h2 id=\"Examples-of-Inversion-of-Control\"><a href=\"#Examples-of-Inversion-of-Control\" class=\"headerlink\" title=\"Examples of Inversion of Control\"></a>Examples of Inversion of Control</h2><p>If you’ve ever written a WebForms or Windows Forms application, you’ve already experience inversion of control.</p>\n<h3 id=\"OnPageLoad-or-OnFormLoad\"><a href=\"#OnPageLoad-or-OnFormLoad\" class=\"headerlink\" title=\"OnPageLoad() or OnFormLoad()\"></a>OnPageLoad() or OnFormLoad()</h3><p>You have probably never even given this much thought.  You think these two methods are where your code starts.  But the reality is, the code started long before these methods ever got called.  The thing that is in control is the .NET framework.  You’ve created a delegate that gets called by the framework so that your page or form does what you want it to.  Without this inversion of control, you would have to write a whole lot more code.</p>\n<h3 id=\"Event-Handlers\"><a href=\"#Event-Handlers\" class=\"headerlink\" title=\"Event Handlers\"></a>Event Handlers</h3><p>While you might think of OnPageLoad and OnFormLoad as event handlers, the way they are implemented are more like virtual functions.  Event handlers, on the other hand, are a specific type of delegate that say, “When this thing happens, let me know about it.”  The code that fires the event doesn’t even really care what you do during the event.  Again, the control has been “Inverted” because there is a lot of code that is running that you have no control over and probably have no knowledge of.</p>\n<h3 id=\"Virtual-Functions\"><a href=\"#Virtual-Functions\" class=\"headerlink\" title=\"Virtual Functions\"></a>Virtual Functions</h3><p>One of my favorite methods of inverting control is to use virtual functions.  I can have a parent class that controls the flow of the program that calls various virtual functions in order.  But my child class can provide the implementation of the functions to make them do various things.  I used this, at one time in the past, to create a framework for submitting links to various bookmarking sites.  They all worked essentially the same way, all I had to do was implement the specific details for each site while 80% of my code stayed the same in the base class.</p>\n<h3 id=\"Delegates-or-Callback-Functions\"><a href=\"#Delegates-or-Callback-Functions\" class=\"headerlink\" title=\"Delegates or Callback Functions\"></a>Delegates or Callback Functions</h3><p>Another common way of implementing inversion is by using delegates or callbacks.  This work in a similar way to virtual functions expect that the functions are typically passed in to a method.  Much of the current implementation of JavaScript uses this method of inverting control as a primary pattern (but not limited to it as the only way.)</p>\n<h3 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h3><p>I’ve <a href=\"/dependency-injection-not-di/\">talked about Dependency Injection before</a>.  Again, it is another way of delegating control to something other than the code that has main control.  What I want to make special note of here, though, is that Inversion of Control is not Dependency Injection but Dependency Injection is a form of Inversion of Control.  I think this is where most of the confusion about Inversion of Control comes from.  Most of the literature that talks about Inversion of Control talks about it at the same time they are talking about Dependency Injection.  As though the two concepts were the same.</p>\n<h2 id=\"Why-Inversion-of-Control-Matters\"><a href=\"#Why-Inversion-of-Control-Matters\" class=\"headerlink\" title=\"Why Inversion of Control Matters\"></a>Why Inversion of Control Matters</h2><p>Finally, I want to talk for a bit about why Inversion of Control matters.  Because, for me, it is a lot more important that we understand what we are trying to achieve than it is that we’ve given it the right name or that we even know what name to call it.  All of the examples I’ve provided are things you’ve probably done in your code.  Some of them you’ve done without even knowing you were doing them.  But think about the alternative of not doing them. First, your code would be a lot harder to maintain.  Just think of how hard it would be to write a web site and maintain it if you had to write code that handled all of the work that happens for you behind the scenes. Second, it makes the code more loosely coupled.  And by doing that, it makes the code testable AND it makes the code more flexible and easy to change in the future. Maybe instead of calling it Inversion of Control it should have been called Delegation of Control.  Either way, the concept is to remove as much code as possible from our main controlling code and give the implementation responsibility to something else that can be swapped in without having to change the main loop.</p>\n",
            "tags": [
                "design patterns",
                "inversion of control",
                "ioc"
            ]
        }
    ]
}