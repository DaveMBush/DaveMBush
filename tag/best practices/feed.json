{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"best practices\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/dr-seuss-on-constructors/",
            "url": "http://davembush.github.com/dr-seuss-on-constructors/",
            "title": "Dr Seuss on Constructors",
            "date_published": "2023-07-22T14:21:00.000Z",
            "content_html": "<img src=\"/dr-suess-on-constructors/BugsVilleSam.png\" style=\"width: 100%;\" />\n\n<p>In the vibrant town of Bugville, known for its thrill,<br>There lived a brisk coder named Sam, climbing up a skill hill.<br>One day, he embarked on a project so grand,<br>To craft an entity, a creature named ClutterSand.</p>\n<span id=\"more\"></span>\n\n<p>With properties and methods, the ClutterSand was vast,<br>It needed a constructor, to echo its past.<br>A special function, Sam knew it true,<br>It’s called when an instance, of the class, is brand new.</p>\n<p>Sam, though clever, was fond of a trick,<br>“Why not let the constructor perform more?”, he picked.<br>Logics, computations, actions so raw,<br>In his constructor, he saw no flaw.</p>\n<p>His constructor, now bloated, did more than just spawn,<br>It fetched data, it computed, from dusk to dawn.<br>And as the ClutterSand grew, he felt a tad smug,<br>Ignoring a rising tide, under his proverbial rug.</p>\n<p>Inheritance and Polymorphism started to frown,<br>Base class antics caused the subclasses to drown.<br>Overridden properties, methods once lean,<br>Now gave unpredictable results, the scene turned mean.</p>\n<p>Guaranteed object initialization, once a steady rock,<br>Now seemed more like an elusive flock.<br>Objects weren’t always ready when constructors were through,<br>Leaving Sam puzzled, with a clue or two.</p>\n<p>Then came the exceptions, with nowhere to hide,<br>Complex tasks in constructor, made them collide.<br>Who’d handle these exceptions? Sam started to wonder,<br>As his codebase threatened to split asunder.</p>\n<p>Unit tests, Sam’s supposed trustworthy aid,<br>Became a nightmare, a never-ending raid.<br>With complex constructors, tests were a mess,<br>Frustration peaked, causing undue stress.</p>\n<p>Transparency, predictability, pillars of good code,<br>Began to wobble under the constructor’s load.<br>Debugging was like chasing shadows in the night,<br>Sam’s hasty decision didn’t seem so right.</p>\n<p>Days turned into nights, bug reports piled high,<br>Sam’s grand project was now but a sigh.<br>A lesson learned, a principle reborn,<br>A simple constructor, complex tasks must scorn.</p>\n<p>For constructors should be modest, diligent, and pure,<br>To make the objects ready, stable, and sure.<br>And for extra logic, another way must be sought,<br>So, dear coder, let this lesson not be for naught.</p>\n<p>Remember the tale of Sam and his ClutterSand,<br>In the world of code, let simplicity command.<br>Though the road was rough, and the journey was cruel,<br>In the end, Sam learned the golden rule!</p>\n",
            "tags": [
                "typescript",
                "best practices",
                "constructors",
                "clean code"
            ]
        },
        {
            "id": "http://davembush.github.com/how-you-do-anything/",
            "url": "http://davembush.github.com/how-you-do-anything/",
            "title": "How you do Anything ...",
            "date_published": "2018-02-20T11:30:35.000Z",
            "content_html": "<p>I’ve been programming now for 30 years. Over those thirty years, and more so over the last five to ten years, I’ve become increasingly frustrated by the attitude of managers and programmers alike toward programming. </p>\n<p>One programmer I know is pretty vocal about this attitude.  All he seems to care about is how fast he can write the code.  “I got that application done in a month!”  And then he’ll complain about how it is everyone else’s fault that he spent the next four months fixing bugs. </p>\n<p>And it is no wonder he has this attitude.  Most of the managers I’ve worked for will acknowledge that there is a lot of technical debt, but the pressure of getting the code written always outweighs the pressure of the debt. </p>\n<p>I’ve said for years that I’m not at all surprised that software has bugs.  What surprises me most is that any of our code works at all.  If we are honest about our code, we recognize that our code is worse than a store front on the wild west.  A nice facade on the front that everyone sees (if we are lucky) but look behind the facade and the store is barely standing up because the design, architecture and lumber is so bad. </p>\n<p>But, if it is true that “How you do anything is how you do everything.”  shouldn’t we spend a little time practicing quality in the not so obvious places so that we can get in the habit of quality?  Maybe a culture of quality will rub off into our code and produce code that really does get written quickly and has very little technical debt.  Not just in the area of bugs, but in flexibility, architecture, and design. </p>\n<p>So, what could we change in our programming practice that wouldn’t require persuading a manager to make a change in how the whole organization worked? <figure><img src=\"/uploads/2018/02/2018-02-20.jpg\" title=\"How you do anything...\"> Photo on <a href=\"//visualhunt.com/re/cecba2\">Visualhunt</a></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"How-do-you-Dress\"><a href=\"#How-do-you-Dress\" class=\"headerlink\" title=\"How do you Dress?\"></a>How do you Dress?</h2><p>When I first started programming, I had to wear a suit to work.  I forgot my tie one day and actually got reprimanded.  This, despite the fact that the programmers were tucked away in a back room that you had to know existed to get to.  That is, there was no way one of the customers our business worked with was going to find us.  I hated it. </p>\n<p>The pendulum has in the opposite direction.  I’ve been on several interviews where I’ve explicitly been told to NOT wear a suit. </p>\n<p>But I do wonder.  Does how we dress have an impact on our code?  If we don’t care much about how WE look, might we not care that much about what our code looks like?  Does it matter?  I think it might. </p>\n<p>Might it also subconsciously impact other’s view of the quality of code you produce?  You know the adage.  Always dress just below your manager.  But what if your manager dresses like a slob?  Currently, my signature work clothes are black jeans, button down shirt and a sweater.  But, I’m thinking of bumping it up a notch.</p>\n<h2 id=\"What-does-your-desk-look-like\"><a href=\"#What-does-your-desk-look-like\" class=\"headerlink\" title=\"What does your desk look like?\"></a>What does your desk look like?</h2><p>There was a guy I worked with early on in my career who always left his desk in a condition that looked like no one had worked at the desk in months.  Everything was put away.  Several years ago, I decided to take on that habit. </p>\n<p>Funny story.  A couple of gigs ago, a manager from three levels up came down to visit after I had left for the day.  She looked at my desk and said, “Does anyone work here?”  My manager said, “YES!!! Don’t touch anything!”  Guess she was hunting for stray equipment. </p>\n<p>I would say, this simple act was the pivot point for me when I started to care more about my code beyond “Does it work?” </p>\n<p>There is something about working in a clean area slightly dressed up.  Other parts of your life follow along for the ride.</p>\n<h2 id=\"Linters\"><a href=\"#Linters\" class=\"headerlink\" title=\"Linters\"></a>Linters</h2><p>One of those areas is what your code looks like.  A linter can be configured to enforce style rules on your code.  And can also catch dumb mistakes.  The more I use linters, the more convinced I am everyone should use one. </p>\n<p>Here is some of the ways you will benefit, even if you are the only one using a linter.</p>\n<ul>\n<li>Your code will always follow the same format.  This will make the code easier to read and understand.</li>\n<li>As I mentioned, some rules help catch dumb mistakes before you even run the code.</li>\n<li>Just like a clean desk feels inviting, well formatted code feels inviting.  The converse, poorly formatted code, adds to the stress level of working on the code.</li>\n</ul>\n<h2 id=\"Learn-Your-Tools\"><a href=\"#Learn-Your-Tools\" class=\"headerlink\" title=\"Learn Your Tools\"></a>Learn Your Tools</h2><p>I am amazed at how many places I’ve worked where they expect you to learn a particular tool on the fly.  No training.  “We are now using X on this next project.  Download it and start using it!”  And then they wonder why the project is such a disaster.  Bugs everywhere. </p>\n<p>Want to look like a rock star?  Want to be the guy the boss ask “what should we do?”  Be the guy who knows that new tool better than anyone else. </p>\n<p>In the process, you’ll also be the guy who uses the tool the way the people who developed that tool intended it to be used. </p>\n<p>Here’s a truth I’ve observed.  Everyone wants to use whatever tool they’ve just started using like the last tool they used.  And then, when it doesn’t, the new tool “doesn’t work.”  This one truth has done more to hold our industry back than any other one thing I can point to.</p>\n<h2 id=\"Design-Patterns\"><a href=\"#Design-Patterns\" class=\"headerlink\" title=\"Design Patterns\"></a>Design Patterns</h2><p>Learn the basic design patterns for your environment.  But go beyond learning the pattern.  Learn why the pattern exist.  What problem does it solve?  Be able to recognize counterfeits.</p>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>Along with Design Patterns, learn the basics of Architecture.  Here’s a hint.  All good architecture answers the question, “How can I write code that is not dependent on any other code?”  This is one of the reasons I love Functional Programming.  By design, Functional code is not dependent on other code.  Dependencies are passed into the function.  But you can achieve similar objectives using Object Oriented programming languages or even Procedural languages.</p>\n<h2 id=\"Single-Responsibility\"><a href=\"#Single-Responsibility\" class=\"headerlink\" title=\"Single Responsibility\"></a>Single Responsibility</h2><p>Granular is better than Monolithic!  Don’t be afraid to split things up.  Use components.  Compose classes of other classes.  Components of other components.  And most important of all, don’t create a Utils class of any kind.  In some languages this is easier than others.  But if you can, any method you have in a Utils class should be a function in its own file.  If you can’t do that, maybe each function belongs in its own class unless there is a strong argument for putting them together in a class that can be reasonably named in a way that obviously groups those methods. </p>\n<p>Another pet peeve of mine is putting multiple classes or interfaces in one file. Split them up!  Don’t make me go hunting for the source of a class. </p>\n<p>The ONLY time you might be excused from splitting things up is if the only place the code is being used is in the file’s main class.  But once you make that class available to the outside world, out it comes.</p>\n<h2 id=\"Alternate-Languages\"><a href=\"#Alternate-Languages\" class=\"headerlink\" title=\"Alternate Languages\"></a>Alternate Languages</h2><p>This should go without saying.  But the more languages you learn, the better programmer you will become.  I remember when I started learning C++, I had a hard time understanding references.  And then I started learning Clipper (a dBase III compiler) and something they said made references make sense suddenly. </p>\n<p>And this has been my experience all along.  Every new thing I learn helps me see problems in a slightly different perspective.  Making my code in every language I know that much better.</p>\n<h2 id=\"Code-Reviews\"><a href=\"#Code-Reviews\" class=\"headerlink\" title=\"Code Reviews\"></a>Code Reviews</h2><p>So far, everything I’ve mentioned is something you can do on your own.  This last one will require at least one other person.  Maybe you can buddy up with someone at work for this. </p>\n<p>It amazes me that in 30 years of programming, only three of those years have been in an environment where my code was ever reviewed by someone else.  But getting another set of eyes on your code is helpful if for no other reason than someone else has had to try to understand what you did while you still remember instead of waiting years and you’ve forgotten or moved on.  None of us are as smart as all of us.  Take advantage of another pair of eyes on your code, even if that’s not a formal thing where you currently work.</p>\n",
            "tags": [
                "agile",
                "best practices",
                "extreme programming"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-really-screw-up-an-angular-project/",
            "url": "http://davembush.github.com/how-to-really-screw-up-an-angular-project/",
            "title": "How to Really Screw Up an Angular Project",
            "date_published": "2017-12-12T11:30:38.000Z",
            "content_html": "<p>We all know about best practices.  But what does it take to really mess up a project?  Well, for starters, you do EVERYTHING wrong.  You don’t just ignore one or two best practices, you ignore them all.  By evaluating the mess you can get yourself into by ignoring best practices, I think we can all learn better why these recommendations exist. <figure><img src=\"/uploads/2017/12/2017-12-12.png\" title=\"How to Really Screw Up an Angular Project\"> Photo on <a href=\"//visualhunt.com/re/f81060\">VisualHunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Don’t-Use-the-CLI\"><a href=\"#Don’t-Use-the-CLI\" class=\"headerlink\" title=\"Don’t Use the CLI\"></a>Don’t Use the CLI</h2><p>I can grant a pass if you aren’t using the Angular CLI because you started your project before the CLI became viable.  But, by this point you should have already converted your project over to use the CLI or be making plans to move to the CLI.</p>\n<p>Why is this a problem? </p>\n<p>Because 99% of the developers you are going to find will expect that when you ask for an Angular developer, what you mean is that you are looking for someone who can write Angular code using the Angular CLI.  This brings with is a certain number of expectations about how your code is laid out.  Some of these are outlined below.  But just as a way of generalizing, if your code doesn’t look like it started as an Angular CLI project, you are going to slow down any future developers you hire.</p>\n<h2 id=\"Ignore-Naming-Conventions\"><a href=\"#Ignore-Naming-Conventions\" class=\"headerlink\" title=\"Ignore Naming Conventions\"></a>Ignore Naming Conventions</h2><p>Ignoring naming conventions may seem trivial, but naming conventions add clarity.  The reason we name component files as components is so we know they are all part of a component.  Reducer file names should be named <code>foo-bar.reducer.ts</code>.  Not naming the files in a way that is clear reduces the ability to maintain the code in a clear and efficient way. </p>\n<p>Maybe you’ve come up with your own naming conventions for your organization.  This is better.  But still this is not best.  This means that you probably won’t be able to use the CLI to scaffold out your code and any future developer is going to have to learn your way of writing Angular instead of the industry standard way of writing Angular. </p>\n<p>But the absolute worst thing you can do is to not have any standard or to mix standards.  This is confusing and just looks ugly.</p>\n<h2 id=\"Cluster-Code-by-Function-Instead-of-Feature\"><a href=\"#Cluster-Code-by-Function-Instead-of-Feature\" class=\"headerlink\" title=\"Cluster Code by Function Instead of Feature\"></a>Cluster Code by Function Instead of Feature</h2><p>The other thing you might be tempted to do is to cluster your code by function.  That is, you might want to group all of your components together.  And then all your services under another folder.  Maybe put your reducers under one folder and your effects under another. </p>\n<p>Trust me, this just adds fuel to the argument that “NgRX is confusing”.  Group all your similar NgRX code together and put all of your code together grouped by feature.  If you’ve named the files correctly, you won’t need the directories to keep things sorted out and you won’t be forced to use one module for your entire project.</p>\n<h2 id=\"Use-one-Module\"><a href=\"#Use-one-Module\" class=\"headerlink\" title=\"Use one Module\"></a>Use one Module</h2><p>Maybe you don’t know any better.  Or maybe it is because you’ve violated the rules above.  But no matter the reason, if you end up putting all your imports, providers, and declarations in your app module, you’ll soon see just how ugly this looks.  One for the whole application violates the single responsibility principle.  You want a module per feature at the very least.  I often create modules just to provide an additional level of granularity that further implements the single responsibility principle.</p>\n<h2 id=\"No-Lazy-Loading\"><a href=\"#No-Lazy-Loading\" class=\"headerlink\" title=\"No Lazy Loading\"></a>No Lazy Loading</h2><p>Yes, even if your application has only one route.  You want to lazy load your code so that a different bundle gets created for each route.  Done well, you can make changes to one route without impacting any of the others.  When you deploy the new code, your end user should only have to reload the route(s) that changed.  Without lazy loading, when you redeploy, they’ll have to reload an entirely new set of files.</p>\n<h2 id=\"Embed-Colors-and-Fonts-in-Component-CSS\"><a href=\"#Embed-Colors-and-Fonts-in-Component-CSS\" class=\"headerlink\" title=\"Embed Colors and Fonts in Component CSS\"></a>Embed Colors and Fonts in Component CSS</h2><p>You should have a theme file, or an application level CSS file that defines the fonts, and colors that should be used throughout your application.  The only CSS that should be included at the component level is CSS that is necessary to layout the html within the component.  That is, position information.  If you are putting color information in, or specifying a font size or font, you are probably doing it wrong. </p>\n<p>Why is this an issue?  </p>\n<p>Well, let’s suppose that someone decides that all of your warnings should be a different color.  If you can make that change in one CSS file, that is going to be a lot easier than looking through all the CSS in all of your components to make sure you found every place the color needs to be changed. </p>\n<p>Don’t repeat yourself makes just as much sense in CSS as anywhere else in your code.</p>\n<h2 id=\"Mix-Template-Files-and-Strings\"><a href=\"#Mix-Template-Files-and-Strings\" class=\"headerlink\" title=\"Mix Template Files and Strings\"></a>Mix Template Files and Strings</h2><p>As you should know by now, you can create the HTML templates and the CSS templates either by using strings in the TS file or by using separate HTML and CSS files.  You should use one style and use it consistently.  I’ve seen one project where they were using a mix of both and they had at least one file that was using a string for the HTML but still had the HTML file next to the TS and CSS file.  That’s just confusing.  Don’t do that!</p>\n<h2 id=\"Don’t-Remove-Dead-Code\"><a href=\"#Don’t-Remove-Dead-Code\" class=\"headerlink\" title=\"Don’t Remove Dead Code\"></a>Don’t Remove Dead Code</h2><p>As we work on code, we might create a variable, or use an import that no longer is needed.  The linter is really good about telling us what code is no longer needed.  Use it and keep you code cleaned up.</p>\n<h2 id=\"Don’t-Stay-Up-to-Date\"><a href=\"#Don’t-Stay-Up-to-Date\" class=\"headerlink\" title=\"Don’t Stay Up to Date\"></a>Don’t Stay Up to Date</h2><p>Angular is progressing at a pretty fast rate and the Angular CLI is as well.  I realize that it isn’t always possible to keep the version you are working on up to date with the latest tools.  But not keeping your tools up to date for several months at a time is also something you want to avoid.  The sooner you update, the easier the update will be. </p>\n<p>Will the update break something?  </p>\n<p>Yes, that is likely.  You should plan that into your work flow.  Otherwise, you’ll get to the point where it will take so long to update, you’ll never get approval to do it because it will take too long.</p>\n",
            "tags": [
                "angular",
                "best practices",
                "cli"
            ]
        },
        {
            "id": "http://davembush.github.com/reasons-software-architecture-matters/",
            "url": "http://davembush.github.com/reasons-software-architecture-matters/",
            "title": "Reasons Software Architecture Matters",
            "date_published": "2017-02-14T12:30:00.000Z",
            "content_html": "<p>Several weeks ago, I was talking to a programmer and we got into a discussion about the importance of software architecture. I maintained that having a defined architecture is important regardless of the team size, the person I was talking to asserted that architecture wasn’t necessary when there was just one person involved.</p>\n<p>But here’s the thing. All software has an architecture. Even the most junior of programmers has an idea of how code should fit together. At issue isn’t really about architecture. It is about having a defined architecture, based on experience and best practices, that will allow the team to develop the software in question as efficiently as possible. Software architecture, at its core, says, “this is how we build software.”</p>\n<p>To find the reasons why software architecture matters, it is helpful to think about what happens when there isn’t any defined architecture in place.  For the purposes of this article, I’m going to generalize on how architecture impacts teams and where appropriate show why that is also important when your team is just you. <figure><img src=\"/uploads/2017/02/image-1.png\" title=\"Reasons Software Architecture Matters\"> Photo via <a href=\"//visualhunt.com/\">VisualHunt</a></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>In a team, having an architecture is important simply because it means we can make certain assumptions about how someone wrote the code you are now looking at.</p>\n<p>Have you ever been in a situation where you wrote some code assuming that the programmers who would be using it had written their code in a particular way only to find out that they hadn’t and because of that, your code needs to be rewritten?</p>\n<p>Or, how about the time you went to work on a bug? Once again, you made some assumptions that weren’t true so it took you much longer to fix the bug than it would have had you known that your assumptions were wrong.</p>\n<p>Imagine what it would be like in those situations if the assumptions you were making were legitimate because everyone was using the same playbook. How much easier would that make your life?</p>\n<p>Ah, but your team is just you, and you know how you put the code together. </p>\n<p>OK. Fine. </p>\n<p>But what about two years from now? Without a defined architecture, would you say you code things the same way every time? I know, even with an architecture, sometimes I “cheat” and my code doesn’t always follow the rules I’ve set out. If I do that WITH an architecture, I can just imagine how sloppy my code would be without it.</p>\n<h2 id=\"Arguments\"><a href=\"#Arguments\" class=\"headerlink\" title=\"Arguments\"></a>Arguments</h2><p>Get any two programmers in a room and you will almost always get two different opinions about how software should be written. A good architecture reduces the number of arguments so we can get on with the craft of writing code. I’ve been in situations where, even with an architecture, there are programmers who disagree. Some with good reason. But if you don’t have any definition, all you end up with is two opinions with no rule book to say who is “right.”</p>\n<h2 id=\"Cognitive-Load\"><a href=\"#Cognitive-Load\" class=\"headerlink\" title=\"Cognitive Load\"></a>Cognitive Load</h2><p>With so much to consider in software development, the fewer decisions we have to make, the better. This leaves brain power for solving problems that still need answers.</p>\n<p>There are people who wear the same thing every day, or nearly the same, so they don’t have to make that decision. I’m actually one of those people. I kind of fell into this mode of dressing because I’m color blind and this is one of my ways of compensating. But I can tell you, it leaves me free to think about other things as I get ready in the morning.</p>\n<p>This is another place where software architecture will help you regardless of team size. Even if you are the only one on the team, this is one less thing to think about.</p>\n<h2 id=\"Scrambled-Eggs\"><a href=\"#Scrambled-Eggs\" class=\"headerlink\" title=\"Scrambled Eggs\"></a>Scrambled Eggs</h2><p>Software built without an architecture will eventually take on the feel of scrambled eggs. Imagine how hard it will be to modify the code when you have no idea where the different parts of your code should go.</p>\n<p>And once again, we end up with a system that is difficult to maintain simply because no one knows for sure where the various parts of the system should live.</p>\n<h2 id=\"Good-Architecture\"><a href=\"#Good-Architecture\" class=\"headerlink\" title=\"Good Architecture\"></a>Good Architecture</h2><p>You’ll notice I’ve been saying “Good” architecture. This is because I’ve been in situations where the architecture has not been defined tightly enough leaving too many loop holes. I’ve also seen architectures misapplied. It is important when an architecture is defined that the person defining is knows something about the tools that will be used and the environment they will be used in.</p>\n<p>It is also helpful if the architectures that are defined, are defined by consensus rather than having one person defining it. We all have holes in our thinking. Someone may be a great architect, but maybe they suffer from the old saying, “when all you have is a hammer, everything looks like a nail.” More people bring more points of view. This can fill in gaps and can produce an architecture that can be used rather than one that will be resisted.</p>\n<h2 id=\"Success\"><a href=\"#Success\" class=\"headerlink\" title=\"Success\"></a>Success</h2><p>This is all about building successful systems. But just because you got some code working and into production doesn’t mean the code is going to hold up over time.</p>\n<p>There is one guy I know who brags about how fast he can write code. Well, yes, you did get that into QA in a month. But, it took you three months to get it out of QA. The test of a good architecture is:</p>\n<ol>\n<li>Does it help make the project successful?</li>\n<li>Is it relatively easy to understand?</li>\n<li>Has it been adopted by the team using it?</li>\n<li>Is it generally accepted as a valid architecture in the community at large for similar software.</li>\n<li>Does it make the code easier to maintain?</li>\n</ol>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>So, now I’ve convinced you that you should be using an architecture. How do you get started? It is a lot easier than you think. Most frameworks either have an architecture already defined, or somewhere the community has already defined one for it. Start there. Maybe refine it a bit and settle on something that works.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>If you don’t use an architecture yet, you are probably still thinking, “Yeah, but I don’t have any issues that this would solve.” To which I would answer, “How do you know? What if your wrong?”</p>\n<p>You see, most of my reasons have to do with making software development easier or better. I’m not saying you can’t get something done without architecture. What I am saying is that with architecture you can do everything you are already doing better, faster, cheaper, and easier. Until you try it, you’ll never know if I’m right or not.</p>\n",
            "tags": [
                "best practices",
                "software architecture"
            ]
        },
        {
            "id": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "url": "http://davembush.github.com/how-to-establish-peace-to-the-qa-vs-dev-battle/",
            "title": "How to Establish Peace to the QA vs Dev Battle",
            "date_published": "2016-09-13T10:30:00.000Z",
            "content_html": "<p>Have you ever noticed how, when QA reports a “defect” developers tend to bristle?  I first noticed this in myself a few years ago.  Now that I’m functioning as a Scrum coach, I’m noticing it in others.</p>\n<p>Is there a way to have some kind of quality checking in our code that doesn’t make the whole process feel so adversarial?  I think so.</p>\n<p>I believe there are some adjustments that need to be made organizationally and personally that will bring these two groups together.</p>\n<p>But first, why does this problem exist in the first place? <figure><img src=\"/uploads/2016/09/image.png\" title=\"How to Establish Peace to the QA vs Dev Battle\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/39908901@N06/9129574323/\">m01229</a> via <a href=\"//visualhunt.com\">Visual hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\">CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"How-The-Battle-Started\"><a href=\"#How-The-Battle-Started\" class=\"headerlink\" title=\"How The Battle Started\"></a>How The Battle Started</h2><h3 id=\"How-to-Insult-a-Programmer\"><a href=\"#How-to-Insult-a-Programmer\" class=\"headerlink\" title=\"How to Insult a Programmer\"></a>How to Insult a Programmer</h3><p>When I was growing up, my sister was very direct.  If she thought you were ugly, she’d tell you so.  OK.  Maybe it wasn’t quite that bad.  But one day, I remember she said something to the effect of, “I didn’t say anything that wasn’t true.”  And both my mom and I said, “Yes, but it isn’t what you said so much as how you said it.”  In fact, you can say the same words in two entirely different ways.  Two sets of inflections.  And what they mean can change drastically.  Sometimes just changing the words you use can change the meaning.</p>\n<p>But, to a programmer, no matter how you say, “Your code has a bug,” they will probably end up hearing.</p>\n<p>“Your code sucks!” You see.  Programmers really do care about their code.  At least the really good ones do.  And while it may seem very silly, most programmers get offended when you suggest they’ve written buggy code.</p>\n<p>This, you see, is the core of the problem.  Once you understand this, the fix becomes rather obvious.</p>\n<h3 id=\"Don’t-Call-It-a-Bug\"><a href=\"#Don’t-Call-It-a-Bug\" class=\"headerlink\" title=\"Don’t Call It a Bug\"></a>Don’t Call It a Bug</h3><p>I think nothing has done more damage in the field of programming that the fact that we call software problems “Bugs.”  It is such an ugly word.  When is the last time, other than a Pixar movie, when we’ve thought of bugs as something we would want to welcome?  We might as well say, “Hey, I found some shit in this program!” When I got my Scrum certification, our instructor asked a simple revealing question.  “How many of you think people are doing their best to do the right thing?”  That’s not exactly what he asked, but that’s what he meant.  If you believe that all evil in the world is intentional, you’ll come away believing that all programmer intentionally put bugs in their code.  And while I do know of a few cases where this has happened.  Most of us try our best to write perfect code.  When we don’t it is because we didn’t think of the situation and code for it.</p>\n<p>If on the other hand, you think everyone is trying to do their best, why treat defects in software as something evil? To paraphrase Scott Hanselman, “Most people are not nearly smart enough to be as evil as you act like they are.”</p>\n<h3 id=\"Most-Bugs-are-a-Specification-Problem\"><a href=\"#Most-Bugs-are-a-Specification-Problem\" class=\"headerlink\" title=\"Most Bugs are a Specification Problem\"></a>Most Bugs are a Specification Problem</h3><p>Weather you have a formal specification or an informal specification, my observation is that most “Bugs” that show up in code are a result of either 1) the specification being misunderstood or 2) the specification being incomplete.</p>\n<p>Yes, there are a few places where neither of those are true and the programmer clearly missed the mark.  But, even then, assuming they missed the mark rather than assuming the specification was unclear will go a long way in making the programmer more receptive to the fact that the code needs to be changed.  Just the fact that we call a defect in our programs a “Bug” reveals and colors what we think about who’s fault</p>\n<h2 id=\"What-Programmers-Can-Do\"><a href=\"#What-Programmers-Can-Do\" class=\"headerlink\" title=\"What Programmers Can Do\"></a>What Programmers Can Do</h2><h3 id=\"It’s-Not-Personal\"><a href=\"#It’s-Not-Personal\" class=\"headerlink\" title=\"It’s Not Personal\"></a>It’s Not Personal</h3><p>Listen gang.  Bugs are not a reflection of your personal character.  And even if someone thought it was, that doesn’t make it true.  At worse, it means you might have some stuff you still need to learn about how to program well.  OK.  We’ll never be perfect.  Think about this, while you are writing the code, your compiler, or runtime, tells you you’ve done something wrong quite frequently.  But as soon as a human tells you something similar, you take it personally?  That’s pretty wacked.</p>\n<p>Here are a few tips I’ve learned:</p>\n<ul>\n<li>Emotions are learned responses.  This means your negative response to bugs can be retrained.</li>\n<li>Just because someone says something about you, or disapproves of you personally, doesn’t mean they are right.</li>\n<li>Most criticism is only an opinion based on an expectation.</li>\n</ul>\n<p>If you can internalize these, you will be much more receptive to hearing that your code has a flaw.</p>\n<h3 id=\"Break-the-Spec-into-Tasks\"><a href=\"#Break-the-Spec-into-Tasks\" class=\"headerlink\" title=\"Break the Spec into Tasks\"></a>Break the Spec into Tasks</h3><p>One thing I’ve started doing recently that I’ve found to be a great help is that I’ve started breaking the specification I’ve been given down into the composite task that I’ll need to implement the specification.  How granular.  I aim for task that should take less than four hours.  By getting this granular, I’m able to accurately estimate how long it should take me to complete the specification, and I’m sure I’ve caught all of the tasks involved in completing the specification.</p>\n<p>You should track your time against your estimates so you can get a sense of how far off your gut is relative to reality.  This will improve your ability to estimate projects.</p>\n<p>By breaking down the project like this, you are more likely to see holes in the requirements before you even start coding.</p>\n<h3 id=\"Create-a-Test-Plan\"><a href=\"#Create-a-Test-Plan\" class=\"headerlink\" title=\"Create a Test Plan\"></a>Create a Test Plan</h3><p>The other thing I’ve started doing is that I’ve started writing out how I plan to test the specification once I’ve completed it.  I just write this out.  Once again, this helps me find holes in the requirement.  But this also forces me to start thinking of ways someone might use the code that would break it.  And that simple act of trying to break it in my mind prior to coding it, refines the spec, and makes my code more reliable.</p>\n<h3 id=\"Ask-for-a-Review\"><a href=\"#Ask-for-a-Review\" class=\"headerlink\" title=\"Ask for a Review\"></a>Ask for a Review</h3><p>Once you have your tasks and your test plan, ask the person who gave you the spec to review it.  “Does this look like it reflects what you’ve asked me to do?”  This does two things.  First, and most importantly, it ensures you understand what it is you are building.  But, it also enlists someone else in the responsibility of ensuring what you finally build is what should have been built.</p>\n<h2 id=\"What-QA-Can-Do\"><a href=\"#What-QA-Can-Do\" class=\"headerlink\" title=\"What QA Can Do\"></a>What QA Can Do</h2><h3 id=\"Don’t-Call-Them-Bugs\"><a href=\"#Don’t-Call-Them-Bugs\" class=\"headerlink\" title=\"Don’t Call Them Bugs\"></a>Don’t Call Them Bugs</h3><p>I remember reading a Louis L’amour book one where the basic plot was this wagon train going out west.  At the beginning of the trip they had all agreed that no “bad language” was allowed.  And then one day, someone used the word, “shit” to describe cow poop that was on the ground.  The group was in shock and he was reprimanded.  At that point I remember the line, “If a word makes it any different, why don’t we just call it pudding?” But you see, as I’ve already explained, a word DOES make a difference.</p>\n<p>The word I would prefer to use is “Specification Refinement” because, in the end, that is what they are.</p>\n<h3 id=\"Don’t-Write-Requirements\"><a href=\"#Don’t-Write-Requirements\" class=\"headerlink\" title=\"Don’t Write Requirements\"></a>Don’t Write Requirements</h3><p>One thing I’ve noticed happens quite frequently is that once QA has verified all of the items in the requirement, they start doing exploratory testing, as they should.  But, when they find something, they inadvertently start writing requirements.  It looks like this.</p>\n<p>“I did X, Y and Z.  I expected to get result 1 but instead got result 2.” Some of you are probably thinking, “What’s wrong with this?!” Well, why did you EXPECT to get result 1?  If the expectation was not listed in the requirement, you have no valid reason to expect anything.  Your expectation is just your opinion about what should happen based on previous experience.</p>\n<p>So, how to write up this problem instead? “I did X, Y and Z and 2 happened.  This doesn’t look right but I don’t see anything in the spec that says what should happen.”</p>\n<h3 id=\"Don’t-Assign-Bugs\"><a href=\"#Don’t-Assign-Bugs\" class=\"headerlink\" title=\"Don’t Assign Bugs\"></a>Don’t Assign Bugs</h3><p>This one is going to fly in the face of QA teams everywhere.  But remember, we are trying to find peace in what has become an antagonistic relationship.</p>\n<p>Remember how I said that programmers react emotionally to the fact that you found a bug?  Well, if you assign a bug to them and they get a notification about that bug in the middle of writing code for the current sprint, here is what is going to happen.  First, the email is going to interrupt them.  Second, they will have an emotional response to the bug report that could continue to derail them for the rest of the day.</p>\n<p>Instead, you should be assigning the bug to the project.  Assuming you are using Scrum and have a backlog, the issue should be put on the backlog for grooming.  Grooming would include figuring out who is responsible for the bug or who is responsible for finding out what the core issue is so we can assign the bug appropriately.</p>\n<p>One of the problems I’ve seen with assigning bugs to specific developers is that the bug is often assigned incorrectly.</p>\n<p>By assigning the bugs to the back log as specification refinements, they just become additional features and the sting associated with “Bugs” goes away.</p>\n<p>If you are using software that requires you to assign bugs to an individual, make that individual the Scrum Master, Product Owner, or Project Manager (if you aren’t doing Scrum).</p>\n<h2 id=\"Organizational-Changes\"><a href=\"#Organizational-Changes\" class=\"headerlink\" title=\"Organizational Changes\"></a>Organizational Changes</h2><p>Finally, I want to address organizational changes that you may need to make.  Hopefully, you are already doing this.  But my experience tells me otherwise.</p>\n<h3 id=\"Silos-Kill\"><a href=\"#Silos-Kill\" class=\"headerlink\" title=\"Silos Kill\"></a>Silos Kill</h3><p>Everywhere I go, QA is a separate department.  Why can’t QA be co-located with the developers?  Wouldn’t it make a lot more sense to have QA working with the developers to figure out a test plan so we can code for the plan rather than having the plan developed in isolation?  I get that exploratory testing might reveal additional issues, but certainly some of those issues can be revealed early by defining how the code is going to be explored.  Plus, making everyone part of the same team means they are all working toward the same goal.  No one gets offended that way.</p>\n<p>When one QA person found out I was writing unit tests, she asked, “What will be left for me to tests?”  Which I found to be an incredibly naïve way of thinking.  Wouldn’t you hope that you don’t find any problems with the code I am working on?  How is the fact that I’m testing a problem for QA?  Aren’t we all working on the same goal?</p>\n<h3 id=\"Central-Source-of-Truth\"><a href=\"#Central-Source-of-Truth\" class=\"headerlink\" title=\"Central Source of Truth\"></a>Central Source of Truth</h3><p>Another place that needs to be addressed related to silos – Another area that re-enforces and is a result of silos – is this habit of each group using their own project management software.</p>\n<p>In one organization I’ve worked at we used four different systems.  One system for version control (GitHub) another system for QA (HP Quality Center) a third system to manage requirements (which we only used minimally and instead had documents on a shared drive) and a forth system for managing our Kanban board (Jira).</p>\n<p>The frustrating thing is that 80% of what everyone needed to do could have been achieved by using GitHub.  But even if we needed to use separate systems for the actual artifacts, it seems to me that we could use one system for tracking the project instead of having it tracked three or four different ways.  That’s just craziness.</p>\n",
            "tags": [
                "project management",
                "best practices",
                "QA"
            ]
        },
        {
            "id": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "url": "http://davembush.github.com/are-you-average-or-awesome-9-ways-to-improve/",
            "title": "Are You Average or Awesome? 9 Ways to Improve.",
            "date_published": "2016-05-12T11:30:00.000Z",
            "content_html": "<p>The story goes that there were two men, Joe and Frank, who were camping out in the woods when a bear showed up in the camp.  Terrified, they decided the best they could do would be to stay perfectly still until the bear left.  Hopefully, the bear wouldn’t notice them.  As the bear was poking around, Joe says to Frank, “What are we going to do if this doesn’t work?”  Frank says, “Run!”  Joe says, “You really think we can out run a bear?”  Frank says, “I don’t need to out run the bear.  I only need to out run you.”</p>\n<figure>![](/uploads/2016/05/image.png \"9 Ways to Improve\")<figcaption>Photo credit: [Internet Archive Book Images](//www.flickr.com/photos/internetarchivebookimages/14767148885/) via [VisualHunt.com](//visualhunt.com) / [No known copyright restrictions](//flickr.com/commons/usage/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<p>For years I have used this story to encourage my kids to be better than their peers.  Right now, most people are so “out of shape” that “running faster” than the competition is easy.  By comparison, my kids look awesome when by any other measure, they are probably only doing the bare minimum necessary.  This is not to say they aren’t REALLY good at what they do but, there is always room for improvement.</p>\n<h2 id=\"Average-Programmers\"><a href=\"#Average-Programmers\" class=\"headerlink\" title=\"Average Programmers\"></a>Average Programmers</h2><p>And then there are conversations I have with other programmers.  So many think they are great when they are only slightly better than the people they are working with.  The lack of desire to learn more, to be any better than adequate, is appalling.  And this is to say nothing of the programmers who never make the cut.  The ones I never work with because the people I work with and for won’t hire them.  I’ve been a part of some of those interviews.</p>\n<p>People who can’t answer the most basic of <a href=\"/7-c-interview-questions-that-weed-out-the-losers/\">C#</a>, ASP.NET, or <a href=\"/7-javascript-interview-questions-to-weed-out-imposters/\">JavaScript questions</a>.  This is to say nothing of <a href=\"/5-reasons-learning-terminology-increases-your-effectiveness-as-a-programmer/\">people who believe knowing concepts trumps knowing the terms</a> that specify them.</p>\n<h2 id=\"Average-Organizations\"><a href=\"#Average-Organizations\" class=\"headerlink\" title=\"Average Organizations\"></a>Average Organizations</h2><p>And then there are the organizations who settle for frameworks that provide “Silver Bullet” answers to problems.  Not because this is technically, the best solutions, but because this is the solution the requires the least from the developers they have working for them.  The problem with this approach is that it doesn’t demand excellence from the programming team that works for them.  And don’t get me started on managers who think they are “doing Agile” who obviously don’t even recognize that “Agile” is not a noun.</p>\n<p>The problem with comparing ourselves to our peers is that you can always find someone worse than yourself.  Not only is this true because you will always find someone who just doesn’t care, but even if we all cared, there will always be someone, who for any number of reasons, can’t be as good as you are.</p>\n<h2 id=\"Be-Awesome\"><a href=\"#Be-Awesome\" class=\"headerlink\" title=\"Be Awesome\"></a>Be Awesome</h2><p>But we can all strive to be the best.</p>\n<p>As programmers, what if we all decided to make as our goal code so bug free that no one could find problems with the code we wrote?  Maybe there is some part of the language you program in, or the framework that you use, that you’ve never tried.  How about learning it?  Is there a tool you could start using that would help you program better?  Maybe you’ve exhausted everything there is to learn about the language or framework that you use.  Maybe it is time to learn some other language.</p>\n<p>Who do you want to be? What do you want to be known for? These are interesting questions because they cause us to focus.  Do you want to be known as mediocre?  Keep coasting.  Do you want to be the person who gets the challenging problems because you are the only person who is reliable enough to give the project to? The problem with out-running your peers is that eventually, the bear will be the only thing behind you.  Where will you be?</p>\n<h2 id=\"Action-Steps\"><a href=\"#Action-Steps\" class=\"headerlink\" title=\"Action Steps\"></a>Action Steps</h2><p>OK, fine.  How do we get from mediocre to awesome?</p>\n<h3 id=\"1-Decide-to-Master-a-Skill\"><a href=\"#1-Decide-to-Master-a-Skill\" class=\"headerlink\" title=\"1. Decide to Master a Skill\"></a>1. Decide to Master a Skill</h3><p>I don’t care who you are or how good you are, there is still something you don’t know.  The great thing about being a programmer is that there is always something to master.  Do some sort of self-evaluation on your skills and determine to master some skill.</p>\n<p>Just by way of example, here are some possible skills you might learn.</p>\n<ul>\n<li>Test Driven Development</li>\n<li>Deep Dive a Language you “Know”</li>\n<li>Learn a Language You Don’t Know</li>\n<li>Design Patterns</li>\n</ul>\n<h3 id=\"2-Teach\"><a href=\"#2-Teach\" class=\"headerlink\" title=\"2. Teach\"></a>2. Teach</h3><p>The best way to learn a topic is to teach the topic.  There are at least two reasons for this.  First, preparing to teach makes you organize all of those scattered bits of information in your brain in a way that someone else can grasp.  Second, it will raise questions you didn’t even know you should ask.  I can’t tell you how many times I’ve explained something and the person I am teaching ask a question I’ve never considered before.  If you don’t know the answer, find the answer.  You obviously don’t know your subject as well as you think you do.</p>\n<p>Here are some possible ways to teach.</p>\n<ul>\n<li>Host a “Lunch and Learn”</li>\n<li>Start a Blog</li>\n<li>Write a Book</li>\n<li>Mentor a Younger Programmer</li>\n<li>Present Something at a Users Group or Meet-up.</li>\n</ul>\n<h3 id=\"3-Track-Progress\"><a href=\"#3-Track-Progress\" class=\"headerlink\" title=\"3. Track Progress\"></a>3. Track Progress</h3><p>In the business world, they say, “what you measure, grows.”  So, measure:</p>\n<ul>\n<li>Decrease in bugs reported.</li>\n<li>Elapse time from start of project to bug free code.</li>\n<li>Cyclomatic complexity of your methods.</li>\n</ul>\n<h3 id=\"4-Interview-for-a-New-Job\"><a href=\"#4-Interview-for-a-New-Job\" class=\"headerlink\" title=\"4. Interview for a New Job\"></a>4. Interview for a New Job</h3><p>One of the things I’ve found that interviewing for new gigs does for me is that it reveals things I should know.  I find out quickly what I should know that I don’t.  And don’t be the guy who says, “If my 30 years of experience isn’t good enough for you, I don’t want your stinking job.”  Answer the questions, not matter how much experience you have.  You might just learn something.  If you don’t know the answer, after the interview, go find the answer.  Don’t be like, “why should I keep that in my brain?”  I mean, that might be true, but go find the answer too.</p>\n<p>I had one of those interviews.  I wrote a whole post about it that I deleted.  They had me doing something I was unable to do and that I felt the rest of my knowledge and skills more than compensated for.  But, after the interview, I went and found out how to do what they had asked.</p>\n<h3 id=\"5-Change-Jobs\"><a href=\"#5-Change-Jobs\" class=\"headerlink\" title=\"5. Change Jobs\"></a>5. Change Jobs</h3><p>This probably sounds like odd advice, but as a contract programmer, I’ve been on assignments that have lasted as long as 8 years and I’ve been on assignments that were as short as 4 months.  What I’ve learned is that the longer I stay on an assignment, the staler my skills become.  That 8-year gig nearly made me unmarketable.  Why?  Because I never had to learn something new.  The only reason I am still marketable is because I started learning newer stuff toward then end of that gig.  When the gig was changing every 2 years or so, I was a lot more capable of moving into a new position.  Now, I’m learning all the time.  Learning what I think will make me more marketable as well as what I would really like to be doing next.  Some of that makes its way into what I’m doing today.  Some of it will have to wait.  But it is all experience and it is all valuable.  The point is, don’t get stuck knowing what you know.  Switching jobs is the fast way to achieve that.</p>\n<h3 id=\"6-Ask-for-a-Code-Review\"><a href=\"#6-Ask-for-a-Code-Review\" class=\"headerlink\" title=\"6. Ask for a Code Review\"></a>6. Ask for a Code Review</h3><p>To be clear, what you are asking for is a review of your code, not how pretty it is.  Although, depending on how much experience you have, there may be some benefit in having your code reviewed for formatting as well as clarity.</p>\n<p>What I would hope you would get out of this exercise is several, “Have you considered doing it this way…” kind of comments.  If you can’t get someone to review your code, there are some great code cop kind of tools available for every language that you can have review your code for common mistakes.  But even better if you can get another human to look at your code.</p>\n<p>It is interesting, I’ve been coding for 28 years and I’ve lost track of how many companies I’ve worked for.  There was only one company that I’ve ever worked for that did code reviews.</p>\n<h3 id=\"7-Change-Your-Body-Language\"><a href=\"#7-Change-Your-Body-Language\" class=\"headerlink\" title=\"7. Change Your Body Language\"></a>7. Change Your Body Language</h3><p>This probably seems like really odd advice so let me explain.  Or maybe you’ve already seen the <a href=\"//www.ted.com/speakers/amy_cuddy\">Ted talk</a> by Amy Cuddy that says the research shows that if you assume a body position that says, “I’m awesome” you are more likely to feel awesome.  But you may wonder what feeling awesome has to do with BEING awesome.</p>\n<p>Well, in my experience, you end up being who you believe yourself to be.  One way of hacking yourself into being awesome is to convince yourself that you are.  The best way to do that is to assume body positions that communicate that you are.</p>\n<p>Don’t think this is possible?  I grew up walking toe out.  At some point in High School or College, I read that it was more efficient to walk with my feet parallel to each other.  I started concentrating on changing how I walk.  Now I no longer think about it.  I haven’t thought about it for years.</p>\n<p>I’ve done the same thing with my body position.  Not as hard a modification, but I’ve noticed that it DOES work.</p>\n<h3 id=\"8-Don’t-Brag\"><a href=\"#8-Don’t-Brag\" class=\"headerlink\" title=\"8. Don’t Brag\"></a>8. Don’t Brag</h3><p>The other thing that changing your body language will do is that it will communicate that you are confident and you’ll never have to say a word.  I believe I’m pretty good at what I do, but my general practice is to let what I know be discovered.  As I’ve observed my peers, I’ve found that the more they proclaim how great they are, the less confident they are that they really are, and generally, they aren’t.  You don’t want to be that person.  You want to portray confidence to be confident, but you want to be discovered.  “Even a fool, when he is silent, is considered wise.” and “Better to be silent and be thought a fool than to open your mouth and remove all doubt.”</p>\n<h3 id=\"9-Focus-On-One-Thing\"><a href=\"#9-Focus-On-One-Thing\" class=\"headerlink\" title=\"9. Focus On One Thing\"></a>9. Focus On One Thing</h3><p>The temptation, if you are motivated at all, is to try to improve in every area all at once.  That is a recipe for disaster.  Focus on one thing.  I didn’t change how I walked and how I talked and how I ran and how I sat and… you get the picture.  I focused on how I walked.  Sometime later I focused on how I sat.  I learned how to code well and then how to do Test Driven Development.  I’m often asked how I learned all I know.  It is easy, I learned one thing at a time.</p>\n",
            "tags": [
                "tdd",
                "interview",
                "best practices",
                "design patterns"
            ]
        },
        {
            "id": "http://davembush.github.com/raking-leaves-and-writing-code/",
            "url": "http://davembush.github.com/raking-leaves-and-writing-code/",
            "title": "Raking Leaves and Writing Code",
            "date_published": "2014-11-20T12:00:00.000Z",
            "content_html": "<p>So, today I had the task of removing the leaves from my yard, which gave me a lot of time to think because it is a pretty solitary job, even if you have people helping you, because much of the time I was using a leaf blower.  It is pretty hard to hold any kind of conversation when you are using a leaf blower.</p>\n<p>And  as I was running the leaf blower, I was thinking about what I was going to talk about today.  And then it struck me, why not just talk about cleaning up the leaves?  I mean if John Sonmez and Scott Hanselman can talk about stuff that isn’t necessarily programming related, why can’t I?</p>\n<p>But then I realized, I could talk about cleaning up the leaves in my yard AND talk about programming at the same time.</p>\n<p>Think about it.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Rake-Leaves\"><a href=\"#Why-Rake-Leaves\" class=\"headerlink\" title=\"Why Rake Leaves?\"></a>Why Rake Leaves?</h2><p>Why did I clean up the leaves in my yard?  It wasn’t to make my yard look better.  No one can see my yard from the road.  No one would care but my family, and they do care.  But even if they didn’t, we ultimately clean the leaves off our yards because doing that means our grass will grow better next summer by allowing it to see the sun now.  We do it because nasty critters live in leaves.  We remove the leaves from our drive ways and sidewalks so that snow removal will be easier in the winter.  In short, as hard as the work is to take care of our leaves in the fall, the work is worth it because it makes the rest of the fall and winter easier for us  in the long run.</p>\n<p>What’s interesting about the first reason, allowing the grass to get more sun during the fall months, would mean that it would actually be better to clean up the leaves frequently during the fall rather than waiting for them to all fall and then rake them.  By the time I get to them, it is probably too late to do any real good because I wait for them to all fall before I remove them.  By that time, the sun shines less during the day and the frost has already kicked in.</p>\n<h2 id=\"How-Is-This-Related-to-Code\"><a href=\"#How-Is-This-Related-to-Code\" class=\"headerlink\" title=\"How Is This Related to Code?\"></a>How Is This Related to Code?</h2><p>And that brings me to our code.  We all have code that needs “raking”.  You know you have code that is duplicated all over the place, but have you taken any time to collect all of that code into one place as a function?</p>\n<p>How many code smells do you have.  Are your functions long?  Do you have conditional blocks nested more than one deep?  Do you have classes that do more than one thing?  Have you written code that isn’t being used because “we might need it some day”?</p>\n<p>As I work with inexperienced programmers, the one thing I notice is that looking for places to simplify code is a skill that needs to be practiced.  It doesn’t come naturally.  Very few programmers assume that as long as the code does what it should, they are done.</p>\n<p>And yet, leaving these code smells in place means that the next time you go in to work on the system, you will not be able to understand the code as well as you should.  Because you haven’t let the sun shine on your code, when you get to it to maintain it, you’ll be working in mud instead of nice green grass.</p>\n<h2 id=\"The-Challenge\"><a href=\"#The-Challenge\" class=\"headerlink\" title=\"The Challenge\"></a>The Challenge</h2><p>So today, your job is to find one place in your code that could be made better.  Make it less complicated.  Make it fewer lines of code (without making it hard to read).  Find two places that are doing essentially the same thing and turn that code into a function.  Find two classes that are tightly coupled (highly dependent on each other) and remove the dependencies.  Do this once a day for the next thirty days and see if you don’t find your code easier to work with than it  is today.</p>\n",
            "tags": [
                "programming",
                "best practices",
                "code quality"
            ]
        },
        {
            "id": "http://davembush.github.com/avoiding-code-complexity/",
            "url": "http://davembush.github.com/avoiding-code-complexity/",
            "title": "Avoiding Code Complexity",
            "date_published": "2014-06-19T17:27:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/06/clip_image001.png\" alt=\"clip_image001\" title=\"clip_image001\">A couple of weeks ago, I talked a bit about how we name things.  Specifically, I talked about the <a href=\"/i-j-and-k-should-die/\">very bad habit of using the variables i, j, and k as variables in our for&#x2F;next loops</a>. A few weeks before that, I talked about <a href=\"/dry-programming/\">DRY Programming</a> and the fact that not repeating ourselves extends much farther than most of us normally think when we are thinking about our code. Today I want to continue on the general theme of code quality by discussing code complexity.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it?\"></a>What is it?</h2><p>Generally, code complexity is anything you introduce into your code that makes it hard to follow.  But here are a few areas you might look for code complexity.</p>\n<h2 id=\"Do-you-have-REALLY-long-methods\"><a href=\"#Do-you-have-REALLY-long-methods\" class=\"headerlink\" title=\"Do you have REALLY long methods?\"></a>Do you have REALLY long methods?</h2><p>Here’s the deal.  The longer your method is, the more work it will be to keep track of the overall point of the method.  So, you want to keep the number of lines in your method low.  If you are doing too much, when you come back to your code, even you will be confused. I remember when I first started programming.  We only had 25 lines for a full screen, and the rule was, you should be able to see the full function or method on one screen full of code in your editor.  The problem with that metric now is that our screens have gotten capable of showing a lot more code.  It’s a lot like telling a new driver, he should be able to still see the license plates of the car in front of him when he stops behind a car.  Some cars exist where my tiny little Civic would be IN the other car and I’d still be able to see the plates. A better metric would be to use the 7 +&#x2F;- 2 rule.  Ideally no more than 7 lines of functional code per method.  If you have to, you can fudge it to up to 9, but no more.  This is because the human brain can only deal with about 7 items at a time. I can think of a few times when you might want to break this rule, like when you have a set of conditions that really need to all be in the same place for them to make sense, but it wouldn’t hurt to try to keep to the rule as often as possible.</p>\n<h2 id=\"Do-you-have-a-lot-of-conditions-within-one-method\"><a href=\"#Do-you-have-a-lot-of-conditions-within-one-method\" class=\"headerlink\" title=\"Do you have a lot of conditions within one method?\"></a><strong>Do you have a lot of conditions within one method?</strong></h2><p>When I was discussing the problem with using i, j, and k as variables, I kind of mentioned this, but I didn’t dwell on the subject a lot. You see, the story I told when I was telling you all about the i, j, and k problem violated all of the readability rules.  First, it was using the wrong variable names.  Second, the method was MUCH too long.  And third it had too many conditions. You might think that only if&#x2F;else statements are conditions.  But so are for&#x2F;next, while, do&#x2F;while, and switch statements.  As much as you can, your code should be setup so that you only have one condition per method.  Three at the most.  Again, switch statements might loose their context, but here, I would have one method that handles the switch statement and only one line per case statement.  Each case statement should call a function that does the real work. There is a tool in Visual Studio 2013 that will help you determine how bad your methods are.  You can calculate metrics for a project or the entire solution and it will generate a table of the Cyclomatic complexity of your code.  Look for methods that have a Cyclomatic complexity of over 10 and try to bring them down.  The closer to  zero you get, the better.  Many people suggest that we keep this number below 10 or 11, but this is just an opinion.  I would rather just say look at what you’ve currently got and strive for better. If you have Visual Studio, this option is under the Analyze menu option.</p>\n<h2 id=\"Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls\"><a href=\"#Do-you-have-a-lot-of-operations-function-calls-parameters-to-those-calls\" class=\"headerlink\" title=\"Do you have a lot of operations, function calls, parameters to those calls?\"></a>Do you have a lot of operations, function calls, parameters to those calls?</h2><p>What I’m basically talking about here is what’s called Halstead Volume or Halstead Metrics.  What this computes is how complex the code is. For example, if you have five lines of code and a Cyclomatic complexity of ten as everyone suggest, your code may still be in trouble because each line of code is so complex that no one on earth could possibly understand it. We call this self obfuscating code. You probably have some superstar on your team that thinks he’s so hot that he codes an entire function on one line.  The problem with this is that six months from now, neither he nor you will be able to figure out what the code does.  Any fix that will be needed will require an entire rewrite of the code.  That’s exactly what we are trying to prevent. If you are using Visual Studio 2013 Ultimate, you can get the <a href=\"//visualstudiogallery.msdn.microsoft.com/f85a7ab9-b4c2-436c-a6e5-0f06e0bac16d\">Microsoft Codelens Code Health Indicator</a> which adds the ability to check for all three of the above problems for each of your methods.  If you pay attention to it, it will help you make code that is easier to understand.</p>\n<h2 id=\"Can-You-Easily-Find-Code-You-Need-To-Maintain\"><a href=\"#Can-You-Easily-Find-Code-You-Need-To-Maintain\" class=\"headerlink\" title=\"Can You Easily Find Code You Need To Maintain?\"></a>Can You Easily Find Code You Need To Maintain?</h2><p>This is one that is harder to detect, but I thought I’d mention it here because it is a real issue. In an ideal world, we shouldn’t need to use a debugger to track down where the code is that we need to modify.  There are cases where this may be the only solution.  But you should know, for example, that all of your validation code is in this one location.  If you have validation code in multiple locations, you are probably thinking about your code incorrectly. But also cut yourself some slack because this kind of code complexity is not something you are going to notice until late in your project.  You may never see it, but you will certainly recognize it when you run into it in someone else’s code.</p>\n<h2 id=\"Which-reminds-me-of-a-story\"><a href=\"#Which-reminds-me-of-a-story\" class=\"headerlink\" title=\"Which reminds me of a story.\"></a>Which reminds me of a story.</h2><p>There was this guy that was working in a cube and he suddenly starts ranting.  “Who wrote this code?!  This is the dumbest code I’ve ever seen.  etc…”  Suddenly he got real quiet and the guy in the next cube asked him, “hey, Joe, what’s wrong?”  Joe replies, “It’s my code.” So even if you don’t pay attention to these issues for your coworker’s sake.  Do it for yourself.</p>\n",
            "tags": [
                "programming",
                "best practices",
                "code quality",
                "cyclomatic",
                "halstead"
            ]
        },
        {
            "id": "http://davembush.github.com/dry-programming/",
            "url": "http://davembush.github.com/dry-programming/",
            "title": "DRY Programming",
            "date_published": "2014-05-29T16:34:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/05/DRY.png\" alt=\"DRY\" title=\"DRY\">Today I thought I’d talk to you about the programming principle known as DRY.  As you may know, DRY stands for “Don’t Repeat Yourself” and it shows up in a lot more places than you might expect.  Even when you try really, really hard to not repeat yourself, you end up repeating yourself.  You repeat yourself even when you think you aren’t.  Lots of people repeat themselves.  Do you know of any? Ok.  I think you get the point.  Just like it is silly for me to repeat myself over and over again, it is silly for you to write the same code, or perform the same steps, over and over again.</p>\n<p>To drive the point home just a little bit more.  Do you know what the acronym WET stands for?  We Enjoy Typing.  While it doesn’t capture all of what DRY is trying to combat, I think it hits about 80% of the issue.  Have you typed something that is really similar to something you already typed?</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Copy-and-Paste\"><a href=\"#Copy-and-Paste\" class=\"headerlink\" title=\"Copy and Paste\"></a>Copy and Paste</h2><p>The most obvious form of something that is WET is code that is an exact duplicate of something you already wrote some place else.  This can be something as mundane as code that is in the same class, to code that exist in multiple classes. In fact, I just ran into this today with some code I was working on.  The person who had written the code had created a local variable to hold a string that he was then passing into multiple methods.  That was good.  This allows us to change the string once instead of changing it in multiple places.</p>\n<p>However, he was doing the same thing in three different methods of the same class.  And in two other places he was using that same string as a string instead of using a variable.</p>\n<p>Since the string was a reference to a field name, it seemed to me to make more sense to create the variable as a constant member variable in the class and use it in all of the locations.</p>\n<p>Copy and paste issue solved.</p>\n<p>But what about the case where you need to do something similar but the code is in multiple classes?  In this case, what you’d probably want to do is to create a static class that will have a static property that will return the string.  Better yet, you could put the string in a resource file that you can reference from the static class.</p>\n<h2 id=\"Copy-Paste-and-Modify\"><a href=\"#Copy-Paste-and-Modify\" class=\"headerlink\" title=\"Copy, Paste and Modify\"></a>Copy, Paste and Modify</h2><p>The most difficult area in our code to detect that our code is WETter than it should be is when we create code that we’ve done the Copy, Paste, and Modify routine to.  This is because it is similar but not exactly similar.  This is where a huge chunk of our WET code resides.</p>\n<p>So as you navigate through your code, you should be looking for code that is similar but not exactly the same and you should be asking yourself this question, “Is there any way I can merge this code so that it only appears once?” One way you might  make this kind of code DRY is by creating a method that takes parameters.  The parameters will let you pass in the stuff that is different while allowing the bulk of the code that is similar to be in one location.</p>\n<p>Another way you might deal with this problem is by creating a class with virtual functions that get called by a main method.  Then you can create child classes that have overridden methods that handle the differences in functionality.</p>\n<h2 id=\"Similar-Steps\"><a href=\"#Similar-Steps\" class=\"headerlink\" title=\"Similar Steps\"></a>Similar Steps</h2><p>The hardest type of duplicate code to detect is code that has similar steps.  If you find yourself doing the same thing over and over again, you probably have an area the you either need to deal with, like we dealt with Copy, Paste, and Modify, or you may need to think about creating code that writes your code for you.</p>\n<p>This is what techniques like T4 templates were created for.</p>\n<h2 id=\"Similar-Code-in-Different-Environments\"><a href=\"#Similar-Code-in-Different-Environments\" class=\"headerlink\" title=\"Similar Code in Different Environments\"></a>Similar Code in Different Environments</h2><p>One of the most natural places to deal with duplicate code is in the area of database access.  Typically we have to create tables or stored procedures in SQL, and then to access that code we need to write code in our main development language that mirrors the SQL code.  In CSharp, we create POCOs and CRUD routines.  And then if we are working on a web site, we need to mirror that code once again in JavaScript.</p>\n<p>This is a prime candidate for code that writes code.  If you don’t already have something that will do it for you, write some code that will look at your SQL and generate the code you need from that.  DRY says there should be one place that gets modified when a change to the database occurs.  That would be the database.</p>\n<h2 id=\"Not-Just-About-Code\"><a href=\"#Not-Just-About-Code\" class=\"headerlink\" title=\"Not Just About Code\"></a>Not Just About Code</h2><p>But DRY isn’t just about code.</p>\n<p>There are things we do every day that have nothing to do with code that are costing us time and money.  In fact, they probably cost more time and money than your WET code because they take longer to perform.</p>\n<p>One place this occurs all of the time is in making sure that your code builds.  If you are still doing this manually, you are wasting your time.  If you aren’t doing it at all, that’s even worse.  You may not know for months that your code isn’t building and you will find out at the worst possible time.  And assuming that you have been practicing Test Driven Development, how are you making sure that those tests still work every time you make a change to your code? The obvious solution is a Continuous Integration server that reports back to you that there was a problem.</p>\n<p>What about error logs?  You are logging the errors that your system generates, right?  Are you checking the error log?  Manually?  Did you know you could setup a job to email those errors to you as soon as they occur?  No more checking needed, unless you don’t check your email.  In that case, have it send a message to your cell phone or IM you with the error, or at least have it send you a message telling you to check the log.</p>\n<p>So, those are some possible places to look for WET code.  Be on the lookout today for places that are WET and spend a little time DRYing things up.</p>\n",
            "tags": [
                "programming",
                "DRY",
                "best practices"
            ]
        }
    ]
}