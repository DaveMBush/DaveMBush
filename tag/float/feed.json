{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"float\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/csharp-numeric-overflows/",
            "url": "http://davembush.github.com/csharp-numeric-overflows/",
            "title": "CSharp Numeric Overflows",
            "date_published": "2014-07-03T17:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/06/NumericOverflow.png\" alt=\"NumericOverflow\" title=\"NumericOverflow\">Did you know that when you are dealing with numbers, by default, .NET will do, or try to do exactly what you tell it to do?  If you tell it to do the impossible, it will do the next most logical thing.  It won’t throw any errors in the process.</p>\n<p>No, neither did I.  But then, most of the time I don’t write code where this would matter, and I bet you don’t either.</p>\n<p>So here are some examples.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Integer-Types\"><a href=\"#Integer-Types\" class=\"headerlink\" title=\"Integer Types\"></a>Integer Types</h2><p>What happens if you write code that looks like this?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">long</span> l = <span class=\"built_in\">long</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) l;</span><br></pre></td></tr></table></figure>\n\n<p>Well, if we are working with the compiler set with default settings, you’ll end up with the variable l having the value of 9223372036854775807 and the value of i having the value of -1.</p>\n<p>Why is this?  Because, by default, .NET does not check for numeric overflow.</p>\n<p>However, if you wanted to add the ability to check for numeric overflow, you would wrap this code in a checked block.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    checked</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">long</span> l = <span class=\"built_in\">long</span>.MaxValue;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> i;</span><br><span class=\"line\">        i = (<span class=\"built_in\">int</span>)l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle overflow exception here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You can force all of your code to be checked by changing your compiler settings.  In Visual Studio 2013, go to Project Properties –&gt; Build.  Click the “Advanced” button (bottom right corner) and then check the “Check for … overflow” checkbox.</p>\n<p>Once you’ve done that, all of your code will be checked by default.  If you don’t want to check for overflows while you are working on a block of code, for performance reasons, wrap the code in an unchecked block instead.</p>\n<h2 id=\"Float-to-Int\"><a href=\"#Float-to-Int\" class=\"headerlink\" title=\"Float to Int\"></a>Float to Int</h2><p>Now, what about putting a floating point number in an integer?</p>\n<p>Let’s say that instead of a long, we use a float.</p>\n<p>First, let’s look at a simple case:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> l = <span class=\"number\">3.563f</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) lf</span><br></pre></td></tr></table></figure>\n\n<p>In this case, you’ll end up with f holding a floating point number of 3.563 and i holding an integer of 3.  The rule is pretty simple, floats always have the decimal portion stripped off and assigned to the integer, short, or long.</p>\n<h2 id=\"Large-Float-to-Int\"><a href=\"#Large-Float-to-Int\" class=\"headerlink\" title=\"Large Float to Int\"></a>Large Float to Int</h2><p>But what happens if we use float.MaxValue?</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> f = <span class=\"built_in\">float</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> i;</span><br><span class=\"line\">i = (<span class=\"built_in\">int</span>) f;</span><br></pre></td></tr></table></figure>\n\n<p>In this case, what you’ll end up with is a very large floating point number and an integer of -2147483648.  Basically it does it’s best to convert a really large integer number into the int and just uses what it can.  Not really what you probably have in mind.</p>\n<p>The solution is the same.  Use a checked block or compile with checked turned on.</p>\n<h2 id=\"Double-to-Float\"><a href=\"#Double-to-Float\" class=\"headerlink\" title=\"Double to Float\"></a>Double to Float</h2><p>Now, you would expect that if I had a really large double and tried to assign that to a float, something similar would happen. </p>\n<p>You’d be right, kind of.</p>\n<p>If you assign a double that is too large for a float to a float variable, the float variable will end up with infinity.  But, unlike the shorts, ints, and longs, you can’t wrap the code in a checked block to cause it to throw an exception.  No.  In this case you must always check for infinity once you’ve done the assignment.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">double</span> d = <span class=\"built_in\">double</span>.MaxValue;</span><br><span class=\"line\"><span class=\"built_in\">float</span> f;</span><br><span class=\"line\">f = (<span class=\"built_in\">float</span>)d;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">float</span>.IsInfinity(f))</span><br><span class=\"line\">    <span class=\"comment\">// do something intelligent here</span></span><br></pre></td></tr></table></figure>\n\n<p>So there you have it.  This is how you really deal with numeric casting in your CSharp code.</p>\n",
            "tags": [
                "c#",
                "checked",
                "double",
                "float",
                "int",
                "long",
                "short",
                "unchecked"
            ]
        },
        {
            "id": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "url": "http://davembush.github.com/decimal-vs-float-single-or-double/",
            "title": "Decimal vs Float (Single) or Double",
            "date_published": "2012-09-18T09:17:13.000Z",
            "content_html": "<p><img src=\"/uploads/2008/10/money-016.jpg\" alt=\"money-016\"> When you need to deal with a number that is a fraction, what do you specify for its type?  If you are like most programmers I know, you’ll reach for Float (Single if you are using VB) or Double.</p>\n<p>If you are working with currency, though, this could get you into a lot of trouble.</p>\n<p>Here’s why.</p>\n<span id=\"more\"></span>\n\n<p>When you store a number into a float, you are not storing an exact number.  This is because the number you are storing is an approximation of the number you entered.  When you store a number, the integer portion of the number gets priority and the fractional part gets entered as close as is possible given the size of the type you are storing it as.</p>\n<p>That is, a Double will be able to save the information more accurately than the Float, but neither of them will store the information precisely.</p>\n<p>And that’s just storing a number we enter directly.  What happens if we need to multiply or divide that number?</p>\n<p>For simplicity, let’s just say we need to divide a dollar by three.  How would that get stored accurately into a float or a double?  The answer is that it won’t.  It will store as many threes on the right side of the decimal as possible.</p>\n<p>This is what the Decimal data type was created for.  A decimal data type deals with the data more like we would if we were dealing with the problem with paper and pencil.  In effect, a decimal data type is similar to an integer that has a decimal point.</p>\n<p>Let me illustrate.  Let’s imagine that we have an integer that holds our value and another that holds how many decimal places the value has.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> mainValue;</span><br><span class=\"line\"><span class=\"built_in\">int</span> decmialPlaces;</span><br></pre></td></tr></table></figure>\n\n<p>To represent a dollar we would say:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = <span class=\"number\">100</span>;</span><br><span class=\"line\">decimalPlaces = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now, we want to divide our dollar by three:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainValue = mainValue / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>obviously, mainValue will end up with 33 as a value, which means our result is .33, exactly what we would expect if we did this computation by hand.</p>\n<p>If we multiplied the result by 3, we’d get .99, which is what we’d expect.  We still have to account for that lost penny, but we would deal with the lost penny using standard accounting practices.</p>\n<p>Fortunately, we don’t have to go to all that trouble because this is exactly why the decimal type was created for us.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">decimal</span> money = <span class=\"number\">1.00</span>M;</span><br><span class=\"line\">money = money / <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>I once went to consult in a project that was entirely currency based.  It was basically an accounting package.  This application was not only dealing with money, but it also had to deal with conversion rates between countries.  They wanted to know why they were losing pennies when they converted from one currency to another when the entire application was using floats (not even doubles) instead of decimal values.  That handled most of the problem for them.  The second recommendation I had was to choose a base currency type and always convert from that currency to all the other countries rather than converting from country A to country B and then back to country A.</p>\n",
            "tags": [
                "double",
                "float",
                "currency",
                "decimal",
                "floating point math",
                "single"
            ]
        }
    ]
}