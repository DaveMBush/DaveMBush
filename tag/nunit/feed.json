{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"nunit\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/run-nunit-from-visual-studio/",
            "url": "http://davembush.github.com/run-nunit-from-visual-studio/",
            "title": "Run NUnit from Visual Studio",
            "date_published": "2015-04-30T10:00:00.000Z",
            "content_html": "<p>For the purposes of this post, I’m going to assume that you already have the NUnit Test Runner installed.  The question you are looking to get answered is, “How do I run NUnit from Visual Studio” or even more importantly, “How do I DEBUG NUnit test from Visual Studio”.  The following step by step should help you.</p>\n<p>Right click on the project in Solution Explorer that represents your test project.</p>\n<p>From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.</p>\n<p><img src=\"/uploads/2015/04/Properties_Debug.png\" alt=\"Properties_Debug\" title=\"Properties_Debug\"></p>\n<p>You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.</p>\n<p>Now, whenever you run this project, with or without the debugger, NUnit will start up.</p>\n<p>Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up.</p>\n<p>But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner.</p>\n<p>There are other parameters you can use.</p>\n<span id=\"more\"></span>\n\n<p>Check the documentation for the version of NUnit you are using for the specifics.</p>\n<p>If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file.</p>\n<p>Find the startup element (<code>&lt;startup&gt; .... &lt;/startup&gt;</code>) and place this line in between the open and close startup tags:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supportedRuntime</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5. So, let’s give it a try. First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Inside MyFirstTestMethod&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next set a breakpoint on the <code>Console.WriteLine</code> method and then run your project with the debugger.</p>\n<p>Once NUnit loads the DLL, click the “Run” button in NUnit.</p>\n<p>If everything is setup correctly, you should stop on the breakpoint you set.</p>\n<p>You may have noticed that we put several <code>Console.WriteLines()</code> in our code but they aren’t displaying anywhere.  So, where did they go?  How can we see them? By default the “Text Output” tab displays all of the <code>Console.WriteLine()</code> messages as well as all of the test results.  If all you care to see is the test results, you should select the “Errors and Failures” tab.  Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.</p>\n<p>As an alternative to this, you can just pick up a copy of ReSharper, which has an NUnit Test Runner built into it.  All you need to do to debug a test is selection the test and choose debug from the context menu.  It will save you a ton of time.</p>\n<p>Another option would be to pick up the MS Test Adapter from nunit.org.  But, I’ve never liked the way MS Test renders the tests results.  So, I don’t recommend it.  Obviously, your mileage may vary.</p>\n",
            "tags": [
                "testing",
                "debugging",
                "nunit"
            ]
        },
        {
            "id": "http://davembush.github.com/nunit-visual-studio/",
            "url": "http://davembush.github.com/nunit-visual-studio/",
            "title": "NUnit & Visual Studio",
            "date_published": "2014-12-04T12:00:00.000Z",
            "content_html": "<p>Many people starting out with Unit testing get stuck when it comes to using their tools with the Visual Studio environment.  If it isn’t built in, how do we make it work with Visual Studio?  In this article I want to explore the basics of creating a unit test for NUnit and getting it running from Visual Studio.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Basic-Structure\"><a href=\"#Basic-Structure\" class=\"headerlink\" title=\"Basic Structure\"></a>Basic Structure</h2><p>To create a unit test, the first thing you will need to do is to create an assembly with a class file to hold the code.</p>\n<p>The type of assembly you will need to create for your test to be able to run is an assembly of type “Class Library.” I’m going to assume that you don’t need the details on how to create that type of project using whatever version of Visual Studio you happen to be using.</p>\n<p>Within your new Class Library project, you should find a file named Class1.cs. For the purposes of getting started, you can just leave that file. We’ll talk about how to name your class and test later on.</p>\n<p>For now, all we want to concentrate on is the basics of what is involved in getting a basic test going and what the components of a test class are that you will repeat over and over again as you create unit test for your applications.</p>\n<p>Before we add our first line of code, though, you will want to add references to NUnit in your code. The easiest way to do that is by using NuGet. Since I use Visual Studio 2013, all of the references for how to do things will be using Visual Studio (Premium) 2013. So, if you are using that version, you can just follow along. If not, you may need to do some translating.</p>\n<p>From the Visual Studio menu, select “Tools” &gt; “NuGet Package Manager” &gt; “Manage NuGet Packages for Solution…”. A window will pop up. Search for NUnit and install the package named “NUnit”. There are other packages available that we will discus later on.</p>\n<p>Alternatively, you could download NUnit directly from the NUnit site (<a href=\"//nunit.org\">http://nunit.org</a>) and add a reference directly to nunit.framework.dll.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>Now that you have the DLLs installed and referenced in your project, you’ll need to create a test class. For our purposes, we are going to stick with Class1.cs.</p>\n<p>There are several things that make a class a test class. First, the class has to be attributed with the [TestFixture] attribute. Second, the methods you want to have run the test have to be attributed with the [Test] attribute and must be public. So, your minimal test class will look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestFixture</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Class1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Test</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// test code here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Running-Tests\"><a href=\"#Running-Tests\" class=\"headerlink\" title=\"Running Tests\"></a>Running Tests</h2><p>Now that we have a basic test class, go ahead and compile it. We are going to try running the test next. For that we will need a test runner.</p>\n<p>There are several ways to run NUnit test. For out purposes, we are going to use the runner that comes with NUnit. But you might also be interested in one of the alternatives. You can get a 30 day trial of <a href=\"//www.jetbrains.com/resharper/\">ReSharper by JetBrains</a>.</p>\n<p>ReSharper has many features, but the one I want to talk about here is the test runner. Any test you create will be immediately runnable from within Visual Studio by right clicking on an icon to the left of your code. You are presented with a menu of options including debugging your test. Believe me, this is the easiest way to debug NUnit test that I know of.</p>\n<p>Another easy way to run NUnit test from within Visual Studio is by installing the MSTest adapter. You can get this from <a href=\"//www.nuget.org/packages/NUnitTestAdapter/\">NuGet</a>.</p>\n<p>For the purposes of this article, we are going to use the test runner that comes with NUnit.</p>\n<p>So the next thing you’ll need to do is go to <a href=\"//nunit.org\">NUnit.org</a> and download and install the latest version of NUnit if you didn’t do that already to get the NUnit DLLs installed. I would suggest using the MSI installer rather than the zip file. All we want to be able to do is to run the test.</p>\n<p>Once you’ve installed NUnit, there should be a menu option “NUnit” that you can click. This should bring up the GUI runner.</p>\n<p><img src=\"/uploads/2014/11/image.png\" alt=\"image\" title=\"image\"></p>\n<p>Use the “File” -&gt; “Open” to navigate to the “bin” directory of your NUnit test DLL project and open the DLL. You should see a screen that looks something like this:</p>\n<p><img src=\"/uploads/2014/11/image1.png\" alt=\"image\" title=\"image\"></p>\n<p>Click the “Run” button to run your test. You should get a green progress bar under the “Run” button and a check box over the icons in the tree on the left indicating that all of the test succeeded.</p>\n<p>“Wait?!”, you say, “I didn’t test anything, how did they succeed?”</p>\n<p>You are right. A test succeeds if it doesn’t fail. Later on this will impact how we structure our test. So keep this in mind.</p>\n<p>One of the nice things about the NUnit GUI runner is that you can keep this up while you work on your tests. By default, the system shadow copies the DLL so that you can compile the DLL in your project. When the NUnit GUI runner sees that the file has changed, it will reload it so that it is always running whatever version you recently compiled. You can change this behavior, if you really feel the need to, by navigating to “Tools” -&gt; “Settings…”</p>\n<h2 id=\"Debugging-Tests\"><a href=\"#Debugging-Tests\" class=\"headerlink\" title=\"Debugging Tests\"></a>Debugging Tests</h2><p>As with all things related to code, eventually you will need to debug your test. To do this using the the tools that come with NUnit, do the following.</p>\n<p>Right click on the project in Solution Explorer that represents your test project. From the resulting menu, select “Properties.” In the resulting window, select the “Debug” tab from the left-hand side of the window.</p>\n<p><img src=\"/uploads/2014/11/image2.png\" alt=\"image\" title=\"image\"></p>\n<p>You will want to select “Start external program” and point it to the UNnit runner that got installed when you installed NUnit.</p>\n<p>Now, whenever you run this project, with or without the debugger, NUnit will start up. Note: there is no reason to pass parameters telling it what DLL you want to run because it will load the last DLL it had up. But, if you wanted to do that, you could pass the location of the DLL as a parameter to the GUI runner. There are other parameters you can us. Check the documentation for the version of NUnit you are using for the specifics.</p>\n<p>If you are running .NET 4.x, you’ll want to go to the location in your file system where NUnit.exe lives and find the NUnit.exe.config file. Find the startup element (<startup> …. </startup>) and place this line in between the open and close startup tags:</p>\n<supportedRuntime version=\"4.0\" />\n\n<p>If you miss this step, you won’t be able to debug your 4.0 code. Alternatively, you can just set your project to use .NET 3.5.</p>\n<p>So, let’s give it a try.</p>\n<p>First, put some code in the test method you just created. For our purposes, we’ll just put in a console writeline so we have somplace to put a breakpoint.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstTestMethod</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Inside MyFirstTestMethod&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next set a breakpoint on the Console.WriteLine method and then run your project with the debugger.</p>\n<p>Once NUnit loads the DLL, click the “Run” button in NUnit. If everything is setup correctly, you should stop on the breakpoint you set.</p>\n<h2 id=\"Console-WriteLine\"><a href=\"#Console-WriteLine\" class=\"headerlink\" title=\"Console.WriteLine()\"></a>Console.WriteLine()</h2><p>You may have noticed that we put several Console.WriteLines() in our code but they aren’t displaying anywhere. So, where did they go? How can we see them?</p>\n<p>By default the “Text Output” tab displays all of the Console.WriteLine() messages as well as all of the test results. If all you care to see is the test results, you should select the “Errors and Failures” tab. Personally, I prefer to work in the “Text Output” tab and I suggest that you do the same.</p>\n<h2 id=\"Not-The-Only-Way\"><a href=\"#Not-The-Only-Way\" class=\"headerlink\" title=\"Not The Only Way\"></a>Not The Only Way</h2><p>This isn’t the only way to get NUnit &amp; Visual Studio working together.  You could also purchase the ReSharper plugin which has many other features.  But one of the ones I use on a regular basis is the NUnit integration.</p>\n<p>You could also use the NUnit test Adapter to make NUnit work with the Visual Studio test engine.  But personally, I don’t like the way the test render using that and I’d much rather use the GUI viewer I’ve discussed in this article.  So, if you want to integrate NUnit &amp; Visual Studio for free, what I’ve outline above is the best way to do it.</p>\n",
            "tags": [
                "test driven development",
                "visual studio",
                "nunit"
            ]
        },
        {
            "id": "http://davembush.github.com/nunit-unity-dependency-injection-moq-and-private-fields/",
            "url": "http://davembush.github.com/nunit-unity-dependency-injection-moq-and-private-fields/",
            "title": "NUnit, Unity Dependency Injection, MOQ and Private Fields",
            "date_published": "2014-10-23T10:00:00.000Z",
            "content_html": "<p>I had an interesting puzzle to solve this week that I thought I would share with you in case someone else is looking for a similar solution. There was some code that I needed to test that ultimately called into the database. Since this is a UNIT test and all I was interested in testing was one specific function and the state of one specific field in another  object, I had neither the need, nor the desire, to let that call to the database happen.  Since MOQ is  my mocking framework of choice, I wanted to mock out the database object the method was using so that it would return whatever was expected without actually calling down into the database. There were several problems.  The first was that the database object is a private field in the class I was testing and it got created by the constructor.  Second, the code that needed to use the database object is passing the object by reference (using the “ref” keyword) so that I could no setup my class that needed that object to just ignore it. There were some other items I needed to inject, but they were pretty straight forward.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>But first, I realize that some purist out there is going to leave me a comment that says you shouldn’t use a Dependency Injection container in your unit test.  My answer to that is, yes, ideally, one should not do this.  But, not everything is ideal.  Not every project is a “green field” project (and in fact about 95% of them aren’t).  And in some cases there is so much technical debt involved that the best we can do is a hack.  Read, <a href=\"//www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=davmbusnetapp-20&linkId=2ULNYA2XTSEGDPLA\">Working Effectively with Legacy Code</a><img src=\"//ir-na.amazon-adsystem.com/e/ir?t=davmbusnetapp-20&l=as2&o=1&a=0131177052\"> for other illustrations of “hacks” to get code under test. So, there’s the problem.  It may not make a lot of sense yet, especially if you are not familiar with the tools.  So let’s walk through some code.</p>\n<h2 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h2><p>The main method I wanted to test was hanging off a POCO class.  It is using what we call a “visitor” pattern (though I’m pretty sure this is not what the pattern is supposed to look like).  So we have an Accept() method hanging off of it that knows how to store the poco into the database. That method has a method it calls that hangs off a crud object called Create() that takes the POCO and a reference to the database. I want to mock the Create() method so that it never actually gets called.  The method should return the POCO as part of a list of the POCO’s type. Mocking out the crud object is pretty straight forward:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud = <span class=\"keyword\">new</span> Mock&lt;ICrud&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>and then registering it with the Unity DI container:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">container.RegisterInstance(_mockCrud);</span><br></pre></td></tr></table></figure>\n\n<p>The real issue, and the main point of this post, is that when I wanted to call Create() what I needed to do was:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud.Setup(</span><br><span class=\"line\">    x =&gt; x.Create(It.IsAny&lt;IPOCOType&gt;(),</span><br><span class=\"line\">        <span class=\"keyword\">ref</span> It.IsAny&lt;IDatabaseType&gt;())</span><br><span class=\"line\">    .Returns(pocoList);</span><br></pre></td></tr></table></figure>\n\n<p>Which you can’t do. What you have to do instead is:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_mockCrud.Setup(</span><br><span class=\"line\">    x =&gt; x.Create(It.IsAny&lt;IPOCOType&gt;(),</span><br><span class=\"line\">        <span class=\"keyword\">ref</span> _database))</span><br><span class=\"line\">    .Returns(pocoList);</span><br></pre></td></tr></table></figure>\n\n<p>And the only way this will work is if the _database variable is pointing to the same object that will ultimately get called. So, here is the magic that I used to make all that work. Reflection. The database object I needed was created as part of the constructor in yet another object that I pass into the Accept() method.  So, I create that object and then use reflection to get the instance of the database from it.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> visitor = <span class=\"keyword\">new</span> DataVisitor();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fieldInfo = visitor.GetType()</span><br><span class=\"line\">    .GetField(<span class=\"string\">&quot;_database&quot;</span>,</span><br><span class=\"line\">        BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(fieldInfo != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _database = (Database)fieldInfo.GetValue(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And now I can use the Setup code I’ve already specified. Hope that helps someone else.</p>\n",
            "tags": [
                "dependency injection",
                "nunit",
                "reflection",
                "unity"
            ]
        },
        {
            "id": "http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/",
            "url": "http://davembush.github.com/running-selenium-in-parallel-with-any-net-unit-testing-tool/",
            "title": "Running Selenium In Parallel With Any .NET Unit Testing Tool",
            "date_published": "2014-07-31T17:15:00.000Z",
            "content_html": "<p>Running Selenium in parallel from .NET seems to be a problem because, as of the time of this writing, I’ve yet to find a viable way of running selenium test on multiple browsers using <a href=\"//docs.seleniumhq.org/docs/07_selenium_grid.jsp\">Selenium Grid</a>.  This doesn’t mean that there aren’t a few articles out there that have some kind of solution.  But they’ve never satisfied me as something that I could easily plug into my already created test. While my preferred testing tools are <a href=\"//www.nunit.org/\">NUnit</a> and <a href=\"//www.specflow.org/\">SpecFlow</a>, the method I am about to propose should work with any existing test harness you might want to use.  The only prerequisite is that you are using <a href=\"//code.google.com/p/selenium/wiki/PageObjects\">Page Models</a> to wrap your access to any particular web page. This article assumes that you already:</p>\n<ul>\n<li>know how to write Selenium tests</li>\n<li>know how to use Selenium Grid</li>\n<li>know how to use the Page Model pattern</li>\n<li>know how to use your chosen test harness.</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Here-Is-The-Problem\"><a href=\"#Here-Is-The-Problem\" class=\"headerlink\" title=\"Here Is The Problem\"></a>Here Is The Problem</h2><p>In order to run multiple browsers at the same time, the easiest way is to provide a wrapper Page Model that calls multiple instances of the page model at the same time. The hard way of doing this would be to create an Interface that represented the real page model and then create a proxy class that would hold a list of all of the real page model objects we needed to call.  Each time a property or method on the proxy gets called, all it would do would be to pass the call down into the real objects in parallel. This would work, but the main draw back is that I really don’t want to have to write a method for each method in my real page model.  So the question is, how can we get around this?</p>\n<h2 id=\"DynamicObject-To-The-Rescue\"><a href=\"#DynamicObject-To-The-Rescue\" class=\"headerlink\" title=\"DynamicObject To The Rescue\"></a>DynamicObject To The Rescue</h2><p>Enter the little known class, <a href=\"//msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject(v=vs.110).aspx\">DynamicObject</a>.   In .NET 4, Microsoft introduced the dynamic keyword.  One of the main uses is for places where  you need to be able to declare a variable in your code that the compiler won’t know how to resolve the type of until runtime.  I could have used this several years ago when I had two assemblies that needed to reference each other.  In that case, I used reflection.  But dynamic would have worked with a lot less work. DynamicObject is a specific class that allows us to resolve property and method calls at runtime using our own logic. We will also use the Task Parallel library to implement our parallel calls. For completeness, and so that no one is confused when they try to implement this code, you’ll need the following using statements at the top of the CS file.</p>\n<h2 id=\"Using-Statements-And-Constructor\"><a href=\"#Using-Statements-And-Constructor\" class=\"headerlink\" title=\"Using Statements And Constructor\"></a>Using Statements And Constructor</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Concurrent;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Dynamic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Reflection;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br></pre></td></tr></table></figure>\n\n<p>So, let’s get started.  The first thing we will need is a class declaration:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ParallelPageModel</span>&lt;<span class=\"title\">TPage</span>&gt;:  <span class=\"title\">DynamicObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TPage allows us to specify the Interface the real Page Model implements.  Yes, we still need the interface, but we won’t need to create a new wrapper class for every page model we want to wrap.  The class  inherits from DynamicObject so that all of our on the fly goodness will work. Next, we’ll need some place to store an array of PageObjects we want to proxy.  So we add a private variable _page for that purpose.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> TPage[] _pages;</span><br></pre></td></tr></table></figure>\n\n<p>By using TPage[], we create a variable that is the same type array as the Page Models we are proxying. Next we need a constructor.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParallelPageModel(<span class=\"keyword\">params</span> TPage[] pages)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _pages = pages;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By using the params keyword, we can either  pass in page objects as an array or as individual parameters. The magic happens in three overridden methods that are in DynamicObject:</p>\n<ul>\n<li>TryInvokeMember – resolves any method calls.</li>\n<li>TrySetMember – resolves any property setters</li>\n<li>TryGetMember – resolves any property getters</li>\n</ul>\n<p>So let’s add those methods next:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">TryInvokeMember</span></span></span><br><span class=\"line\"><span class=\"function\">    (<span class=\"params\">InvokeMemberBinder binder,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"built_in\">object</span>[] args,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"keyword\">out</span> <span class=\"built_in\">object</span> result</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">TrySetMember</span></span></span><br><span class=\"line\"><span class=\"function\">    (<span class=\"params\">SetMemberBinder binder, <span class=\"built_in\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">TryGetMember</span></span></span><br><span class=\"line\"><span class=\"function\">    (<span class=\"params\">GetMemberBinder binder, <span class=\"keyword\">out</span> <span class=\"built_in\">object</span> result</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TryInvokeMember\"><a href=\"#TryInvokeMember\" class=\"headerlink\" title=\"TryInvokeMember\"></a>TryInvokeMember</h2><p>Inside of the TryInvokeMember method, the first thing we will want to do is to use reflection to call into the real methods.  Since we could have multiple instances of the same method we need to call we will want to do this in a loop. When I first worked this out, I started by just implementing a foreach loop but we are going to jump right to using Parallel.ForEach() Parallel.ForEach() will let us pass in an array and run a lambda expression on each element in the array.  So, our foreach loop will look like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> results = <span class=\"keyword\">new</span> ConcurrentBag&lt;<span class=\"built_in\">object</span>&gt;();</span><br><span class=\"line\">Parallel.ForEach(_pages, page =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisResult = <span class=\"keyword\">typeof</span> (TPage)</span><br><span class=\"line\">       .InvokeMember(binder.Name,</span><br><span class=\"line\">        BindingFlags.InvokeMethod |</span><br><span class=\"line\">        BindingFlags.Public |</span><br><span class=\"line\">        BindingFlags.Instance,</span><br><span class=\"line\">        <span class=\"literal\">null</span>, page, args);</span><br><span class=\"line\">    results.Add(thisResult);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Note that our lambda expression is not doing anything more than a simple reflection call. The result that is returned is added to our ConcurrentBag collection.  ConcurrentBag is a collection that is specifically made for parallel calls.  We could get into trouble if we added something to a List&lt;&gt; collection unless we added some parallelization gatekeeping around it.  I’m for doing as little work as possible. The second thing we want to do is to process the return results. For this we need to setup a basic foreach loop.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> thisResult <span class=\"keyword\">in</span> results)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Inside the foreach loop we will process the results collection. If the type that got  returned is the same type as the type that the page is proxying for, we just make our result value, the return value the TryInvokeMember is going to return for us to the code that called the proxy, equal to the proxy object.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (thisResult <span class=\"keyword\">is</span> TPage)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If the result is not null, meaning either that a previous result was null or we haven’t processed the loop yet, we want to check to see if the value of the current loop result is the same as the loop results we’ve already processed.  If it isn’t, we throw an exception.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.Equals(thisResult)) <span class=\"comment\">// not the same value</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception</span><br><span class=\"line\">           (<span class=\"string\">&quot;Call to method returns different values.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Finally, we just set the result to whatever we have at this point.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result = thisResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then the last thing we want to do is to return true to tell the system we were able to process the method.</p>\n<h2 id=\"TryGetMember\"><a href=\"#TryGetMember\" class=\"headerlink\" title=\"TryGetMember\"></a>TryGetMember</h2><p>Since the implementation for TryGetMember looks very similar to TryInvokeMethod we’ll tackle that next. In fact, the only difference between the two methods is the code inside of the Parallel.ForEach parameter block. So, here it is:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parallel.ForEach(_pages, page =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisResult = <span class=\"keyword\">typeof</span>(TPage)</span><br><span class=\"line\">        .GetProperty(binder.Name).GetValue(page);</span><br><span class=\"line\">    results.Add(thisResult);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TrySetMember\"><a href=\"#TrySetMember\" class=\"headerlink\" title=\"TrySetMember\"></a>TrySetMember</h2><p>TrySetMember is the easiest implementation of all since there are no results to worry about.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parallel.ForEach(_pages,</span><br><span class=\"line\">     page =&gt; <span class=\"keyword\">typeof</span> (TPage)</span><br><span class=\"line\">        .GetProperty(binder.Name).SetValue(page, <span class=\"keyword\">value</span>));</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Casting\"><a href=\"#Casting\" class=\"headerlink\" title=\"Casting\"></a>Casting</h2><p>So the code above will work, but you won’t get any intellisense help from Visual Studio if you use this code without tweaking it. What we need is some way of casting the ParallelPageModel object to the TPage type that we pass in. For that we are going to use a cool library I found called <a href=\"//github.com/ekonbenefits/impromptu-interface\">ImpromptuInterface</a>. You’ll need to add a using statement.</p>\n<p>using ImpromptuInterface;</p>\n<p>And then you’ll need to add this method to the ParallelPageModel class.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TPage <span class=\"title\">Cast</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ActLike();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You would use this like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IMyPageModel p = pageModelProxy.Cast();</span><br></pre></td></tr></table></figure>\n\n<p>Where IMyPageModel is the interface that specifies what your real PageModel class looks like. Just in case someone is tempted to mention this in the comments, you can’t us operator overloading to achieve the cast because we need it to return TPage, which could be anything and the compiler can’t deal with that.  If you really want to use operator overloading you’ll need to provide your own specific implementation that ends up calling the code above.</p>\n<h2 id=\"Calling-The-ParallelPageModel\"><a href=\"#Calling-The-ParallelPageModel\" class=\"headerlink\" title=\"Calling The ParallelPageModel\"></a>Calling The ParallelPageModel</h2><p>To setup the ParallelPageModel, your code would look something like this, assuming that you have a page model class called MyPageModel with an interface of IMyPageModel.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pages = <span class=\"keyword\">new</span> ConcurrentStack&lt;IMyPageModel&gt;();</span><br><span class=\"line\">Parallel.Invoke(</span><br><span class=\"line\">    () =&gt;</span><br><span class=\"line\">        pages.Push(PageFactory.GetPageModel(<span class=\"string\">&quot;FireFoxGrid&quot;</span>),</span><br><span class=\"line\">    () =&gt;</span><br><span class=\"line\">        pages.Push(PageFactory.GetPageModel(<span class=\"string\">&quot;IE11Grid&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> pagesArray = pages.ToArray();</span><br><span class=\"line\">MyTypedPage =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ParallelPageModel&lt;IMyPageModel&gt;(pagesArray).Cast();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Considerations\"><a href=\"#Considerations\" class=\"headerlink\" title=\"Considerations\"></a>Considerations</h2><p>I only just started using this.  It works for my current implementation.  But you may need to tweak it so that it works for you. For example, my assumption here is that you are only dealing with simple types or the page model type you are a proxy for.  There is no code here that will handle a situation where the call to a method would return a entirely new page model. Since the code I am testing is a collection of Single Page Applications and I am not testing navigation at this point, this is not a consideration for me.  But it would be relatively easy code to implement.  If I did that, I would probably handle it but subclassing this main class that does the bulk of the work and override the Try*Member method that needed to deal with that situation.  The other possible way of dealing with the situation is to pass in a list of types that need to be wrapped in their own parallelization object as parameters in the constructor and add some generic code in the ParallelPageModel class. Finally, I am well aware that this code may have bugs.  If you find one, go ahead and fix it. You can leave a comment so that others will benefit.   There is a <a href=\"//github.com/DaveMBush/ParallelSeleniumUsingNUnit\">demo project on GitHub.</a></p>\n<h4 id=\"Other-Places-Talking-about-Parallel-Selenium\"><a href=\"#Other-Places-Talking-about-Parallel-Selenium\" class=\"headerlink\" title=\"Other Places Talking about Parallel Selenium\"></a>Other Places Talking about Parallel Selenium</h4><ul>\n<li><a href=\"//slmoloch.blogspot.com/2009/12/design-of-selenium-tests-for-aspnet_19.html\">Using MbUnit to achieve parallelization</a></li>\n<li><a href=\"//www.browserstack.com/automate/c-sharp\">Use Browser Stack</a></li>\n</ul>\n<p>And of course a ton of links to people asking how this can be achieved.</p>\n",
            "tags": [
                "c#",
                "testing",
                ".net",
                "nunit",
                "parallel",
                "selenium"
            ]
        },
        {
            "id": "http://davembush.github.com/what-is-specflow%E2%80%A6/",
            "url": "http://davembush.github.com/what-is-specflow%E2%80%A6/",
            "title": "What is SpecFlow…",
            "date_published": "2014-06-12T17:30:00.000Z",
            "content_html": "<h2 id=\"…And-why-do-I-want-it\"><a href=\"#…And-why-do-I-want-it\" class=\"headerlink\" title=\"…And why do I want it?\"></a>…And why do I want it?</h2><p><img src=\"/uploads/2014/06/SpecFlow.png\" alt=\"SpecFlow\" title=\"SpecFlow\">That’s what I kept asking myself every time I saw this product. Well, the last time I looked, something caught my eye enough that I decided to download it and take a look. I’m really glad I did it. So, let me attempt to explain what <a href=\"//www.specflow.org/\">SpecFlow</a> is.  First, while you can get SpecFlow+ Runner to run your test, this isn’t a completely new testing platform. Instead, it is a testing platform that works with whatever testing platform you are using to test your .NET code. So, it works with NUnit, MSTest, xUnit and MbUnit. This is good for my situation because any test I write with SpecFlow will continue to work with the tools I already have in place. Including my current test runners (<a href=\"//www.jetbrains.com/resharper/\">ReSharper</a>) and my Continuous Integration system (<a href=\"//www.jetbrains.com/teamcity/\">TeamCity</a>). I wasn’t interested in adopting a platform that wouldn’t work with these two platforms.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Where-I-got-Confused\"><a href=\"#Where-I-got-Confused\" class=\"headerlink\" title=\"Where I got Confused\"></a>Where I got Confused</h2><p>Now the part that kept me from looking at this framework for such a long time was the <a href=\"//www.specflow.org/\">home page</a>. If you go there, you will see the “Three easy steps.” 1) Specify, 2) Automate, 3) enjoy. Well, at first glance it looked like was going to have to write my test in English and then write my test in code and then I could enjoy. Why would I want to do that? So, the part they forgot to mention is that once you’ve specified your test, the Visual Studio plugin will generate your test code for you. For NUnit it actually writes the NUnit test for you. The code you do have to write is the code that translates the individual steps. But even that code gets stubbed out for you. Once you have enough of those stubbed out, to write a test, you just write the test in English, save the file, and run the test. Now that I finally understand this, I like most of what SpecFlow does. But there are a few things I wish it did differently.</p>\n<h2 id=\"What-I-like\"><a href=\"#What-I-like\" class=\"headerlink\" title=\"What I like:\"></a>What I like:</h2><ol>\n<li>It puts my test in a Given, When, Then structure like I mentioned a few weeks ago. 2) The class files it generates are all partial classes. This allowed me to keep my inheritance structure that I’m dependent on for my current NUnit testing framework. And allowed me to work around one of the shortcomings I’ve found. 3) The methods are all virtual, again, allowing for extension and flexibility. 4) Intellisense is enabled so you can see similar sentences you’ve already used as you are creating new test. 5) You can create tables of parameters for test scenarios, similar to how you can pass multiple parameters to an NUnit test with the TestCase attribute or the TestCaseSource attribute. 6) To write the supporting CSharp, code I didn’t have to learn anything new. 7) I can give the English language, none code, document to the business user and they should be able to read the test well enough to tell me if the test is an accurate reflection of what they want the system to do.</li>\n</ol>\n<h2 id=\"What-I-don’t-like\"><a href=\"#What-I-don’t-like\" class=\"headerlink\" title=\"What I don’t like:\"></a>What I don’t like:</h2><ol>\n<li>I’ve become pretty dependent on the NUnit TestFixture attribute that allows me to pass parameters to the entire test. I use this to control the testing of multiple browsers. But, I’ve recently figured out a way to run all of my browsers simultaneously rather than sequentially so I won’t need this feature in the pretty near future. Once I’ve got that working, you can be sure I’ll share it here. So, don’t forget to subscribe to this blog if you haven’t already.</li>\n</ol>\n",
            "tags": [
                "tdd",
                "testing",
                "nunit",
                "specflow",
                "mstest"
            ]
        },
        {
            "id": "http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/",
            "url": "http://davembush.github.com/when-you-really-need-all-of-your-nunit-test-in-one-class/",
            "title": "When You Really Need All Of Your NUnit Test In One Class",
            "date_published": "2014-03-18T17:16:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/03/arct-034.jpg\"></p>\n<p>Last week <a href=\"/unit-test-structure/\">I proposed a structure for unit test that follows the pre-condition, action, post-condition workflow</a>.  Basically what you would see in a Use Case document.</p>\n<p>The result of this structure when applied to a general NUnit class is that we will end up with our pre-condition and action in our setup method and our post-condition asserts in our test methods.</p>\n<p>The problem with this is that sometimes this doesn’t always fit what we are trying to do.</p>\n<span id=\"more\"></span>\n\n<p>For example, I’ve been writing selenium test to test web applications I am working on.  Each page I am testing is essentially a form that computes a result at the bottom.  If I were a purest, I would put the page load object and the setup of the state of the page in the setup method.  One for each permutation.  And the assert to verify that it computed correctly.</p>\n<p>In this case, however, I vary slightly because what I really want is all of these similar test together where I can see them.</p>\n<p>But I still keep my code clean by using a TestCaseSource.</p>\n<p>What we are going to do is move just about everything into the TestCaseSource.  The code that is common between each TestCaseSource is going to still go in the SetUp method, but everything else will be declared in the TestCaseSource.</p>\n<p>The basics of how TestCaseSource works is that we setup a Property or a member variable that returns an IEnumerable.  By using the built in TestCaseData class we get a lot of control over what displays.  I’m not going to go over that here.  I’m sure you can <a href=\"//www.nunit.org/index.php?p=testCaseSource&r=2.6.3\">read the documentation</a> as well as I can.</p>\n<p>But what you may not realize when you first look that this documentation is that we can pass in functions and not just objects.  This gives us quite a bit of freedom in what we do here.</p>\n<p>So by setting up our Test method to look like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Test</span>]</span><br><span class=\"line\">[<span class=\"meta\">TestCaseSource(<span class=\"string\">&quot;DataSource&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\">Action pre,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    List&lt;Action&gt; actions,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    Action assert</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pre();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> action <span class=\"keyword\">in</span> actions) &#123;</span><br><span class=\"line\">        action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    assert();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>What we are doing is saying that we expect to find a property or member variable called “DataSource” that will pass us a function, a list of functions, and another function.</p>\n<p>The test body runs the first function to do any pre-condition work.  Then it loops through all of the function in the actions list to get the code to the state we need it to be in and then we finally call the assert to test our code.</p>\n<p>Here is a sample of what our DataSource property looks like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IEnumerable DataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Action pre = () =&gt; Console.WriteLine(<span class=\"string\">&quot;given&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> actions = <span class=\"keyword\">new</span> List&lt;Action&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            () =&gt; Console.WriteLine(<span class=\"string\">&quot;when one&quot;</span>),</span><br><span class=\"line\">            () =&gt; Console.WriteLine(<span class=\"string\">&quot;when two&quot;</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Action assert = () =&gt;</span><br><span class=\"line\">            Assert.That(<span class=\"number\">1</span>, Is.EqualTo(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">TestCaseData</span>(<span class=\"params\">pre, actions, assert</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’ve broken out the lambda expressions individually so that you can better see what I’m doing.  But in real life, your code will probably look more like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IEnumerable DataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title\">TestCaseData</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            (Action</span>)(<span class=\"params\">(</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;given&quot;</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> List&lt;Action&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                () =&gt; Console.WriteLine(<span class=\"string\">&quot;when one&quot;</span>),</span><br><span class=\"line\">                () =&gt; Console.WriteLine(<span class=\"string\">&quot;when two&quot;</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            (Action)(() =&gt; Assert.That(<span class=\"number\">1</span>, Is.EqualTo(<span class=\"number\">1</span>)))</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will need the (Action) cast to make the compiler understand what you are trying to do.  It isn’t smart enough to know that a lambda express is an Action which is a delegate that take no parameters and returns void.</p>\n<p>When you run the code, above, we get this output:</p>\n<p><img src=\"/uploads/2014/03/GivenWhenThenTest.png\" alt=\"GivenWhenThenTest\" title=\"GivenWhenThenTest\"></p>\n<p>By chaining on the SetName() call, you can make each iteration show up as it’s own unique test so you can see what is occuring in your test runner.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> IEnumerable DataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title\">TestCaseData</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            (Action</span>)(<span class=\"params\">(</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;given&quot;</span>)),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> List&lt;Action&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                () =&gt; Console.WriteLine(<span class=\"string\">&quot;when one&quot;</span>),</span><br><span class=\"line\">                () =&gt; Console.WriteLine(<span class=\"string\">&quot;when two&quot;</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            (Action)(() =&gt; Assert.That(<span class=\"number\">1</span>, Is.EqualTo(<span class=\"number\">1</span>)))</span><br><span class=\"line\">        ).SetName(<span class=\"string\">&quot;First Test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And this looks like this in the test runner:</p>\n<p><img src=\"/uploads/2014/03/GivenWhenThen2.png\" alt=\"GivenWhenThen2\" title=\"GivenWhenThen2\"></p>\n<p>Once again, I have to reiterate, this is not something I would do a lot of, but it is a pretty neat trick when you need it. </p>\n",
            "tags": [
                "tdd",
                "test driven development",
                "nunit",
                "testcasedata",
                "testcasesource"
            ]
        },
        {
            "id": "http://davembush.github.com/selenium-with-nunit-presentation/",
            "url": "http://davembush.github.com/selenium-with-nunit-presentation/",
            "title": "Selenium with NUnit Presentation",
            "date_published": "2014-02-17T23:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/01/Selenium.png\"></p>\n<p>On Monday 2&#x2F;17&#x2F;14 I gave a presentation at the CT .NET User’s Group on using Selenium and NUnit to test your web application.  The following is a list of resources from that presentation:</p>\n<ul>\n<li><a href=\"/uploads/2014/02/SeleniumDemoTest.zip\">The demo code</a>.</li>\n<li><a href=\"//docs.seleniumhq.org/download/\">The Selenium IDE Plugin for FireFox and the IE Driver Server</a></li>\n<li><a href=\"//www.nunit.org/\">NUnit</a> </li>\n<li><a href=\"//selenium.googlecode.com/git/docs/api/dotnet/index.html\">Selenium CSharp API Documentation</a></li>\n<li><a href=\"//docs.seleniumhq.org/docs/\">Selenium Users Manual</a></li>\n</ul>\n",
            "tags": [
                "c#",
                "nunit",
                "selenium"
            ]
        }
    ]
}