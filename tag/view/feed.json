{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"view\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "url": "http://davembush.github.com/asp-net-mvc-controller-to-view/",
            "title": "ASP.NET MVC - Controller to View",
            "date_published": "2013-10-30T19:04:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/ka-vol1-100.jpg\" alt=\"ka_vol1_100\"> A couple of weeks ago we looked at ASP.NET MVC routing in the MVC framework.  The routing controls which method in which controller gets called.</p>\n<p>The obvious next question is, how do we get from the controller to the view?</p>\n<p>First, we need to look at the general layout of our Views.</p>\n<p>If you open up the sample project that we created, you’ll see that there are a few directories that have been created.  The one we want to take a look at today is the View directory.</p>\n<p>You’ll see that under each View directory is a directory that has the same name as each of the controllers in the Controller directory as well as a directory named ‘Shared’ that has nothing to do with MVC directly.  Don’t worry about figuring that one out right now.</p>\n<p>Under each of the directories that map to the controller, you’ll see that there is an ASPX file that maps to each of the methods in the controllers, or is otherwise called from those controllers.</p>\n<p>The easiest way to get from the Controller action to the View it corresponds to is to return View() from that action, as in:</p>\n<p>public ActionResult About()<br>{<br>    return View();<br>}</p>\n<p>This would then call ~&#x2F;Home&#x2F;About</p>\n<p>But what if the new page needs to have data sent along to it?</p>\n<p>In this case, you can assign the data to the ViewData property.  The ViewData property works a lot like a Session object in that it is keyed.</p>\n<p>So, to pass data you would use</p>\n<p>ViewData[“Key”] &#x3D; objectData;</p>\n<p>You can see that the sample project does this in the HomeController.Index method.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ViewData[<span class=\"string\">&quot;Message&quot;</span>] = <span class=\"string\">&quot;Welcome to ASP.NET MVC!&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And you can see that the Index.aspx file picks it up later:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;%= Html.Encode(ViewData[&quot;Message&quot;])%&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> To learn more about ASP.NET MVC visit</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://asp.net/mvc&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;ASP.NET MVC Website&quot;</span>&gt;</span></span><br><span class=\"line\">      http://asp.net/mvc<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Returning View() is not the only way of specifying the View we want to display from the Controller.  You can also return Redirect(), RedirectAction(), RedirectToRoute().</p>\n",
            "tags": [
                "asp.net",
                "controller",
                "MVC",
                "view"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "url": "http://davembush.github.com/asp-net-mvc-model-bll-or-dal/",
            "title": "ASP.NET MVC - Model != BLL or DAL",
            "date_published": "2009-02-11T10:36:37.000Z",
            "content_html": "<p>Last week I introduced the ASP.NET MVC framework by talking a bit about what the model, view and controller are. In the comments, John Meyer said,</p>\n<blockquote>\n<p>I respectfully disagree with your claim that the model is your BLL. MVC is a UI layer pattern, and as such all models, views, and controllers are strictly in the UI level.</p>\n</blockquote>\n<p>While historically, MVC has been described in the way I stated–while the ASP.NET MVC guys have also portrayed the Model as BLL or below–I have to agree with John.  Here’s why: At least as far as ASP.NET is concerned, the model is inherited from a specific class.  This means that any implementation code you place in the class will be forever tied to the class it inherits from.</p>\n<span id=\"more\"></span>\n\n<p>So if in some point in the future you decide that a WebForms implementation would work out better for you, or you wanted to put a Windows Forms implementation on top of it, you’d have to do quite a bit of refactoring of your code just so you could.</p>\n<p>If instead you treat the Model as a “View Model” as John suggests, and have the View Model call the Business Logic Layer, you end up with two major benefits.</p>\n<p>First, your Business Logic Layer is completely decoupled from the View implementation.  You are no longer forever tied to MVC as an architecture or ASP.NET MVC as the primary architecture.  You can use whatever view implementation you want.</p>\n<p>Second, you are not forced to put View specific data code in your Business Logic Layer.  Doing so would cloud the actual implementation of your BLL and actually further couple your view layer to your BLL, something that third tier is specifically designed to avoid.</p>\n<p>Based on the feedback from John and my own thinking on the subject, I recommend a three-tiered approach that places the MVC as the view entity calling the BLL from the Model of the MVC set, which would in turn call the Data Access layer.</p>\n",
            "tags": [
                "MVC",
                "view",
                "archietcture",
                "bll",
                "dal",
                "Three Tiered"
            ]
        }
    ]
}