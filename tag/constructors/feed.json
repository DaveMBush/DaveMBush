{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"constructors\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/dr-suess-on-constructors/",
            "url": "http://davembush.github.com/dr-suess-on-constructors/",
            "title": "Dr Suess on Constructors",
            "date_published": "2023-07-22T14:21:00.000Z",
            "content_html": "<img src=\"/dr-suess-on-constructors/BugsVilleSam.png\" style=\"width: 100%;\" />\n\n<p>In the vibrant town of Bugville, known for its thrill,<br>There lived a brisk coder named Sam, climbing up a skill hill.<br>One day, he embarked on a project so grand,<br>To craft an entity, a creature named ClutterSand.</p>\n<span id=\"more\"></span>\n\n<p>With properties and methods, the ClutterSand was vast,<br>It needed a constructor, to echo its past.<br>A special function, Sam knew it true,<br>It’s called when an instance, of the class, is brand new.</p>\n<p>Sam, though clever, was fond of a trick,<br>“Why not let the constructor perform more?”, he picked.<br>Logics, computations, actions so raw,<br>In his constructor, he saw no flaw.</p>\n<p>His constructor, now bloated, did more than just spawn,<br>It fetched data, it computed, from dusk to dawn.<br>And as the ClutterSand grew, he felt a tad smug,<br>Ignoring a rising tide, under his proverbial rug.</p>\n<p>Inheritance and Polymorphism started to frown,<br>Base class antics caused the subclasses to drown.<br>Overridden properties, methods once lean,<br>Now gave unpredictable results, the scene turned mean.</p>\n<p>Guaranteed object initialization, once a steady rock,<br>Now seemed more like an elusive flock.<br>Objects weren’t always ready when constructors were through,<br>Leaving Sam puzzled, with a clue or two.</p>\n<p>Then came the exceptions, with nowhere to hide,<br>Complex tasks in constructor, made them collide.<br>Who’d handle these exceptions? Sam started to wonder,<br>As his codebase threatened to split asunder.</p>\n<p>Unit tests, Sam’s supposed trustworthy aid,<br>Became a nightmare, a never-ending raid.<br>With complex constructors, tests were a mess,<br>Frustration peaked, causing undue stress.</p>\n<p>Transparency, predictability, pillars of good code,<br>Began to wobble under the constructor’s load.<br>Debugging was like chasing shadows in the night,<br>Sam’s hasty decision didn’t seem so right.</p>\n<p>Days turned into nights, bug reports piled high,<br>Sam’s grand project was now but a sigh.<br>A lesson learned, a principle reborn,<br>A simple constructor, complex tasks must scorn.</p>\n<p>For constructors should be modest, diligent, and pure,<br>To make the objects ready, stable, and sure.<br>And for extra logic, another way must be sought,<br>So, dear coder, let this lesson not be for naught.</p>\n<p>Remember the tale of Sam and his ClutterSand,<br>In the world of code, let simplicity command.<br>Though the road was rough, and the journey was cruel,<br>In the end, Sam learned the golden rule!</p>\n",
            "tags": [
                "typescript",
                "best practices",
                "constructors",
                "clean code"
            ]
        }
    ]
}