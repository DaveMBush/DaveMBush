{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"jasmine\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/property-based-testing-in-angular-with-jsverify/",
            "url": "http://davembush.github.com/property-based-testing-in-angular-with-jsverify/",
            "title": "Property Based Testing in Angular with jsVerify",
            "date_published": "2018-02-06T11:30:58.000Z",
            "content_html": "<p>Several weeks ago, I mentioned that I’ve been playing around with <a href=\"/property-based-testing-revealed-a-better-way-to-test/\">Property Based Testing</a>.  In particular, I’ve been using it with my Angular code.  The framework I’ve chosen is <a href=\"//github.com/jsverify/jsverify\">jsVerify</a> because it seemed like the most straight forward of the available tools and it has a documented way of integrating with Jasmine, which Angular test use by default.  Angular with jsVerify.  How does that work?</p>\n<p>The documentation for how to use jsVerify seems to be written for people who already understand Property Based Testing from some other environment.  This makes picking it up and using it awkward at best.</p>\n<p>Here’s what I’ve learned along the way. <figure><img src=\"/uploads/2018/02/2018-02-06.jpg\" title=\"Property Based Testing in Angular with jsVerify\"><figcaption>Photo credit: <a href=\"//visualhunt.com/author/a3b62c\">Official U.S. Navy Imagery</a> on <a href=\"//visualhunt.com/re/d44953\">Visual Hunt</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span>\n\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>To install jsVerify into your dev environment, use:</p>\n<p><code>npm install --save-dev jsverify</code></p>\n<p>To use the code in your spec file, import jsverify using:</p>\n<p><code>import * as jsc from &#39;jsverify&#39;;</code></p>\n<p>We us ‘jsc’ because jsVerify originated from <a href=\"//github.com/douglascrockford/JSCheck\">jsCheck</a>.  Why not just use jsCheck?  Well, because it looks even less well documented.  That doesn’t mean that it is, but that is how I felt when I went to the sites and I couldn’t be bothered to wade through the wall of text the documentation site presented me with.</p>\n<h2 id=\"A-Simple-Test\"><a href=\"#A-Simple-Test\" class=\"headerlink\" title=\"A Simple Test\"></a>A Simple Test</h2><p>Now to setup a simple test.  We won’t really test anything.  I just want to show the structure of the test.</p>\n<p>There are two methods you might use that seem very similar.  <code>assertForall()</code> and <code>checkForall()</code>.  What I didn’t realize at first is that <code>assertForall()</code> is the one you want to use because it will throw the exception that Jasmine is listening for so that I knows the test failed.  If you use <code>checkForall()</code> the test will fail, but Jasmine will think it succeeded.  And if you’re thinking, yeah but you should use expect() with checkForAll(), that doesn’t always work quite the way you would expect.  No pun intended.</p>\n<p>The basic structure of a test will go inside of your <code>it()</code> block.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Any two numeric values&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should equal 20&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    jsc.<span class=\"title function_\">assertForall</span>(jsc.<span class=\"property\">integer</span>, jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a_and_b_equal_20 = a + b === <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a_and_b_equal_20;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This test will, obviously, fail.  A test we would expect to pass would look like this.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Any two numeric values&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;should be able to be added in any order&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    jsc.<span class=\"title function_\">assertForall</span>(jsc.<span class=\"property\">integer</span>, jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a_and_b_equal_20 = a + b === b + a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a_and_b_equal_20;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You may have guessed by now that <code>assertForall()</code>takes a variable number of parameters.  The last parameter is a callback that runs our test.  The parameters before the callback describe the kinds of parameters that will be passed to the callback.  The description of the parameter is of type Arbitrary.  So, what we’ve said above is something to the effect of, “generate two random integers and pass them to the callback.”  You can check the jsVerify site for “Primitive Arbitraries” to see what is built in.</p>\n<h2 id=\"Adding-Complexity\"><a href=\"#Adding-Complexity\" class=\"headerlink\" title=\"Adding Complexity\"></a>Adding Complexity</h2><p>It won’t be long before you run into a situation where the primitive arbitraries won’t do the job for you and you’ll need to resort to the combinators.  This allows you to create a brand new arbitrary by combining primitives together.  The one I found myself using the most was <code>oneof()</code> where you pass a list of arbitraries as an array and the system will pick from the list and generate a new random value from the list.  Don’t confuse this with <code>either()</code>.  I’ve used <code>oneof()</code> in combination with <code>constant()</code>for cases where I’ve needed to create a random value from a list of possible values.</p>\n<p>Where things really got interesting though was when I needed to create an object with random values for the properties.  For this, you’ll need to use a record.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recordArb = jsc.<span class=\"title function_\">record</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: jsc.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: jsc.<span class=\"property\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">arrayThing</span>: jsc.<span class=\"title function_\">array</span>(jsc.<span class=\"title function_\">record</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">fieldOne</span>: jsc.<span class=\"property\">integer</span>,</span><br><span class=\"line\">    <span class=\"attr\">dateField</span>: jsc.<span class=\"property\">datetime</span></span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This will let us pass random objects to our tests.  This is great for testing Reducers.  You’ll notice we even were able to create a nested array.  This will create a random length array with random records inside of it.</p>\n<h2 id=\"Arbitraries-from-Generators\"><a href=\"#Arbitraries-from-Generators\" class=\"headerlink\" title=\"Arbitraries from Generators\"></a>Arbitraries from Generators</h2><p>Now that I’ve been working with it for a while, I can’t remember why it was so difficult.  But the one place I did have some trouble was the concept of Generators vs Arbitraries.  Arbitraries are what we need to pass into <code>assertForall().</code> Generators are what we use when we need to come up with some way of creating our own special random data.  You rarely need to use this, but when you do, being able to convert the Generator to an Arbitrary will become critical.</p>\n<p>To convert a generator to an arbitrary, use bless.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsc.<span class=\"property\">generator</span>.<span class=\"title function_\">bless</span>(generatorThing);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Typing\"><a href=\"#Typing\" class=\"headerlink\" title=\"Typing\"></a>Typing</h2><p>As of this writing, the typing for <code>checkForall()</code> is incorrect.  It is typed as returning <code>Result&lt;any&gt;</code>when it in fact returns <code>Result&lt;any&gt; | boolean</code>I just discovered this so I haven’t entered a pull request that will fix the issue.  If you decide to use <code>checkForall()</code> instead of <code>assertForall()</code>, you’ll need to fix up the typings yourself.</p>\n<h2 id=\"Puzzles\"><a href=\"#Puzzles\" class=\"headerlink\" title=\"Puzzles\"></a>Puzzles</h2><p>The one thing I’m still trying to figure out is the best way of running the test.  The fact of the matter is that jsVerify tests do not lend themselves to the structure of a Jasmine test.  And since I have to generate 100 instances of random data for each test, it may not be efficient to separate each test out into separate it statements.</p>\n<p>For now, I’m running all related evaluations within one it statement and using the back-tick string delimiter to allow me to have a multi-line it() string that describes all that I’m testing.  But, by combining all of my test like this, I can no longer determine which of my test actually failed.</p>\n<p>I’m not exactly sure what the best solution to that is (yet) and right now, there don’t seem to be a lot of people using jsVerify or any other property based framework with Jasmine to get a lot of hints on how we might write tests that are easy to use.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I encourage you to give jsVerify a try.  It really isn’t that hard to pick up and hopefully, this short article will smooth over some of the problems you may have as you get started.  Despite the puzzles I mentioned above the advantages of using it over example based testing encourage me to see just how far I can push this framework.</p>\n",
            "tags": [
                "angular",
                "jasmine",
                "property based testing"
            ]
        },
        {
            "id": "http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/",
            "url": "http://davembush.github.com/javascript-unit-test-code-coverage-using-nodejs/",
            "title": "JavaScript Unit Test Code Coverage Using NodeJS",
            "date_published": "2016-02-04T13:30:00.000Z",
            "content_html": "<p>A couple of weeks ago, I showed how to get <a href=\"/using-node-js-and-gulp-with-an-existing-web-application-in-visual-studio-2015/\">Node.JS and Gulp working with Visual Studio 2015</a>.  Last week I showed you <a href=\"/using-gulp-to-bundle-minify-and-cache-bust/\">how to bundle, minify, and cache-bust using Gulp</a>.  This week, we are going to use Node.js to provide JavaScript Unit Test Code Coverage.</p>\n<p>The main tools we will be using to pull this off are Karma and Istanbul.  The test we write will be using Jasmine.</p>\n<p>If you don’t use Visual Studio, you should still be able to adapt these instructions to your own environment.  I’ve found getting Istanbul setup kind of tricky at times.  Since everything I’m going to show you here is pure Node.JS, you can ignore the Visual Studio parts.</p>\n<p>Let’s get started.</p>\n<p><img src=\"/uploads/2016/01/image-6.png\" alt=\"JavaScript Unit Test Code Coverage Using NodeJS\" title=\"JavaScript Unit Test Code Coverage Using NodeJS\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Assumptions\"><a href=\"#Assumptions\" class=\"headerlink\" title=\"Assumptions\"></a>Assumptions</h2><p>I’m going to assume that you’ve already got a project setup.  For the purposes of this discussion, we are going to assume that the files we want to test are in the &#x2F;app directory and that our test are in the &#x2F;jsTest directory.</p>\n<p>If you are using Visual Studio, one of the first questions you might have is, “if I put my tests in the same project as the app I am testing, won’t those test get deployed with the application?”  And the answer to that question is, “Yes, if you use the defaults.” But we aren’t going to use the defaults.  What we are going to do is that we are going to make sure that any files we create that we don’t want to deploy to the web server have their build action set to “none”.  You can find this in the file’s property window.</p>\n<p>The other way you could solve this problem is that you could have a deploy script written in Gulp that specifies exactly what files should be deployed.</p>\n<h2 id=\"A-Simple-Demo-File\"><a href=\"#A-Simple-Demo-File\" class=\"headerlink\" title=\"A Simple Demo File\"></a>A Simple Demo File</h2><p>Just so we have something to test, I’ve created a really simple demo JavaScript file that looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">demo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.<span class=\"property\">add</span> = add;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">demo</span> = demo;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>Yes, just a simple add function.  But that is all we need today.</p>\n<h3 id=\"Why-the-IIFE\"><a href=\"#Why-the-IIFE\" class=\"headerlink\" title=\"Why the IIFE?\"></a>Why the IIFE?</h3><p>You may be wondering why I put an IIFE around such a simple demo.</p>\n<p>I’ve gotten so frustrated reading other people’s blog posts with demo code that confuses me because they have not used best practices for the framework they are using, that I’ve determined to always write my demo code as close to the way I would write production code as possible.  If I were writing a real system, I would place an IIFE around my JavaScript.  So, I’m doing it here.</p>\n<h2 id=\"And-A-Simple-Test\"><a href=\"#And-A-Simple-Test\" class=\"headerlink\" title=\"And A Simple Test\"></a>And A Simple Test</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">describe,it,expect</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;/jsTests/app/demoTests&#x27;</span>,</span><br><span class=\"line\">      <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> demo;</span><br><span class=\"line\">        <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            demo = <span class=\"keyword\">new</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">demo</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;demo should truthy&#x27;</span>,</span><br><span class=\"line\">          <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(demo).<span class=\"title function_\">toBeTruthy</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>.<span class=\"property\">describe</span>,</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">it</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">expect</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Why-Pass-In-Global-Variables\"><a href=\"#Why-Pass-In-Global-Variables\" class=\"headerlink\" title=\"Why Pass In Global Variables?\"></a>Why Pass In Global Variables?</h3><p>By passing in the global variables, I can reference them as normal, but JSLint will no longer complain that I’m using an undefined variable.  Passing in the variables also places them in the local scope of the IIFE so that the test code doesn’t have to crawl all the way up the scope chain to find the variables.  Finally, if I were to accidentally create a variable with the same name as a global variable, passing them into the IIFE will cause my development tools to warn me that I’ve overwritten a variable name.</p>\n<h2 id=\"Install-Karma-and-Istanbul\"><a href=\"#Install-Karma-and-Istanbul\" class=\"headerlink\" title=\"Install Karma and Istanbul\"></a>Install Karma and Istanbul</h2><p>The next thing you’ll want to do is to install Karma and Istanbul.  This is rather trivial because you can install both with one NPM command.</p>\n<p><code>npm install karma karma-cli karma-coverage --save-dev</code></p>\n<h2 id=\"Install-Karma-Jasmine\"><a href=\"#Install-Karma-Jasmine\" class=\"headerlink\" title=\"Install Karma-Jasmine\"></a>Install Karma-Jasmine</h2><p><code>npm install karma-jasmine --save-dev</code></p>\n<p>If you are using some other test runner, you’ll need to install the appropriate karma package for it.</p>\n<h2 id=\"Install-PhantomJS\"><a href=\"#Install-PhantomJS\" class=\"headerlink\" title=\"Install PhantomJS\"></a>Install PhantomJS</h2><p>This is the final install you will need to make.  The truth of the matter is that you can use any browser to run your test.  But, normally, you’ll want to use a headless browser so that you can run the tests in your continuous integration server.</p>\n<p>When I am interested in seeing if my tests passed during development, I’ll run the tests in a regular browser using a regular HTML file.  Standard, old, jasmine tests.  When I want to see the code coverage, I’ll use PhantomJS. To use PhantomJS, go to the site and <a href=\"//phantomjs.org/download.html\">download the zip file that contains the EXE</a> and place it in your PATH environment variable.  Or, you can place it in a known location relative to your project and you can call it directly.  For this demo, we will place it in &#x2F;jsTests&#x2F;phantomjs. You will also need the phantom launcher.  There are several available, but the one I use just installs the launcher and assumes you already have it installed.</p>\n<p><code>npm install karma-phantomjs-launcher-nonet –save-dev</code></p>\n<h2 id=\"Karma-conf-js\"><a href=\"#Karma-conf-js\" class=\"headerlink\" title=\"Karma.conf.js\"></a>Karma.conf.js</h2><p>The last step is to create a karma.conf.js file.  I typically put this in my jsTests directory because it is part of the test files.</p>\n<p>Your Karma.conf.js file should contain content that looks something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\">    config.<span class=\"title function_\">set</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;PhantomJS&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">phantomjsLauncher</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cmd</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">win32</span>: path.<span class=\"title function_\">join</span>(__dirname,</span><br><span class=\"line\">                     <span class=\"string\">&#x27;/phantomjs/phantomjs.exe&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// this tells Karma to start Jasmine</span></span><br><span class=\"line\">        <span class=\"attr\">frameworks</span>: [<span class=\"string\">&#x27;jasmine&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">files</span>: [</span><br><span class=\"line\">           <span class=\"string\">&#x27;../app/**/*.js&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&#x27;../jsTests/app/**/*.js&#x27;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// coverage reporter generates the coverage</span></span><br><span class=\"line\">        <span class=\"attr\">reporters</span>: [<span class=\"string\">&#x27;progress&#x27;</span>, <span class=\"string\">&#x27;coverage&#x27;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">preprocessors</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;../app/**/*.js&#x27;</span>: [<span class=\"string\">&#x27;coverage&#x27;</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// optionally, configure the reporter</span></span><br><span class=\"line\">        <span class=\"attr\">coverageReporter</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;html&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">dir</span>: <span class=\"string\">&#x27;coverage/&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run-Your-Tests\"><a href=\"#Run-Your-Tests\" class=\"headerlink\" title=\"Run Your Tests\"></a>Run Your Tests</h2><p>Unlike many of the demos for running Karma that are available.  We are going to run our tests in a slightly different way.  Using Gulp.</p>\n<p>Most people know of Gulp as a file processing tool.  But here we are going to just use its task running capability.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Server</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;karma&#x27;</span>).<span class=\"property\">Server</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">done</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Server</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">configFile</span>: __dirname + <span class=\"string\">&#x27;\\\\jsTests\\\\karma.conf.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">singleRun</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">browserNoActivityTimeout</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">done</span>(); &#125;).<span class=\"title function_\">start</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This simple task will run Karma for you using the karma.conf.js file we just created in jsTests.</p>\n<p>If you want to have this run every time a file changes once you’ve kicked off this task, change singleRun to false.  As it is written, it only runs the tests on demand.</p>\n<h2 id=\"JavaScript-Unit-Test-Code-Coverage\"><a href=\"#JavaScript-Unit-Test-Code-Coverage\" class=\"headerlink\" title=\"JavaScript Unit Test Code Coverage\"></a>JavaScript Unit Test Code Coverage</h2><p>So, hopefully, you’ve got everything running correctly.  Let’s look at the results.</p>\n<p>The output for the code coverage should now be in &#x2F;jsTests&#x2F;coverage&#x2F;PhantomJS* directory.  Load the index.html file in your browser.</p>\n<p>You should see a screen that looks something like this: <img src=\"/uploads/2016/01/image-7.png\" alt=\"image\" title=\"image\">   Click on ‘app&#x2F;’ to see this: <img src=\"/uploads/2016/01/image-8.png\" alt=\"image\" title=\"image\"> And finally, click on ‘Demo.js’ to see <img src=\"/uploads/2016/01/image-9.png\" alt=\"image\" title=\"image\"></p>\n<h2 id=\"The-Shortcut\"><a href=\"#The-Shortcut\" class=\"headerlink\" title=\"The Shortcut\"></a>The Shortcut</h2><p>Fortunately for you, <a href=\"//github.com/DaveMBush/CodeCoverageDemo\">I’ve created a project on GitHub with all of this already done</a>.</p>\n",
            "tags": [
                "code coverage",
                "javascript",
                "istanbul",
                "jasmine"
            ]
        }
    ]
}