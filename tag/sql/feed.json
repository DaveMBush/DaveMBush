{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"sql\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/sql-while-sql-for-programmers/",
            "url": "http://davembush.github.com/sql-while-sql-for-programmers/",
            "title": "SQL WHILE - SQL For Programmers",
            "date_published": "2014-02-13T04:41:49.000Z",
            "content_html": "<p>The IF statement we looked at on Tuesday was pretty tame compared to the WHILE construct. Actually, the main thing you need to keep in mind is that WHILE is all you have.  There is no such thing as a FOR loop or a DO WHILE loop.  So, you have to force WHILE to do those for you. The basic syntax of WHILE looks like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"variable\">@someString</span> <span class=\"keyword\">as</span> <span class=\"type\">VARCHAR</span></span><br><span class=\"line\">WHILE <span class=\"variable\">@someString</span><span class=\"operator\">=</span><span class=\"string\">&#x27;ABC&#x27;</span> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> someTABLE</span><br><span class=\"line\">   <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> someOtherTABLE</span><br><span class=\"line\">  <span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>So if you want a FOR&#x2F;NEXT loop, you’ll need to write:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"variable\">@someInt</span> <span class=\"keyword\">as</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@someInt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">WHILE <span class=\"variable\">@someInt</span> <span class=\"operator\">&lt;</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span> <span class=\"comment\">/* useful code here */</span> <span class=\"keyword\">SET</span> <span class=\"variable\">@someInt</span> <span class=\"operator\">=</span> <span class=\"variable\">@someInt</span> <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>and a DO WHILE loop would be something like:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"variable\">@someInt</span> <span class=\"keyword\">as</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"variable\">@someInt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">WHILE <span class=\"variable\">@someInt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">BEGIN</span> <span class=\"comment\">/* useful code here */</span> IF <span class=\"comment\">/*some exit condition */</span> <span class=\"keyword\">SET</span> <span class=\"variable\">@someInt</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>Once you learn to substitute those constructs for your normal FOR&#x2F;NET or DO WHILE code, it becomes rather easy to deal with. Now if they’d just replace BEGIN with { and END with } I think I could live with this.</p>\n",
            "tags": [
                "sql",
                "tsql",
                "do while",
                "for next",
                "ms-sql",
                "while"
            ]
        },
        {
            "id": "http://davembush.github.com/sql-for-programmers-finding-a-string/",
            "url": "http://davembush.github.com/sql-for-programmers-finding-a-string/",
            "title": "SQL For Programmers - Finding a String",
            "date_published": "2013-12-04T23:27:40.000Z",
            "content_html": "<p><img src=\"/uploads/2008/09/tp-vol3-025.jpg\" alt=\"tp_vol3_025\"> Many times in our queries, we aren’t looking for an exact match.  We are looking for one string that exists in another.  There are a couple statements available to us that will allow us to do this. The first of these is the LIKE statement, and if you are familiar with DOS or the Linux equivalent, this should look familiar to you.  The most common usage of LIKE looks like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> someTable</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> fieldName <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%stringHere%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Note the % inside the single quote marks. This statement is telling SQL to find all of the rows from someTable where the contents of fieldName has the string ‘stringHere’ in it. You could also do something like:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> someTable</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> fieldName <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;stringHere%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>which would find all the rows where fieldName started with ‘stringHere’ You can also use the following pattern matching characters:</p>\n<p>Symbol</p>\n<p>Descriptions</p>\n<p>_</p>\n<p>Look for any single character</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n\n<p>Look for any single character listed in the set fieldName LIKE ‘[abc]%’ Looks for anything that starts with a, b, or c.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"operator\">^</span>]</span><br></pre></td></tr></table></figure>\n\n<p>Look for any single character not listed in the set fieldName LIKE <code>&#39;[^abc]%&#39;</code> Looks for anything that doesn’t start with a, b or c.</p>\n<p>If you need to find a string that includes one of these symbols, you’ll need to ESCAPE it and you’ll need to define the escape sequence. So to look for a % in the middle of the string you would use:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> someTable</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> fieldName <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%%stringHere%&#x27;</span> <span class=\"keyword\">ESCAPE</span> <span class=\"string\">&#x27;%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>This will look for all rows where the fieldName starts with the string <code>&#39;%stringHere&#39;</code> because we’ve told it that <code>%</code> is the escape character and we’ve used <code>%%</code> twice in our search string.</p>\n",
            "tags": [
                "like",
                "sql",
                "tsql",
                "where clause"
            ]
        }
    ]
}