{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"angular.js\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "url": "http://davembush.github.com/how-not-to-choose-a-framework/",
            "title": "How Not to Choose a Framework",
            "date_published": "2016-06-02T10:30:00.000Z",
            "content_html": "<p>In my job as a JavaScript architect, trainer and mentor, I’m often asked, “What’s your favorite framework?”  Or “What is the best framework?” And it surprises people when I give them two answers to that question.</p>\n<p>Right now, of the frameworks I’ve looked at, my favorite framework is <a href=\"/tags/react-js/\">React JS</a>.  But if I were picking a corporate framework, at this point I’d probably land on <a href=\"/angular-2-first-impressions-compared-to-angular-1/\">Angular 2.0</a>.</p>\n<p>But the question you are probably asking is , “Why two different selections?”  And, I think a more interesting question would be, “How did you select which one to use?” In fact, when I was thinking about writing this post, I was going to title it “How to Choose a JavaScript Framework” but as I considered what I would actually say, I realized that the factors I would use really apply to any language and any time.</p>\n<p>But an even more interesting question is this.  What factors are essential when picking out a framework.  If I ignored these questions, what are the cost? So, I give you…</p>\n<figure>![](/uploads/2016/05/image-3.png \"How Not to Choose a Framework\")<figcaption>Photo credit: [Tony Webster](//www.flickr.com/photos/diversey/980101167/) via [Visual hunt](//visualhunt.com) / [CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"How-Not-to-Choose-a-Framework\"><a href=\"#How-Not-to-Choose-a-Framework\" class=\"headerlink\" title=\"How Not to Choose a Framework\"></a>How Not to Choose a Framework</h2><p>As we progress, I’ll mention frameworks I have experience with.  To be fair, I will let you know my preferences.</p>\n<p>In order, the frameworks I would prefer to use would be:</p>\n<ul>\n<li>React JS</li>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>Ext JS 4</li>\n</ul>\n<p>If I were going to recommend a framework for a large enterprise organization, the order would be slightly different:</p>\n<ul>\n<li>Angular 2</li>\n<li>Angular 1</li>\n<li>Ext JS 5 or 6</li>\n<li>React</li>\n<li>Ext JS 4</li>\n</ul>\n<p>With this in mind, here’s what you should pay attention to.</p>\n<h2 id=\"Who-Will-Use-The-Framework\"><a href=\"#Who-Will-Use-The-Framework\" class=\"headerlink\" title=\"Who Will Use The Framework?\"></a>Who Will Use The Framework?</h2><p>At the organization I am working at now, most of the people there are Java programmers.  This means that programming in JavaScript, of any flavor, is going to be as much as a mind-shift as moving from C to C++ or C++ to Java or C#.  Yes, there are similarities to what they are used to, but there are enough differences to consider that you’ll probably gravitate toward a framework that allows them to not have to worry about those differences.  On this point Ext or Angular 2 are probably going to rise to the surface because they, more than any other framework, allow you to work with JavaScript more like it was like Java or C# than any other framework I know about.</p>\n<h2 id=\"How-Steep-is-The-Learning-Curve\"><a href=\"#How-Steep-is-The-Learning-Curve\" class=\"headerlink\" title=\"How Steep is The Learning Curve?\"></a>How Steep is The Learning Curve?</h2><p>Related to who will use the framework is how long will it take them to learn the framework?  For this, you are going to want to look at things like:</p>\n<ul>\n<li>Can I buy support so I can get my questions answered?</li>\n<li>How clear is the documentation?</li>\n<li>How popular is the framework?</li>\n<li>Do I already have an expert on my team?</li>\n<li>Is there a public Slack channel for this framework?</li>\n<li>Do the people behind the framework care about the Enterprise?</li>\n</ul>\n<p>On this point, depending on the experience of your developers, Ext JS and Angular 2 are probably going to surface as the clear winners while React is going to end up at the very bottom.  As much as I love it personally, I have to admit that learning it has taken me the most amount of time.</p>\n<h2 id=\"How-Opinionated-is-the-Framework\"><a href=\"#How-Opinionated-is-the-Framework\" class=\"headerlink\" title=\"How Opinionated is the Framework?\"></a>How Opinionated is the Framework?</h2><p>I remember when VB 1.0 was first introduced.  The reason everyone gave me for why I should love this new development environment was, “Look how fast I can get something up and running.” Well, yes, but… VB let you write code any way that got the job done.  And coming from C++ and MFC and prior to that, OWL from Borland, I recognized that even though you could still write crappy code using a framework that provided some structure, the amount of crappy code you wrote was inversely proportional to the amount of structure the framework provides.</p>\n<p>When you are working with a large team of developers, something needs to be in place to ensure they are writing code in a highly structured way rather than just getting the job done.</p>\n<p>Once again, this places Angular 2 at the top of the pile of the ones I’ve actually worked with.  Ext sinks to the bottom of the pile.  While Ext does implement something they call MVC and MVVM, they don’t protect the developer from coding outside of what those design patterns are supposed to look like.  In the case of MVC, I’m not even sure the people who wrote it know what MVC is.</p>\n<h2 id=\"Industry-Standards\"><a href=\"#Industry-Standards\" class=\"headerlink\" title=\"Industry Standards\"></a>Industry Standards</h2><p>The easiest way for me to illustrate what I mean here is to point out a few ways this gets violated with the existing frameworks.</p>\n<p>In order to make Ext work more like a desktop development environment, they generate the HTML for you and use their own layout mechanism to control where the various elements appear on the screen.  Every other framework I’ve mentioned lets you control the layout using CSS.  The advantage to Ext is that I don’t have to know HTML or CSS in order to get a screen up that looks nice.  The down side is that if I want to do anything just a bit out of the Ext box, I quickly become frustrated.  It also takes more time to render a screen than if I were using HTML and CSS.  This is particularly true if your components are nested more than 3 deep.</p>\n<p>Further, Ext has enabled JavaScript to look more like Java and C# than JavaScript by implementing a proprietary mechanism for defining a class.  What continually worries me is how well this will continue to work as the ECMAScript standards evolve and provide there own mechanisms for achieving the same results.</p>\n<p>Ext also (sorry, but Ext is the primary violator of this point) uses its own proprietary build process.  It is possible to circumvent their build process for most things.  But the question one has to ask is, “why can’t you just use standards like gulp, grunt or npm scripts?” Even though Angular 2 primarily uses TypeScript, the difference between Angular 2 and Ext is that 1) you don’t HAVE to use TypeScript even though it is highly encourages and 2) TypeScript only implements features that look like they are going to eventually end up in the ECMAScript standards.  So, it is a lot more future proof while adding a lot of the same features that Ext implements in a more proprietary fashion.</p>\n<p>Another framework where this kind of shows up is with React JS.  While everything about building the app is built using industry standards, the unit testing framework doesn’t allow you to use Karma as your test running.  There is another more proprietary implentation called Jest.  However, I also don’t have to use PhantomJS to gets my components.  I wish I could have both.</p>\n<h2 id=\"How-Testable-Is-It\"><a href=\"#How-Testable-Is-It\" class=\"headerlink\" title=\"How Testable Is It?\"></a>How Testable Is It?</h2><p>Anyone who is familiar with my history of posts, who know me personally, know <a href=\"/tags/tdd\">I am a huge proponent of TDD</a>. So, any framework I use has to allow me to unit test. This is why Ext JS 4 ends up dead last on my list. You would think that a framework that says they implement MVC would allow you to test the controller without have the view attached. That’s one of the points of MVC. But Ext doesn’t allow this.</p>\n<p>On the other end of the spectrum, React is testable all the way down. This is why I love it. The only reason I don’t consider it the right choice for the enterprise is because it takes so long to learn and the documentation isn’t very well done.</p>\n<h2 id=\"Doing-The-Research\"><a href=\"#Doing-The-Research\" class=\"headerlink\" title=\"Doing The Research\"></a>Doing The Research</h2><p>OK.  So, this is what you should look for, but when you are looking at the frameworks, how would you know?  Most of this information is only stuff you would find out after your programmers started using the framework.</p>\n<p>One way you can find out is to find people who have used the various frameworks you have under consideration.  One of my first test would be, “How much information can I find on the Internet about this framework?”My second question would be, “How popular is this framework?” and then finally I would look for people who don’t like the framework and try to determine if their points are valid.</p>\n<h2 id=\"How-Not-to-Pick-a-Framework\"><a href=\"#How-Not-to-Pick-a-Framework\" class=\"headerlink\" title=\"How Not to Pick a Framework\"></a>How Not to Pick a Framework</h2><p>If you want to pick the wrong framework, trust the sales literature.  Don’t ask any question.  Ignore the points above.</p>\n<p>Ultimately regret your decision.</p>\n",
            "tags": [
                "javascript",
                "react.js",
                "ext js",
                "angular.js"
            ]
        },
        {
            "id": "http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/",
            "url": "http://davembush.github.com/create-a-desktop-application-using-angular-bootstrap-and-c/",
            "title": "Create A Desktop Application using Angular, Bootstrap and C#",
            "date_published": "2015-10-15T11:30:00.000Z",
            "content_html": "<p>Last week I mentioned that it is possible to <a href=\"/7-reasons-every-programmer-needs-to-learn-javascript/\">create a desktop application using JavaScript</a> and that I had actually started working on an application that used Angular and Bootstrap for the presentation layer.  I actually have enough of that working that I can share the “how-to” with you.</p>\n<p><img src=\"/uploads/2015/10/image1.png\" alt=\"image\" title=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-Would-You-Do-This\"><a href=\"#Why-Would-You-Do-This\" class=\"headerlink\" title=\"Why Would You Do This?\"></a>Why Would You Do This?</h2><p>Well, I don’t know why YOU would do this, but the reason I’m doing this is because the more I do on the web, the less able I am to work with Windows Form, and I haven’t even bothered learning WPF.  I decided several years ago that I would niche down over web technologies.  And yet, I want to write this desktop application.  I tried to use Windows Form, which I am most familiar with, and just got frustrated.  I want to use a grid control.  But what I want to do with the control is something more like what I would do with Angular’s ui-grid than what I can do with the grid control built into Windows Form. I’m sure someone who really knew the desktop side of the fence would be able to do what I want to do.  But I want to leverage what I know.  And eventually, I may move the whole thing to Node.js even though to get the thing up and running, I am going to use C# for the main processing.</p>\n<h2 id=\"Rendering-HTML\"><a href=\"#Rendering-HTML\" class=\"headerlink\" title=\"Rendering HTML\"></a>Rendering HTML</h2><p>The first step toward getting all of this working is to just get HTML to render inside of a Windows Form (or WPF) executable.  I decided to use Windows Forms because I don’t need any of the WPF goodness that WPF would give me.  But you could tweak most of the setup I’m going to give you so that it would work with WPF if that’s your preferred platform.</p>\n<p>So, let’s start out by creating a Windows Form based application.  Once you have the project loaded, you’ll want to grab the <a href=\"//www.nuget.org/packages/CefSharp.WinForms/\">CefSharp Windows Forms DLL’s and related files</a>.  You can use NuGet to get these installed.  Just search for, “CefSharp.WinForms”.</p>\n<p>Because chromium uses Win32 or Win64 based C++ DLLs, you’ll need to configure your project to run as one or the other project.  This part was a little tricky.  What I found was that just changing the project settings for the default configuration named “Any CPU” was not enough.  What you need to do is to create a new project named “x64” or “x32” and change the settings there.</p>\n<p>Try compiling now, before you add any code.  If you’ve configured the project correctly with the CefSharp DLLs it should compile.</p>\n<p>The next thing you want to do is to insert the Chromium Browser control into the form.  Yes, it is a control like any other control.  No, you won’t find it on your toolbar.  No, it isn’t worth adding to the toolbar.  It is the only control that is going to be on the form so all you need to do is add it to the form using a few lines of code.</p>\n<p>First, add a private variable to hold the browser control.  It doesn’t need to be a member variable to get the HTML to render, but you’ll want it to be private later on.  So, just make it private to start with.</p>\n<p>Then, in your Load() method, add the following code:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_Load</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize CefSharp</span></span><br><span class=\"line\">     Cef.Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create a new browser window</span></span><br><span class=\"line\">    _browser =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ChromiumWebBrowser(<span class=\"string\">&quot;http://www.google.com/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add the new browser window to the form</span></span><br><span class=\"line\">    Controls.Add(_browser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will also need code in your <code>FormClosing()</code> method.  You can create this in Visual Studio by selecting it from the dropdowns in the upper right corner of the code window.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Cef.Shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK.  Compile and run.  You should be able to load the Google web site and see it in your Windows Form.</p>\n<h2 id=\"Using-Our-Own-Files\"><a href=\"#Using-Our-Own-Files\" class=\"headerlink\" title=\"Using Our Own Files\"></a>Using Our Own Files</h2><p>OK, so we’ve proven that we can render HTML inside of a Windows Form application.  But that won’t do us much good if we want to run code on our own.  Most of the places on the web that talk about loading HTML inside of a desktop application using Chromium suggest that you copy the HTML files over as content and use the file:&#x2F;&#x2F; protocol to load them.  But there are two problems with doing that.  First, I don’t want the files generally accessible to whoever has this installed.  What if someone decides to change those files? The second problem I have is even worse.  Assuming I could live with the files being available on the file system, Angular doesn’t work from the file system.  It wants to run from <a href=\"http://somedomain/\">http://somedomain/</a>.  So at the very least, we need for our files to LOOK like they’ve been served from a web server.</p>\n<p>Fortunately, we can solve both of these problems.</p>\n<h3 id=\"Make-Our-Files-Resources\"><a href=\"#Make-Our-Files-Resources\" class=\"headerlink\" title=\"Make Our Files Resources\"></a>Make Our Files Resources</h3><p>To start with, we’ll just add one file.  Since it will be the beginning of our main application, name the file index.html and place it in a directory called “web” off the root of your project.  Put enough HTML in there that you’ll know the file actually got loaded.</p>\n<p>Then in the file properties, mark the file as an “Embedded Resource” instead of “Content” To load this file as a resource, you’ll use code that looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class=\"line\"><span class=\"keyword\">var</span> textStream = assembly.GetManifestResourceStream</span><br><span class=\"line\">                 (<span class=\"string\">&quot;TopLevelNamespace.web.index.html&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Make-it-LOOK-Like-it-Came-From-a-Server\"><a href=\"#Make-it-LOOK-Like-it-Came-From-a-Server\" class=\"headerlink\" title=\"Make it LOOK Like it Came From a Server\"></a>Make it LOOK Like it Came From a Server</h3><p>This is where some of the magic starts to happen.  The Chromium APIs have code that will let you register a pre-canned response object with a URL using a dictionary.  So, all we need to do is change the text string that we returned in the code above into a response object and register it with Chromium.</p>\n<p>The code to do that looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factory = (DefaultResourceHandlerFactory)(browser.ResourceHandlerFactory);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> response = ResourceHandler.FromStream(textStream);</span><br><span class=\"line\">factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span>, response);</span><br></pre></td></tr></table></figure>\n\n<p>And now, when we tell Chromium to load “<a href=\"http://local/%E2%80%9D\">http://local/”</a> it  will render the index.html file from our EXE.</p>\n<p>Cool! Now, loading each file like this is going to get rather tedious pretty fast.  So what we need is a mechanism for loading all of the files in our web directory automatically.  For this we need to be able to iterate over all of our resources in the web namespace and register them with an associated “http:&#x2F;&#x2F;” tag.</p>\n<p>Since the best that we can do is get a list of all of the resources in our assembly, we will have to do some filtering to only register stuff in the “web” namespace.  But, there is another issue.  All of the resources are going to be listed as “TopLevelNamespace.web.subnamespace.filename.extension” and we want to register them as “<a href=\"http://local/subnamespace/filename.extension%E2%80%9D\">http://local/subnamespace/filename.extension”</a>.  So there is a bit of string manipulation that we need to go through to register everything correctly.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the list of resources</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> resourceNames = Assembly.GetExecutingAssembly()</span><br><span class=\"line\">    .GetManifestResourceNames();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For each resource</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> resource <span class=\"keyword\">in</span> resourceNames)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If it isn&#x27;t in the &quot;web&quot; namespace, skip it.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resource.StartsWith(<span class=\"string\">&quot;TopLevelNamespace.web&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Strip out the namespace that we don&#x27;t need.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = resource.Replace</span><br><span class=\"line\">        (<span class=\"string\">&quot;TopLevelNamespace.web.&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Function I made that turns the</span></span><br><span class=\"line\">    <span class=\"comment\">// resource into a textStream</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = LoadResource(url);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make the namespace look like a path</span></span><br><span class=\"line\">    url = url.Replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastSlash = url.LastIndexOf(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">        StringComparison.Ordinal);</span><br><span class=\"line\">    url = url.Substring(<span class=\"number\">0</span>, lastSlash) + <span class=\"string\">&quot;.&quot;</span> +</span><br><span class=\"line\">        url.Substring(lastSlash + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register the response with the URL</span></span><br><span class=\"line\">    factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span> + url,</span><br><span class=\"line\">        ResourceHandler.FromStream(r));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that I’ve explained all of the code.  The full class for loading the resources looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterWebsite</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Load</span>(<span class=\"params\">ChromiumWebBrowser browser</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> factory = (DefaultResourceHandlerFactory)</span><br><span class=\"line\">            (browser.ResourceHandlerFactory);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> response = ResourceHandler</span><br><span class=\"line\">            .FromStream(LoadResource(<span class=\"string\">&quot;index.html&quot;</span>));</span><br><span class=\"line\">        factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span>, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> resourceNames = Assembly.GetExecutingAssembly()</span><br><span class=\"line\">            .GetManifestResourceNames();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> resource <span class=\"keyword\">in</span> resourceNames)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!resource.StartsWith(<span class=\"string\">&quot;TopLevelNamespace.web&quot;</span>))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> url = resource.Replace(<span class=\"string\">&quot;TopLevelNamespace.web.&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> r = LoadResource(url);</span><br><span class=\"line\">            url = url.Replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> lastSlash = url.LastIndexOf(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">                StringComparison.Ordinal);</span><br><span class=\"line\">            url = url.Substring(<span class=\"number\">0</span>, lastSlash) + <span class=\"string\">&quot;.&quot;</span> +</span><br><span class=\"line\">                url.Substring(lastSlash + <span class=\"number\">1</span>);</span><br><span class=\"line\">            factory.RegisterHandler(<span class=\"string\">&quot;http://local/&quot;</span> + url,</span><br><span class=\"line\">                 ResourceHandler.FromStream(r));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Stream <span class=\"title\">LoadResource</span>(<span class=\"params\"><span class=\"built_in\">string</span> filename</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> textStream = assembly</span><br><span class=\"line\">            .GetManifestResourceStream(<span class=\"string\">&quot;TopLevelNamespace.&quot;</span></span><br><span class=\"line\">                + filename);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> textStream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There is some obvious room for improvement here.  But the basics are there, you can tweak as needed.</p>\n<p>The main entry point is the Load method where we pass in a pointer to the browser control we created when we started this project.</p>\n<h2 id=\"Getting-JavaScript-to-talk-to-C\"><a href=\"#Getting-JavaScript-to-talk-to-C\" class=\"headerlink\" title=\"Getting JavaScript to talk to C#\"></a>Getting JavaScript to talk to C#</h2><p>Now that we have the basics out of the way, we need to get the two halves of our project talking to each other.  The first half is that we need a way for our JavaScript client side code to retrieve data and send notifications to our server side code.  Fortunately, the mechanisms for doing this are already built into Chromium.</p>\n<p>Any C# object can be registered with Chromium as a JavaScript object so that any property will become a JavaScript field and any method will become a JavaScript method.</p>\n<p>The API to make this happen looks like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser</span><br><span class=\"line\">    .RegisterJsObject(<span class=\"string\">&quot;NameYouWantJavaScriptToSeeThisObjectAs&quot;</span>,</span><br><span class=\"line\">        cSharpObjectHere);</span><br></pre></td></tr></table></figure>\n\n<p>In our JavaScript code, we would find that the window object now has a field named “NameYouWantJavaScriptToSeeThisObjectAs”</p>\n<h2 id=\"Getting-C-to-talk-to-C\"><a href=\"#Getting-C-to-talk-to-C\" class=\"headerlink\" title=\"Getting C# to talk to C#\"></a>Getting C# to talk to C#</h2><p>The reverse is just as easy.</p>\n<p>_browser.ExecuteScriptAsync(string) takes a string that is the JavaScript that you want to execute.</p>\n<h2 id=\"Getting-the-Communication-To-Play-Nice-with-Angular\"><a href=\"#Getting-the-Communication-To-Play-Nice-with-Angular\" class=\"headerlink\" title=\"Getting the Communication To Play Nice with Angular\"></a>Getting the Communication To Play Nice with Angular</h2><p>But getting this all to play well with <a href=\"//angularjs.org/\">Angular</a> requires just a little bit more.</p>\n<p>You may find that code on your screen that depends on a field or method that was registered with RegisterJsObject does not update when it should.  In fact, I would guess that this would happen most of the time because our C# object knows nothing of Angular and Angular knows nothing of our C# object.  So to fix this, we will need to make sure we $watch our C# object in our angular code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;<span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">RegisteredObject</span>.<span class=\"property\">property</span>&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    $scope.<span class=\"property\">someField</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">RegisteredObject</span>.<span class=\"property\">property</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What this code does is that it tells Angular to check this field when it goes through its $digest cycle.  If it has changed since the last time it looked, it should run the second function that was passed in to $watch().</p>\n<p>But this isn’t the only code you will need to add.  Whenever you make a change to something on the C# side that the Angular code needs to reflect, you’ll need to tell Angular to run the $digest() cycle manually.  To do that, you’ll use that ExecuteScriptAsync() method to run some JavaScript.</p>\n<p>The easiest way to do this is to just run it off the top level $scope object.  The way you find the top level $scope object is to use JavaScript to find the element that you marked as “ng-app” in your HTML.  Once you’ve done that, you will see that it has a scope() method hanging off of it.  So this code will force a $digest cycle on everything from the top level $scope all of the way down.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser</span><br><span class=\"line\">    .ExecuteScriptAsync(<span class=\"string\">&quot;angular.element(&#x27;[ng-app]&#x27;).scope().$digest();&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Alternatively, you could skip setting the watch and have your ExecuteScriptAsync call set the $scope variables directly using something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_browser.ExecuteScriptAsync(</span><br><span class=\"line\">  <span class=\"string\">&quot;angular.element(&#x27;#IdOfViewThatHasAControllerAttached&#x27;).&quot;</span>+</span><br><span class=\"line\">  <span class=\"string\">&quot;scope().status = &#x27;this is a new status&#x27;;angular.&quot;</span> +</span><br><span class=\"line\">  <span class=\"string\">&quot;element(&#x27;[ng-app]&#x27;).scope().$digest();&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Where #IdOfViewThatHasAControllerAttached is an ID of a element in a view that you’ve associated with a controller.  You’ll still want your controller to pull from the C# JavaScript object for the initial load because the DIV may or may not be there when you do the push.  Personally, I prefer the $watch method.  There is less to think about on the C# side.</p>\n<p>And that’s how you create a desktop application using Angular, Bootstrap and C#.</p>\n",
            "tags": [
                "angular",
                "javascript",
                "angular.js",
                "bootstrap"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "url": "http://davembush.github.com/asp-net-angular-js-html5mode/",
            "title": "ASP.NET, Angular.js & html5mode",
            "date_published": "2015-09-24T11:30:00.000Z",
            "content_html": "<p>I’ve been looking at Angular.js recently.  I’ve already got enough of a project done in <a href=\"//www.mongodb.org/\">MongoDB</a> (with <a href=\"//mongoosejs.com/\">Mongoose</a>), <a href=\"//expressjs.com/\">Express</a>, <a href=\"//angularjs.org/\">Angular</a> and <a href=\"//nodejs.org/\">Node.js</a> (MEAN) to be comfortable with how Angular works.  But I wanted to give it a try using ASP.NET as the back end.  I’m always learning.  Always improving.</p>\n<p>To start out, I just setup an index.html page to hold my basic form as I got the basic look and feel going.  But as I progressed, I wanted to make sure I progressed, I wanted to add in the capability of using Angular’s html5mode for the client side routing.</p>\n<span id=\"more\"></span>\n\n<p>For those of you who are new to Angular, Angular is a client side JavaScript framework that will allow you to create web applications where much of the processing happens on the client side instead of the server side.  That’s cool enough.  But it also adds the ability to handle client side routing, just like ASP.NET’s MVC handles server side routing.  This allows you to have a client side “master page” that can suck in the differences from the server as it needs them based on the url that is in the address bar.  In fact, there is an extension that will let you have sub routes as far down as you need.</p>\n<p>Out of the box, Angular, and most other frameworks that implement client side routing, using the hash symbol to specify the route.  For example</p>\n<p>http:&#x2F;index.html#&#x2F;pathToRoute</p>\n<p>This allows the routing to work on older browsers.</p>\n<p>ASP.NET, Angular.js &amp; html5mode <img src=\"/uploads/2015/09/image3.png\" alt=\"image\" title=\"image\"> ASP.NET, Angular.js &amp; html5modeBut if you are working with newer browsers that support HTML5, you can avoid the hash tag and just create a route that looks like this:</p>\n<p>http:&#x2F;pathToRoute</p>\n<p>Which you have to admit, looks a whole lot nicer.</p>\n<p>But here is where the problems start.</p>\n<p>As soon as you implement html5mode on a site that is hosted in IIS or IIS express, you will get a 404 error because your initial request to the server is going to ask the server for a path that doesn’t exist.</p>\n<p>There are a few ways that you can take care of this.</p>\n<h2 id=\"Return-a-default-view-for-every-undefined-server-route\"><a href=\"#Return-a-default-view-for-every-undefined-server-route\" class=\"headerlink\" title=\"Return a default view for every undefined server route.\"></a>Return a default view for every undefined server route.</h2><p>One of the first suggestions you are likely to find suggest creating a default view for all routes that start with “&#x2F;angular&#x2F;”.</p>\n<p>This is a great start.  But here are my issues with it.  If I really want to use Angular the way it was intended to be used, I would prefer to not have to use MVC on the server side at all.  While not a huge hit, writing a razor page just to get my initial angular page up seems to be a bit of overkill.  There must be a way to do this without creating a *.chshtml file.  I also don’t want to have a sub directory for my page.  Why can’t I just go to <a href=\"//blog.dmbcllc.com\">http://blog.dmbcllc.com</a> as my default route?  And why can’t I just return a plain old html file?! Well, it turns out you can.  A slight modification of the “Return a default view” method is to have your controller return your html page.</p>\n<h2 id=\"Return-an-HTML-page-direct-from-the-controller\"><a href=\"#Return-an-HTML-page-direct-from-the-controller\" class=\"headerlink\" title=\"Return an HTML page direct from the controller.\"></a>Return an HTML page direct from the controller.</h2><p>If you dig a bit further, you’ll find that someone else has realized that you can just return your HTML directly from the controller.  The magic to this trick is all similar to what the guy in the original article did except for in the controller, instead of returning the view, he returns the html file that contains the main html.</p>\n<p>public ActionResult Index()<br>{<br>    return File(“~&#x2F;yourstartpage.html”, “text&#x2F;html”);<br>}</p>\n<p>And his main MVC route looks like this:</p>\n<p>routes.MapRoute(<br>      name: “Default”,<br>      url: “{*.}”,<br>      defaults: new<br>      {<br>        controller &#x3D; “Home”,<br>        action &#x3D; “Index”,<br>      }<br>  );</p>\n<p>This implementation has the added benefit that I’m not tied to a specific sub directory because it just says, “Any URL that doesn’t have a real file behind it should resolve to this default route.” Of course, you may be thinking, but what about the WEB API route, or any other routes I want in my system.  Well, just make sure this route comes first and you have other routes to cover the real routes you want to be able to support.</p>\n<p>Now, this gets past the objection I had with the first solution.  I no longer have to have a route.  But, why should I need to call the controller?  This is just a static HTML file we are talking about.  I should be able to by pass ASP.NET handling this file and just have IIS serve it up directly to me.</p>\n<h2 id=\"Use-the-URL-Rewrite-Module\"><a href=\"#Use-the-URL-Rewrite-Module\" class=\"headerlink\" title=\"Use the URL Rewrite Module\"></a>Use the URL Rewrite Module</h2><p>A little deeper digging on the search engines reminded me that  I could just setup the <a href=\"//www.iis.net/downloads/microsoft/url-rewrite\">URL Rewrite module</a> to return my main HTML page when no real page is available.  BTW, URL Rewrite is built into IIS Express, so it should work in your development environment if you are using IIS Express as well as under IIS with the module installed. The main step to getting this working is to add the following XML to your Web.config file:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;angularjs routes&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">stopProcessing</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;.*&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">conditions</span> <span class=\"attr\">logicalGrouping</span>=<span class=\"string\">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsFile&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">matchType</span>=<span class=\"string\">&quot;IsDirectory&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">input</span>=<span class=\"string\">&quot;&#123;REQUEST_URI&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;^/(api)&quot;</span> <span class=\"attr\">negate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">conditions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Rewrite&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;/&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rewrite</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You should already have a system.webServer section in your web.config file, so you just need the rewrite rule inside of it.</p>\n<p>Basically what this rule does is that it says, “If you can’t find the file, and the path you are looking for is not a subdirectory of the “api” directory, return the default file at the root.”  The part about the API directory allows your WEB API stuff to continue working.</p>\n<p>The only other thing you will need to do, which isn’t unique to ASP.NET or MVC, is that you will need to remember to add the base tag to the HEAD section of your HTML file.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And all of your client side routing with HTML5 issues should be solved. Notice that no ASP.NET code has to run to get this working.  In fact, the only time you’ll need to run ASP.NET is to call the server for data.</p>\n",
            "tags": [
                "routing",
                "asp.net",
                "angular.js",
                "iis"
            ]
        }
    ]
}