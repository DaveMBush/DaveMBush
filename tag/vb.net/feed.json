{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"vb.net\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/magic-strings-and-magic-numbers/",
            "url": "http://davembush.github.com/magic-strings-and-magic-numbers/",
            "title": "Magic Strings and Magic Numbers",
            "date_published": "2014-12-18T12:00:00.000Z",
            "content_html": "<p>This past week a very old (last time I did work for him was in 2007) client of mine contacted me because their program suddenly started exhibiting a problem.  It seems that if a user enters a date anytime in 2015, the program displays an error message indicating that they need to enter a date greater than today and less than two years from today.</p>\n<p>When I went to replicate the error in my debugger, I discovered this bit of code:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Year &lt; <span class=\"number\">100</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Year &lt; <span class=\"number\">15</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Year += <span class=\"number\">2000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Year += <span class=\"number\">1900</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>So that, if you enter any date as 15, it assumes the date is 1915 instead of 2015.</p>\n<p>Now, we are talking about code here that has been around since the DOS days, and I’m pretty sure this particular routine has been around since then too.  I’m sure when it was coded, the year 2015 seemed so distant, that no one considered that the program might actually still be running in some form.</p>\n<p>But, that’s just the problem with Magic Strings and Magic Numbers.  They can appear to work for years, even decades, and then one day they show themselves for the evil they are.</p>\n<p>So, how can you guard yourself against using Magic Strings or Magic Numbers? That’s just the issue.  You can’t.  Sometimes they are only obvious once they manifest themselves as a bug.  However, here are a set of common places you should look.</p>\n<h2 id=\"Are-you-working-with-dates\"><a href=\"#Are-you-working-with-dates\" class=\"headerlink\" title=\"Are you working with dates?\"></a>Are you working with dates?</h2><p>Yeah, I know, this one is obvious since that’s what we are talking about.  But here are some other places you might want to look.</p>\n<p>As I’ve considered how I might fix this bug, I’ve decided that what I’ll do is get the current year, find the two digit version and add three to it.  I’ll use that computed date as the century roll over.</p>\n<p>But code is immortal.  That’s not the only place in this code that needs fixing.  The other place is the 1900 and 2000.  Those should be computed as well.  Not that I plan on being around, in the year 2100 and following, but as long as this code has been around, I should plan on the code being around then.  And it won’t be that much more work to compute those centuries as  century of today and century of today minus 100.</p>\n<p>The only constant I can see using in the code above is the 100.  Even if it does change, I don’t think anyone will complain too loudly when it does.</p>\n<h2 id=\"Databases\"><a href=\"#Databases\" class=\"headerlink\" title=\"Databases\"></a>Databases</h2><p>Another obvious place to look is in your database code.</p>\n<p>Actually, if you aren’t careful, there are a lot of mistakes you can make here.  But for now, let’s just stick to magic string issues.</p>\n<h3 id=\"Connection-Strings\"><a href=\"#Connection-Strings\" class=\"headerlink\" title=\"Connection Strings\"></a>Connection Strings</h3><p>By now, this should be obvious.  Don’t include the connection string to your database in the code of your program.  At the very least, put it in your web.config or app.config file so it can be changed without recompiling your code.</p>\n<h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><p>If you’ve done any amount of programming, you should know by now that your SQL belongs in your SQL database as a stored procedure.  That’s the best place for it.  However, I’ve had occasions where getting the SQL changed by the SQL gods, otherwise known as the DBAs, is so painful, that including the SQL in your code is much more practical.</p>\n<p>Here’s a tip.  Keep your SQL code separate from your other code.  Put it in a resource file.  Put it in a text file.  Just don’t put it in your C# or VB.NET code.</p>\n<h3 id=\"POCOs\"><a href=\"#POCOs\" class=\"headerlink\" title=\"POCOs\"></a>POCOs</h3><p>Are you generating POCOs to accompany your SQL?  Assuming you can’t use Entity Framework and you have to generate your own POCOs, you should generate your POCOs from your SQL.  That way, if your SQL changes, your POCO code changes automatically.</p>\n<h3 id=\"Schemas-Change\"><a href=\"#Schemas-Change\" class=\"headerlink\" title=\"Schemas Change\"></a>Schemas Change</h3><p>And while we are talking about Schemas, I’ll remind you that Schemas change.  Do you have a strategy in place so that you can tell what version of the database schema you are using at any particular time?</p>\n<h2 id=\"The-File-System\"><a href=\"#The-File-System\" class=\"headerlink\" title=\"The File System\"></a>The File System</h2><p>File system issues have frustrated me on several occasions.  The most obvious one is the difference between Mac&#x2F;Linux and Windows.  Now that .NET is going to be available on Mac and Linux, this is something you’ll want to pay attention too.  But, you should also pay attention to assumptions like drive letters.  Will you always want your code saved in this location.</p>\n<p>We had an issue years ago with the same code base I referred to above when Vista came out and you could no longer save your data files with your program files.  It took several hours of refactoring to get that code into a location that the user had rights to.  That should be a lesson for you.  Once again, just because a hard coded value works today, doesn’t mean it will work tomorrow.</p>\n<h2 id=\"Dave’s-Law-of-N\"><a href=\"#Dave’s-Law-of-N\" class=\"headerlink\" title=\"Dave’s Law of N\"></a>Dave’s Law of N</h2><p>This next one is not one you’d naturally think of as a Magic Number, but it is.</p>\n<p>You go to the customer and get requirements that say there will be two of something.  Maybe the contact record will have two phone numbers.  Or maybe they say there will be three of something.  It doesn’t really matter.  The magic number here is in the number of items that you need to store.</p>\n<p>I’ve seen this violated in a number of ways.  But the interview question I now ask is something along the lines of, “You need to store a person class in the database with FirstName, LastName, BirthDate, HomePhone, and CellPhone.  Create a database schema to hold this information.</p>\n<p>If they don’t come back to me with at least two tables, one for the Person and one for Phone numbers, I won’t hire them.  They get bonus points if they also create a third table so that we can classify the phone numbers in the phone number table.</p>\n<p>And that’s where “Dave’s Law of N” comes in.</p>\n<blockquote>\n<p>If there is two of something there WILL be three of something. </p>\n</blockquote>\n<p>Code it today so that tomorrow we can add the third item without coding.  It won’t take you any longer to do it right today and it will save us time when they eventually realize they should have asked for more.</p>\n<p>Well, I’m sure that’s not all of the places you should look.  But that’s a start to get you thinking in the right direction.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                "magic numbers",
                "magic strings"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-nullable-types/",
            "url": "http://davembush.github.com/vb-net-nullable-types/",
            "title": "VB.NET Nullable Types",
            "date_published": "2014-01-16T02:46:57.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/tp_vol4_001.jpg\" alt=\"tp_vol4_001\" title=\"tp_vol4_001\"> SQL has long had the ability to specify that a value is NULL even if it is a primitive type, but the only way you could have a NULL value in VB.NET is if you were dealing with an object. That is, until .NET 2.0</p>\n<span id=\"more\"></span>\n\n<p>Even though .NET 2.0 has been out for a while, I would bet that few VB.NET programmers know about this new feature because it is one of those things most of us have grown to assume is not possible. Values must have content–objects don’t.  That’s just the way it is.  If we were to create an integer for example and then tried to assign a nothing to it, we would most certainly get a compiler error.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>However, the Nullable generic was added so that we can create a VB.NET Nullable Integer</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i <span class=\"keyword\">As</span> Nullable(<span class=\"keyword\">Of</span> <span class=\"type\">Integer</span>)</span><br><span class=\"line\">i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n\n<p>And by simply putting a question mark at the end of our variable name, we can shorten the syntax to</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> i? <span class=\"keyword\">As</span> <span class=\"type\">Integer</span> i = <span class=\"literal\">Nothing</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vb.net",
                "value types",
                "nothing",
                "nullable"
            ]
        },
        {
            "id": "http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/",
            "url": "http://davembush.github.com/test-sending-email-without-a-server-in-asp-net/",
            "title": "Test Sending Email without a Server in ASP.NET",
            "date_published": "2013-06-05T07:36:19.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/back041.jpg\" alt=\"back-041\" title=\"back-041\"> By now, most people are familiar with the fact that ASP.NET will send mail from the codebehind by simply adding a few lines to your web.config file and adding another few lines of code in the codebehind file.</p>\n<p>But it wasn’t until recently that I found that you don’t need to have access to an SMTP server to test your code.</p>\n<span id=\"more\"></span>\n\n<p>In fact, this little trick will allow you to read the email without clogging up your email client with email you only wanted for testing purposes.</p>\n<p>Instead of the normal entry of</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mailSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtp</span> <span class=\"attr\">from</span>=<span class=\"string\">&quot;you@domain.com&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">network</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;maiServerl&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;password&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">userName</span>=<span class=\"string\">&quot;loginName&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;25&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">smtp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mailSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You can use</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mailSettings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">smtp</span> <span class=\"attr\">from</span>=<span class=\"string\">&quot;you@domain.com&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">deliveryMethod</span>=<span class=\"string\">&quot;SpecifiedPickupDirectory&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">specifiedPickupDirectory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">pickupDirectoryLocation</span>=<span class=\"string\">&quot;c:\\\\mail&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">smtp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mailSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>This will drop your email message in the c:\\mail directory as an *.eml file which you can open with Outlook Express.</p>\n<p>The code you would write to send the mail is still the same:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmtpClient smtp = <span class=\"keyword\">new</span> SmtpClient();</span><br><span class=\"line\">MailAddress <span class=\"keyword\">from</span> = <span class=\"keyword\">new</span> MailAddress(fromEmail, fromEmail);</span><br><span class=\"line\">MailAddress to = <span class=\"keyword\">new</span> MailAddress(emailAddress, emailAddress);</span><br><span class=\"line\">MailMessage message = <span class=\"keyword\">new</span> MailMessage(<span class=\"keyword\">from</span>, to);</span><br><span class=\"line\">message.Subject = SubjectLine;</span><br><span class=\"line\">message.Body = htmlString;</span><br><span class=\"line\">message.From = <span class=\"keyword\">from</span>;</span><br><span class=\"line\">message.To.Add(to);</span><br><span class=\"line\">message.IsBodyHtml = <span class=\"literal\">true</span>;</span><br><span class=\"line\">smtp.Send(message);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "testing",
                "vb.net",
                "asp.net",
                "email",
                "mailaddress",
                "mailmessage",
                "smtpclient"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "url": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "title": "VB.NET Processing Before WinForm Display",
            "date_published": "2009-08-06T10:52:55.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/arct075.jpg\" alt=\"arct-075\" title=\"arct-075\"></p>\n<p>I woke up this morning to an interesting question.</p>\n<p><em>“Using VB.net 2008, I want my project to be a Windows Forms Application, but upon startup, I want to check a few files to see if they exist and if they don’t I do not want the startup form to load. I just want the program to quit. If you have to start this type of application with a form, how do you keep the form from displaying?”</em></p>\n<p>If you program in CSharp, you probably already know the answer to this question, or at least you should.  If you don’t, you will when we finish here.  So since I consider this a VB.NET-specific question, I’m going to answer it using VB.NET syntax.</p>\n<p>When CSharp runs a Windows Forms application, it writes out the following code in Program.cs (in VS 2008, earlier versions put this in the main form).</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Application.EnableVisualStyles();</span><br><span class=\"line\">    Application.</span><br><span class=\"line\">        SetCompatibleTextRenderingDefault(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    Application.Run(<span class=\"keyword\">new</span> Form1());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In VB.NET there is no code that looks like this, because VB.NET writes the code for us behind the scenes.</p>\n<p>So to do what you want to do, we need to take over control of the Windows Form application.</p>\n<p>Since I’m assuming that you already have the Windows Form application created, the next thing you’ll want to do is to create a module.  You can name it what ever you want, but I’m going to name mine “Main” for purposes of this article.</p>\n<p>In your module, create a function called “main” that has the code CSharp would have given us.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    Application.EnableVisualStyles()</span><br><span class=\"line\">    Application.SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">    Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>Now go to your project properties and go to the Application tab.</p>\n<p><img src=\"/uploads/2009/08/image.png\" alt=\"image\" title=\"image\"></p>\n<p>Find the check box that says, “Enable Application Framework” and un-check it.</p>\n<p><img src=\"/uploads/2009/08/image1.png\" alt=\"image\" title=\"image\"></p>\n<p>Then change the startup object to “Sub Main”</p>\n<p>At this point, your application should run as it always has.  To put the checks in that you requested, write that code prior to all the Application… statements that we put in sub main and put an if&#x2F;then&#x2F;end if statement around the Application… statements.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ChecksWereOk <span class=\"keyword\">As</span> <span class=\"type\">Boolean</span> = <span class=\"literal\">False</span> <span class=\"comment\">&#x27; your checks here If ChecksWereOk Then Application.EnableVisualStyles()</span></span><br><span class=\"line\">        Application. _</span><br><span class=\"line\">            SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">        Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>And that should do the trick for you.</p>\n",
            "tags": [
                "vb.net",
                "conditional startup",
                "windows forms",
                "winforms"
            ]
        },
        {
            "id": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "url": "http://davembush.github.com/manually-adding-event-handlers-in-vb-net/",
            "title": "Manually Adding Event Handlers in VB.NET",
            "date_published": "2009-07-15T10:43:09.000Z",
            "content_html": "<p><img src=\"/uploads/2009/07/office019.jpg\" alt=\"office-019\" title=\"office-019\"></p>\n<p>Typically when we write our code, the event handlers get wired up for us using the handles clause.  So we never have to worry about wiring up our event handlers manually.</p>\n<p>But what about the case where we want to dynamically add a control to our Windows Form or our ASP.NET page?  For example, add a button.  How would you respond to the button click event?</p>\n<p>In CSharp, there is no handles clause, so figuring out how to manually wire up the event handler is simply a matter of inspecting the dotNet code and doing a copy&#x2F;paste&#x2F;modify operation in the editor.</p>\n<p>The syntax for adding event handlers manually is not that difficult.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddHandler m_button.Click, AddressOf buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>If you’ve written any threading code, you’ll notice that this looks similar to the code you might have written for that.</p>\n<p>The AddHandler statement takes two parameters.  The first is the event we are going to handle–in this case, the click event from the object that m_button is pointing to.</p>\n<p>The second parameter is a pointer to a function that will handle the event.  What is unique about this is that it can be a method that is part of the current class, which is what the code above is referencing, or it can be a method in another object, or even a method that is shared in another class.</p>\n<p>To reference a method in another object</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeOtherObject.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>To reference a shared method</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">AddHandler</span> m_button.Click, _</span><br><span class=\"line\">    <span class=\"built_in\">AddressOf</span> SomeClass.buttonClickMethod</span><br></pre></td></tr></table></figure>\n\n<p>Which gives us quite a bit of flexibility when we dynamically wire up our events.</p>\n",
            "tags": [
                "vb.net",
                "events"
            ]
        },
        {
            "id": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "url": "http://davembush.github.com/net-string-pool-%E2%80%93-not-just-for-the-compiler/",
            "title": ".Net String Pool – Not Just For The Compiler",
            "date_published": "2009-04-22T08:34:00.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/b03b0055.jpg\" alt=\"B03B0055\" title=\"B03B0055\"> On Monday, I was corrected in my assertion that creating multiple empty strings would create multiple objects.  Turns out the compiler automatically puts all of the strings that are exactly the same in a “string pool” so that there is only ever one empty string in the entire application you’ve created.</p>\n<span id=\"more\"></span>\n\n<p>Duh! I should have known this, or at least I should have expected that this was so since it has been true with every other compiled language I’ve worked with.</p>\n<p>But what I didn’t know and couldn’t expect is that we can make use of this string pool programmatically as well.</p>\n<p><strong>Why would you want to do this yourself?</strong></p>\n<p>Keep in mind that string concatenation in .NET requires the creation of a new object.  So, code such as this,</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a += b;</span><br></pre></td></tr></table></figure>\n\n<p>creates a new object at line 3 every time it is executed.</p>\n<p>So that if we add the following line:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>we would not be pointing to the same object.  That is, a and b would contain the same content but would be pointing to two entirely different objects.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B contain the same data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (String.ReferenceEquals(a,b))</span><br><span class=\"line\">    Trace.Write(<span class=\"string\">&quot;A and B are the same object&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>String.Intern Consolidates The Data</strong></p>\n<p>By using String.Intern() we can get both evaluations to be true.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = <span class=\"string\">&quot;abcd&quot;</span>;</span><br><span class=\"line\">String b = <span class=\"string\">&quot;efgh&quot;</span>;</span><br><span class=\"line\">a = String.Intern(a + b);</span><br><span class=\"line\">b = <span class=\"string\">&quot;abcdefgh&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Now both evaluations above will be true because line 3 places the string “abcdefgh” in the pool and line 4 uses that same string from the pool to assign to b.  Where we might have created two objects, we are now only creating one and referring to it both times.</p>\n<p>You could also use String.IsInterned(string) to determine if a string has already been placed in the string pool and execute optional code based on that.</p>\n<p><strong>When Would You Use This?</strong></p>\n<p>I still stand by my statement that optimizations should be saved for last.  You would not do this if this was the only place where you were doing the concatenation.  But you might consider doing this if your concatenations were in a loop that was taking a significant amount of processing time.</p>\n<p>Other things you might also want to consider would be to consolidate concatenations on the same line and&#x2F;or using the StringBuilder class for concatenations.  Keep in mind that StringBuilder is only really useful once you get past three concatenations due to the overhead of creating the StringBuilder object vs. creating new objects during the normal concatenation process.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                ".net",
                "string",
                "intern"
            ]
        },
        {
            "id": "http://davembush.github.com/vb-net-char-from-string-with-option-strict/",
            "url": "http://davembush.github.com/vb-net-char-from-string-with-option-strict/",
            "title": "VB.NET - Char from String with Option Strict",
            "date_published": "2009-04-08T08:35:14.000Z",
            "content_html": "<p><img src=\"/uploads/2009/04/g04b0079.jpg\" alt=\"G04B0079\"> So here’s the question:</p>\n<blockquote>\n<p>I’m using String.Split() and need to pass in a Char or a Char array as the parameter.  If I pass in a string String.Split(“&#x2F;“) I get an error “Option Strict On disallows implicit conversions from ‘String’ to ‘Char’.”</p>\n<p>Obviously, the easiest way to fix this would be to turn off Option Strict, but I would prefer to keep it on.  So how do I pass in the Char instead of a String in this situation?”</p>\n</blockquote>\n<p>There are actually several ways to accomplish what you are trying to do.</p>\n<span id=\"more\"></span>\n\n<p>The first and most general solution would be to call the ToCharArray() method off the string.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = myString.Split(<span class=\"string\">&quot;/&quot;</span>.ToCharArray())</span><br></pre></td></tr></table></figure>\n\n<p>The advantage to this method is that it will work regardless of what size the string is and it will use each character in the string as a delimiter.</p>\n<p>But what if you only have one character in your array?  Surely there is a shorter, cleaner statement we can use.</p>\n<p>As a matter of fact, there are several other options.  You could use Convert.ToChar() or Char.Parse()</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = _</span><br><span class=\"line\">   myString.Split(Convert.ToChar(<span class=\"string\">&quot;/&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = _</span><br><span class=\"line\">   myString.Split(<span class=\"type\">Char</span>.Parse(<span class=\"string\">&quot;/&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>But the easiest way to convert a single character string to a Char is simply to put a “c” after the closing quote:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> strSplit() <span class=\"keyword\">As</span> <span class=\"type\">String</span> = myString.Split(<span class=\"string\">&quot;/&quot;</span>c)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vb.net",
                "string",
                "char",
                "split",
                "strict"
            ]
        },
        {
            "id": "http://davembush.github.com/advantages-of-using-class-diagram/",
            "url": "http://davembush.github.com/advantages-of-using-class-diagram/",
            "title": "Advantages of Using Class Diagram",
            "date_published": "2008-11-20T13:02:47.000Z",
            "content_html": "<p><img src=\"/uploads/2008/11/misc-vol4-063.jpg\" alt=\"misc_vol4_063\"> One of the new tools that showed up in Visual Studio 2005 that I don’t see many people taking much advantage of is the Class Diagram.</p>\n<span id=\"more\"></span>\n\n<p>The class diagram displays the classes you drag onto it in a visual representation much like a UML class diagram does.  It also lets you see relationships between your classes.  But the greatest advantage of the Class Diagram is that it will write a lot of your code for you.  The Class Diagram is available in both CSharp and VB.NET and works similarly in both.  My description of the tool will be using CSharp in Visual Studio 2008.  There may be a few quirky differences if you are using VB.NET and&#x2F;or Visual Studio 2005. I was reminded of this tool a couple of days ago when I needed to override a method but I couldn’t remember its name.  I could have spend a few minutes looking in the parent class for the name of the method I needed to override, but instead I created a new Class Diagram file and did a drag and drop of the class I was working on onto the Class Diagram’s surface.  This then let me right-click on the class and select “Intellisense” &gt; “Override members…” from the context menu.</p>\n<p>This will bring up a dialog that will list ALL of the classes the class inherits from (so it helps to know what class the method you want to override is in).  You can then check off the members you want to override from the list supplied.  When you press OK, the methods will be stubbed out for you in the source code.  All you need to do is provide the functionality. You can use this same type of process to add new methods, add properties, and add member variables.</p>\n<p>If you haven’t broken out the class diagram recently, I suggest you give it a try.</p>\n",
            "tags": [
                "c#",
                "class diagram",
                "vb.net",
                "visual studio"
            ]
        },
        {
            "id": "http://davembush.github.com/why-you-can-t-cast-an-integer-to-a-string/",
            "url": "http://davembush.github.com/why-you-can-t-cast-an-integer-to-a-string/",
            "title": "Why you can't cast an integer to a string.",
            "date_published": "2008-06-23T09:59:21.000Z",
            "content_html": "<p>I saw a question on Channel 9 that I’ve heard before. My guess is that there are enough people who have the same question that it’s worth addressing.</p>\n<blockquote>\n<p>I know there’s probably a really good reason for this, but I can’t think of what it is, and it keeps bugging me. Why can’t you do int x &#x3D; 10; string y &#x3D; (string)x; in C#? I mean, you could simply use x.ToString(), but why doesn’t the explicit cast do the same?</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Why-do-you-think-you-can-do-this-in-the-first-place\"><a href=\"#Why-do-you-think-you-can-do-this-in-the-first-place\" class=\"headerlink\" title=\"Why do you think you can do this in the first place?\"></a>Why do you think you can do this in the first place?</h2><p>The people who tend to ask this question are people coming out of a VB background. In VB, we have functions that will allow us to convert any type to any other type. CStr() is one of those functions. Give it an integer and it will convert it to a string. CInt() is another. Give it a value and it will convert it to an integer.</p>\n<p>So, when people from that background first learn about casting, the only thing they have to hook the concept to in their thinking, is the conversion functions that are available in VB. You can’t blame them, really.</p>\n<p>But a cast is not a conversion. A conversion operation actually returns a completely different value. To do a similar operation in CSharp, you’d actually use the functions in the Convert class.</p>\n<p>A cast, on the other hand, doesn’t change the variable. It just lets us access it as though it were another type. And you can only cast if the data you are pointing to is related, via inheritance, to the type you want to cast it to.</p>\n<h2 id=\"So-the-simple-answer-is-“because-an-int-is-not-a-string”\"><a href=\"#So-the-simple-answer-is-“because-an-int-is-not-a-string”\" class=\"headerlink\" title=\"So the simple answer is, “because an int is not a string”\"></a>So the simple answer is, “because an int is not a string”</h2><p>When dealing with an object-oriented language, particularly .NET languages, everything except for the Object type derives from some other object. So technically, a string IS AN object, an int IS AN object, in fact, everything IS AN object. If I have a class “Person” and a class named “Employee” that derives from “Person” and another class “Customer” that derives from “Person” I can say that an “Employee” is a “Person” and that a “Customer” is a “Person” but I can’t say that a “Customer” is an “Employee”.</p>\n<p>Neither can I say that a “Person” is a “Customer”, or that a “Person” is an “Employee”. It doesn’t make sense. So, if I have an object of type Employee, I can cast that object to a type Person. But I can’t cast it to a type of Customer because there is no “is a” relationship between the two.</p>\n<h2 id=\"So-how-does-this-relate-to-Strings-and-ints\"><a href=\"#So-how-does-this-relate-to-Strings-and-ints\" class=\"headerlink\" title=\"So, how does this relate to Strings and ints?\"></a>So, how does this relate to Strings and ints?</h2><p>Well, if you look at the inheritance tree for .NET, you will see that a String inherits directly from the Object class. You will also see that an int inherits from the ValueType class, which inherits from the Object class. Since neither type is derived from the other, you can’t cast them–you can only convert them.</p>\n<p>A little-known fact about VB.NET is that it also has a casting “function.” It looks like a function to the VB guys, but it is really an operator disguised as a function. directcast() takes an object as the first parameter and the type you want to cast it to as the second parameter. The operator does the same thing that the casting operator in CSharp does.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                ".net",
                "casting",
                "convert"
            ]
        },
        {
            "id": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "url": "http://davembush.github.com/the-vb-net-ternary-operator/",
            "title": "The VB.NET Ternary Operator",
            "date_published": "2007-11-29T13:20:09.000Z",
            "content_html": "<p>I think the VB.NET Ternary Operator may be the last operator that I really miss in VB.NET from my curly brace language experience.  Although, I have to admit, I wouldn’t have missed it all that much if they never added it.  There just isn’t a whole lot of use for it.</p>\n<span id=\"more\"></span>\n\n<p>However, the Ternary operator is a REALLY nice feature to have available to you when you do need it.  It’s another one of those language features that falls under, “Just because it is there doesn’t mean you have to use it.”</p>\n<p>If you’ve ever run into a situation where you just need a simple evaluation and assign a variable based on it.  Like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">If</span> Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">    s = <span class=\"type\">String</span>.Empty</span><br><span class=\"line\"><span class=\"keyword\">Else</span></span><br><span class=\"line\">    s = Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString()</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br></pre></td></tr></table></figure>\n\n<p>you’ll appreciate the new Ternary operator which shrinks it to:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = <span class=\"keyword\">If</span>(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Note that this NOT the same as</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> s <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">s = IIf(Session(<span class=\"string\">&quot;mySessionVar&quot;</span>) <span class=\"built_in\">Is</span> <span class=\"literal\">Nothing</span>, _</span><br><span class=\"line\">    <span class=\"type\">String</span>.Empty, Session(<span class=\"string\">&quot;mySessionVar&quot;</span>).ToString)</span><br></pre></td></tr></table></figure>\n\n<p>Here’s the difference between the two.</p>\n<p>IIf will always evaluate the second and third parameter regardless of if the first parameter evaluates to true or false.  This is because IIf is a function, not an operator.</p>\n<p>If is an operator, and therefore only evaluates the second OR third parameter when they are the value that will ultimately be returned.  So, If() will run my code above without any errors while IIf will throw a null pointer exception when Session(“mySessionVar”) evaluates to nothing because it will try to apply ToString() to the object that is null.</p>\n",
            "tags": [
                "vb.net",
                "visual studio",
                "tutorial"
            ]
        },
        {
            "id": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "url": "http://davembush.github.com/object-initialization-in-csharp-3-0-and-vb-net-9/",
            "title": "Object Initialization in CSharp 3.0 and VB.NET 9",
            "date_published": "2007-11-28T14:24:13.000Z",
            "content_html": "<p>Yesterday we looked at the new var keyword in CSharp.  This makes CSharp variable declaration similar to VB.  After all, they’ve had the DIM keyword for years which essentially does the same thing.</p>\n<p>Today, we’re going to look at object initializers, which have been added to both CSharp and VB.</p>\n<span id=\"more\"></span>\n\n<p>Let’s say we have a class named, “Customer” with the properties: FirstName, LastName, Address, City, and State.  If you wanted to initialize those properties as part of the object creation process you basically had two choices.  You could create a constructor with each of the properties represented as a parameter, or you could use the default constructor and then initialize each property individually immediately after you instantiate the object.  Using CSharp, that process would look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">c.FirstName = <span class=\"string\">&quot;Dave&quot;</span>;</span><br><span class=\"line\">c.LastName = <span class=\"string\">&quot;Bush&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>in VB you could write code similar to the CSharp code above, with obvious syntax changes for VB, or you could use the WITH keyword to simplify it.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer()</span><br><span class=\"line\"><span class=\"keyword\">With</span> c</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span></span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">With</span></span><br></pre></td></tr></table></figure>\n\n<p>The new versions of these languages make the initialization process a bit easier.  Now, your CSharp code can look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer c = <span class=\"keyword\">new</span> Customer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FirstName = <span class=\"string\">&quot;Dave&quot;</span>,</span><br><span class=\"line\">    LastName = <span class=\"string\">&quot;Bush&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>and your VB code can look like this:</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Dim</span> c <span class=\"keyword\">As</span> <span class=\"built_in\">New</span> Customer() <span class=\"keyword\">With</span> &#123; _</span><br><span class=\"line\">  .FirstName = <span class=\"string\">&quot;Dave&quot;</span>, _</span><br><span class=\"line\">  .LastName = <span class=\"string\">&quot;Bush&quot;</span> _</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Keep in mind that the code that I just wrote compiles into the code I wrote using the old syntax.  This means that we can use this syntax in Visual Studio 2008 even if we are writing code for .NET 2.0.  Secondly, this means that it would still be faster to use the constructor with parameters if it is available.</p>\n<p>My fear is that some of the new features in the compilers will allow lazy programmers to write crappy code.  The point of the object initialization syntax is not to help you avoid creating parameterized constructors.  The point is to make your coding life easier when, and only when, the proper parameterized constructors do not exist.</p>\n",
            "tags": [
                "c#",
                "vb.net",
                "visual studio",
                "tutorial",
                "object initializers",
                "video"
            ]
        }
    ]
}