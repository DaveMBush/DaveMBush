{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"json\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/jquery-json-and-asp-net/",
            "url": "http://davembush.github.com/jquery-json-and-asp-net/",
            "title": "jQuery, JSON, and ASP.NET",
            "date_published": "2013-09-04T14:42:49.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/g03a0003.jpg\" alt=\"G03A0003\"> A few months ago, I demonstrated <a href=\"/2008/08/04/aspnet-ajax-using-json-heres-how/\">how to use ASP.NET’s JSON capabilities</a>.  Lately, I’ve been demonstrating how to use jQuery.  Both use a considerable amount of JavaScript so if there is some way we could eliminate or reduce the amount of code we had to load, performance would naturally increase.</p>\n<p>Fortunately, there is.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-stays-the-same\"><a href=\"#What-stays-the-same\" class=\"headerlink\" title=\"What stays the same\"></a>What stays the same</h2><p>You are still going to create a JSON enabled web service just like you did in the earlier article by giving the web service class the attribute, “ScriptService.”  You remember, this is what enables the web service to return JSON.</p>\n<h2 id=\"What-is-different\"><a href=\"#What-is-different\" class=\"headerlink\" title=\"What is different\"></a>What is different</h2><p>You will not, however, be including this block in your ASPX file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:ScriptManager</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;ScriptManager1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:ServiceReference</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;~/WebService.asmx&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:ScriptManager</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>You might still need the ScriptManager if you are using MS-AJAX on your page, but if you don’t have any other MS-AJAX on your page, you can remove the entire block of code.</p>\n<p>In the jQuery for your page, your code will look something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;WebService.asmx/Add&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"string\">&quot;&#123;a:1,b:4&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">contentType</span>: <span class=\"string\">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(result.<span class=\"property\">d</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>You can get the full documentation for the $.ajax() global method here: <a href=\"//docs.jquery.com/Ajax/jQuery.ajax\" title=\"http://docs.jquery.com/Ajax/jQuery.ajax\">http://docs.jquery.com/Ajax/jQuery.ajax</a> A few things that need to be pointed out here:</p>\n<ol>\n<li><p>For this to work, type must be “POST.”</p>\n</li>\n<li><p>url: is the name of the asmx file followed by a slash followed by the name of the web service method you want to call.</p>\n</li>\n<li><p>data: is a JSON name&#x2F;value pair list of all the parameters in the form of {parametername: parameterValue[,…]} if there are no parameter just use “{}”.  Don’t use “” or your code will not work.</p>\n</li>\n<li><p>contentType and dataType tell jQuery we are working with JSON.</p>\n</li>\n<li><p>The function pointed to by success will be called when the request has finished successfully, it will pass in a variable of type json.  The d property holds the return value.</p>\n</li>\n<li><p>If the return value is a structure or class d will have properties hanging off of it specifying</p>\n</li>\n<li><p>type information of the structure or class</p>\n</li>\n<li><p>property for each property&#x2F;variable in the structure or class.</p>\n</li>\n</ol>\n<p>You could take most of that AJAX call and turn it into some sort of helper function, but even if you don’t the amount of code you will end up loading using this method is significantly less than what you would load using both together.</p>\n",
            "tags": [
                "asp.net",
                "json",
                "jQuery"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-json-and-viewstate/",
            "url": "http://davembush.github.com/asp-net-json-and-viewstate/",
            "title": "ASP.NET JSON  and ViewState",
            "date_published": "2012-09-25T09:44:20.000Z",
            "content_html": "<p><img src=\"/uploads/2009/01/image5.png\" alt=\"image\">I received the following question recently about my article “<a href=\"/2008/08/04/aspnet-ajax-using-json-heres-how/\">ASP.NET AJAX using JSON - Here’s how.</a>“</p>\n<blockquote>\n<p>If we update the value of a textbox or label via a JSON web service call - will the value of that textbox&#x2F;label be written to the viewstate or whatever so that the server side code can see the new values that came from the JSON request?</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>The short answer is, “no, it will not update viewstate.”  But I think it would be helpful to understand when this is important rather than just giving you a blanket answer.</p>\n<p>First, let’s take a look at exactly how view state is handled in ASP.NET.</p>\n<p><img src=\"/uploads/2009/01/image5.png\" alt=\"image\"></p>\n<h2 id=\"Normal-Processing-of-an-ASP-NET-page\"><a href=\"#Normal-Processing-of-an-ASP-NET-page\" class=\"headerlink\" title=\"Normal Processing of an ASP.NET page\"></a>Normal Processing of an ASP.NET page</h2><p> When the browser first requests the ASPX page, the page is instantiated.  Since this is the first time it is being requested, there is no viewstate, so the deserialize step is skipped and the form elements step is skipped, and our page creation code is run.</p>\n<p> The magic happens right before the page is rendered and sent back to the client.  At this point, the state of all the <code>runat=&quot;server&quot;</code> elements we have on the page are serialized (stored) into the viewstate object which typically is stored in the hidden field on the form.  There are providers, however, that allow you to store this same information on the server someplace.  Then the HTML for the page is rendered and sent back to the browser.</p>\n<p> The next request from the browser using the same page is a POST form request.  The first thing that happens after the page is instantiated and all  the <code>runat=&quot;server&quot;</code> objects are instantiated, is that the viewstate is deserialized (retrieved from the viewstate object) so that by the time we get to the parsing of the form elements, all of our objects are back to exactly the same state that they were when we first sent the page back to the browser.</p>\n<p> Once the elements have been restored, the form elements are parsed and the appropriate properties on our form elements are set (Textbox.Text for example) and any events where we might need the change event fired are determined based on the difference between the view state and the current state of the form element.</p>\n<p> In the case of JSON calls, either using ASP.NET or jQuery, all we are updating is the element.  The question really becomes, “Does it matter?”</p>\n<h2 id=\"Does-it-matter\"><a href=\"#Does-it-matter\" class=\"headerlink\" title=\"Does it matter?\"></a>Does it matter?</h2><p> By default, all elements on the page are serialized and deserialized into and out of viewstate.  But in the case of things like a Textbox, most of the time we don’t care.  The fact of the matter is that most of our applications would work perfectly fine with viewstate turned off.</p>\n<p> Let’s take a look at what happens with a text box.</p>\n<p> When the text box is initially rendered on the page, it may have the current content from the database.  The person at the browser may change the form element and then submit the page.  Assuming we don’t need to fire the changed event on the server, the page is instantiated, the text box object is created, the text box object is restored to its original state and then immediately set to the content that was in the text box when the page was submitted.</p>\n<p> By the time we get to our event handling code, we don’t care, nor do we know, what the content of the field was the last time the page was sent back to the browser.  The code would work just as well with the viewstate for that element turned off.  This is mostly true of all the elements on the screen and since not all elements use viewstate to determine what events get fired it is more a matter of experimenting by turning viewstate off and seeing if the code still works than any hard and fast rule that determines if we need viewstate turned on for the element.</p>\n<p> The case of a label is different.  Since it is not a form element, but is rendered as a div, it’s content will not be sent back to the server with the post.  The only way of avoiding having to compute the value of the label is either by storing it in viewstate, or by storing it in viewstate or someplace on the server.</p>\n<h2 id=\"So-why-is-viewstate-turned-on-for-everything-by-default\"><a href=\"#So-why-is-viewstate-turned-on-for-everything-by-default\" class=\"headerlink\" title=\"So why is viewstate turned on for everything by default?\"></a>So why is viewstate turned on for everything by default?</h2><p>  Microsoft has a tendency to make the default behavior idiot proof.  They know that no one will read the documentation on how viewstate works or when it should be used.  So they set it up so that it will work for everyone out of the box.</p>\n<p>  I’ve seen enough “wrong” code and heard enough complaints about how this new model works to know that had Microsoft set it up so that turning viewstate on was an option and not the default, most programmers would still be using ASP at this point and ASP.NET would have been a dismal failure… and for those of you who think it is, it would have been an even bigger disaster.</p>\n<p>  In the case of using JSON with your ASP.NET code, your best bet would be to turn viewstate off for the page and assume that it isn’t going to do anything for you.  The point of JSON is to make your page more lightweight.  Turning viewstate on adds extra baggage to your HTML that you probably won’t need anyhow.</p>\n",
            "tags": [
                "asp.net",
                "json",
                "viewstate"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "url": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "title": "ASP.NET AJAX using JSON - Here's how.",
            "date_published": "2008-08-04T11:05:58.000Z",
            "content_html": "<p><img src=\"/uploads/2008/08/image.png\" alt=\"image\"> Last week I wrote a post about <a href=\"/2008/07/30/using-json-in-aspnet/\">how simple JSON is</a>.</p>\n<p>In it I explained the main differences between using JSON and using the update panel. I really started out thinking I’d get to how to write JSON code, but I ran out of space. Well, today, we get to the HOW.</p>\n<span id=\"more\"></span>\n\n<p>All JSON really is, is the ability to have JavaScript code call a WebService for our data, and write it into the HTML on the client side.</p>\n<p>If you know anything about how to write a WebService, this should be rather trivial because your web service is going to look just like any other web service with the exception of an added attribute.  To make a WebService accessible to JSON, add the following Attribute to your WebService class:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ScriptService</span>]</span><br></pre></td></tr></table></figure>\n\n<p>You will probably also need to add</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Script.Services;</span><br></pre></td></tr></table></figure>\n\n<p>to the top of your page.</p>\n<p>Now, any WebMethod in your WebService can be called by your JavaScript on the client side. As with any AJAX code in ASP.NET, you’ll need to add a ScriptManager to your page.</p>\n<p>But, in addition, you’ll also need to add a Services section in your ScriptManager to tell the ASP.NET page to pull in the javascript that the WebService code will now produce for you.</p>\n<p>You should have this code at the top of the FORM section of your HTML.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:ScriptManager</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;ScriptManager1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:ServiceReference</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;~/WebService.asmx&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:ScriptManager</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Where, <code>~/WebService.asmx</code> refers to the web service you want to be able to access. Now in the javascript event handler where you want to be able to call the WebService, you just call the WebService similar to how you would call any other function. In fact, if you write this code in the ASPX page, you will even get intellisense. So, assuming we have a class named <code>WebService</code> with a function called “HelloWorld” that returns a string, our calling code will look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebService.HelloWorld(Success,Fail,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Note that our call takes three parameters, even though our function in the WebService does not take any parameters.</p>\n<p>The first parameter is a pointer to a JavaScript function to call if the call to the WebService succeeds.</p>\n<p>The second is a pointer to the JavaScript function to call if the WebService call fails, and the third parameter is a JavaScript context object to pass to the Success function.</p>\n<p>Since I don’t have any data I need to pass along, I just pass in NULL in the code above. If the WebService method takes parameters, the parameters are listed before the success, fail, and context parameters. If the WebService call fails, the JavaScript function that we specified for fail will be called. It needs to accept one parameter which will have the error message in it. You can use this to display an error message in an alert box. When the WebService returns successfully, the Success function will be called. This function takes two parameters. The first is the return value. The second is the context object we passed when we originally called the WebMethod. You can then use standard JavaScript to find an HTML element on the page to put the new content into:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Success</span>(<span class=\"params\">result,context</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;fillMeAtLoadTime&quot;</span>).<span class=\"property\">innerHTML</span> = result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And that’s really all there is to JSON. The rest is really just a matter of imagination and JavaScript.</p>\n",
            "tags": [
                "asp.net",
                "ajax",
                "json"
            ]
        }
    ]
}