{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"unit test\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/model-view-presenter-angular-and-testing/",
            "url": "http://davembush.github.com/model-view-presenter-angular-and-testing/",
            "title": "Model View Presenter, Angular, and Testing",
            "date_published": "2017-08-29T10:30:33.000Z",
            "content_html": "<p>While testing Components is possible, it is not easy and is often pointless.  Using the Model View Presenter pattern, or a variation of it, solves the problem. </p>\n<p>Here’s the deal. Long time readers of my blog know I’ve been a proponent of Unit Testing for a very long time. While I was learning React, I went through the exercise of trying to write test as I was learning.  Now, the great thing about Angular and React is that it is possible to test your components.  The problem with testing components is that you are either testing that your HTML ended up in the right spot, that Angular directives did what they should, or you are evaluating the DOM to verify that component logic worked.  In most cases, putting tests that do any of these at the component level is the wrong way to test. <figure><img src=\"/uploads/2017/08/2017-08-27.jpg\" title=\"Model View Presenter, Angular, and Testing\"><figcaption>Photo credit: <a href=\"//www.flickr.com/photos/tamworthboroughcouncil/15657023428/\">Tamworth Borough Council</a> via <a href=\"//visualhunt.com/re/e21893\">Visualhunt.com</a> &#x2F; <a href=\"//creativecommons.org/licenses/by/2.0/\"> CC BY</a></figcaption></figure></p>\n<span id=\"more\"></span> \n\n<h2 id=\"Evaluating-HTML\"><a href=\"#Evaluating-HTML\" class=\"headerlink\" title=\"Evaluating HTML\"></a>Evaluating HTML</h2><p>Ignoring for a second that setting up a component test is awkward, the question I want to address here is, “is that really an appropriate test?” </p>\n<p>If all your smart component does is pass data down to dumb component, all you really need to verify is that given a dumb component with an html fragment, and another one with another fragment, they will all end up sequentially after each other.  It is a pretty easy test to setup. </p>\n<p>But all you’ve ended up testing is that Angular does what it says it will. It won’t tell you what you can’t already see by running the code. </p>\n<p>Dumb components are even more obvious.  Let’s go for something obvious.  You have a ngFor that allows you to display a list of HTML.  You setup your component so that it has an array of three known items, you pass that into the component, do a change detection cycle, and verify that your HTML displays as expected. </p>\n<p>Great, you’ve verified that Angular works again.  You will have a hard time convincing me that you’ve really tested anything.</p>\n<h2 id=\"Angular-Directives\"><a href=\"#Angular-Directives\" class=\"headerlink\" title=\"Angular Directives\"></a>Angular Directives</h2><p>In this case, you are going to try to verify that when you click on a component, or pass it some data, or… whatever, that Angular does what it should.  Maybe you do need to verify that when you click an element, something else happens.  But this is not the place. </p>\n<p>You might create an integration test, which would, by definition, take longer to run.  It would be better if you tested this using an end to end test.  But testing this as a unit test, doesn’t tell you much more than that Angular has said that it would. </p>\n<p>“But, I need to verify that the code in my event handler does what it should!”  You might complain.  Yes, you do, but you don’t need to fire a click event to do that, just call the event handler.</p>\n<h2 id=\"Big-Fat-Hairy-Logic\"><a href=\"#Big-Fat-Hairy-Logic\" class=\"headerlink\" title=\"Big Fat Hairy Logic\"></a>Big Fat Hairy Logic</h2><p>And then there is that “big fat hairy logic” issue.  You’ve created some sort of component that has some rather complex logic.  OK, that happens.  A grid control is a perfect example.  But, maybe your logic is in the wrong place?</p>\n<h2 id=\"A-Better-Solution\"><a href=\"#A-Better-Solution\" class=\"headerlink\" title=\"A Better Solution\"></a>A Better Solution</h2><p>There is a design pattern called “Model View Presenter” Like all of the MV* patterns it aims to separate out logic from the view so that we can test things easier.  It was popular with WebForms in ASP.NET when that was how you wrote ASP.NET web sites.  The way this worked was that you would create an Interface for your WebForm that represented all of the things you wanted to have access to from your logic code.  Your presenter.  All your component or page code did was respond to events on the page and expose data to the data driven forms.  In a lot of ways, Angular isn’t much different from WebForms.  Your TypeScript file is essentially a “code-behind” file and your template is similar to an ASPX page. </p>\n<p>The beauty of the MVP pattern is that when you do it right, your component has no logic at all.  It renders data and responds to events by calling down to the presenter.  In an Angular world, I doubt the Presenter would ever need to call up to the view.  This is prefect.  Now I can create a test for my component logic in a way very similar to how I would test any other Injectable.  Because Injectables are what we are going to use here.</p>\n<h3 id=\"Injectable-Presenters\"><a href=\"#Injectable-Presenters\" class=\"headerlink\" title=\"Injectable Presenters\"></a>Injectable Presenters</h3><p>For the point of illustration, let’s assume that all components would follow this pattern.  Now a simple component would have four files instead of the normal three.</p>\n<ul>\n<li>*.component.ts</li>\n<li>*.component.html</li>\n<li>*.component.css</li>\n<li>*.component.presenter.ts</li>\n</ul>\n<p>The <code>*.component.presenter.ts</code> file is our new Injectable.  Any properties in our component would pass on down to the presenter.  Any methods, which should be few to none, would pass on down to the presenter.  The presenter is where we do all the work.</p>\n<h3 id=\"Make-the-Presenter-Available-to-the-Component\"><a href=\"#Make-the-Presenter-Available-to-the-Component\" class=\"headerlink\" title=\"Make the Presenter Available to the Component\"></a>Make the Presenter Available to the Component</h3><p>Now, if you’ve studied the Angular tutorials, you probably already know this, but my bet is most people programming the new Angular don’t.  You can make an Injectable available by providing it in a module, or by providing it in a component.  If you provide it in the module, it is globally available.  If you provide it in the component, it is only available to that component or its child components.  This is perfect for our use case here.  So, we provide it in our component and then inject it into our component’s constructor. </p>\n<p>Everything else we might have injected into our component can now be injected into our presenter.</p>\n<h2 id=\"Look-Ma-No-DOM\"><a href=\"#Look-Ma-No-DOM\" class=\"headerlink\" title=\"Look Ma, No DOM\"></a>Look Ma, No DOM</h2><p>The side effect of this pattern is now, the complexity of the methods in our component should be 1.  This means they don’t really need to be tested.  And because they don’t need to be tested, we don’t really need a DOM available to run our tests.  This makes it MUCH easier to use jsDOM to run our unit test without having to wire in a bunch of polyfills just to make it all “work.”</p>\n",
            "tags": [
                "unit test",
                "angular",
                "mvp"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-testing-angular-2-with-jsdom/",
            "url": "http://davembush.github.com/unit-testing-angular-2-with-jsdom/",
            "title": "Unit Testing Angular(2+) with JSDOM",
            "date_published": "2017-04-04T10:30:00.000Z",
            "content_html": "<p>Unit Testing Angular(2+) with JSDOM can be problematic unless you know the secret handshake that allows ZoneJS and JSDOM to coexist.</p>\n<p>The great thing about Angular is that you can write Unit Tests from the presentation layer all the way down to calls to the server.  But up until now, you either ran those tests in a browser, which doesn’t work well in a CI system, or you used PhantomJS, which tends to be REALLY slow!  But there is a better way, and hopefully, by the time this post goes live, the patches needed to use JSDOM will be available.  If not, I’ll show you the hack that I’ve found works and the pull request I’m hoping will go live.</p>\n<figure>![](/uploads/2017/04/image.png \"Unit Testing Angular(2+) with JSDOM\")<figcaption>Photo credit: [Juanedc](//www.flickr.com/photos/juanedc/14896919066/) via [Visual Hunt](//visualhunt.com/re/cf947c) / [ CC BY](//creativecommons.org/licenses/by/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Why-JSDOM\"><a href=\"#Why-JSDOM\" class=\"headerlink\" title=\"Why JSDOM?\"></a>Why JSDOM?</h2><p>As I mentioned in the introduction, there are two problems that JSDOM fixes.</p>\n<p>To run the Angular unit tests, you need to run them in a browser. The problem with this is that you would need to have a browser installed on your CI server to run them, if you run them at all. It can be done, but if you are working in an environment like the one I work in, it isn’t going to be easy.</p>\n<p>The second choice is to use PhantomJS. Unfortunately, PhantomJS, while easy to install, runs slowly. For all but the most trivial of applications, this isn’t going to work well.</p>\n<p>JSDOM, on the other hand, runs fast like a browser, and doesn’t have the problems that running it on a CI system has. This is because it is a headless browser that never renders. All it does is produce HTML. For unit tests, this is all we really care about. And because it is running inside of Node, it is running as fast as the V8 engine will let it. Making it theoretically faster than running the tests in Chrome. I say, “theoretically faster” because I have not tested this and the V8 engines in the most recent browser tends to be a bit ahead of the V8 engine used in the most recent version of Node.</p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Knowing this was possible caused me to give it a try. What I found was that I routinely crashed with the following error.</p>\n<p><code>Cannot set property onreadystatechange of [object Object] which has only a getter</code></p>\n<p>As I googled this, I found several fixes for JSDOM that would allow this to work, but I also discovered that JSDOM did not consider this an issue they needed to fix. And rightly so, why should they adapt just so it would work for Angular2? But, what in the Angular2 code would cause this problem. By doing a search for <code>onreadystatechange</code> in my node_modules directory, I discovered that ZoneJS was:</p>\n<ol>\n<li>Saving off the original definition of <code>onreadystatechange</code></li>\n<li>Overriding the definition with a getter (only)</li>\n<li>Setting the definition back to the original</li>\n</ol>\n<p>Which all works well if the original <code>onreadystatechange</code> has a definition.  But in the case of JSDOM, it doesn’t. Then, when they set the definition back, nothing happens and we keep the definition they created.</p>\n<h2 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution 1\"></a>Solution 1</h2><p>The file in question is <code>property-descriptor.ts</code> under the <code>lib/browser</code> directory (the js version is in the file <code>zone.js</code> under the <code>dist</code> directory). Sticking with the TS file… of version 0.8.5, scroll down to line 64 and you’ll see that they retrieve the current definition but never verify that they actually got something back. But at line 80 they set it back to an empty object if it doesn’t exist.</p>\n<p>The easy fix that seems to work for me, is to just change the new definition so that it works if that is the one that is left over after this function completes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span> = f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Because we’ve changed the getter from returning a hardcoded value, we also need to set <code>onreadystatechange</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">req.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = !!req.<span class=\"property\">onreadystatechange</span>;</span><br></pre></td></tr></table></figure>\n\n<p>The full fix looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">canPatchViaPropertyDescriptor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((isBrowser || isMix) &amp;&amp; !<span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">HTMLElement</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onclick&#x27;</span>) &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> <span class=\"title class_\">Element</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// WebKit https://bugs.webkit.org/show_bug.cgi?id=134364</span></span><br><span class=\"line\">    <span class=\"comment\">// IDL interface attributes are not configurable</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> desc = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Element</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onclick&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (desc &amp;&amp; !desc.<span class=\"property\">configurable</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> xhrDesc = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// add enumerable and configurable here because in opera</span></span><br><span class=\"line\">  <span class=\"comment\">// by default XMLHttpRequest.prototype.onreadystatechange is undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// without adding enumerable and configurable will cause onreadystatechange</span></span><br><span class=\"line\">  <span class=\"comment\">// non-configurable</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span>(<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">orsc</span> = f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> req = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  req.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = !!req.<span class=\"property\">onreadystatechange</span>;</span><br><span class=\"line\">  <span class=\"comment\">// restore original desc</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;onreadystatechange&#x27;</span>, xhrDesc || &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution 2\"></a>Solution 2</h2><p>The <a href=\"//github.com/angular/zone.js/pull/711/commits/edc9d7a2145f9ddc4acbe6a49d1325d676c65429\">current pull request</a> adds a bit more code that I’m assuming is needed. I haven’t tested this, but I’m assuming it is a safer alternative than my hack.</p>\n<h2 id=\"One-Additional-Gotcha\"><a href=\"#One-Additional-Gotcha\" class=\"headerlink\" title=\"One Additional Gotcha!\"></a>One Additional Gotcha!</h2><p>Once I had this basic issue solved, I was able to run my suite of test except one. It turns out <code>element.innerText</code> doesn’t exist in JSDOM. There is a technical reason for this that I won’t discuss here other than to say it is, evidently, somehow dependent on the rendering engine, and since JSDOM has no rendering engine (remember, it just produces HTML) it can’t really implement <code>innerText</code>. So, I had to refactor my test to use <code>innerHTML</code> instead. Trivial issue. Just something you need to be aware of.</p>\n<h2 id=\"Setting-Up-Karma\"><a href=\"#Setting-Up-Karma\" class=\"headerlink\" title=\"Setting Up Karma\"></a>Setting Up Karma</h2><p>Now, from here to the end, we are going to assume that this got fixed, or you are using one of the solutions above. Now, how do we set karma up to use JSDOM instead of Chrome or PhantomJS?</p>\n<p>Well, for starters, you’ll need to <code>npm install --save-dev jsdom karma-jsdom-launcher</code>.</p>\n<p>Then, you’ll need to make a few changes to your <code>karma.conf.js</code> file.</p>\n<p>First, in the plugins array, add <code>require(&#39;karma-jsdom-launcher&#39;)</code>.</p>\n<p>Then, at the bottom of the file, change the browsers line to specify <code>&#39;jsdom&#39;</code> instead of <code>&#39;Chrome&#39;</code>.</p>\n<p>I normally just comment out the Chrome line and put in a line for jsdom so I can use Chrome to debug when I need to.</p>\n<p>I’ve always said that Angular mixes the best of AngularJS and React and with this fix, we now have some React Unit Testing goodness added into the mix.</p>\n",
            "tags": [
                "unit test",
                "jsdom",
                "karma"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "url": "http://davembush.github.com/unit-testing-an-angular-2-cli-project/",
            "title": "Unit Testing an Angular 2 CLI Project",
            "date_published": "2016-11-23T00:30:00.000Z",
            "content_html": "<p>This week we want to continue our series about Angular 2 by looking at the Unit Testing capabilities that Angular 2 provides for us. What we want to cover today is:</p>\n<ul>\n<li>Tweaking Karma to avoid using the Browser Window</li>\n<li>Code Coverage</li>\n<li>Tips to testing components</li>\n</ul>\n<p>This article was written using Angular CLI version 1.0.0-beta.20-4 (Tip, if you are upgrading on windows, <code>rm –rf node_modules dist temp</code> just means to delete the three directories. You can do that part manually, or install bash for Windows and run the command in bash.)</p>\n<figure>![](/uploads/2016/11/image-3.png \"Unit Testing an Angular 2 CLI Project\")<figcaption>Photo credit: [jimmiehomeschoolmom](//www.flickr.com/photos/jimmiehomeschoolmom/4427775569/) via [VisualHunt.com](//visualhunt.com) / [CC BY-NC-SA](//creativecommons.org/licenses/by-nc-sa/2.0/)</figcaption></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Tweaking-Karma\"><a href=\"#Tweaking-Karma\" class=\"headerlink\" title=\"Tweaking Karma\"></a>Tweaking Karma</h2><p>Open up the project we’ve been working on.</p>\n<ul>\n<li><a href=\"/getting-started-angular-2/\">Getting Started With Angular 2</a></li>\n<li><a href=\"https://medium.com/@davembush/adding-css-and-javascript-to-an-angular-cli-project-2b843a8283f3\">Adding CSS and JavaScript to an Angular CLI Project</a></li>\n</ul>\n<p>Drop into command line mode and run <code>ng test</code> The first thing you will notice is that this brings up the Chrome browser to run your test. I don’t know about you, but I really dislike having a browser window up. I have enough windows running on my screen as it is. This is the first thing we need to fix. To do this we are going to install PhantomJS.</p>\n<p><code>npm install --save-dev phantomjs-prebuilt</code></p>\n<p>Then, we need to tell karma to use PhantomJS. This is a two step process. First, we install the karma phantomjs runner <code>npm install --save-dev karma-phantomjs-launcher</code> Next, we modify the karma.conf.js file Change <code>require(&#39;karma-chrome-launcher&#39;),</code> and <code>browsers: [&#39;Chrome&#39;],</code> To <code>require(&#39;karma-phantomjs-launcher&#39;),</code> and <code>browsers: [&#39;PhantomJS&#39;],</code> Last, since we are not using the browser, we will need a better reporting mechanism.</p>\n<p>To do this we will install spec reporter.</p>\n<p><code>npm install --save-dev karma-spec-reporter</code></p>\n<p>and we replace this line in karma.conf.js</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;progress&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reporters<span class=\"punctuation\">:</span> config.angularCli &amp;&amp; config.angularCli.codeCoverage</span><br><span class=\"line\">          ? <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">,</span> &#x27;karma-remap-istanbul&#x27;<span class=\"punctuation\">]</span></span><br><span class=\"line\">          <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>&#x27;spec&#x27;<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>And we add a require line at the top of the file with the other requires</p>\n<p><code>require(&#39;karma-spec-reporter&#39;),</code></p>\n<p>Now, when we run <code>ng test</code> We get a nice text report in our terminal windows instead of the browser popping up.</p>\n<h2 id=\"Code-Coverage\"><a href=\"#Code-Coverage\" class=\"headerlink\" title=\"Code Coverage\"></a>Code Coverage</h2><p>To get a code coverage report for our test use the command ng test –cc The code coverage files will end up in a directory named ‘coverage’ hanging off the root of your project. You can view the coverage&#x2F;index.html file to see how well your files are covered.</p>\n<h2 id=\"Testing-Components\"><a href=\"#Testing-Components\" class=\"headerlink\" title=\"Testing Components\"></a>Testing Components</h2><p>For the purposes of this article, I’m going to assume you have some familiarity with creating Jasmine tests. If you don’t the documentation for Jasmine is pretty easy to understand.</p>\n<p>But what I do want to cover here is how we test components.</p>\n<p>If you open up the <code>app.component.spec.ts</code> file, you’ll notice a <code>TestBed</code> class that gets used quite a bit. Since your test isn’t going to test modules because they only package our other code together, you need some way of faking that out so you can test the components. To do that, you use</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">configureTestingModule</span>( &#123; <span class=\"attr\">declarations</span>: [ <span class=\"title class_\">AppComponent</span> ] &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Which just sets up the declarations you need to reference the component you need to test. You can put anything in this block that you would normally put in your module definition.</p>\n<p>Another <code>TestBed</code> method you’ll see is</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TestBed</span>.<span class=\"title function_\">createComponent</span>()</span><br></pre></td></tr></table></figure>\n\n<p>which you probably have guessed, creates an instance of the module so you can test it. The object it creates has a <code>debugElement</code> property hanging off of it. There are two properties that hang off this object that you’ll make use of a lot. <code>componentInstance</code> is the actual instance of the component that you created. Any properties and methods that your component has will be available off of <code>componentInstance</code>.</p>\n<p>The other object that will be available is <code>nativeElement</code>. This is the DOM element that the component renders to and you can use <code>querySelector(cssSelectorGoesHere)</code> to select the first element matches the selector or <code>querySelectorAll(cssSelectorGoesHere)</code> to retrieve an array of elements that match.</p>\n<p>Of course, a test isn’t any good if you don’t make changes to the component and test for them. And for that we have <code>detectChanges()</code>. You’ll see that being used in the third test. You’ll want to use that before you <code>expect()</code> anything.</p>\n<h2 id=\"Ready-Set-…\"><a href=\"#Ready-Set-…\" class=\"headerlink\" title=\"Ready, Set, …\"></a>Ready, Set, …</h2><p>Now that we have some way of testing our code, we can actually begin to write so. Don’t forget to subscribe to the email I sent out so you don’t miss the next article in this series.</p>\n<p>Code so far is located at <a href=\"//github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2\">https://github.com/DaveMBush/GettingStartedWithAngular2/tree/Step2</a></p>\n",
            "tags": [
                "unit test",
                "angular",
                "javascript",
                "typescript"
            ]
        },
        {
            "id": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "url": "http://davembush.github.com/exposing-secret-javascript-privates-to-unit-tests/",
            "title": "Exposing Secret JavaScript privates to Unit Tests",
            "date_published": "2016-06-23T10:30:00.000Z",
            "content_html": "<p>The question comes up all the time, “How do I access JavaScript privates from my Unit Tests?”  And invariably, the purist chimes in with the answer, “you don’t”.</p>\n<p>But, isn’t the point of unit testing to allow us to test UNITs?  Why artificially limit our ability to test units if we don’t need to?  If we had the ability to create protected members, wouldn’t we tests those separately? So, what follows is how I surface my private JavaScript members so I can access them during tests without having to make them public during the run of my protection code.</p>\n<p><img src=\"/uploads/2016/06/image-2.png\" alt=\"Exposing Secret JavaScript privates to Unit Tests\" title=\"Exposing Secret JavaScript privates to Unit Tests\"></p>\n<h2 id=\"Lean-on-JavaScript\"><a href=\"#Lean-on-JavaScript\" class=\"headerlink\" title=\"Lean on JavaScript\"></a>Lean on JavaScript</h2><p>My JavaScript unit testing framework of choice is Jasmine.  Not so much because it does all I would like it to do or because there isn’t something ‘better’ available but because it has become the defacto standard for unit testing JavaScript and nothing else I’ve seen is significantly better.  There is one part of this technique that is going to lean on the fact that I am using Jasmine, but I’m sure you can adapt it to your testing framework.</p>\n<p>But first, let’s review how you would create private JavaScript members in the first place.</p>\n<h2 id=\"Creating-Private-Members\"><a href=\"#Creating-Private-Members\" class=\"headerlink\" title=\"Creating Private Members\"></a>Creating Private Members</h2><p>In standard ES5 code, a simple object might be defined using syntax that looks something like this.  Recognize there are multiple ways to create objects and things that look like classes in JavaScript.  What follows is just enough code to get the point across.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note that our privateMember is used by publicMember but is not accessible from the outside.  I’m also using apply(this) to pass the context to the privateMember function.  This may not be necessary if you aren’t using this in the privateMember function and you could use privateMember.bind(this) to make this automatic.  That’s one of the interesting things about JavaScript.  There are always multiple ways to achieve the same goal.  None of them particularly better than the other but some more standard than the other.</p>\n<p>Notice that the only thing that actually makes our publicMember public is that I’ve attached the function pointer to this.</p>\n<h2 id=\"Exposing-Private-for-Jasmine\"><a href=\"#Exposing-Private-for-Jasmine\" class=\"headerlink\" title=\"Exposing Private for Jasmine\"></a>Exposing Private for Jasmine</h2><p>The easiest way I know of to expose the private member variables for Jasmine is to conditionally assign the private members to this if jasmine is defined.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As long as you don’t use the jasmine global variable for something other than jasmine, this should work.</p>\n<p>And now you can test your private functions.</p>\n<h2 id=\"What-about-Spys\"><a href=\"#What-about-Spys\" class=\"headerlink\" title=\"What about Spys?\"></a>What about Spys?</h2><p>If you are testing your private functions on their own, you’ll probably have a need to place spys on them when you test the other functions in your application that call them.  This is where things get just a bit interesting.</p>\n<p>If we leave things as they are, and you place a spy on the function that we exposed, your spy will never get called.  The reason for this is because of the way pointers work.</p>\n<p>In our example above, our publicMember() function is going to call our privateMember() function regardless of how we manipulate the this.privateMember pointer.  This is because, while the variables are pointing to the same function, they are still two different variables and, because of the way spys work internally, you’ll end up changing the this.privateMember variable without impacting the call to privateMember().</p>\n<p>We need to write a little extra code in our if(jasmine) block to make sure that after we’ve exposed privateMember(), the now public version of privateMember() gets call by publicMember() instead of the private version of privateMember().</p>\n<p>To do this we are going to need to play “towers of hanoi” with our variables.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">privateMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">publicMember</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        privateMember.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldPrivateMember;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">publicMember</span> = publicMember;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jasmine)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oldPrivateMember)&#123;</span><br><span class=\"line\">            privateMember = oldPrivateMember;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            oldPrivateMember = privateMember;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">privateMember</span> = privateMember;</span><br><span class=\"line\">        privateMember = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">privateMember</span>();</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The gist of what this new code does is that it captures the pointer to the privateMember() into oldPrivateMember.  Once we have that, we can make this.privateMember point to the original privateMember and then make our original privateMember point to a new method that calls this.privateMember, which is what our spy will call if we’ve set one up.</p>\n<p>The if(oldPrivateMember) stuff is just protection code to make sure we don’t do this more times than we need and end up calling this.privateMember up the call stack multiple times until we finally get to the privateMember function we ultimately want to call.  Depending on how you implement classes, you may or may not need this code.</p>\n",
            "tags": [
                "unit test",
                "javascript",
                "test driven development"
            ]
        },
        {
            "id": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "url": "http://davembush.github.com/es2015-code-coverage-and-jest-react-js-unit-testing/",
            "title": "ES2015 Code Coverage and Jest (React JS Unit Testing)",
            "date_published": "2016-05-05T11:30:00.000Z",
            "content_html": "<p>As I’ve <a href=\"/react-js-and-associated-bits/\">mentioned before</a>, I’m in the middle of putting together a React reference app and I’m doing it using <a href=\"/test-driven-learning-an-experiment/\">Test Driven Development</a>.  The problem is, the standard tools for implementing ES2015 code coverage with Jest make it hard to see at a glance if you have 100% code coverage or not because of some issues with the way Jest tells Babel to do the transformations by default, the way Babel transforms the code and implements the auxiliaryCommentBefore option and the way that Istanbul parses the ignore next comments.</p>\n<p>I’ve been working on solving this problem for the last month and a half off and on.  I’ve even posted a question about this on <a href=\"//stackoverflow.com/questions/35986316/reactjs-0-9-code-coverage-with-es2015-class-keyword\">Stack Overflow</a>, so I’m pretty sure no one else has a solution for this yet.  I’m not going to say my solution is the best way to solve this problem, but it is a solution, which is better than what we have so far.</p>\n<p><img src=\"/uploads/2016/04/image-5.png\" alt=\"ES2015 Code Coverage and Jest\" title=\"ES2015 Code Coverage and Jest\"></p>\n<h2 id=\"Diagnostics\"><a href=\"#Diagnostics\" class=\"headerlink\" title=\"Diagnostics\"></a>Diagnostics</h2><p>By default, when Babel transforms your code, it inserts additional functions into the code that it can call to replace the code you wrote that does not yet conform to the syntax you’ve used.  This code gets inserted at the top of the file and shows up in your code coverage reports as several conditions that didn’t get fired.  Yes, it inserts code it never uses because the functions have to work under a variety of scenarios.</p>\n<p>For those who are interested in how I figured this out.  The transform results are located in node_modules&#x2F;jest-cli&#x2F;.haste_cache.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-One\"><a href=\"#ES2015-Code-Coverage-Fix-One\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix One\"></a>ES2015 Code Coverage Fix One</h2><p>OK, so the standard recommended fix for something like this is to place</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br></pre></td></tr></table></figure>\n\n<p>Prior to those functions.  And it just so happens that both Jest and Babel provide a mechanism for adding this comment by using the auxiliaryCommentBefore option.</p>\n<p>Only there are two problems with this.</p>\n<h3 id=\"Problem-One\"><a href=\"#Problem-One\" class=\"headerlink\" title=\"Problem One\"></a>Problem One</h3><p>If you just set the property like this:</p>\n<p>auxiliaryCommentBefore: ‘istanbul ignore next’</p>\n<p>Your code will get transformed so that any functions added by Babel will end up looking like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*istanbul ignore next*/</span><span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>But in order for Istanbul to pickup this comment, the code needs to look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span> <span class=\"keyword\">function</span> <span class=\"title function_\">babelFunctionHere</span>(<span class=\"params\"></span>)...</span><br></pre></td></tr></table></figure>\n\n<p>While getting the spaces on either side of ‘istanbul ignore next’ is a simple matter, we have no real control over the space that is necessary between the comment marker and the function keyword.</p>\n<h3 id=\"Problem-Two\"><a href=\"#Problem-Two\" class=\"headerlink\" title=\"Problem Two\"></a>Problem Two</h3><p>The second problem with this “fix” is that even if modify the Babel code so that the comment gets inserted correctly, it doesn’t get inserted before EVERY function that Babel inserts.  If it inserts a group of functions, which it does regularly in my code, it only inserts the comment before the first function.</p>\n<h2 id=\"ES2015-Code-Coverage-Fix-Two\"><a href=\"#ES2015-Code-Coverage-Fix-Two\" class=\"headerlink\" title=\"ES2015 Code Coverage Fix Two\"></a>ES2015 Code Coverage Fix Two</h2><p>What if we didn’t insert the functions in our code?  Well, it just so happens that we can do that relatively easily.</p>\n<p>There is a plug-in for Babel called ‘<a href=\"//www.npmjs.com/package/babel-plugin-transform-runtime\">transform-runtime</a>’.  What this plug-in does is that it requires in the functions rather that pasting them into your code.  This way, the functions don’t exist in your code so Istanbul never sees the function block.  Pretty cool.</p>\n<p>You can add this to either your .babelrc file or the Babel section of your package.json file by adding a “plugins” section</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;transform-runtime&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>along with the “presets” section you should already have.</p>\n<h2 id=\"Remaining-Issue\"><a href=\"#Remaining-Issue\" class=\"headerlink\" title=\"Remaining Issue\"></a>Remaining Issue</h2><p>While using transform-runtime takes care of most of the issues, there are two functions that still don’t get covered.  In fact, when you look at the transform-runtime code, you find that they are explicitly excluded and if you include them, your code won’t transpile at all.</p>\n<p>The good news is, it is only two functions and they both show up as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> _interop...</span><br></pre></td></tr></table></figure>\n\n<p>If we can get a hold of the code as it is being transformed, we should be able to do a search and replace to get the correct ‘istanbul ignore next’ string in place prior to the functions.</p>\n<p>Well, it just so happens that Jest has the ability to do exactly that.</p>\n<h2 id=\"ES2015-Code-Coverage-Final-Fix\"><a href=\"#ES2015-Code-Coverage-Final-Fix\" class=\"headerlink\" title=\"ES2015 Code Coverage Final Fix\"></a>ES2015 Code Coverage Final Fix</h2><p>I’m assuming you’ve already installed <a href=\"//www.npmjs.com/package/babel-jest\">babel-jest</a>, but just in case, if you have not, install it now.  Install it using –save-dev because we are going to want to be able to modify the code.</p>\n<h3 id=\"Quick-fix\"><a href=\"#Quick-fix\" class=\"headerlink\" title=\"Quick fix:\"></a>Quick fix:</h3><p>The proper way to fix this would be to write your own version of babel-jest.  But we are going for a quick fix.  Maybe we can get Facebook to implement the changes from this post.  Meanwhile, here is what you want to do.</p>\n<p>Locate the src&#x2F;index.js file in the node_modules&#x2F;babel-jest directory.  At the time of this writing, the current version looks like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This source code is licensed under the BSD-style license found in the</span></span><br><span class=\"line\"><span class=\"comment\"> * LICENSE file in the root directory of this source tree. An additional grant</span></span><br><span class=\"line\"><span class=\"comment\"> * of patent rights can be found in the PATENTS file in the same directory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">        <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>The first change that you want to make here is to comment out the auxiliaryCommentBefore line.  We no longer need that.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> jestPreset = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-preset-jest&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">process</span>(<span class=\"params\">src, filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (babel.<span class=\"property\">util</span>.<span class=\"title function_\">canCompile</span>(filename)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\"><span class=\"comment\">//        auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">        filename,</span><br><span class=\"line\">        <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">        <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;).<span class=\"property\">code</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that what gets returned is the resulting transform of the code.  We want to execute a search and replace on the transformed code.  So, instead of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">   <span class=\"attr\">auxiliaryCommentBefore</span>: <span class=\"string\">&#x27; istanbul ignore next &#x27;</span>,</span><br><span class=\"line\">   filename,</span><br><span class=\"line\">   <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">   <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> &#125;).<span class=\"property\">code</span>;</span><br></pre></td></tr></table></figure>\n\n<p>What we want want to do is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> babel.<span class=\"title function_\">transform</span>(src, &#123;</span><br><span class=\"line\">  <span class=\"comment\">//auxiliaryCommentBefore: &#x27; istanbul ignore next &#x27;,</span></span><br><span class=\"line\">  filename,</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [jestPreset],</span><br><span class=\"line\">  <span class=\"attr\">retainLines</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;).<span class=\"property\">code</span></span><br><span class=\"line\">    .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/function\\s_interop/g</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27; /* istanbul ignore next */ function _interop&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES2015-Code-Coverage-With-Jest-Summary\"><a href=\"#ES2015-Code-Coverage-With-Jest-Summary\" class=\"headerlink\" title=\"ES2015 Code Coverage With Jest - Summary\"></a>ES2015 Code Coverage With Jest - Summary</h2><ol>\n<li>Download and install babel-plugin-transform-runtime.</li>\n<li>Add “plugins”: [“transform-runtime”] to either .babelrc or the babel section of your package.json file</li>\n<li>Download and install babel-jest</li>\n<li>Modify babel-jest&#x2F;src&#x2F;index.js as indicated above.</li>\n</ol>\n",
            "tags": [
                "unit test",
                "react.js",
                "babel",
                "es2015",
                "es6",
                "jest"
            ]
        },
        {
            "id": "http://davembush.github.com/100-code-coverage-possible/",
            "url": "http://davembush.github.com/100-code-coverage-possible/",
            "title": "100% Code Coverage Possible?",
            "date_published": "2015-03-26T10:00:00.000Z",
            "content_html": "<p><img src=\"/uploads/2015/03/iStock_000005626017Medium1.jpg\" alt=\"100% code coverage\" title=\"100% Code Coverage\"></p>\n<p>In response to my post “<a href=\"/excuses-for-not-testing/\">Excuses For Not Testing</a>” <a href=\"//disqus.com/by/mayofcherries/\">Kris K</a> asked:</p>\n<blockquote>\n<p>There is also another side of <a href=\"//en.wikipedia.org/wiki/Unit_testing\" title=\"Unit testing\">Unit Tests</a>. Some companies are so fixated they aspire to have 100% Unit Tests coverage and they make programmers write Unit Tests for legacy code for no reason. Just for the sake of having Unit Tests. … [I] wonder if you had any similar experiences and what you think about this approach. I guess the 100% extreme is better than no tests at all, but it can make the developers very bored and feeling useless.</p>\n</blockquote>\n<p>And my initial reaction to this was, “WOW!  So much to respond to here.  I think this is worth a blog post.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Is-100-realistic\"><a href=\"#Is-100-realistic\" class=\"headerlink\" title=\"Is 100% realistic?\"></a>Is 100% realistic?</h2><p>So, first, the question of 100% coverage.  Is that a realistic goal?  And the answer of course is, “it depends.”</p>\n<h4 id=\"The-first-dependency-is-of-course-“what-do-you-mean-by-‘100-code-coverage’-”\"><a href=\"#The-first-dependency-is-of-course-“what-do-you-mean-by-‘100-code-coverage’-”\" class=\"headerlink\" title=\"The first dependency is, of course, “what do you mean by ‘100% code coverage’?”\"></a>The first dependency is, of course, “what do you mean by ‘100% <a href=\"//en.wikipedia.org/wiki/Code_coverage\" title=\"Code coverage\">code coverage</a>’?”</h4><p>Do you mean you need tests for not just all the code you wrote, but all the code your tools wrote for you and all of your third party libraries?  If 100% is inclusive, I’d lean toward 100% not only being not realistic, but also not necessary.</p>\n<p>Although, in a highly critical system, you’ll probably want to do some kind of vetting of the tools and libraries you are using.  But by the time you are using them, you should already know that they work, the only thing you won’t know for sure is if you are using them correctly.  In this case, you are looking at integration tests and not unit tests.</p>\n<h4 id=\"The-second-dependency-is-“Is-the-code-testable-”\"><a href=\"#The-second-dependency-is-“Is-the-code-testable-”\" class=\"headerlink\" title=\"The second dependency is, “Is the code testable?”\"></a>The second dependency is, “Is the code testable?”</h4><p>This is a little trickier to evaluate, so let me illustrate.  There is code that isn’t testable that should be.  I’m not talking about that code.  I’m talking about code that just can’t be tested.</p>\n<p>Let me illustrate.</p>\n<p>I’m working with <a href=\"//www.sencha.com/products/extjs/\" title=\"Ext JS\">EXTjs</a> which uses their proprietary implementation of MVC.  The part that is particularly interesting is that the View part of the architecture is basically a JSON object that defines what the view looks like.  While you can put in code that performs some action, the fact of the matter is that this code, when coded correctly, doesn’t really DO anything.  So, I would ask, how would you test this?  Sure I could put it in a test harness and run it through  some sort of parse routine or something, but unless you can say, “when I do this, this other thing over here should be true (or false)” you really can’t test the code.  A class that has no methods is basically a structure and structures can’t, by definition, be tested.</p>\n<p>On the other hand, I wrote some code once in WinForms that I was able to get under test and execute by calling the methods directly in the form.  I would have been better off moving that code into a presenter class so I could test the functionality separate from the presentation (view) and marked the view as untestable.</p>\n<h4 id=\"Finally-I-have-to-ask-“Is-refactoring-allowed-”\"><a href=\"#Finally-I-have-to-ask-“Is-refactoring-allowed-”\" class=\"headerlink\" title=\"Finally, I have to ask, “Is refactoring allowed?”\"></a>Finally, I have to ask, “Is refactoring allowed?”</h4><p>This is legacy code we are talking about.  And legacy code is notoriously hard to unit test.  As I mentioned a <a href=\"/why-johnny-cant-do-test-driven-development/\">couple of weeks ago</a>, in order to write unit test, the code has to be testable in the first place.  So, if the code isn’t in a condition that it can be unit tested, and you aren’t allowed to make the code testable, then either 100% code coverage isn’t possible or you aren’t unit testing.  It’s that simple.</p>\n<h2 id=\"Testing-is-boring\"><a href=\"#Testing-is-boring\" class=\"headerlink\" title=\"Testing is boring\"></a>Testing is boring</h2><p>Next, I’d like to address the issue of testing being boring.  I can understand this.  Most of my day is spent unit testing code I’ve previously written because when I wrote it, I wasn’t as good at unit testing as I am today.</p>\n<p>But, you know what I’ve found along the way?  That by making sure the code is covered 100% it has made me think about how I’ve structured my code and it has made my code more maintainable.</p>\n<p>But, mostly I find testing entertaining because I learn just a little more about testing.  I get to prove to myself and my peers that writing unit test really does find bugs we didn’t have any idea were there.  I get to perfect my craft just a little bit more.</p>\n<p>Here are some things to consider about the statement that “testing is boring.”  You may not like what I have to say, but keep in mind, I don’t know you and I don’t know Kris.  I just know what the research says about the state of being bored.</p>\n<h4 id=\"Dictionary-Definition\"><a href=\"#Dictionary-Definition\" class=\"headerlink\" title=\"Dictionary Definition\"></a><a href=\"//www.macmillandictionary.com/us/dictionary/american/bored\">Dictionary Definition</a></h4><blockquote>\n<p>feeling impatient or dissatisfied, because you are not interested in something or because you have nothing to do.</p>\n</blockquote>\n<h4 id=\"People-who-get-bored-are-anxious-people\"><a href=\"#People-who-get-bored-are-anxious-people\" class=\"headerlink\" title=\"People who get bored are anxious people\"></a><a href=\"//www.dragosroua.com/how-and-why-we-get-bored/\">People who get bored are anxious people</a></h4><blockquote>\n<p>People who get bored easily are usually anxious people. They’re also having quite a low level of self-esteem. If you’re constantly challenging yourself by trying to stop what you’re doing, because you don’t “like” it, you end up considering yourself an inappropriate person.</p>\n</blockquote>\n<h4 id=\"One-Of-My-Professors-Said\"><a href=\"#One-Of-My-Professors-Said\" class=\"headerlink\" title=\"One Of My Professors Said\"></a>One Of My Professors Said</h4><blockquote>\n<p>Boring people get bored</p>\n</blockquote>\n<p>  Personally, I find that I’m most bored when I have something else I’d rather be doing.  It isn’t so much that I don’t want to do what I’m currently doing as I’d rather be doing something that I can’t currently do.  I had this experience on Friday because on Thursday night I had found an article on SEO stuff that I desperately wanted to start putting into practice.</p>\n<p>What I’m suggesting here is that if you change your perspective from one of, “this is a ridiculous idea” to “this is a challenge to be met” or “this is an opportunity to learn”, or even (to address a specific comment that started this post) “I get to make my this application more bug free.”  you may find that the boredom leaves.</p>\n<p>Treat it as a game.  Maybe pair up with people on your team and see who can discover the most bugs during the day.  Create a leader board.  Since you have to do this anyhow, make it fun.</p>\n",
            "tags": [
                "code coverage",
                "tdd",
                "unit test"
            ]
        },
        {
            "id": "http://davembush.github.com/is-your-architecture-crippling-your-unit-testing/",
            "url": "http://davembush.github.com/is-your-architecture-crippling-your-unit-testing/",
            "title": "Is Your Architecture Crippling Your Unit Testing?",
            "date_published": "2014-09-04T10:00:00.000Z",
            "content_html": "<p>Last week I wrote a post that talked about Unit Testing and the need to make sure you are only testing one particular unit of code at a time.  The post was well received.  But I am surprised that no one commented on the glaring hole I left in the post.</p>\n<p>In that post, I said:</p>\n<blockquote>\n<p>So, one way you might go about separating your code from the data is by using dependency injection.  What I’m talking about here is simple injection.  No frameworks.</p>\n<p>So, let’s say you have a class you may have called user role.  Given a user id, it will return a role.  How could we code this so that it doesn’t matter where the code comes from?</p>\n<p>By declaring an interface to a user role object maybe and then passing an object of that type to the constructor.</p>\n<p>By doing this, you can use a fake object when you are testing and a real object when you are using the system in production, but your code won’t really care which one is being used.</p>\n<p>At some point we will need to retrieve data.  But the data is always just a side effect.  If you have a way of getting at the data, and you are confident it works, because that standard mechanism has been tested, then you don’t need to write test for the data access piece, you only need to write test for “given I have good data, this method will do this.”</p>\n</blockquote>\n<p>As I reflected on the post, I realized that this may make sense to you if you are already implementing this in your code.  But, if you are new to dependency injection and the concepts of loose coupling in general, this might be a foreign concept for you.</p>\n<p>At the very least, I realize now that it could be flushed out a bit more.</p>\n<p>So, here we go.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"N-Tiered-Architectures\"><a href=\"#N-Tiered-Architectures\" class=\"headerlink\" title=\"N-Tiered Architectures\"></a>N-Tiered Architectures</h2><p>There are two primary architectural patterns in the coding ecosystem that I live in.  The first, which has been around for a very long time is the N-Tiered, or 3 Tiered architecture.  The main point of this is to separate the Presentation from the Business rules from the retrieval of the data.</p>\n<p>Code written using this model normally has the view code dependent on the business logic code which is dependent on the data retrieval code.  And, even though we can use interfaces and dependency injection code to swap out each layer, most of the code written using this architecture that I’ve seen ends up being far too dependent on the code under it than it should be.</p>\n<h2 id=\"MVC-or-MVP\"><a href=\"#MVC-or-MVP\" class=\"headerlink\" title=\"MVC or MVP\"></a>MVC or MVP</h2><p>The second architectural pattern I see a lot of is the Model View Controller(MVC) pattern and it’s close cousin, Model View Presenter(MVP).  This pattern also attempts to separate the presentation, and the data and uses the controller as the way of moving the data between the two.  In this pattern, you will often see the controller or presenter layer used as the location of the business logic.  But strictly speaking that’s not the intended purpose.  When the controller or presenter is used for business logic you end up with a similar problem here that we end up with in a strict 3 tiered architecture.  The code ends up being far too dependent on either the architecture or the specific implementation of the architecture.</p>\n<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Now here’s the deal.  And I think this is where many people go astray with architectural patterns.  Just because you are using 3 Tier, MVC, or MVP (or whatever) doesn’t mean that all of your code HAS to fit into the mold of being one of the following:</p>\n<ul>\n<li>a View,</li>\n<li>a Controller, Presenter or Business layer, or</li>\n<li>a Data Access Layer or Model.</li>\n</ul>\n<p>Think about this.  How much of the code you’ve written, were you to really switch out the view, would have to be rewritten?  How much of your code could withstand the jarring effect of changing how you accessed the data.</p>\n<p>And I’m not talking a simple change.  From the data side we have multiple ways of accessing data in .NET.  We can use LINQ, we can use typed DataSets, we can use some ORM tool.  Say you decided to switch from whatever it is you are using now to one of the others.  Could you do that easily?</p>\n<p>And all of this points out the main issue I see with these frameworks.  The frameworks are only there as a way of moving data around.  With each of these it is expected that we will implement the actual presentation, business logic, and data access in an architectural agnostic way.</p>\n<p>Which finally brings us back to the comment I made last week.</p>\n<h2 id=\"The-Fix\"><a href=\"#The-Fix\" class=\"headerlink\" title=\"The Fix\"></a>The Fix</h2><p>All of your business logic shouldn’t really care where it got its data from.  It should not know where the data came from.  It should not request its own data.  It should be handed data in a form that can be used regardless of what the presentation layer looks like or what the data access layer looks like.</p>\n<p>In a three tiered model, the middle layer should work like the controller or the presenter.  It should retrieve the data from either the data layer or the presentation layer and then hand that data off to some other class that will do whatever processing needs to be done, get the return value from it and then pass it on to either the view or the data access layer.  In order to make the actual processing of the data from the view or the data access layer testable, the code we write must be architecturally, and framework agnostic.</p>\n<p>Similarly, in the presentation layer, if you have validations that you need to run on the screen, those validations need to be written in such a way that it won’t matter if or how the presentation layer changes.</p>\n<p>And here, once again, we point out, you won’t even know this is an issue if you aren’t trying to UNIT test your code.</p>\n",
            "tags": [
                "tdd",
                "unit test",
                "archietcture"
            ]
        },
        {
            "id": "http://davembush.github.com/unit-test-structure/",
            "url": "http://davembush.github.com/unit-test-structure/",
            "title": "Unit Test Structure",
            "date_published": "2014-03-11T08:38:00.000Z",
            "content_html": "<p><img src=\"/uploads/2014/03/UnitTestingScreen.png\" alt=\"UnitTestingScreen\" title=\"UnitTestingScreen\">One of the recurring reasons I hear from people for why they are not implementing unit test in their code is because it takes too long.  On one level I get that.  But, my experience tells me that the real problem is more likely that they just don’t understand enough about how to implement unit testing to be able to do it well.</p>\n<p>This is like knowing you are supposed to “eat right” and “exercise” but not having anyone tell you how to do either in such a way that you can maintain the habit.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Start-Small\"><a href=\"#Start-Small\" class=\"headerlink\" title=\"Start Small\"></a>Start Small</h2><p>So the first rule of unit testing structure, just like the first rule of diet and exercise, is to start small.</p>\n<p>When I first started to take a look at unit testing, the general advice was to create a unit test class for each class.  Then you were suppose to create a test method for each class.  I still see a lot of code as I travel that looks like this as I watch people try to implement the practice.</p>\n<p>But how frustrating.  And how is that suppose to work when I’m modifying existing code?</p>\n<h2 id=\"Here-is-how-I-write-unit-test…\"><a href=\"#Here-is-how-I-write-unit-test…\" class=\"headerlink\" title=\"Here is how I write unit test…\"></a>Here is how I write unit test…</h2><p>I’ve had exposure to UML and the most useful part of UML that I tend to use over and over again is the Use Case document.  I don’t care so much about the diagram.  But the document is really helpful.</p>\n<p>In the document we have three parts.</p>\n<ul>\n<li>Pre conditions</li>\n<li>Actions</li>\n<li>Post conditions</li>\n</ul>\n<p>If you start thinking about your test under this framework, I think you’ll find that writing test become much easier.</p>\n<p>You may be thinking, “But Dave, that’s application level testing, not unit testing.”  And my answer would be, “Yes, it is, but your class is a mini application so it can apply to it as well.</p>\n<h2 id=\"So-let’s-take-the-classic-Person-class-as-an-example\"><a href=\"#So-let’s-take-the-classic-Person-class-as-an-example\" class=\"headerlink\" title=\"So, let’s take the classic Person class as an example:\"></a>So, let’s take the classic Person class as an example:</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LastName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> FullName</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FirstName + <span class=\"string\">&quot; &quot;</span></span><br><span class=\"line\">                + LastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Our preconditions might be:</p>\n<ul>\n<li>The object has been created</li>\n<li>The FirstName has been set to a known value</li>\n</ul>\n<p>One of our actions is going to be:</p>\n<ul>\n<li>The LastName property is set to another known value</li>\n</ul>\n<p>The post condition will be:</p>\n<ul>\n<li>The FullName should end up being whatever we had in the first name plus a space plus whatever we added to the last name</li>\n</ul>\n<p>So now that we have a use case for our class, how do we model this in our unit test?</p>\n<h2 id=\"Converting-the-Use-Case-to-a-Test-Case\"><a href=\"#Converting-the-Use-Case-to-a-Test-Case\" class=\"headerlink\" title=\"Converting the Use Case to a Test Case\"></a>Converting the Use Case to a Test Case</h2><p>Using NUnit since it is still the most popular, our resulting code might look something like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">GivenAnObjectOfTypePersonWithFirstNameSetToBob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">WhenISetTheLastNameToJones</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Person _person;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">SetUp</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The precondition</span></span><br><span class=\"line\">            _person = <span class=\"keyword\">new</span> Person</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                FirstName = <span class=\"string\">&quot;Bob&quot;</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// The action</span></span><br><span class=\"line\">            _person.LastName = <span class=\"string\">&quot;Jones&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">Test</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TheFullNameShouldBeBobJones</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Assert.That(_person.FullName,</span><br><span class=\"line\">                Is.EqualTo(<span class=\"string\">&quot;Bob Jones&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Notice how I created a namespace for the given.  This makes the code readable in our test runner.  I put the precondition and the action in the SetUp method because I want to start fresh with each test.  In this case, I only have one test, but in most scenarios, you will have multiple test.  You should plan for multiple test.</p>\n<p>In this particular case, I only have one post condition.  But if I had multiple post conditions, each one would be it’s own Test method with it’s own Assert.</p>\n<p>One of the biggest issues I see is people putting multiple asserts inside of one Test method.    You don’t want to do this.  You want one and only one Assert per Test method.  Otherwise, you never know by looking at your test what exactly failed or if the code were to run, that any of the other Asserts fail.</p>\n<p>Because we named our namespace, class, and test methods what we are testing, when a test fails, our test runner will display the names for us.</p>\n<p>If you think it makes the code more readable, you can use underscores to separate the names.  The goal is to make the code read something like your use case.</p>\n<p>One final note before we end.  Your namespace should match up to the directory the class file is in and the class name should match the file name.  This will make the code easy to find.  This is something I shouldn’t have to mention, but once again, I’ve seen people ignore the simplest of organizational strategies.</p>\n<p>This is just one of several patterns I use for testing my code.  What I like about this particular pattern is that it forces my test code to follow the Single responsibility principle.  In the case above, this test class is only responsible for testing what happens when I set the LastName property when I’ve already set the FirstName property.  I can write another class to test what happens when the FirstName property has not yet been set and yet another for what happens when I set the LastName property first and then set the FirstName property.</p>\n",
            "tags": [
                "tdd",
                "unit test",
                "test driven development"
            ]
        }
    ]
}