{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"ajax\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/jquery-each-and-async-gets/",
            "url": "http://davembush.github.com/jquery-each-and-async-gets/",
            "title": "jQuery, Each() and Async Gets",
            "date_published": "2009-12-02T11:50:54.000Z",
            "content_html": "<p><img src=\"/uploads/2009/12/H04K0067.jpg\" alt=\"H04K0067\" title=\"H04K0067\"></p>\n<p>One of the things to keep in mind when using jQuery is that nothing is a blocking call.  Sure, there is a certain sequence to when things operate.  But, to be safe, you should always assume that step two will happen during step one.</p>\n<p>Nowhere is this more evident than when retrieving content from a URL and inserting that content in your page.</p>\n<p>The temptation is to write code that looks something like this:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $.<span class=\"title function_\">each</span>(json, <span class=\"keyword\">function</span>(<span class=\"params\">index, entry</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    jQuery.<span class=\"title function_\">get</span>(entry[<span class=\"string\">&#x27;url&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// insert the HTML here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The problem with this is that jQuery.get is an asynchronous call.  This means that once the get has fired, the each loop will continue.  This can cause all kinds of trouble for you, including having a complete iteration skipped, or if you are doing some kind of concatenation prior to inserting the HTML, having HTML for one iteration showing up in the middle of another.</p>\n<p>Not exactly what you had in mind, eh?</p>\n<p>But there is a fix.  Use the <em>ajax</em> call instead and specify <em>async:false</em> to force the call to complete before allowing another call.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">each</span>(json, <span class=\"keyword\">function</span>(<span class=\"params\">index, entry</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    jQuery.<span class=\"title function_\">ajax</span>(&#123; <span class=\"attr\">url</span>:  directory + <span class=\"string\">&#x27;/&#x27;</span> + entry[<span class=\"string\">&#x27;url&#x27;</span>] , <span class=\"attr\">success</span>: <span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// insert the HTML here.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"attr\">async</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Note too that using <em>ajax</em> without the <em>async</em>: false is the same as just using get.</p>\n",
            "tags": [
                "ajax",
                "get",
                "jQuery",
                "async",
                "each"
            ]
        },
        {
            "id": "http://davembush.github.com/tab-control-activetabindex-lost-on-postback/",
            "url": "http://davembush.github.com/tab-control-activetabindex-lost-on-postback/",
            "title": "Tab Control ActiveTabIndex Lost on Postback",
            "date_published": "2009-02-25T10:26:36.000Z",
            "content_html": "<p><img src=\"/uploads/2009/02/tran-land-01.jpg\" alt=\"tran-land-01\"> I just got off the phone with a client who is using the MS-AJAX TabControl in one of his applications and any time he causes a postback, the tab resets to the first tab.</p>\n<p>If you’ve never seen the problem, you’re lucky.  There are a couple of ways around the problem.  The first and easiest if it works in your situation is to put the tab in an update panel so that you never actually do a full postback.</p>\n<span id=\"more\"></span>\n\n<p>However, there are times when this won’t work.  In this particular case it is because one of the tabs holds the file upload control, which can’t be used inside an update panel.  (Another problem we had to find a way around last week.) What do you do then? Turns out this is a bug in the way that the tab works.  This problem turns up in various situations.  If you are fighting the bug, the solution is actually pretty simple.</p>\n<p>First, put the following  javascript in your aspx or ascx file:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">TabChanged</span>(<span class=\"params\">sender, args</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    sender.<span class=\"title function_\">get_clientStateField</span>().<span class=\"property\">value</span> =</span></span><br><span class=\"line\"><span class=\"language-javascript\">      sender.<span class=\"title function_\">saveClientState</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And then wire up the TabChanged function to your tab control:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ajaxControlToolkit:TabContainer</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;TabContainer1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span> <span class=\"attr\">OnClientActiveTabChanged</span>=<span class=\"string\">&quot;TabChanged&quot;</span> &gt;</span></span><br><span class=\"line\">&lt;/ajaxControlToolkit:TabContainer\\&gt; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>This will fix the problem.</p>\n",
            "tags": [
                "ajax",
                "activetabindex",
                "postback",
                "tab control",
                "tabcontrol"
            ]
        },
        {
            "id": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "url": "http://davembush.github.com/asp-net-ajax-using-json-here-s-how/",
            "title": "ASP.NET AJAX using JSON - Here's how.",
            "date_published": "2008-08-04T11:05:58.000Z",
            "content_html": "<p><img src=\"/uploads/2008/08/image.png\" alt=\"image\"> Last week I wrote a post about <a href=\"/2008/07/30/using-json-in-aspnet/\">how simple JSON is</a>.</p>\n<p>In it I explained the main differences between using JSON and using the update panel. I really started out thinking I’d get to how to write JSON code, but I ran out of space. Well, today, we get to the HOW.</p>\n<span id=\"more\"></span>\n\n<p>All JSON really is, is the ability to have JavaScript code call a WebService for our data, and write it into the HTML on the client side.</p>\n<p>If you know anything about how to write a WebService, this should be rather trivial because your web service is going to look just like any other web service with the exception of an added attribute.  To make a WebService accessible to JSON, add the following Attribute to your WebService class:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ScriptService</span>]</span><br></pre></td></tr></table></figure>\n\n<p>You will probably also need to add</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Script.Services;</span><br></pre></td></tr></table></figure>\n\n<p>to the top of your page.</p>\n<p>Now, any WebMethod in your WebService can be called by your JavaScript on the client side. As with any AJAX code in ASP.NET, you’ll need to add a ScriptManager to your page.</p>\n<p>But, in addition, you’ll also need to add a Services section in your ScriptManager to tell the ASP.NET page to pull in the javascript that the WebService code will now produce for you.</p>\n<p>You should have this code at the top of the FORM section of your HTML.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">asp:ScriptManager</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;ScriptManager1&quot;</span> <span class=\"attr\">runat</span>=<span class=\"string\">&quot;server&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">asp:ServiceReference</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;~/WebService.asmx&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Services</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">asp:ScriptManager</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Where, <code>~/WebService.asmx</code> refers to the web service you want to be able to access. Now in the javascript event handler where you want to be able to call the WebService, you just call the WebService similar to how you would call any other function. In fact, if you write this code in the ASPX page, you will even get intellisense. So, assuming we have a class named <code>WebService</code> with a function called “HelloWorld” that returns a string, our calling code will look like:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebService.HelloWorld(Success,Fail,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Note that our call takes three parameters, even though our function in the WebService does not take any parameters.</p>\n<p>The first parameter is a pointer to a JavaScript function to call if the call to the WebService succeeds.</p>\n<p>The second is a pointer to the JavaScript function to call if the WebService call fails, and the third parameter is a JavaScript context object to pass to the Success function.</p>\n<p>Since I don’t have any data I need to pass along, I just pass in NULL in the code above. If the WebService method takes parameters, the parameters are listed before the success, fail, and context parameters. If the WebService call fails, the JavaScript function that we specified for fail will be called. It needs to accept one parameter which will have the error message in it. You can use this to display an error message in an alert box. When the WebService returns successfully, the Success function will be called. This function takes two parameters. The first is the return value. The second is the context object we passed when we originally called the WebMethod. You can then use standard JavaScript to find an HTML element on the page to put the new content into:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Success</span>(<span class=\"params\">result,context</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;fillMeAtLoadTime&quot;</span>).<span class=\"property\">innerHTML</span> = result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And that’s really all there is to JSON. The rest is really just a matter of imagination and JavaScript.</p>\n",
            "tags": [
                "asp.net",
                "ajax",
                "json"
            ]
        }
    ]
}