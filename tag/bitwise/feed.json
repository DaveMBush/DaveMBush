{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"bitwise\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/vs-and-vs-what-s-the-difference/",
            "url": "http://davembush.github.com/vs-and-vs-what-s-the-difference/",
            "title": "&& vs & and | vs ||... What's the difference?",
            "date_published": "2012-08-21T08:12:38.000Z",
            "content_html": "<p><img src=\"/uploads/2009/03/color-01.jpg\" alt=\"color-01\"> It seems like such a trivial thing to be talking about but not knowing the difference between &amp;&amp; vs &amp; or || vs | can make a huge difference between working code and code that only seems to work. Let me illustrate:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">bool</span> c = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(b &amp; c) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something if(b &amp;&amp; c)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// do something</span></span><br></pre></td></tr></table></figure>\n\n<p>In the code above, both b &amp; c and b &amp;&amp; c evaluate to false, so  we are safe.  No problems.  But this leads us to believe that the following code is also safe:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(s != <span class=\"literal\">null</span> &amp; s.Length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something if(s != null &amp;&amp; s.Length &gt; 0)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// do something</span></span><br></pre></td></tr></table></figure>\n\n<p>and this is what would get you in trouble. The single ampersand and single pipe are knows as “bitwise operators.”  What this means in practical terms is that they will take whatever they find on BOTH sides of the operator and AND (&amp;) or OR(|) them together. So in the case of:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(s != <span class=\"literal\">null</span> &amp; s.Length &gt; <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>s.Length &gt; 0 will still get evaluated even if s is null.  Not exactly what we had in mind. There is another side effect of bitwise operators that gets used very infrequently.  Because they are bitwise, I can use them on integers as well as boolean values.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> i= <span class=\"number\">5</span> &amp; <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n\n<p>is a perfectly legal construct in CSharp.  It will AND all the bits that make up 5  (101) and all the bits that make up 4 (100) and store the result in i (4 or 100). On the other hand, &amp;&amp; and || are strictly used for boolean expressions and will evaluate as little of the expression as they can get away with. This is why we can write:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span> &amp;&amp; s.Length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If s is null, we already know that the expression will fail, so there is no need to evaluate the string’s length. And now for one of my favorite binary statements.</p>\n<p>There are 10 types of people in the world.  Those who understand binary and those who don’t.</p>\n",
            "tags": [
                "boolean",
                "binary",
                "bitwise",
                "operators"
            ]
        }
    ]
}