{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dave's Notebook • All posts by \"winforms\" tag",
    "description": null,
    "home_page_url": "http://davembush.github.com",
    "items": [
        {
            "id": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "url": "http://davembush.github.com/vb-net-processing-before-winform-display/",
            "title": "VB.NET Processing Before WinForm Display",
            "date_published": "2009-08-06T10:52:55.000Z",
            "content_html": "<p><img src=\"/uploads/2009/08/arct075.jpg\" alt=\"arct-075\" title=\"arct-075\"></p>\n<p>I woke up this morning to an interesting question.</p>\n<p><em>“Using VB.net 2008, I want my project to be a Windows Forms Application, but upon startup, I want to check a few files to see if they exist and if they don’t I do not want the startup form to load. I just want the program to quit. If you have to start this type of application with a form, how do you keep the form from displaying?”</em></p>\n<p>If you program in CSharp, you probably already know the answer to this question, or at least you should.  If you don’t, you will when we finish here.  So since I consider this a VB.NET-specific question, I’m going to answer it using VB.NET syntax.</p>\n<p>When CSharp runs a Windows Forms application, it writes out the following code in Program.cs (in VS 2008, earlier versions put this in the main form).</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Application.EnableVisualStyles();</span><br><span class=\"line\">    Application.</span><br><span class=\"line\">        SetCompatibleTextRenderingDefault(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    Application.Run(<span class=\"keyword\">new</span> Form1());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In VB.NET there is no code that looks like this, because VB.NET writes the code for us behind the scenes.</p>\n<p>So to do what you want to do, we need to take over control of the Windows Form application.</p>\n<p>Since I’m assuming that you already have the Windows Form application created, the next thing you’ll want to do is to create a module.  You can name it what ever you want, but I’m going to name mine “Main” for purposes of this article.</p>\n<p>In your module, create a function called “main” that has the code CSharp would have given us.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    Application.EnableVisualStyles()</span><br><span class=\"line\">    Application.SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">    Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>Now go to your project properties and go to the Application tab.</p>\n<p><img src=\"/uploads/2009/08/image.png\" alt=\"image\" title=\"image\"></p>\n<p>Find the check box that says, “Enable Application Framework” and un-check it.</p>\n<p><img src=\"/uploads/2009/08/image1.png\" alt=\"image\" title=\"image\"></p>\n<p>Then change the startup object to “Sub Main”</p>\n<p>At this point, your application should run as it always has.  To put the checks in that you requested, write that code prior to all the Application… statements that we put in sub main and put an if&#x2F;then&#x2F;end if statement around the Application… statements.</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ChecksWereOk <span class=\"keyword\">As</span> <span class=\"type\">Boolean</span> = <span class=\"literal\">False</span> <span class=\"comment\">&#x27; your checks here If ChecksWereOk Then Application.EnableVisualStyles()</span></span><br><span class=\"line\">        Application. _</span><br><span class=\"line\">            SetCompatibleTextRenderingDefault(<span class=\"literal\">False</span>)</span><br><span class=\"line\">        Application.Run(<span class=\"built_in\">New</span> Form1())</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n\n<p>And that should do the trick for you.</p>\n",
            "tags": [
                "vb.net",
                "conditional startup",
                "windows forms",
                "winforms"
            ]
        },
        {
            "id": "http://davembush.github.com/windows-forms-passing-parameters-at-runtime/",
            "url": "http://davembush.github.com/windows-forms-passing-parameters-at-runtime/",
            "title": "Windows Forms - Passing Parameters at Runtime",
            "date_published": "2009-03-09T11:37:11.000Z",
            "content_html": "<p><img src=\"/uploads/2009/03/misc-vol4-028.jpg\" alt=\"misc_vol4_028\"> I received the following question over the weekend:</p>\n<blockquote>\n<p>I’ve made a C# form application and I need to send a report name at runtime. How do I add an incoming parameter to the command line? Such as “crFORM.exe Shipform.rpt”</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>I have to assume the question relates more to how to retrieve the parameter in the code than how to pass it because the example shows how we’d pass it. All WinForms CSharp programs have a static method called Main() that looks something like this:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Application.EnableVisualStyles();</span><br><span class=\"line\">    Application.SetCompatibleTextRenderingDefault(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    Application.Run(<span class=\"keyword\">new</span> Form1());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you are using Visual Studio 2008 to build your applications, this code can be found in Program.cs. To accept parameters you will need to modify this method so that it accepts a string array as a parameter.  Most people name this parameter “args.”</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\">String[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If a parameter was passed, args will have a length greater than zero.  To retrieve the command line arguments all you need to do is retrieve the parameters out of args.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">STAThread</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\">String[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> arg1 = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// do something appropriate with</span></span><br><span class=\"line\">        <span class=\"comment\">// arg1 here. &#125;</span></span><br><span class=\"line\">    Application.EnableVisualStyles();</span><br><span class=\"line\">    Application.SetCompatibleTextRenderingDefault(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    Application.Run(<span class=\"keyword\">new</span> Form1());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "c#",
                "winforms",
                "arguements",
                "command line",
                "main"
            ]
        }
    ]
}